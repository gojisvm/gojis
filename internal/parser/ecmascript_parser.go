// Code generated from ECMAScript.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser // ECMAScript

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 140, 8412,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187,
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192,
	9, 192, 4, 193, 9, 193, 4, 194, 9, 194, 4, 195, 9, 195, 4, 196, 9, 196,
	4, 197, 9, 197, 4, 198, 9, 198, 4, 199, 9, 199, 4, 200, 9, 200, 4, 201,
	9, 201, 4, 202, 9, 202, 4, 203, 9, 203, 4, 204, 9, 204, 4, 205, 9, 205,
	4, 206, 9, 206, 4, 207, 9, 207, 4, 208, 9, 208, 4, 209, 9, 209, 4, 210,
	9, 210, 4, 211, 9, 211, 4, 212, 9, 212, 4, 213, 9, 213, 4, 214, 9, 214,
	4, 215, 9, 215, 4, 216, 9, 216, 4, 217, 9, 217, 4, 218, 9, 218, 4, 219,
	9, 219, 4, 220, 9, 220, 4, 221, 9, 221, 4, 222, 9, 222, 4, 223, 9, 223,
	4, 224, 9, 224, 4, 225, 9, 225, 4, 226, 9, 226, 4, 227, 9, 227, 4, 228,
	9, 228, 4, 229, 9, 229, 4, 230, 9, 230, 4, 231, 9, 231, 4, 232, 9, 232,
	4, 233, 9, 233, 4, 234, 9, 234, 4, 235, 9, 235, 4, 236, 9, 236, 4, 237,
	9, 237, 4, 238, 9, 238, 4, 239, 9, 239, 4, 240, 9, 240, 4, 241, 9, 241,
	4, 242, 9, 242, 4, 243, 9, 243, 4, 244, 9, 244, 4, 245, 9, 245, 4, 246,
	9, 246, 4, 247, 9, 247, 4, 248, 9, 248, 4, 249, 9, 249, 4, 250, 9, 250,
	4, 251, 9, 251, 4, 252, 9, 252, 4, 253, 9, 253, 4, 254, 9, 254, 4, 255,
	9, 255, 4, 256, 9, 256, 4, 257, 9, 257, 4, 258, 9, 258, 4, 259, 9, 259,
	4, 260, 9, 260, 4, 261, 9, 261, 4, 262, 9, 262, 4, 263, 9, 263, 4, 264,
	9, 264, 4, 265, 9, 265, 4, 266, 9, 266, 4, 267, 9, 267, 4, 268, 9, 268,
	4, 269, 9, 269, 4, 270, 9, 270, 4, 271, 9, 271, 4, 272, 9, 272, 4, 273,
	9, 273, 4, 274, 9, 274, 4, 275, 9, 275, 4, 276, 9, 276, 4, 277, 9, 277,
	4, 278, 9, 278, 4, 279, 9, 279, 4, 280, 9, 280, 4, 281, 9, 281, 4, 282,
	9, 282, 4, 283, 9, 283, 4, 284, 9, 284, 4, 285, 9, 285, 4, 286, 9, 286,
	4, 287, 9, 287, 4, 288, 9, 288, 4, 289, 9, 289, 4, 290, 9, 290, 4, 291,
	9, 291, 4, 292, 9, 292, 4, 293, 9, 293, 4, 294, 9, 294, 4, 295, 9, 295,
	4, 296, 9, 296, 4, 297, 9, 297, 4, 298, 9, 298, 4, 299, 9, 299, 4, 300,
	9, 300, 4, 301, 9, 301, 4, 302, 9, 302, 4, 303, 9, 303, 4, 304, 9, 304,
	4, 305, 9, 305, 4, 306, 9, 306, 4, 307, 9, 307, 4, 308, 9, 308, 4, 309,
	9, 309, 4, 310, 9, 310, 4, 311, 9, 311, 4, 312, 9, 312, 4, 313, 9, 313,
	4, 314, 9, 314, 4, 315, 9, 315, 4, 316, 9, 316, 4, 317, 9, 317, 4, 318,
	9, 318, 4, 319, 9, 319, 4, 320, 9, 320, 4, 321, 9, 321, 4, 322, 9, 322,
	4, 323, 9, 323, 4, 324, 9, 324, 4, 325, 9, 325, 4, 326, 9, 326, 4, 327,
	9, 327, 4, 328, 9, 328, 4, 329, 9, 329, 4, 330, 9, 330, 4, 331, 9, 331,
	4, 332, 9, 332, 4, 333, 9, 333, 4, 334, 9, 334, 4, 335, 9, 335, 4, 336,
	9, 336, 4, 337, 9, 337, 4, 338, 9, 338, 4, 339, 9, 339, 4, 340, 9, 340,
	4, 341, 9, 341, 4, 342, 9, 342, 4, 343, 9, 343, 4, 344, 9, 344, 4, 345,
	9, 345, 4, 346, 9, 346, 4, 347, 9, 347, 4, 348, 9, 348, 4, 349, 9, 349,
	4, 350, 9, 350, 4, 351, 9, 351, 4, 352, 9, 352, 4, 353, 9, 353, 4, 354,
	9, 354, 4, 355, 9, 355, 4, 356, 9, 356, 4, 357, 9, 357, 4, 358, 9, 358,
	4, 359, 9, 359, 4, 360, 9, 360, 4, 361, 9, 361, 4, 362, 9, 362, 4, 363,
	9, 363, 4, 364, 9, 364, 4, 365, 9, 365, 4, 366, 9, 366, 4, 367, 9, 367,
	4, 368, 9, 368, 4, 369, 9, 369, 4, 370, 9, 370, 4, 371, 9, 371, 4, 372,
	9, 372, 4, 373, 9, 373, 4, 374, 9, 374, 4, 375, 9, 375, 4, 376, 9, 376,
	4, 377, 9, 377, 4, 378, 9, 378, 4, 379, 9, 379, 4, 380, 9, 380, 4, 381,
	9, 381, 4, 382, 9, 382, 4, 383, 9, 383, 4, 384, 9, 384, 4, 385, 9, 385,
	4, 386, 9, 386, 4, 387, 9, 387, 4, 388, 9, 388, 4, 389, 9, 389, 4, 390,
	9, 390, 4, 391, 9, 391, 4, 392, 9, 392, 4, 393, 9, 393, 4, 394, 9, 394,
	4, 395, 9, 395, 4, 396, 9, 396, 4, 397, 9, 397, 4, 398, 9, 398, 4, 399,
	9, 399, 4, 400, 9, 400, 4, 401, 9, 401, 4, 402, 9, 402, 4, 403, 9, 403,
	4, 404, 9, 404, 4, 405, 9, 405, 4, 406, 9, 406, 4, 407, 9, 407, 4, 408,
	9, 408, 4, 409, 9, 409, 4, 410, 9, 410, 4, 411, 9, 411, 4, 412, 9, 412,
	4, 413, 9, 413, 4, 414, 9, 414, 4, 415, 9, 415, 4, 416, 9, 416, 4, 417,
	9, 417, 4, 418, 9, 418, 4, 419, 9, 419, 4, 420, 9, 420, 4, 421, 9, 421,
	4, 422, 9, 422, 4, 423, 9, 423, 4, 424, 9, 424, 4, 425, 9, 425, 4, 426,
	9, 426, 4, 427, 9, 427, 4, 428, 9, 428, 4, 429, 9, 429, 4, 430, 9, 430,
	4, 431, 9, 431, 4, 432, 9, 432, 4, 433, 9, 433, 4, 434, 9, 434, 4, 435,
	9, 435, 4, 436, 9, 436, 4, 437, 9, 437, 4, 438, 9, 438, 4, 439, 9, 439,
	4, 440, 9, 440, 4, 441, 9, 441, 4, 442, 9, 442, 4, 443, 9, 443, 4, 444,
	9, 444, 4, 445, 9, 445, 4, 446, 9, 446, 4, 447, 9, 447, 4, 448, 9, 448,
	4, 449, 9, 449, 4, 450, 9, 450, 4, 451, 9, 451, 4, 452, 9, 452, 4, 453,
	9, 453, 4, 454, 9, 454, 4, 455, 9, 455, 4, 456, 9, 456, 4, 457, 9, 457,
	4, 458, 9, 458, 4, 459, 9, 459, 4, 460, 9, 460, 4, 461, 9, 461, 4, 462,
	9, 462, 4, 463, 9, 463, 4, 464, 9, 464, 4, 465, 9, 465, 4, 466, 9, 466,
	4, 467, 9, 467, 4, 468, 9, 468, 4, 469, 9, 469, 4, 470, 9, 470, 4, 471,
	9, 471, 4, 472, 9, 472, 4, 473, 9, 473, 4, 474, 9, 474, 4, 475, 9, 475,
	4, 476, 9, 476, 4, 477, 9, 477, 4, 478, 9, 478, 4, 479, 9, 479, 4, 480,
	9, 480, 4, 481, 9, 481, 4, 482, 9, 482, 4, 483, 9, 483, 4, 484, 9, 484,
	4, 485, 9, 485, 4, 486, 9, 486, 4, 487, 9, 487, 4, 488, 9, 488, 4, 489,
	9, 489, 4, 490, 9, 490, 4, 491, 9, 491, 4, 492, 9, 492, 4, 493, 9, 493,
	4, 494, 9, 494, 4, 495, 9, 495, 4, 496, 9, 496, 4, 497, 9, 497, 4, 498,
	9, 498, 4, 499, 9, 499, 4, 500, 9, 500, 4, 501, 9, 501, 4, 502, 9, 502,
	4, 503, 9, 503, 4, 504, 9, 504, 4, 505, 9, 505, 4, 506, 9, 506, 4, 507,
	9, 507, 4, 508, 9, 508, 4, 509, 9, 509, 4, 510, 9, 510, 4, 511, 9, 511,
	4, 512, 9, 512, 4, 513, 9, 513, 4, 514, 9, 514, 4, 515, 9, 515, 4, 516,
	9, 516, 4, 517, 9, 517, 4, 518, 9, 518, 4, 519, 9, 519, 4, 520, 9, 520,
	4, 521, 9, 521, 4, 522, 9, 522, 4, 523, 9, 523, 4, 524, 9, 524, 4, 525,
	9, 525, 4, 526, 9, 526, 4, 527, 9, 527, 4, 528, 9, 528, 4, 529, 9, 529,
	4, 530, 9, 530, 4, 531, 9, 531, 4, 532, 9, 532, 4, 533, 9, 533, 4, 534,
	9, 534, 4, 535, 9, 535, 4, 536, 9, 536, 4, 537, 9, 537, 4, 538, 9, 538,
	4, 539, 9, 539, 4, 540, 9, 540, 4, 541, 9, 541, 4, 542, 9, 542, 4, 543,
	9, 543, 4, 544, 9, 544, 4, 545, 9, 545, 4, 546, 9, 546, 4, 547, 9, 547,
	4, 548, 9, 548, 4, 549, 9, 549, 4, 550, 9, 550, 4, 551, 9, 551, 4, 552,
	9, 552, 4, 553, 9, 553, 4, 554, 9, 554, 4, 555, 9, 555, 4, 556, 9, 556,
	4, 557, 9, 557, 4, 558, 9, 558, 4, 559, 9, 559, 4, 560, 9, 560, 4, 561,
	9, 561, 4, 562, 9, 562, 4, 563, 9, 563, 4, 564, 9, 564, 4, 565, 9, 565,
	4, 566, 9, 566, 4, 567, 9, 567, 4, 568, 9, 568, 4, 569, 9, 569, 4, 570,
	9, 570, 4, 571, 9, 571, 4, 572, 9, 572, 4, 573, 9, 573, 4, 574, 9, 574,
	4, 575, 9, 575, 4, 576, 9, 576, 4, 577, 9, 577, 4, 578, 9, 578, 4, 579,
	9, 579, 4, 580, 9, 580, 4, 581, 9, 581, 4, 582, 9, 582, 4, 583, 9, 583,
	4, 584, 9, 584, 4, 585, 9, 585, 4, 586, 9, 586, 4, 587, 9, 587, 4, 588,
	9, 588, 4, 589, 9, 589, 4, 590, 9, 590, 4, 591, 9, 591, 4, 592, 9, 592,
	4, 593, 9, 593, 4, 594, 9, 594, 4, 595, 9, 595, 4, 596, 9, 596, 4, 597,
	9, 597, 4, 598, 9, 598, 4, 599, 9, 599, 4, 600, 9, 600, 4, 601, 9, 601,
	4, 602, 9, 602, 4, 603, 9, 603, 4, 604, 9, 604, 4, 605, 9, 605, 4, 606,
	9, 606, 4, 607, 9, 607, 4, 608, 9, 608, 4, 609, 9, 609, 4, 610, 9, 610,
	4, 611, 9, 611, 4, 612, 9, 612, 4, 613, 9, 613, 4, 614, 9, 614, 4, 615,
	9, 615, 4, 616, 9, 616, 4, 617, 9, 617, 4, 618, 9, 618, 4, 619, 9, 619,
	4, 620, 9, 620, 4, 621, 9, 621, 4, 622, 9, 622, 4, 623, 9, 623, 4, 624,
	9, 624, 4, 625, 9, 625, 4, 626, 9, 626, 4, 627, 9, 627, 4, 628, 9, 628,
	4, 629, 9, 629, 4, 630, 9, 630, 4, 631, 9, 631, 4, 632, 9, 632, 4, 633,
	9, 633, 4, 634, 9, 634, 4, 635, 9, 635, 4, 636, 9, 636, 4, 637, 9, 637,
	4, 638, 9, 638, 4, 639, 9, 639, 4, 640, 9, 640, 4, 641, 9, 641, 4, 642,
	9, 642, 4, 643, 9, 643, 4, 644, 9, 644, 4, 645, 9, 645, 4, 646, 9, 646,
	4, 647, 9, 647, 4, 648, 9, 648, 4, 649, 9, 649, 4, 650, 9, 650, 4, 651,
	9, 651, 4, 652, 9, 652, 4, 653, 9, 653, 4, 654, 9, 654, 4, 655, 9, 655,
	4, 656, 9, 656, 4, 657, 9, 657, 4, 658, 9, 658, 4, 659, 9, 659, 4, 660,
	9, 660, 4, 661, 9, 661, 4, 662, 9, 662, 4, 663, 9, 663, 4, 664, 9, 664,
	4, 665, 9, 665, 4, 666, 9, 666, 4, 667, 9, 667, 4, 668, 9, 668, 4, 669,
	9, 669, 4, 670, 9, 670, 4, 671, 9, 671, 4, 672, 9, 672, 4, 673, 9, 673,
	4, 674, 9, 674, 4, 675, 9, 675, 4, 676, 9, 676, 4, 677, 9, 677, 4, 678,
	9, 678, 4, 679, 9, 679, 4, 680, 9, 680, 4, 681, 9, 681, 4, 682, 9, 682,
	4, 683, 9, 683, 4, 684, 9, 684, 4, 685, 9, 685, 4, 686, 9, 686, 4, 687,
	9, 687, 4, 688, 9, 688, 4, 689, 9, 689, 4, 690, 9, 690, 3, 2, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 1389, 10, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 5, 4, 1397, 10, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 7,
	6, 1405, 10, 6, 12, 6, 14, 6, 1408, 11, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9,
	3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 12, 3, 12, 3, 13, 3, 13, 3, 14, 3,
	14, 3, 15, 3, 15, 3, 16, 3, 16, 3, 17, 3, 17, 3, 18, 3, 18, 3, 19, 3, 19,
	3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3,
	19, 5, 19, 1447, 10, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 1462, 10, 20, 3, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 5, 21, 1477, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3,
	22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 1492, 10, 22, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 5, 23, 1528, 10, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 1564, 10, 24, 3,
	25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25,
	3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3,
	25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25,
	3, 25, 3, 25, 5, 25, 1600, 10, 25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 1636, 10, 26,
	3, 27, 3, 27, 3, 28, 3, 28, 5, 28, 1642, 10, 28, 3, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 1653, 10, 28, 3, 28, 3, 28,
	5, 28, 1657, 10, 28, 3, 29, 3, 29, 5, 29, 1661, 10, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1672, 10, 29, 3, 29,
	3, 29, 5, 29, 1676, 10, 29, 3, 30, 3, 30, 5, 30, 1680, 10, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 1691, 10, 30,
	3, 30, 3, 30, 5, 30, 1695, 10, 30, 3, 31, 3, 31, 5, 31, 1699, 10, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 1710,
	10, 31, 3, 31, 3, 31, 5, 31, 1714, 10, 31, 3, 32, 3, 32, 5, 32, 1718, 10,
	32, 3, 32, 3, 32, 5, 32, 1722, 10, 32, 3, 32, 5, 32, 1725, 10, 32, 3, 32,
	3, 32, 3, 32, 5, 32, 1730, 10, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 1736,
	10, 32, 3, 32, 7, 32, 1739, 10, 32, 12, 32, 14, 32, 1742, 11, 32, 3, 33,
	3, 33, 5, 33, 1746, 10, 33, 3, 33, 3, 33, 5, 33, 1750, 10, 33, 3, 33, 5,
	33, 1753, 10, 33, 3, 33, 3, 33, 3, 33, 5, 33, 1758, 10, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 5, 33, 1764, 10, 33, 3, 33, 7, 33, 1767, 10, 33, 12, 33,
	14, 33, 1770, 11, 33, 3, 34, 3, 34, 5, 34, 1774, 10, 34, 3, 34, 3, 34,
	5, 34, 1778, 10, 34, 3, 34, 5, 34, 1781, 10, 34, 3, 34, 3, 34, 3, 34, 5,
	34, 1786, 10, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 1792, 10, 34, 3, 34,
	7, 34, 1795, 10, 34, 12, 34, 14, 34, 1798, 11, 34, 3, 35, 3, 35, 5, 35,
	1802, 10, 35, 3, 35, 3, 35, 5, 35, 1806, 10, 35, 3, 35, 5, 35, 1809, 10,
	35, 3, 35, 3, 35, 3, 35, 5, 35, 1814, 10, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	5, 35, 1820, 10, 35, 3, 35, 7, 35, 1823, 10, 35, 12, 35, 14, 35, 1826,
	11, 35, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 7, 36, 1833, 10, 36, 12, 36,
	14, 36, 1836, 11, 36, 3, 37, 3, 37, 3, 37, 3, 38, 3, 38, 3, 38, 3, 39,
	3, 39, 3, 39, 3, 40, 3, 40, 3, 40, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1861, 10, 41, 3, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 1874,
	10, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43,
	3, 43, 3, 43, 5, 43, 1887, 10, 43, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3,
	44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 5, 44, 1900, 10, 44, 3, 45, 7, 45,
	1903, 10, 45, 12, 45, 14, 45, 1906, 11, 45, 3, 46, 7, 46, 1909, 10, 46,
	12, 46, 14, 46, 1912, 11, 46, 3, 47, 7, 47, 1915, 10, 47, 12, 47, 14, 47,
	1918, 11, 47, 3, 48, 7, 48, 1921, 10, 48, 12, 48, 14, 48, 1924, 11, 48,
	3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 5, 49, 1935,
	10, 49, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	5, 50, 1946, 10, 50, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3,
	51, 3, 51, 5, 51, 1957, 10, 51, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52,
	3, 52, 3, 52, 3, 52, 5, 52, 1968, 10, 52, 3, 53, 3, 53, 5, 53, 1972, 10,
	53, 3, 54, 3, 54, 5, 54, 1976, 10, 54, 3, 55, 3, 55, 5, 55, 1980, 10, 55,
	3, 56, 3, 56, 5, 56, 1984, 10, 56, 3, 57, 3, 57, 3, 58, 3, 58, 3, 58, 3,
	58, 3, 59, 3, 59, 3, 59, 3, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 61, 3, 61,
	3, 61, 3, 61, 3, 62, 3, 62, 3, 62, 3, 63, 3, 63, 3, 63, 3, 64, 3, 64, 3,
	64, 3, 65, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 3, 67, 3, 67, 3, 67, 3, 68,
	3, 68, 3, 68, 3, 69, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 3, 71, 3, 71, 3,
	71, 3, 72, 3, 72, 3, 72, 3, 73, 3, 73, 3, 73, 3, 74, 3, 74, 5, 74, 2042,
	10, 74, 3, 75, 3, 75, 5, 75, 2046, 10, 75, 3, 76, 3, 76, 5, 76, 2050, 10,
	76, 3, 77, 3, 77, 5, 77, 2054, 10, 77, 3, 78, 3, 78, 5, 78, 2058, 10, 78,
	3, 79, 3, 79, 5, 79, 2062, 10, 79, 3, 80, 3, 80, 5, 80, 2066, 10, 80, 3,
	81, 3, 81, 5, 81, 2070, 10, 81, 3, 82, 3, 82, 3, 82, 3, 82, 3, 83, 3, 83,
	3, 83, 3, 83, 3, 84, 3, 84, 3, 84, 3, 84, 3, 85, 3, 85, 3, 85, 3, 85, 3,
	86, 3, 86, 3, 86, 3, 86, 3, 87, 3, 87, 3, 87, 3, 87, 3, 88, 3, 88, 3, 88,
	3, 88, 3, 89, 3, 89, 3, 89, 3, 89, 3, 90, 7, 90, 2105, 10, 90, 12, 90,
	14, 90, 2108, 11, 90, 3, 90, 3, 90, 3, 91, 7, 91, 2113, 10, 91, 12, 91,
	14, 91, 2116, 11, 91, 3, 91, 3, 91, 3, 92, 7, 92, 2121, 10, 92, 12, 92,
	14, 92, 2124, 11, 92, 3, 92, 3, 92, 3, 93, 7, 93, 2129, 10, 93, 12, 93,
	14, 93, 2132, 11, 93, 3, 93, 3, 93, 3, 94, 7, 94, 2137, 10, 94, 12, 94,
	14, 94, 2140, 11, 94, 3, 94, 3, 94, 3, 95, 7, 95, 2145, 10, 95, 12, 95,
	14, 95, 2148, 11, 95, 3, 95, 3, 95, 3, 96, 7, 96, 2153, 10, 96, 12, 96,
	14, 96, 2156, 11, 96, 3, 96, 3, 96, 3, 97, 7, 97, 2161, 10, 97, 12, 97,
	14, 97, 2164, 11, 97, 3, 97, 3, 97, 3, 98, 3, 98, 6, 98, 2170, 10, 98,
	13, 98, 14, 98, 2171, 3, 99, 3, 99, 6, 99, 2176, 10, 99, 13, 99, 14, 99,
	2177, 3, 100, 3, 100, 6, 100, 2182, 10, 100, 13, 100, 14, 100, 2183, 3,
	101, 3, 101, 6, 101, 2188, 10, 101, 13, 101, 14, 101, 2189, 3, 102, 3,
	102, 6, 102, 2194, 10, 102, 13, 102, 14, 102, 2195, 3, 103, 3, 103, 6,
	103, 2200, 10, 103, 13, 103, 14, 103, 2201, 3, 104, 3, 104, 6, 104, 2206,
	10, 104, 13, 104, 14, 104, 2207, 3, 105, 3, 105, 6, 105, 2212, 10, 105,
	13, 105, 14, 105, 2213, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106,
	3, 106, 3, 106, 5, 106, 2224, 10, 106, 3, 106, 3, 106, 3, 106, 3, 106,
	3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 7, 106, 2236, 10, 106,
	12, 106, 14, 106, 2239, 11, 106, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107,
	3, 107, 3, 107, 3, 107, 5, 107, 2249, 10, 107, 3, 107, 3, 107, 3, 107,
	3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 7, 107, 2261, 10,
	107, 12, 107, 14, 107, 2264, 11, 107, 3, 108, 3, 108, 3, 108, 3, 108, 3,
	108, 3, 108, 3, 108, 3, 108, 5, 108, 2274, 10, 108, 3, 108, 3, 108, 3,
	108, 3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 7, 108, 2286,
	10, 108, 12, 108, 14, 108, 2289, 11, 108, 3, 109, 3, 109, 3, 109, 3, 109,
	3, 109, 3, 109, 3, 109, 3, 109, 5, 109, 2299, 10, 109, 3, 109, 3, 109,
	3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 7, 109,
	2311, 10, 109, 12, 109, 14, 109, 2314, 11, 109, 3, 110, 3, 110, 3, 110,
	3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 5, 110, 2324, 10, 110, 3, 111,
	3, 111, 3, 111, 3, 111, 3, 111, 3, 111, 3, 111, 3, 111, 5, 111, 2334, 10,
	111, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 5,
	112, 2344, 10, 112, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 3,
	113, 3, 113, 5, 113, 2354, 10, 113, 3, 114, 3, 114, 3, 115, 3, 115, 3,
	115, 3, 115, 3, 116, 3, 116, 3, 116, 5, 116, 2365, 10, 116, 3, 117, 3,
	117, 3, 117, 5, 117, 2370, 10, 117, 3, 118, 3, 118, 3, 118, 5, 118, 2375,
	10, 118, 3, 119, 3, 119, 3, 119, 5, 119, 2380, 10, 119, 3, 120, 3, 120,
	3, 120, 5, 120, 2385, 10, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120,
	3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 7, 120, 2399, 10,
	120, 12, 120, 14, 120, 2402, 11, 120, 3, 121, 3, 121, 3, 121, 5, 121, 2407,
	10, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121,
	3, 121, 3, 121, 3, 121, 3, 121, 7, 121, 2421, 10, 121, 12, 121, 14, 121,
	2424, 11, 121, 3, 122, 3, 122, 3, 122, 5, 122, 2429, 10, 122, 3, 122, 3,
	122, 3, 122, 3, 122, 3, 122, 3, 122, 3, 122, 3, 122, 3, 122, 3, 122, 3,
	122, 3, 122, 7, 122, 2443, 10, 122, 12, 122, 14, 122, 2446, 11, 122, 3,
	123, 3, 123, 3, 123, 5, 123, 2451, 10, 123, 3, 123, 3, 123, 3, 123, 3,
	123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 7,
	123, 2465, 10, 123, 12, 123, 14, 123, 2468, 11, 123, 3, 124, 3, 124, 3,
	124, 3, 125, 3, 125, 3, 125, 3, 126, 3, 126, 3, 126, 3, 127, 3, 127, 3,
	127, 3, 128, 3, 128, 3, 128, 3, 128, 5, 128, 2486, 10, 128, 3, 128, 3,
	128, 5, 128, 2490, 10, 128, 3, 129, 3, 129, 3, 129, 3, 129, 5, 129, 2496,
	10, 129, 3, 129, 3, 129, 5, 129, 2500, 10, 129, 3, 130, 3, 130, 3, 130,
	3, 130, 5, 130, 2506, 10, 130, 3, 130, 3, 130, 5, 130, 2510, 10, 130, 3,
	131, 3, 131, 3, 131, 3, 131, 5, 131, 2516, 10, 131, 3, 131, 3, 131, 5,
	131, 2520, 10, 131, 3, 132, 3, 132, 5, 132, 2524, 10, 132, 3, 132, 3, 132,
	3, 132, 3, 132, 3, 132, 5, 132, 2531, 10, 132, 3, 132, 7, 132, 2534, 10,
	132, 12, 132, 14, 132, 2537, 11, 132, 3, 133, 3, 133, 5, 133, 2541, 10,
	133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 5, 133, 2548, 10, 133, 3,
	133, 7, 133, 2551, 10, 133, 12, 133, 14, 133, 2554, 11, 133, 3, 134, 3,
	134, 5, 134, 2558, 10, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 5,
	134, 2565, 10, 134, 3, 134, 7, 134, 2568, 10, 134, 12, 134, 14, 134, 2571,
	11, 134, 3, 135, 3, 135, 5, 135, 2575, 10, 135, 3, 135, 3, 135, 3, 135,
	3, 135, 3, 135, 5, 135, 2582, 10, 135, 3, 135, 7, 135, 2585, 10, 135, 12,
	135, 14, 135, 2588, 11, 135, 3, 136, 3, 136, 5, 136, 2592, 10, 136, 3,
	137, 3, 137, 5, 137, 2596, 10, 137, 3, 138, 3, 138, 5, 138, 2600, 10, 138,
	3, 139, 3, 139, 5, 139, 2604, 10, 139, 3, 140, 3, 140, 3, 140, 3, 140,
	3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 5, 140, 2617, 10,
	140, 3, 141, 3, 141, 3, 141, 3, 141, 3, 141, 3, 141, 3, 141, 3, 141, 3,
	141, 3, 141, 3, 141, 5, 141, 2630, 10, 141, 3, 142, 3, 142, 3, 142, 3,
	142, 3, 142, 3, 142, 3, 142, 3, 142, 3, 142, 3, 142, 3, 142, 5, 142, 2643,
	10, 142, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143,
	3, 143, 3, 143, 3, 143, 5, 143, 2656, 10, 143, 3, 144, 3, 144, 3, 144,
	3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144,
	3, 144, 3, 144, 3, 144, 5, 144, 2673, 10, 144, 3, 145, 3, 145, 3, 145,
	3, 145, 3, 145, 3, 145, 3, 145, 3, 145, 3, 145, 3, 145, 3, 145, 3, 145,
	3, 145, 3, 145, 3, 145, 5, 145, 2690, 10, 145, 3, 146, 3, 146, 3, 146,
	3, 146, 3, 146, 3, 146, 3, 146, 3, 146, 3, 146, 3, 146, 3, 146, 3, 146,
	3, 146, 3, 146, 3, 146, 3, 146, 5, 146, 2708, 10, 146, 3, 147, 3, 147,
	3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147,
	3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 5, 147, 2726, 10, 147, 3, 148,
	3, 148, 3, 148, 3, 148, 3, 148, 5, 148, 2733, 10, 148, 3, 149, 3, 149,
	3, 149, 3, 149, 3, 149, 5, 149, 2740, 10, 149, 3, 150, 3, 150, 3, 150,
	3, 150, 3, 150, 5, 150, 2747, 10, 150, 3, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 5, 151, 2754, 10, 151, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152,
	3, 152, 7, 152, 2762, 10, 152, 12, 152, 14, 152, 2765, 11, 152, 3, 153,
	3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 7, 153, 2773, 10, 153, 12, 153,
	14, 153, 2776, 11, 153, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154,
	7, 154, 2784, 10, 154, 12, 154, 14, 154, 2787, 11, 154, 3, 155, 3, 155,
	3, 155, 3, 155, 3, 155, 3, 155, 7, 155, 2795, 10, 155, 12, 155, 14, 155,
	2798, 11, 155, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156,
	3, 156, 3, 156, 7, 156, 2809, 10, 156, 12, 156, 14, 156, 2812, 11, 156,
	3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157,
	7, 157, 2823, 10, 157, 12, 157, 14, 157, 2826, 11, 157, 3, 158, 3, 158,
	3, 158, 3, 158, 3, 158, 3, 158, 3, 158, 3, 158, 3, 158, 7, 158, 2837, 10,
	158, 12, 158, 14, 158, 2840, 11, 158, 3, 159, 3, 159, 3, 159, 3, 159, 3,
	159, 3, 159, 3, 159, 3, 159, 3, 159, 7, 159, 2851, 10, 159, 12, 159, 14,
	159, 2854, 11, 159, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3,
	160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 7, 160, 2868, 10, 160, 12,
	160, 14, 160, 2871, 11, 160, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3,
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 7, 161, 2885, 10,
	161, 12, 161, 14, 161, 2888, 11, 161, 3, 162, 3, 162, 3, 162, 3, 162, 3,
	162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 7, 162, 2902,
	10, 162, 12, 162, 14, 162, 2905, 11, 162, 3, 163, 3, 163, 3, 163, 3, 163,
	3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 7, 163,
	2919, 10, 163, 12, 163, 14, 163, 2922, 11, 163, 3, 164, 3, 164, 3, 164,
	3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164,
	3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 7, 164, 2942, 10, 164,
	12, 164, 14, 164, 2945, 11, 164, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165,
	3, 165, 5, 165, 2953, 10, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165,
	3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165,
	3, 165, 7, 165, 2970, 10, 165, 12, 165, 14, 165, 2973, 11, 165, 3, 166,
	3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166,
	3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 7, 166,
	2993, 10, 166, 12, 166, 14, 166, 2996, 11, 166, 3, 167, 3, 167, 3, 167,
	3, 167, 3, 167, 3, 167, 5, 167, 3004, 10, 167, 3, 167, 3, 167, 3, 167,
	3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167,
	3, 167, 3, 167, 3, 167, 7, 167, 3021, 10, 167, 12, 167, 14, 167, 3024,
	11, 167, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168,
	3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168,
	3, 168, 7, 168, 3044, 10, 168, 12, 168, 14, 168, 3047, 11, 168, 3, 169,
	3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 5, 169, 3055, 10, 169, 3, 169,
	3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169,
	3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 7, 169, 3072, 10, 169, 12, 169,
	14, 169, 3075, 11, 169, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170,
	3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170,
	3, 170, 3, 170, 3, 170, 7, 170, 3095, 10, 170, 12, 170, 14, 170, 3098,
	11, 170, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 5, 171, 3106,
	10, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171,
	3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 7, 171, 3123, 10,
	171, 12, 171, 14, 171, 3126, 11, 171, 3, 172, 3, 172, 3, 172, 3, 172, 3,
	172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3,
	172, 3, 172, 7, 172, 3143, 10, 172, 12, 172, 14, 172, 3146, 11, 172, 3,
	173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3,
	173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 7, 173, 3163, 10, 173, 12,
	173, 14, 173, 3166, 11, 173, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3,
	174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 3,
	174, 7, 174, 3183, 10, 174, 12, 174, 14, 174, 3186, 11, 174, 3, 175, 3,
	175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3,
	175, 3, 175, 3, 175, 3, 175, 3, 175, 7, 175, 3203, 10, 175, 12, 175, 14,
	175, 3206, 11, 175, 3, 176, 3, 176, 3, 176, 3, 176, 3, 176, 3, 176, 3,
	176, 3, 176, 3, 176, 3, 176, 3, 176, 3, 176, 3, 176, 3, 176, 3, 176, 7,
	176, 3223, 10, 176, 12, 176, 14, 176, 3226, 11, 176, 3, 177, 3, 177, 3,
	177, 3, 177, 3, 177, 3, 177, 3, 177, 3, 177, 3, 177, 3, 177, 3, 177, 3,
	177, 3, 177, 3, 177, 3, 177, 7, 177, 3243, 10, 177, 12, 177, 14, 177, 3246,
	11, 177, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178,
	3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 7, 178, 3263, 10,
	178, 12, 178, 14, 178, 3266, 11, 178, 3, 179, 3, 179, 3, 179, 3, 179, 3,
	179, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 3,
	179, 3, 179, 7, 179, 3283, 10, 179, 12, 179, 14, 179, 3286, 11, 179, 3,
	180, 3, 180, 3, 180, 3, 180, 3, 180, 3, 180, 7, 180, 3294, 10, 180, 12,
	180, 14, 180, 3297, 11, 180, 3, 181, 3, 181, 3, 181, 3, 181, 3, 181, 3,
	181, 7, 181, 3305, 10, 181, 12, 181, 14, 181, 3308, 11, 181, 3, 182, 3,
	182, 3, 182, 3, 182, 3, 182, 3, 182, 7, 182, 3316, 10, 182, 12, 182, 14,
	182, 3319, 11, 182, 3, 183, 3, 183, 3, 183, 3, 183, 3, 183, 3, 183, 7,
	183, 3327, 10, 183, 12, 183, 14, 183, 3330, 11, 183, 3, 184, 3, 184, 3,
	184, 3, 184, 3, 184, 3, 184, 7, 184, 3338, 10, 184, 12, 184, 14, 184, 3341,
	11, 184, 3, 185, 3, 185, 3, 185, 3, 185, 3, 185, 3, 185, 7, 185, 3349,
	10, 185, 12, 185, 14, 185, 3352, 11, 185, 3, 186, 3, 186, 3, 186, 3, 186,
	3, 186, 3, 186, 7, 186, 3360, 10, 186, 12, 186, 14, 186, 3363, 11, 186,
	3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 7, 187, 3371, 10, 187,
	12, 187, 14, 187, 3374, 11, 187, 3, 188, 3, 188, 3, 188, 3, 188, 3, 188,
	3, 188, 7, 188, 3382, 10, 188, 12, 188, 14, 188, 3385, 11, 188, 3, 189,
	3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 7, 189, 3393, 10, 189, 12, 189,
	14, 189, 3396, 11, 189, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190,
	7, 190, 3404, 10, 190, 12, 190, 14, 190, 3407, 11, 190, 3, 191, 3, 191,
	3, 191, 3, 191, 3, 191, 3, 191, 7, 191, 3415, 10, 191, 12, 191, 14, 191,
	3418, 11, 191, 3, 192, 3, 192, 3, 192, 3, 192, 3, 192, 3, 192, 7, 192,
	3426, 10, 192, 12, 192, 14, 192, 3429, 11, 192, 3, 193, 3, 193, 3, 193,
	3, 193, 3, 193, 3, 193, 7, 193, 3437, 10, 193, 12, 193, 14, 193, 3440,
	11, 193, 3, 194, 3, 194, 3, 194, 3, 194, 3, 194, 3, 194, 7, 194, 3448,
	10, 194, 12, 194, 14, 194, 3451, 11, 194, 3, 195, 3, 195, 3, 195, 3, 195,
	3, 195, 3, 195, 7, 195, 3459, 10, 195, 12, 195, 14, 195, 3462, 11, 195,
	3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 7, 196, 3470, 10, 196,
	12, 196, 14, 196, 3473, 11, 196, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197,
	3, 197, 7, 197, 3481, 10, 197, 12, 197, 14, 197, 3484, 11, 197, 3, 198,
	3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 7, 198, 3492, 10, 198, 12, 198,
	14, 198, 3495, 11, 198, 3, 199, 3, 199, 3, 199, 3, 199, 3, 199, 3, 199,
	7, 199, 3503, 10, 199, 12, 199, 14, 199, 3506, 11, 199, 3, 200, 3, 200,
	3, 200, 3, 200, 3, 200, 3, 200, 7, 200, 3514, 10, 200, 12, 200, 14, 200,
	3517, 11, 200, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 7, 201,
	3525, 10, 201, 12, 201, 14, 201, 3528, 11, 201, 3, 202, 3, 202, 3, 202,
	3, 202, 3, 202, 3, 202, 7, 202, 3536, 10, 202, 12, 202, 14, 202, 3539,
	11, 202, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 7, 203, 3547,
	10, 203, 12, 203, 14, 203, 3550, 11, 203, 3, 204, 3, 204, 3, 204, 3, 204,
	3, 204, 3, 204, 7, 204, 3558, 10, 204, 12, 204, 14, 204, 3561, 11, 204,
	3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 7, 205, 3569, 10, 205,
	12, 205, 14, 205, 3572, 11, 205, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206,
	3, 206, 7, 206, 3580, 10, 206, 12, 206, 14, 206, 3583, 11, 206, 3, 207,
	3, 207, 3, 207, 3, 207, 3, 207, 3, 207, 7, 207, 3591, 10, 207, 12, 207,
	14, 207, 3594, 11, 207, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208,
	7, 208, 3602, 10, 208, 12, 208, 14, 208, 3605, 11, 208, 3, 209, 3, 209,
	3, 209, 3, 209, 3, 209, 3, 209, 7, 209, 3613, 10, 209, 12, 209, 14, 209,
	3616, 11, 209, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 7, 210,
	3624, 10, 210, 12, 210, 14, 210, 3627, 11, 210, 3, 211, 3, 211, 3, 211,
	3, 211, 3, 211, 3, 211, 7, 211, 3635, 10, 211, 12, 211, 14, 211, 3638,
	11, 211, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 7, 212, 3646,
	10, 212, 12, 212, 14, 212, 3649, 11, 212, 3, 213, 3, 213, 3, 213, 3, 213,
	3, 213, 3, 213, 7, 213, 3657, 10, 213, 12, 213, 14, 213, 3660, 11, 213,
	3, 214, 3, 214, 3, 214, 3, 214, 3, 214, 3, 214, 7, 214, 3668, 10, 214,
	12, 214, 14, 214, 3671, 11, 214, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215,
	3, 215, 7, 215, 3679, 10, 215, 12, 215, 14, 215, 3682, 11, 215, 3, 216,
	3, 216, 3, 216, 3, 216, 3, 216, 3, 216, 7, 216, 3690, 10, 216, 12, 216,
	14, 216, 3693, 11, 216, 3, 217, 3, 217, 3, 217, 3, 217, 3, 217, 3, 217,
	7, 217, 3701, 10, 217, 12, 217, 14, 217, 3704, 11, 217, 3, 218, 3, 218,
	3, 218, 3, 218, 3, 218, 3, 218, 7, 218, 3712, 10, 218, 12, 218, 14, 218,
	3715, 11, 218, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 7, 219,
	3723, 10, 219, 12, 219, 14, 219, 3726, 11, 219, 3, 220, 3, 220, 3, 220,
	3, 220, 3, 220, 3, 220, 3, 220, 5, 220, 3735, 10, 220, 3, 221, 3, 221,
	3, 221, 3, 221, 3, 221, 3, 221, 3, 221, 5, 221, 3744, 10, 221, 3, 222,
	3, 222, 3, 222, 3, 222, 3, 222, 3, 222, 3, 222, 5, 222, 3753, 10, 222,
	3, 223, 3, 223, 3, 223, 3, 223, 3, 223, 3, 223, 3, 223, 5, 223, 3762, 10,
	223, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 5, 224, 3771,
	10, 224, 3, 225, 3, 225, 3, 225, 3, 225, 3, 225, 3, 225, 3, 225, 5, 225,
	3780, 10, 225, 3, 226, 3, 226, 3, 226, 3, 226, 3, 226, 3, 226, 3, 226,
	5, 226, 3789, 10, 226, 3, 227, 3, 227, 3, 227, 3, 227, 3, 227, 3, 227,
	3, 227, 5, 227, 3798, 10, 227, 3, 228, 3, 228, 3, 229, 3, 229, 3, 229,
	3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 5, 229,
	3813, 10, 229, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230,
	3, 230, 3, 230, 3, 230, 3, 230, 5, 230, 3826, 10, 230, 3, 231, 3, 231,
	3, 231, 3, 231, 3, 231, 3, 231, 3, 231, 3, 231, 3, 231, 3, 231, 3, 231,
	3, 231, 5, 231, 3840, 10, 231, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232,
	3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 5, 232, 3854, 10,
	232, 3, 233, 3, 233, 3, 233, 3, 233, 3, 233, 3, 233, 3, 233, 3, 233, 3,
	233, 3, 233, 3, 233, 5, 233, 3867, 10, 233, 3, 234, 3, 234, 3, 234, 3,
	234, 3, 234, 3, 234, 3, 234, 3, 234, 3, 234, 3, 234, 3, 234, 5, 234, 3880,
	10, 234, 3, 235, 3, 235, 3, 235, 3, 235, 3, 235, 3, 235, 3, 235, 3, 235,
	3, 235, 3, 235, 3, 235, 3, 235, 5, 235, 3894, 10, 235, 3, 236, 3, 236,
	3, 236, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236,
	3, 236, 5, 236, 3908, 10, 236, 3, 237, 3, 237, 3, 237, 3, 237, 3, 237,
	3, 237, 7, 237, 3916, 10, 237, 12, 237, 14, 237, 3919, 11, 237, 3, 238,
	3, 238, 3, 238, 3, 238, 3, 238, 3, 238, 7, 238, 3927, 10, 238, 12, 238,
	14, 238, 3930, 11, 238, 3, 239, 3, 239, 3, 239, 3, 239, 3, 239, 3, 239,
	7, 239, 3938, 10, 239, 12, 239, 14, 239, 3941, 11, 239, 3, 240, 3, 240,
	3, 240, 3, 240, 3, 240, 3, 240, 7, 240, 3949, 10, 240, 12, 240, 14, 240,
	3952, 11, 240, 3, 241, 3, 241, 3, 241, 3, 241, 3, 241, 3, 241, 7, 241,
	3960, 10, 241, 12, 241, 14, 241, 3963, 11, 241, 3, 242, 3, 242, 3, 242,
	3, 242, 3, 242, 3, 242, 7, 242, 3971, 10, 242, 12, 242, 14, 242, 3974,
	11, 242, 3, 243, 3, 243, 3, 243, 3, 243, 3, 243, 3, 243, 7, 243, 3982,
	10, 243, 12, 243, 14, 243, 3985, 11, 243, 3, 244, 3, 244, 3, 244, 3, 244,
	3, 244, 3, 244, 7, 244, 3993, 10, 244, 12, 244, 14, 244, 3996, 11, 244,
	3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245,
	3, 245, 3, 245, 3, 245, 3, 245, 5, 245, 4011, 10, 245, 3, 246, 3, 246,
	3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 3, 246,
	3, 246, 3, 246, 5, 246, 4026, 10, 246, 3, 247, 3, 247, 3, 247, 3, 247,
	3, 247, 3, 247, 3, 247, 3, 247, 3, 247, 3, 247, 3, 247, 3, 247, 3, 247,
	5, 247, 4041, 10, 247, 3, 248, 3, 248, 3, 248, 3, 248, 3, 248, 3, 248,
	3, 248, 3, 248, 3, 248, 3, 248, 3, 248, 3, 248, 3, 248, 5, 248, 4056, 10,
	248, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3,
	249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 5, 249, 4072, 10, 249, 3,
	250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3,
	250, 3, 250, 3, 250, 3, 250, 3, 250, 5, 250, 4088, 10, 250, 3, 251, 3,
	251, 3, 251, 3, 251, 3, 251, 3, 251, 3, 251, 3, 251, 3, 251, 3, 251, 3,
	251, 3, 251, 3, 251, 3, 251, 5, 251, 4104, 10, 251, 3, 252, 3, 252, 3,
	252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3,
	252, 3, 252, 3, 252, 5, 252, 4120, 10, 252, 3, 253, 3, 253, 3, 253, 5,
	253, 4125, 10, 253, 3, 254, 3, 254, 3, 254, 5, 254, 4130, 10, 254, 3, 255,
	3, 255, 3, 255, 5, 255, 4135, 10, 255, 3, 256, 3, 256, 3, 256, 5, 256,
	4140, 10, 256, 3, 257, 3, 257, 3, 257, 3, 257, 5, 257, 4146, 10, 257, 3,
	258, 3, 258, 3, 258, 3, 258, 5, 258, 4152, 10, 258, 3, 259, 3, 259, 3,
	259, 3, 259, 5, 259, 4158, 10, 259, 3, 260, 3, 260, 3, 260, 3, 260, 5,
	260, 4164, 10, 260, 3, 261, 3, 261, 3, 261, 3, 261, 5, 261, 4170, 10, 261,
	3, 262, 3, 262, 3, 262, 3, 262, 5, 262, 4176, 10, 262, 3, 263, 3, 263,
	3, 263, 3, 263, 5, 263, 4182, 10, 263, 3, 264, 3, 264, 3, 264, 3, 264,
	5, 264, 4188, 10, 264, 3, 265, 3, 265, 5, 265, 4192, 10, 265, 3, 266, 3,
	266, 5, 266, 4196, 10, 266, 3, 267, 3, 267, 5, 267, 4200, 10, 267, 3, 268,
	3, 268, 5, 268, 4204, 10, 268, 3, 269, 3, 269, 5, 269, 4208, 10, 269, 3,
	270, 3, 270, 5, 270, 4212, 10, 270, 3, 271, 3, 271, 5, 271, 4216, 10, 271,
	3, 272, 3, 272, 5, 272, 4220, 10, 272, 3, 273, 3, 273, 3, 274, 3, 274,
	3, 275, 3, 275, 3, 276, 3, 276, 3, 277, 3, 277, 3, 278, 3, 278, 3, 279,
	3, 279, 3, 280, 3, 280, 3, 281, 3, 281, 5, 281, 4240, 10, 281, 3, 281,
	3, 281, 3, 282, 3, 282, 5, 282, 4246, 10, 282, 3, 282, 3, 282, 3, 283,
	3, 283, 5, 283, 4252, 10, 283, 3, 283, 3, 283, 3, 284, 3, 284, 5, 284,
	4258, 10, 284, 3, 284, 3, 284, 3, 285, 3, 285, 5, 285, 4264, 10, 285, 3,
	285, 3, 285, 3, 286, 3, 286, 5, 286, 4270, 10, 286, 3, 286, 3, 286, 3,
	287, 3, 287, 5, 287, 4276, 10, 287, 3, 287, 3, 287, 3, 288, 3, 288, 5,
	288, 4282, 10, 288, 3, 288, 3, 288, 3, 289, 6, 289, 4287, 10, 289, 13,
	289, 14, 289, 4288, 3, 290, 6, 290, 4292, 10, 290, 13, 290, 14, 290, 4293,
	3, 291, 6, 291, 4297, 10, 291, 13, 291, 14, 291, 4298, 3, 292, 6, 292,
	4302, 10, 292, 13, 292, 14, 292, 4303, 3, 293, 6, 293, 4307, 10, 293, 13,
	293, 14, 293, 4308, 3, 294, 6, 294, 4312, 10, 294, 13, 294, 14, 294, 4313,
	3, 295, 6, 295, 4317, 10, 295, 13, 295, 14, 295, 4318, 3, 296, 6, 296,
	4322, 10, 296, 13, 296, 14, 296, 4323, 3, 297, 3, 297, 5, 297, 4328, 10,
	297, 3, 298, 3, 298, 5, 298, 4332, 10, 298, 3, 299, 3, 299, 5, 299, 4336,
	10, 299, 3, 300, 3, 300, 5, 300, 4340, 10, 300, 3, 301, 3, 301, 5, 301,
	4344, 10, 301, 3, 302, 3, 302, 5, 302, 4348, 10, 302, 3, 303, 3, 303, 5,
	303, 4352, 10, 303, 3, 304, 3, 304, 5, 304, 4356, 10, 304, 3, 305, 3, 305,
	3, 305, 3, 305, 3, 306, 3, 306, 3, 306, 3, 306, 3, 307, 3, 307, 3, 307,
	3, 307, 3, 308, 3, 308, 3, 308, 3, 308, 3, 309, 3, 309, 3, 309, 3, 309,
	3, 310, 3, 310, 3, 310, 3, 310, 3, 311, 3, 311, 3, 311, 3, 311, 3, 312,
	3, 312, 3, 312, 3, 312, 3, 313, 3, 313, 3, 314, 3, 314, 3, 314, 3, 314,
	3, 314, 3, 314, 7, 314, 4398, 10, 314, 12, 314, 14, 314, 4401, 11, 314,
	3, 315, 3, 315, 3, 315, 3, 315, 3, 315, 3, 315, 7, 315, 4409, 10, 315,
	12, 315, 14, 315, 4412, 11, 315, 3, 316, 3, 316, 3, 316, 3, 316, 3, 316,
	3, 316, 7, 316, 4420, 10, 316, 12, 316, 14, 316, 4423, 11, 316, 3, 317,
	3, 317, 3, 317, 3, 317, 3, 317, 3, 317, 7, 317, 4431, 10, 317, 12, 317,
	14, 317, 4434, 11, 317, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318,
	7, 318, 4442, 10, 318, 12, 318, 14, 318, 4445, 11, 318, 3, 319, 3, 319,
	3, 319, 3, 319, 3, 319, 3, 319, 7, 319, 4453, 10, 319, 12, 319, 14, 319,
	4456, 11, 319, 3, 320, 3, 320, 3, 320, 3, 320, 3, 320, 3, 320, 7, 320,
	4464, 10, 320, 12, 320, 14, 320, 4467, 11, 320, 3, 321, 3, 321, 3, 321,
	3, 321, 3, 321, 3, 321, 7, 321, 4475, 10, 321, 12, 321, 14, 321, 4478,
	11, 321, 3, 322, 3, 322, 5, 322, 4482, 10, 322, 3, 322, 3, 322, 3, 322,
	5, 322, 4487, 10, 322, 3, 323, 3, 323, 5, 323, 4491, 10, 323, 3, 323, 3,
	323, 3, 323, 5, 323, 4496, 10, 323, 3, 324, 3, 324, 5, 324, 4500, 10, 324,
	3, 324, 3, 324, 3, 324, 5, 324, 4505, 10, 324, 3, 325, 3, 325, 5, 325,
	4509, 10, 325, 3, 325, 3, 325, 3, 325, 5, 325, 4514, 10, 325, 3, 326, 3,
	326, 5, 326, 4518, 10, 326, 3, 326, 3, 326, 3, 326, 5, 326, 4523, 10, 326,
	3, 327, 3, 327, 5, 327, 4527, 10, 327, 3, 327, 3, 327, 3, 327, 5, 327,
	4532, 10, 327, 3, 328, 3, 328, 5, 328, 4536, 10, 328, 3, 328, 3, 328, 3,
	328, 5, 328, 4541, 10, 328, 3, 329, 3, 329, 5, 329, 4545, 10, 329, 3, 329,
	3, 329, 3, 329, 5, 329, 4550, 10, 329, 3, 330, 3, 330, 3, 330, 3, 330,
	3, 331, 3, 331, 3, 331, 3, 331, 3, 332, 3, 332, 3, 332, 3, 332, 3, 333,
	3, 333, 3, 333, 3, 333, 3, 334, 3, 334, 3, 334, 3, 334, 3, 334, 3, 334,
	7, 334, 4574, 10, 334, 12, 334, 14, 334, 4577, 11, 334, 3, 335, 3, 335,
	3, 335, 3, 335, 3, 335, 3, 335, 7, 335, 4585, 10, 335, 12, 335, 14, 335,
	4588, 11, 335, 3, 336, 3, 336, 3, 336, 3, 336, 3, 336, 3, 336, 7, 336,
	4596, 10, 336, 12, 336, 14, 336, 4599, 11, 336, 3, 337, 3, 337, 3, 337,
	3, 337, 3, 337, 3, 337, 7, 337, 4607, 10, 337, 12, 337, 14, 337, 4610,
	11, 337, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 7, 338, 4618,
	10, 338, 12, 338, 14, 338, 4621, 11, 338, 3, 339, 3, 339, 3, 339, 3, 339,
	3, 339, 3, 339, 7, 339, 4629, 10, 339, 12, 339, 14, 339, 4632, 11, 339,
	3, 340, 3, 340, 3, 340, 3, 340, 3, 340, 3, 340, 7, 340, 4640, 10, 340,
	12, 340, 14, 340, 4643, 11, 340, 3, 341, 3, 341, 3, 341, 3, 341, 3, 341,
	3, 341, 7, 341, 4651, 10, 341, 12, 341, 14, 341, 4654, 11, 341, 3, 342,
	3, 342, 5, 342, 4658, 10, 342, 3, 342, 3, 342, 3, 342, 5, 342, 4663, 10,
	342, 3, 343, 3, 343, 5, 343, 4667, 10, 343, 3, 343, 3, 343, 3, 343, 5,
	343, 4672, 10, 343, 3, 344, 3, 344, 5, 344, 4676, 10, 344, 3, 344, 3, 344,
	3, 344, 5, 344, 4681, 10, 344, 3, 345, 3, 345, 5, 345, 4685, 10, 345, 3,
	345, 3, 345, 3, 345, 5, 345, 4690, 10, 345, 3, 346, 3, 346, 5, 346, 4694,
	10, 346, 3, 346, 3, 346, 3, 346, 5, 346, 4699, 10, 346, 3, 347, 3, 347,
	5, 347, 4703, 10, 347, 3, 347, 3, 347, 3, 347, 5, 347, 4708, 10, 347, 3,
	348, 3, 348, 5, 348, 4712, 10, 348, 3, 348, 3, 348, 3, 348, 5, 348, 4717,
	10, 348, 3, 349, 3, 349, 5, 349, 4721, 10, 349, 3, 349, 3, 349, 3, 349,
	5, 349, 4726, 10, 349, 3, 350, 3, 350, 5, 350, 4730, 10, 350, 3, 351, 3,
	351, 5, 351, 4734, 10, 351, 3, 352, 3, 352, 5, 352, 4738, 10, 352, 3, 353,
	3, 353, 5, 353, 4742, 10, 353, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354,
	3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354,
	5, 354, 4758, 10, 354, 3, 354, 3, 354, 5, 354, 4762, 10, 354, 3, 355, 3,
	355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3, 355, 3,
	355, 3, 355, 3, 355, 3, 355, 5, 355, 4778, 10, 355, 3, 355, 3, 355, 5,
	355, 4782, 10, 355, 3, 356, 3, 356, 3, 356, 3, 356, 3, 356, 3, 356, 3,
	356, 3, 356, 3, 356, 3, 356, 3, 356, 3, 356, 3, 356, 3, 356, 5, 356, 4798,
	10, 356, 3, 356, 3, 356, 5, 356, 4802, 10, 356, 3, 357, 3, 357, 3, 357,
	3, 357, 3, 357, 3, 357, 3, 357, 3, 357, 3, 357, 3, 357, 3, 357, 3, 357,
	3, 357, 3, 357, 5, 357, 4818, 10, 357, 3, 357, 3, 357, 5, 357, 4822, 10,
	357, 3, 358, 3, 358, 5, 358, 4826, 10, 358, 3, 358, 5, 358, 4829, 10, 358,
	3, 358, 3, 358, 3, 358, 3, 358, 3, 358, 3, 358, 3, 358, 3, 358, 3, 358,
	5, 358, 4840, 10, 358, 3, 358, 5, 358, 4843, 10, 358, 3, 358, 3, 358, 5,
	358, 4847, 10, 358, 3, 359, 3, 359, 5, 359, 4851, 10, 359, 3, 359, 5, 359,
	4854, 10, 359, 3, 359, 3, 359, 3, 359, 3, 359, 3, 359, 3, 359, 3, 359,
	3, 359, 3, 359, 5, 359, 4865, 10, 359, 3, 359, 5, 359, 4868, 10, 359, 3,
	359, 3, 359, 5, 359, 4872, 10, 359, 3, 360, 3, 360, 5, 360, 4876, 10, 360,
	3, 360, 5, 360, 4879, 10, 360, 3, 360, 3, 360, 3, 360, 3, 360, 3, 360,
	3, 360, 3, 360, 3, 360, 3, 360, 5, 360, 4890, 10, 360, 3, 360, 5, 360,
	4893, 10, 360, 3, 360, 3, 360, 5, 360, 4897, 10, 360, 3, 361, 3, 361, 5,
	361, 4901, 10, 361, 3, 361, 5, 361, 4904, 10, 361, 3, 361, 3, 361, 3, 361,
	3, 361, 3, 361, 3, 361, 3, 361, 3, 361, 3, 361, 5, 361, 4915, 10, 361,
	3, 361, 5, 361, 4918, 10, 361, 3, 361, 3, 361, 5, 361, 4922, 10, 361, 3,
	362, 3, 362, 3, 362, 3, 363, 3, 363, 3, 363, 3, 364, 3, 364, 3, 364, 3,
	365, 3, 365, 3, 365, 3, 366, 3, 366, 3, 366, 3, 366, 3, 366, 3, 366, 7,
	366, 4942, 10, 366, 12, 366, 14, 366, 4945, 11, 366, 3, 367, 3, 367, 3,
	367, 3, 367, 3, 367, 3, 367, 7, 367, 4953, 10, 367, 12, 367, 14, 367, 4956,
	11, 367, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 7, 368, 4964,
	10, 368, 12, 368, 14, 368, 4967, 11, 368, 3, 369, 3, 369, 3, 369, 3, 369,
	3, 369, 3, 369, 7, 369, 4975, 10, 369, 12, 369, 14, 369, 4978, 11, 369,
	3, 370, 3, 370, 3, 370, 3, 370, 3, 370, 3, 370, 7, 370, 4986, 10, 370,
	12, 370, 14, 370, 4989, 11, 370, 3, 371, 3, 371, 3, 371, 3, 371, 3, 371,
	3, 371, 7, 371, 4997, 10, 371, 12, 371, 14, 371, 5000, 11, 371, 3, 372,
	3, 372, 3, 372, 3, 372, 3, 372, 3, 372, 7, 372, 5008, 10, 372, 12, 372,
	14, 372, 5011, 11, 372, 3, 373, 3, 373, 3, 373, 3, 373, 3, 373, 3, 373,
	7, 373, 5019, 10, 373, 12, 373, 14, 373, 5022, 11, 373, 3, 374, 5, 374,
	5025, 10, 374, 3, 374, 3, 374, 3, 375, 5, 375, 5030, 10, 375, 3, 375, 3,
	375, 3, 376, 5, 376, 5035, 10, 376, 3, 376, 3, 376, 3, 377, 5, 377, 5040,
	10, 377, 3, 377, 3, 377, 3, 378, 3, 378, 3, 378, 3, 378, 3, 378, 5, 378,
	5049, 10, 378, 3, 379, 3, 379, 3, 379, 3, 379, 3, 379, 5, 379, 5056, 10,
	379, 3, 380, 3, 380, 3, 380, 3, 380, 3, 380, 5, 380, 5063, 10, 380, 3,
	381, 3, 381, 3, 381, 3, 381, 3, 381, 5, 381, 5070, 10, 381, 3, 382, 3,
	382, 3, 382, 5, 382, 5075, 10, 382, 5, 382, 5077, 10, 382, 3, 383, 3, 383,
	3, 383, 5, 383, 5082, 10, 383, 5, 383, 5084, 10, 383, 3, 384, 3, 384, 3,
	384, 5, 384, 5089, 10, 384, 5, 384, 5091, 10, 384, 3, 385, 3, 385, 3, 385,
	5, 385, 5096, 10, 385, 5, 385, 5098, 10, 385, 3, 386, 3, 386, 5, 386, 5102,
	10, 386, 3, 387, 3, 387, 5, 387, 5106, 10, 387, 3, 388, 3, 388, 5, 388,
	5110, 10, 388, 3, 389, 3, 389, 5, 389, 5114, 10, 389, 3, 390, 3, 390, 3,
	390, 3, 390, 5, 390, 5120, 10, 390, 3, 391, 3, 391, 3, 391, 3, 391, 5,
	391, 5126, 10, 391, 3, 392, 3, 392, 3, 392, 3, 392, 5, 392, 5132, 10, 392,
	3, 393, 3, 393, 3, 393, 3, 393, 5, 393, 5138, 10, 393, 3, 394, 3, 394,
	3, 395, 3, 395, 3, 395, 3, 395, 3, 396, 3, 396, 3, 396, 3, 396, 3, 397,
	3, 397, 3, 397, 3, 397, 3, 398, 3, 398, 3, 398, 3, 398, 3, 399, 3, 399,
	3, 399, 3, 399, 3, 399, 3, 399, 3, 399, 3, 399, 3, 399, 3, 399, 3, 399,
	3, 399, 3, 399, 3, 399, 5, 399, 5172, 10, 399, 3, 400, 3, 400, 3, 400,
	3, 400, 3, 400, 3, 400, 3, 400, 3, 400, 3, 400, 3, 400, 3, 400, 3, 400,
	3, 400, 3, 400, 5, 400, 5188, 10, 400, 3, 401, 3, 401, 3, 401, 3, 401,
	3, 401, 3, 401, 3, 401, 3, 401, 3, 401, 3, 401, 3, 401, 3, 401, 3, 401,
	3, 401, 5, 401, 5204, 10, 401, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402,
	3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402, 3, 402,
	5, 402, 5220, 10, 402, 3, 403, 3, 403, 3, 403, 3, 403, 3, 403, 3, 403,
	3, 403, 3, 403, 3, 403, 3, 403, 3, 403, 3, 403, 3, 403, 3, 403, 5, 403,
	5236, 10, 403, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404,
	3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 3, 404, 5, 404, 5252, 10,
	404, 3, 405, 3, 405, 3, 405, 3, 405, 3, 405, 3, 405, 3, 405, 3, 405, 3,
	405, 3, 405, 3, 405, 3, 405, 3, 405, 3, 405, 5, 405, 5268, 10, 405, 3,
	406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3,
	406, 3, 406, 3, 406, 3, 406, 3, 406, 5, 406, 5284, 10, 406, 3, 407, 3,
	407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3,
	407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 5, 407, 5304,
	10, 407, 3, 407, 3, 407, 5, 407, 5308, 10, 407, 3, 407, 3, 407, 5, 407,
	5312, 10, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407,
	3, 407, 5, 407, 5322, 10, 407, 3, 407, 3, 407, 5, 407, 5326, 10, 407, 3,
	407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 5, 407, 5335, 10,
	407, 3, 407, 3, 407, 5, 407, 5339, 10, 407, 3, 407, 3, 407, 3, 407, 3,
	407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3,
	407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3,
	407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3,
	407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3,
	407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3,
	407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 5, 407, 5396, 10,
	407, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3,
	408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3,
	408, 5, 408, 5416, 10, 408, 3, 408, 3, 408, 5, 408, 5420, 10, 408, 3, 408,
	3, 408, 5, 408, 5424, 10, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408,
	3, 408, 3, 408, 3, 408, 5, 408, 5434, 10, 408, 3, 408, 3, 408, 5, 408,
	5438, 10, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408,
	5, 408, 5447, 10, 408, 3, 408, 3, 408, 5, 408, 5451, 10, 408, 3, 408, 3,
	408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3,
	408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3,
	408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3,
	408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3,
	408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3,
	408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 5,
	408, 5508, 10, 408, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3,
	409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3,
	409, 3, 409, 3, 409, 5, 409, 5528, 10, 409, 3, 409, 3, 409, 5, 409, 5532,
	10, 409, 3, 409, 3, 409, 5, 409, 5536, 10, 409, 3, 409, 3, 409, 3, 409,
	3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 5, 409, 5546, 10, 409, 3, 409,
	3, 409, 5, 409, 5550, 10, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409,
	3, 409, 3, 409, 5, 409, 5559, 10, 409, 3, 409, 3, 409, 5, 409, 5563, 10,
	409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3,
	409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3,
	409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3,
	409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3,
	409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3,
	409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3,
	409, 3, 409, 5, 409, 5620, 10, 409, 3, 410, 3, 410, 3, 410, 3, 410, 3,
	410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3,
	410, 3, 410, 3, 410, 3, 410, 3, 410, 5, 410, 5640, 10, 410, 3, 410, 3,
	410, 5, 410, 5644, 10, 410, 3, 410, 3, 410, 5, 410, 5648, 10, 410, 3, 410,
	3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 5, 410, 5658, 10,
	410, 3, 410, 3, 410, 5, 410, 5662, 10, 410, 3, 410, 3, 410, 3, 410, 3,
	410, 3, 410, 3, 410, 3, 410, 5, 410, 5671, 10, 410, 3, 410, 3, 410, 5,
	410, 5675, 10, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3,
	410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3,
	410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3,
	410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3,
	410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3,
	410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3, 410, 3,
	410, 3, 410, 3, 410, 3, 410, 5, 410, 5732, 10, 410, 3, 411, 3, 411, 3,
	411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3,
	411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 5, 411, 5752, 10,
	411, 3, 411, 3, 411, 5, 411, 5756, 10, 411, 3, 411, 3, 411, 5, 411, 5760,
	10, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411,
	5, 411, 5770, 10, 411, 3, 411, 3, 411, 5, 411, 5774, 10, 411, 3, 411, 3,
	411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 5, 411, 5783, 10, 411, 3,
	411, 3, 411, 5, 411, 5787, 10, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3,
	411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3,
	411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3,
	411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3,
	411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3,
	411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3,
	411, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 5, 411, 5844, 10, 411, 3,
	412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3,
	412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 5,
	412, 5864, 10, 412, 3, 412, 3, 412, 5, 412, 5868, 10, 412, 3, 412, 3, 412,
	5, 412, 5872, 10, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412,
	3, 412, 3, 412, 5, 412, 5882, 10, 412, 3, 412, 3, 412, 5, 412, 5886, 10,
	412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 5, 412, 5895,
	10, 412, 3, 412, 3, 412, 5, 412, 5899, 10, 412, 3, 412, 3, 412, 3, 412,
	3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412,
	3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412,
	3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412,
	3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412,
	3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412,
	3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 5, 412, 5956, 10,
	412, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3,
	413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3,
	413, 5, 413, 5976, 10, 413, 3, 413, 3, 413, 5, 413, 5980, 10, 413, 3, 413,
	3, 413, 5, 413, 5984, 10, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413,
	3, 413, 3, 413, 3, 413, 5, 413, 5994, 10, 413, 3, 413, 3, 413, 5, 413,
	5998, 10, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413,
	5, 413, 6007, 10, 413, 3, 413, 3, 413, 5, 413, 6011, 10, 413, 3, 413, 3,
	413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3,
	413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3,
	413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3,
	413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3,
	413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3,
	413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 413, 5,
	413, 6068, 10, 413, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3,
	414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3,
	414, 3, 414, 3, 414, 5, 414, 6088, 10, 414, 3, 414, 3, 414, 5, 414, 6092,
	10, 414, 3, 414, 3, 414, 5, 414, 6096, 10, 414, 3, 414, 3, 414, 3, 414,
	3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 5, 414, 6106, 10, 414, 3, 414,
	3, 414, 5, 414, 6110, 10, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414,
	3, 414, 3, 414, 5, 414, 6119, 10, 414, 3, 414, 3, 414, 5, 414, 6123, 10,
	414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3,
	414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3,
	414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3,
	414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3,
	414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3,
	414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3, 414, 3,
	414, 3, 414, 5, 414, 6180, 10, 414, 3, 415, 3, 415, 3, 415, 3, 416, 3,
	416, 3, 416, 3, 417, 3, 417, 3, 417, 3, 418, 3, 418, 3, 418, 3, 419, 3,
	419, 5, 419, 6196, 10, 419, 3, 420, 3, 420, 5, 420, 6200, 10, 420, 3, 421,
	3, 421, 5, 421, 6204, 10, 421, 3, 422, 3, 422, 5, 422, 6208, 10, 422, 3,
	423, 3, 423, 5, 423, 6212, 10, 423, 3, 423, 3, 423, 3, 424, 3, 424, 5,
	424, 6218, 10, 424, 3, 424, 3, 424, 3, 425, 3, 425, 5, 425, 6224, 10, 425,
	3, 425, 3, 425, 3, 426, 3, 426, 5, 426, 6230, 10, 426, 3, 426, 3, 426,
	3, 427, 3, 427, 5, 427, 6236, 10, 427, 3, 427, 3, 427, 3, 428, 3, 428,
	5, 428, 6242, 10, 428, 3, 428, 3, 428, 3, 429, 3, 429, 5, 429, 6248, 10,
	429, 3, 429, 3, 429, 3, 430, 3, 430, 5, 430, 6254, 10, 430, 3, 430, 3,
	430, 3, 431, 3, 431, 5, 431, 6260, 10, 431, 3, 431, 3, 431, 3, 432, 3,
	432, 5, 432, 6266, 10, 432, 3, 432, 3, 432, 3, 433, 3, 433, 5, 433, 6272,
	10, 433, 3, 433, 3, 433, 3, 434, 3, 434, 5, 434, 6278, 10, 434, 3, 434,
	3, 434, 3, 435, 3, 435, 3, 435, 3, 435, 3, 435, 3, 435, 3, 436, 3, 436,
	3, 436, 3, 436, 3, 436, 3, 436, 3, 437, 3, 437, 3, 437, 3, 437, 3, 437,
	3, 437, 3, 438, 3, 438, 3, 438, 3, 438, 3, 438, 3, 438, 3, 439, 3, 439,
	3, 439, 3, 439, 3, 439, 3, 439, 3, 440, 3, 440, 3, 440, 3, 440, 3, 440,
	3, 440, 3, 441, 3, 441, 3, 441, 3, 441, 3, 441, 3, 441, 3, 442, 3, 442,
	3, 442, 3, 442, 3, 442, 3, 442, 3, 443, 3, 443, 3, 443, 3, 443, 3, 443,
	3, 443, 3, 444, 3, 444, 3, 444, 3, 444, 3, 444, 3, 444, 3, 445, 3, 445,
	3, 445, 3, 445, 3, 445, 3, 445, 3, 446, 3, 446, 3, 446, 3, 446, 3, 446,
	3, 446, 3, 447, 3, 447, 3, 447, 3, 447, 3, 447, 3, 447, 3, 448, 3, 448,
	3, 448, 3, 448, 3, 448, 3, 448, 3, 449, 3, 449, 3, 449, 3, 449, 3, 449,
	3, 449, 3, 450, 3, 450, 3, 450, 3, 450, 3, 450, 3, 450, 3, 451, 3, 451,
	7, 451, 6380, 10, 451, 12, 451, 14, 451, 6383, 11, 451, 3, 451, 3, 451,
	3, 451, 7, 451, 6388, 10, 451, 12, 451, 14, 451, 6391, 11, 451, 3, 451,
	3, 451, 7, 451, 6395, 10, 451, 12, 451, 14, 451, 6398, 11, 451, 3, 451,
	3, 451, 5, 451, 6402, 10, 451, 3, 452, 3, 452, 7, 452, 6406, 10, 452, 12,
	452, 14, 452, 6409, 11, 452, 3, 452, 3, 452, 3, 452, 7, 452, 6414, 10,
	452, 12, 452, 14, 452, 6417, 11, 452, 3, 452, 3, 452, 7, 452, 6421, 10,
	452, 12, 452, 14, 452, 6424, 11, 452, 3, 452, 3, 452, 5, 452, 6428, 10,
	452, 3, 453, 3, 453, 7, 453, 6432, 10, 453, 12, 453, 14, 453, 6435, 11,
	453, 3, 453, 3, 453, 3, 453, 7, 453, 6440, 10, 453, 12, 453, 14, 453, 6443,
	11, 453, 3, 453, 3, 453, 7, 453, 6447, 10, 453, 12, 453, 14, 453, 6450,
	11, 453, 3, 453, 3, 453, 5, 453, 6454, 10, 453, 3, 454, 3, 454, 7, 454,
	6458, 10, 454, 12, 454, 14, 454, 6461, 11, 454, 3, 454, 3, 454, 3, 454,
	7, 454, 6466, 10, 454, 12, 454, 14, 454, 6469, 11, 454, 3, 454, 3, 454,
	7, 454, 6473, 10, 454, 12, 454, 14, 454, 6476, 11, 454, 3, 454, 3, 454,
	5, 454, 6480, 10, 454, 3, 455, 3, 455, 7, 455, 6484, 10, 455, 12, 455,
	14, 455, 6487, 11, 455, 3, 455, 3, 455, 3, 455, 7, 455, 6492, 10, 455,
	12, 455, 14, 455, 6495, 11, 455, 3, 455, 3, 455, 7, 455, 6499, 10, 455,
	12, 455, 14, 455, 6502, 11, 455, 3, 455, 3, 455, 5, 455, 6506, 10, 455,
	3, 456, 3, 456, 7, 456, 6510, 10, 456, 12, 456, 14, 456, 6513, 11, 456,
	3, 456, 3, 456, 3, 456, 7, 456, 6518, 10, 456, 12, 456, 14, 456, 6521,
	11, 456, 3, 456, 3, 456, 7, 456, 6525, 10, 456, 12, 456, 14, 456, 6528,
	11, 456, 3, 456, 3, 456, 5, 456, 6532, 10, 456, 3, 457, 3, 457, 7, 457,
	6536, 10, 457, 12, 457, 14, 457, 6539, 11, 457, 3, 457, 3, 457, 3, 457,
	7, 457, 6544, 10, 457, 12, 457, 14, 457, 6547, 11, 457, 3, 457, 3, 457,
	7, 457, 6551, 10, 457, 12, 457, 14, 457, 6554, 11, 457, 3, 457, 3, 457,
	5, 457, 6558, 10, 457, 3, 458, 3, 458, 7, 458, 6562, 10, 458, 12, 458,
	14, 458, 6565, 11, 458, 3, 458, 3, 458, 3, 458, 7, 458, 6570, 10, 458,
	12, 458, 14, 458, 6573, 11, 458, 3, 458, 3, 458, 7, 458, 6577, 10, 458,
	12, 458, 14, 458, 6580, 11, 458, 3, 458, 3, 458, 5, 458, 6584, 10, 458,
	3, 459, 3, 459, 3, 459, 3, 459, 5, 459, 6590, 10, 459, 3, 460, 3, 460,
	3, 460, 3, 460, 5, 460, 6596, 10, 460, 3, 461, 3, 461, 3, 461, 3, 461,
	5, 461, 6602, 10, 461, 3, 462, 3, 462, 3, 462, 3, 462, 5, 462, 6608, 10,
	462, 3, 463, 3, 463, 3, 463, 3, 463, 5, 463, 6614, 10, 463, 3, 464, 3,
	464, 3, 464, 3, 464, 5, 464, 6620, 10, 464, 3, 465, 3, 465, 3, 465, 3,
	465, 5, 465, 6626, 10, 465, 3, 466, 3, 466, 3, 466, 3, 466, 5, 466, 6632,
	10, 466, 3, 467, 3, 467, 3, 467, 5, 467, 6637, 10, 467, 3, 468, 3, 468,
	3, 468, 5, 468, 6642, 10, 468, 3, 469, 3, 469, 3, 469, 5, 469, 6647, 10,
	469, 3, 470, 3, 470, 3, 470, 5, 470, 6652, 10, 470, 3, 471, 3, 471, 3,
	471, 5, 471, 6657, 10, 471, 3, 472, 3, 472, 3, 472, 5, 472, 6662, 10, 472,
	3, 473, 3, 473, 3, 473, 5, 473, 6667, 10, 473, 3, 474, 3, 474, 3, 474,
	5, 474, 6672, 10, 474, 3, 475, 3, 475, 3, 475, 3, 475, 3, 476, 3, 476,
	3, 476, 3, 476, 3, 477, 3, 477, 3, 477, 3, 477, 3, 478, 3, 478, 3, 478,
	3, 478, 3, 479, 3, 479, 3, 479, 3, 479, 3, 480, 3, 480, 3, 480, 3, 480,
	3, 481, 3, 481, 3, 481, 3, 481, 3, 482, 3, 482, 3, 482, 3, 482, 3, 483,
	3, 483, 5, 483, 6708, 10, 483, 3, 484, 3, 484, 5, 484, 6712, 10, 484, 3,
	485, 3, 485, 5, 485, 6716, 10, 485, 3, 486, 3, 486, 5, 486, 6720, 10, 486,
	3, 487, 3, 487, 5, 487, 6724, 10, 487, 3, 488, 3, 488, 5, 488, 6728, 10,
	488, 3, 489, 3, 489, 5, 489, 6732, 10, 489, 3, 490, 3, 490, 5, 490, 6736,
	10, 490, 3, 491, 3, 491, 3, 491, 3, 491, 3, 492, 3, 492, 3, 492, 3, 492,
	3, 493, 3, 493, 3, 493, 3, 493, 3, 494, 3, 494, 3, 494, 3, 494, 3, 495,
	3, 495, 3, 495, 3, 495, 3, 495, 3, 495, 3, 495, 3, 495, 3, 495, 3, 495,
	3, 495, 3, 495, 3, 495, 5, 495, 6767, 10, 495, 3, 496, 3, 496, 3, 496,
	3, 496, 3, 496, 3, 496, 3, 496, 3, 496, 3, 496, 3, 496, 3, 496, 3, 496,
	3, 496, 5, 496, 6782, 10, 496, 3, 497, 3, 497, 3, 497, 3, 497, 3, 497,
	3, 497, 3, 497, 3, 497, 3, 497, 3, 497, 3, 497, 3, 497, 3, 497, 5, 497,
	6797, 10, 497, 3, 498, 3, 498, 3, 498, 3, 498, 3, 498, 3, 498, 3, 498,
	3, 498, 3, 498, 3, 498, 3, 498, 3, 498, 3, 498, 5, 498, 6812, 10, 498,
	3, 499, 3, 499, 3, 499, 3, 499, 3, 499, 3, 499, 3, 499, 3, 499, 3, 499,
	3, 499, 3, 499, 3, 499, 3, 499, 5, 499, 6827, 10, 499, 3, 500, 3, 500,
	3, 500, 3, 500, 3, 500, 3, 500, 3, 500, 3, 500, 3, 500, 3, 500, 3, 500,
	3, 500, 3, 500, 5, 500, 6842, 10, 500, 3, 501, 3, 501, 3, 501, 3, 501,
	3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501, 3, 501,
	5, 501, 6857, 10, 501, 3, 502, 3, 502, 3, 502, 3, 502, 3, 502, 3, 502,
	3, 502, 3, 502, 3, 502, 3, 502, 3, 502, 3, 502, 3, 502, 5, 502, 6872, 10,
	502, 3, 503, 3, 503, 3, 503, 3, 503, 3, 503, 3, 503, 3, 504, 3, 504, 3,
	504, 3, 504, 3, 504, 3, 504, 3, 505, 3, 505, 3, 505, 3, 505, 3, 505, 3,
	505, 3, 506, 3, 506, 3, 506, 3, 506, 3, 506, 3, 506, 3, 507, 3, 507, 3,
	507, 3, 507, 3, 507, 3, 507, 3, 508, 3, 508, 3, 508, 3, 508, 3, 508, 3,
	508, 3, 509, 3, 509, 3, 509, 3, 509, 3, 509, 3, 509, 3, 510, 3, 510, 3,
	510, 3, 510, 3, 510, 3, 510, 3, 511, 3, 511, 3, 511, 3, 512, 3, 512, 3,
	512, 3, 513, 3, 513, 3, 513, 3, 514, 3, 514, 3, 514, 3, 515, 3, 515, 3,
	515, 3, 516, 3, 516, 3, 516, 3, 517, 3, 517, 3, 517, 3, 518, 3, 518, 3,
	518, 3, 519, 3, 519, 5, 519, 6948, 10, 519, 3, 520, 3, 520, 5, 520, 6952,
	10, 520, 3, 521, 3, 521, 5, 521, 6956, 10, 521, 3, 522, 3, 522, 5, 522,
	6960, 10, 522, 3, 523, 3, 523, 3, 523, 3, 524, 3, 524, 3, 524, 3, 524,
	3, 524, 3, 524, 3, 524, 3, 524, 3, 524, 3, 525, 3, 525, 3, 525, 3, 525,
	3, 525, 3, 525, 3, 525, 3, 525, 3, 525, 3, 526, 3, 526, 3, 526, 3, 526,
	3, 526, 3, 526, 3, 526, 3, 526, 3, 526, 3, 527, 3, 527, 3, 527, 3, 527,
	3, 527, 3, 527, 3, 527, 3, 527, 3, 527, 3, 528, 3, 528, 3, 528, 3, 528,
	3, 528, 3, 528, 3, 528, 3, 528, 3, 528, 3, 528, 3, 528, 3, 528, 3, 528,
	3, 528, 3, 528, 3, 528, 3, 528, 5, 528, 7018, 10, 528, 3, 529, 3, 529,
	3, 529, 3, 529, 3, 529, 3, 529, 3, 529, 3, 529, 3, 529, 3, 529, 3, 529,
	3, 529, 3, 529, 3, 529, 3, 529, 3, 529, 3, 529, 5, 529, 7037, 10, 529,
	3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530,
	3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 3, 530, 5, 530,
	7056, 10, 530, 3, 531, 3, 531, 3, 531, 3, 531, 3, 531, 3, 531, 3, 531,
	3, 531, 3, 531, 3, 531, 3, 531, 3, 531, 3, 531, 3, 531, 3, 531, 3, 531,
	3, 531, 5, 531, 7075, 10, 531, 3, 532, 3, 532, 5, 532, 7079, 10, 532, 3,
	532, 3, 532, 3, 532, 3, 532, 3, 532, 3, 532, 3, 532, 3, 533, 3, 533, 3,
	534, 3, 534, 3, 535, 3, 535, 3, 536, 3, 536, 3, 537, 3, 537, 3, 537, 3,
	537, 3, 537, 3, 537, 3, 537, 3, 537, 3, 537, 3, 537, 5, 537, 7106, 10,
	537, 3, 538, 3, 538, 3, 538, 3, 538, 3, 538, 3, 538, 3, 538, 3, 538, 3,
	538, 3, 538, 5, 538, 7118, 10, 538, 3, 539, 3, 539, 3, 539, 3, 539, 3,
	539, 3, 539, 3, 539, 3, 539, 3, 539, 3, 539, 5, 539, 7130, 10, 539, 3,
	540, 3, 540, 3, 540, 3, 540, 3, 540, 3, 540, 3, 540, 3, 540, 3, 540, 3,
	540, 5, 540, 7142, 10, 540, 3, 541, 3, 541, 3, 541, 3, 541, 3, 541, 3,
	541, 7, 541, 7150, 10, 541, 12, 541, 14, 541, 7153, 11, 541, 3, 542, 3,
	542, 3, 542, 3, 542, 3, 542, 3, 542, 7, 542, 7161, 10, 542, 12, 542, 14,
	542, 7164, 11, 542, 3, 543, 3, 543, 3, 543, 3, 543, 3, 543, 3, 543, 7,
	543, 7172, 10, 543, 12, 543, 14, 543, 7175, 11, 543, 3, 544, 3, 544, 3,
	544, 3, 544, 3, 544, 3, 544, 7, 544, 7183, 10, 544, 12, 544, 14, 544, 7186,
	11, 544, 3, 545, 3, 545, 3, 546, 3, 546, 3, 547, 3, 547, 3, 548, 3, 548,
	3, 549, 3, 549, 3, 550, 3, 550, 3, 551, 3, 551, 3, 552, 3, 552, 3, 553,
	3, 553, 3, 554, 3, 554, 3, 555, 3, 555, 3, 556, 3, 556, 3, 557, 5, 557,
	7213, 10, 557, 3, 558, 5, 558, 7216, 10, 558, 3, 559, 5, 559, 7219, 10,
	559, 3, 560, 5, 560, 7222, 10, 560, 3, 561, 3, 561, 3, 561, 3, 561, 3,
	562, 3, 562, 3, 562, 3, 562, 3, 563, 3, 563, 3, 563, 3, 563, 3, 564, 3,
	564, 3, 564, 3, 564, 3, 565, 3, 565, 3, 565, 3, 565, 3, 566, 3, 566, 3,
	566, 3, 566, 3, 567, 3, 567, 3, 567, 3, 567, 3, 568, 3, 568, 3, 568, 3,
	568, 3, 569, 3, 569, 5, 569, 7258, 10, 569, 3, 570, 3, 570, 5, 570, 7262,
	10, 570, 3, 571, 3, 571, 5, 571, 7266, 10, 571, 3, 572, 3, 572, 5, 572,
	7270, 10, 572, 3, 573, 3, 573, 3, 573, 3, 573, 3, 573, 3, 573, 5, 573,
	7278, 10, 573, 3, 574, 3, 574, 3, 574, 3, 574, 3, 574, 3, 574, 5, 574,
	7286, 10, 574, 3, 575, 3, 575, 3, 575, 3, 575, 3, 575, 3, 575, 3, 575,
	3, 575, 3, 575, 3, 575, 3, 575, 3, 575, 3, 575, 3, 575, 3, 575, 3, 575,
	3, 575, 3, 575, 3, 575, 3, 575, 3, 575, 3, 575, 3, 575, 3, 575, 3, 575,
	3, 575, 3, 575, 3, 575, 5, 575, 7316, 10, 575, 3, 576, 3, 576, 3, 576,
	3, 576, 3, 576, 3, 576, 3, 576, 3, 576, 3, 576, 3, 576, 3, 576, 3, 576,
	3, 576, 3, 576, 3, 576, 3, 576, 3, 576, 3, 576, 3, 576, 3, 576, 3, 576,
	3, 576, 3, 576, 3, 576, 3, 576, 3, 576, 3, 576, 3, 576, 5, 576, 7346, 10,
	576, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3,
	577, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3,
	577, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3, 577, 3,
	577, 3, 577, 5, 577, 7376, 10, 577, 3, 578, 3, 578, 3, 578, 3, 578, 3,
	578, 3, 578, 3, 578, 3, 578, 3, 578, 3, 578, 3, 578, 3, 578, 3, 578, 3,
	578, 3, 578, 3, 578, 3, 578, 3, 578, 3, 578, 3, 578, 3, 578, 3, 578, 3,
	578, 3, 578, 3, 578, 3, 578, 3, 578, 3, 578, 5, 578, 7406, 10, 578, 3,
	579, 3, 579, 3, 580, 3, 580, 3, 580, 3, 580, 3, 580, 3, 580, 3, 580, 3,
	580, 3, 580, 3, 581, 3, 581, 3, 581, 3, 581, 3, 581, 3, 581, 3, 581, 3,
	581, 3, 581, 3, 582, 3, 582, 3, 582, 3, 582, 3, 582, 3, 582, 3, 582, 3,
	582, 3, 582, 3, 583, 3, 583, 3, 583, 3, 583, 3, 583, 3, 583, 3, 583, 3,
	583, 3, 583, 3, 584, 3, 584, 3, 584, 3, 584, 3, 584, 3, 584, 3, 584, 3,
	584, 3, 584, 3, 584, 3, 585, 3, 585, 3, 585, 3, 585, 3, 585, 3, 585, 3,
	585, 3, 585, 3, 585, 3, 585, 3, 586, 3, 586, 3, 586, 3, 586, 3, 586, 3,
	586, 3, 586, 3, 586, 3, 586, 3, 586, 3, 587, 3, 587, 3, 587, 3, 587, 3,
	587, 3, 587, 3, 587, 3, 587, 3, 587, 3, 587, 3, 588, 3, 588, 3, 588, 3,
	588, 3, 588, 3, 588, 3, 588, 3, 588, 3, 588, 3, 588, 3, 588, 3, 588, 3,
	588, 3, 588, 3, 588, 3, 588, 3, 588, 3, 588, 3, 588, 5, 588, 7505, 10,
	588, 3, 589, 3, 589, 3, 589, 3, 589, 3, 589, 3, 589, 3, 589, 3, 589, 3,
	589, 3, 589, 3, 589, 3, 589, 3, 589, 3, 589, 3, 589, 3, 589, 3, 589, 3,
	589, 3, 589, 5, 589, 7526, 10, 589, 3, 590, 3, 590, 3, 590, 3, 590, 3,
	590, 3, 590, 3, 590, 3, 590, 3, 590, 3, 590, 3, 590, 3, 590, 3, 590, 3,
	590, 3, 590, 3, 590, 3, 590, 3, 590, 3, 590, 5, 590, 7547, 10, 590, 3,
	591, 3, 591, 3, 591, 3, 591, 3, 591, 3, 591, 3, 591, 3, 591, 3, 591, 3,
	591, 3, 591, 3, 591, 3, 591, 3, 591, 3, 591, 3, 591, 3, 591, 3, 591, 3,
	591, 5, 591, 7568, 10, 591, 3, 592, 3, 592, 3, 592, 5, 592, 7573, 10, 592,
	3, 592, 3, 592, 3, 592, 3, 592, 3, 592, 3, 592, 3, 592, 3, 593, 3, 593,
	3, 594, 3, 594, 3, 594, 5, 594, 7587, 10, 594, 3, 594, 5, 594, 7590, 10,
	594, 3, 595, 3, 595, 3, 595, 5, 595, 7595, 10, 595, 3, 595, 5, 595, 7598,
	10, 595, 3, 596, 3, 596, 3, 596, 5, 596, 7603, 10, 596, 3, 596, 5, 596,
	7606, 10, 596, 3, 597, 3, 597, 3, 597, 5, 597, 7611, 10, 597, 3, 597, 5,
	597, 7614, 10, 597, 3, 598, 3, 598, 3, 598, 3, 598, 3, 598, 3, 598, 3,
	598, 3, 598, 3, 598, 3, 598, 3, 599, 3, 599, 3, 599, 3, 599, 3, 599, 3,
	599, 3, 599, 3, 599, 3, 599, 3, 599, 3, 600, 3, 600, 3, 600, 3, 600, 3,
	600, 3, 600, 3, 600, 3, 600, 3, 600, 3, 600, 3, 601, 3, 601, 3, 601, 3,
	601, 3, 601, 3, 601, 3, 601, 3, 601, 3, 601, 3, 601, 3, 602, 3, 602, 3,
	602, 3, 602, 3, 602, 3, 602, 3, 602, 3, 602, 3, 602, 3, 602, 3, 602, 3,
	603, 3, 603, 3, 603, 3, 603, 3, 603, 3, 603, 3, 603, 3, 603, 3, 603, 3,
	603, 3, 603, 3, 604, 3, 604, 3, 604, 3, 604, 3, 604, 3, 604, 3, 604, 3,
	604, 3, 604, 3, 604, 3, 604, 3, 605, 3, 605, 3, 605, 3, 605, 3, 605, 3,
	605, 3, 605, 3, 605, 3, 605, 3, 605, 3, 605, 3, 606, 3, 606, 3, 606, 3,
	606, 3, 606, 3, 606, 3, 606, 3, 606, 3, 606, 3, 606, 3, 606, 3, 606, 3,
	606, 3, 606, 3, 606, 3, 606, 3, 606, 3, 606, 3, 606, 3, 606, 3, 606, 5,
	606, 7721, 10, 606, 3, 607, 3, 607, 3, 607, 3, 607, 3, 607, 3, 607, 3,
	607, 3, 607, 3, 607, 3, 607, 3, 607, 3, 607, 3, 607, 3, 607, 3, 607, 3,
	607, 3, 607, 3, 607, 3, 607, 3, 607, 3, 607, 5, 607, 7744, 10, 607, 3,
	608, 3, 608, 3, 608, 3, 608, 3, 608, 3, 608, 3, 608, 3, 608, 3, 608, 3,
	608, 3, 608, 3, 608, 3, 608, 3, 608, 3, 608, 3, 608, 3, 608, 3, 608, 3,
	608, 3, 608, 3, 608, 5, 608, 7767, 10, 608, 3, 609, 3, 609, 3, 609, 3,
	609, 3, 609, 3, 609, 3, 609, 3, 609, 3, 609, 3, 609, 3, 609, 3, 609, 3,
	609, 3, 609, 3, 609, 3, 609, 3, 609, 3, 609, 3, 609, 3, 609, 3, 609, 5,
	609, 7790, 10, 609, 3, 610, 3, 610, 3, 610, 3, 610, 5, 610, 7796, 10, 610,
	3, 610, 3, 610, 3, 610, 3, 610, 3, 610, 3, 610, 3, 610, 3, 611, 3, 611,
	3, 612, 3, 612, 3, 612, 3, 612, 3, 613, 3, 613, 3, 613, 3, 613, 3, 614,
	3, 614, 3, 614, 3, 614, 3, 615, 3, 615, 3, 615, 3, 615, 3, 616, 3, 616,
	3, 616, 3, 616, 3, 616, 3, 616, 5, 616, 7829, 10, 616, 3, 617, 3, 617,
	3, 617, 3, 617, 3, 617, 3, 617, 5, 617, 7837, 10, 617, 3, 618, 3, 618,
	3, 618, 3, 618, 3, 618, 3, 618, 5, 618, 7845, 10, 618, 3, 619, 3, 619,
	3, 619, 3, 619, 3, 619, 3, 619, 5, 619, 7853, 10, 619, 3, 620, 3, 620,
	5, 620, 7857, 10, 620, 3, 620, 3, 620, 3, 621, 3, 621, 5, 621, 7863, 10,
	621, 3, 621, 3, 621, 3, 622, 3, 622, 5, 622, 7869, 10, 622, 3, 622, 3,
	622, 3, 623, 3, 623, 5, 623, 7875, 10, 623, 3, 623, 3, 623, 3, 624, 5,
	624, 7880, 10, 624, 3, 624, 3, 624, 5, 624, 7884, 10, 624, 3, 624, 3, 624,
	3, 625, 5, 625, 7889, 10, 625, 3, 625, 3, 625, 5, 625, 7893, 10, 625, 3,
	625, 3, 625, 3, 626, 5, 626, 7898, 10, 626, 3, 626, 3, 626, 5, 626, 7902,
	10, 626, 3, 626, 3, 626, 3, 627, 5, 627, 7907, 10, 627, 3, 627, 3, 627,
	5, 627, 7911, 10, 627, 3, 627, 3, 627, 3, 628, 3, 628, 3, 628, 3, 629,
	3, 629, 3, 629, 3, 630, 3, 630, 3, 630, 3, 631, 3, 631, 3, 631, 3, 632,
	6, 632, 7928, 10, 632, 13, 632, 14, 632, 7929, 3, 633, 6, 633, 7933, 10,
	633, 13, 633, 14, 633, 7934, 3, 634, 6, 634, 7938, 10, 634, 13, 634, 14,
	634, 7939, 3, 635, 6, 635, 7943, 10, 635, 13, 635, 14, 635, 7944, 3, 636,
	5, 636, 7948, 10, 636, 3, 636, 3, 636, 5, 636, 7952, 10, 636, 3, 637, 5,
	637, 7955, 10, 637, 3, 637, 3, 637, 5, 637, 7959, 10, 637, 3, 638, 5, 638,
	7962, 10, 638, 3, 638, 3, 638, 5, 638, 7966, 10, 638, 3, 639, 5, 639, 7969,
	10, 639, 3, 639, 3, 639, 5, 639, 7973, 10, 639, 3, 640, 3, 640, 3, 640,
	3, 640, 3, 640, 3, 640, 3, 640, 3, 640, 3, 640, 3, 640, 3, 641, 3, 641,
	3, 641, 3, 641, 3, 641, 3, 641, 3, 641, 3, 641, 3, 641, 3, 641, 3, 642,
	3, 642, 3, 642, 3, 642, 3, 642, 3, 642, 3, 642, 3, 642, 3, 642, 3, 642,
	3, 643, 3, 643, 3, 643, 3, 643, 3, 643, 3, 643, 3, 643, 3, 643, 3, 643,
	3, 643, 3, 644, 3, 644, 3, 644, 3, 644, 3, 644, 3, 644, 3, 644, 3, 644,
	3, 644, 3, 644, 3, 644, 3, 644, 3, 644, 3, 644, 3, 644, 3, 644, 3, 644,
	3, 644, 3, 644, 5, 644, 8034, 10, 644, 3, 645, 3, 645, 3, 645, 3, 645,
	3, 645, 3, 645, 3, 645, 3, 645, 3, 645, 3, 645, 3, 645, 3, 645, 3, 645,
	3, 645, 3, 645, 3, 645, 3, 645, 3, 645, 3, 645, 5, 645, 8055, 10, 645,
	3, 646, 3, 646, 3, 646, 3, 646, 3, 646, 3, 646, 3, 646, 3, 646, 3, 646,
	3, 646, 3, 646, 3, 646, 3, 646, 3, 646, 3, 646, 3, 646, 3, 646, 3, 646,
	3, 646, 5, 646, 8076, 10, 646, 3, 647, 3, 647, 3, 647, 3, 647, 3, 647,
	3, 647, 3, 647, 3, 647, 3, 647, 3, 647, 3, 647, 3, 647, 3, 647, 3, 647,
	3, 647, 3, 647, 3, 647, 3, 647, 3, 647, 5, 647, 8097, 10, 647, 3, 648,
	3, 648, 3, 648, 5, 648, 8102, 10, 648, 3, 648, 3, 648, 3, 648, 3, 648,
	3, 648, 3, 648, 3, 648, 3, 649, 3, 649, 3, 649, 3, 649, 3, 649, 3, 649,
	3, 649, 3, 649, 3, 649, 3, 650, 3, 650, 3, 650, 3, 650, 3, 650, 3, 650,
	3, 650, 3, 650, 3, 650, 3, 651, 3, 651, 3, 651, 3, 651, 3, 651, 3, 651,
	3, 651, 3, 651, 3, 651, 3, 652, 3, 652, 3, 652, 3, 652, 3, 652, 3, 652,
	3, 652, 3, 652, 3, 652, 3, 653, 3, 653, 3, 654, 3, 654, 3, 654, 3, 655,
	3, 655, 3, 655, 3, 656, 3, 656, 3, 656, 3, 656, 3, 656, 3, 656, 3, 656,
	3, 656, 3, 656, 5, 656, 8164, 10, 656, 3, 657, 3, 657, 3, 657, 3, 657,
	3, 657, 3, 657, 3, 657, 3, 657, 3, 657, 5, 657, 8175, 10, 657, 3, 658,
	3, 658, 3, 658, 3, 658, 3, 658, 3, 658, 3, 658, 3, 658, 3, 658, 5, 658,
	8186, 10, 658, 3, 659, 3, 659, 3, 659, 3, 659, 3, 659, 3, 659, 3, 659,
	3, 659, 3, 659, 5, 659, 8197, 10, 659, 3, 660, 3, 660, 3, 660, 3, 660,
	3, 660, 3, 660, 3, 660, 3, 660, 3, 660, 5, 660, 8208, 10, 660, 3, 661,
	3, 661, 3, 661, 3, 661, 3, 661, 3, 661, 3, 661, 3, 661, 3, 661, 5, 661,
	8219, 10, 661, 3, 662, 3, 662, 3, 662, 3, 662, 3, 662, 3, 662, 3, 662,
	3, 662, 3, 662, 5, 662, 8230, 10, 662, 3, 663, 3, 663, 3, 663, 3, 663,
	3, 663, 3, 663, 3, 663, 3, 663, 3, 663, 5, 663, 8241, 10, 663, 3, 664,
	3, 664, 3, 665, 3, 665, 3, 666, 3, 666, 3, 666, 3, 667, 3, 667, 3, 667,
	3, 668, 3, 668, 3, 668, 3, 669, 3, 669, 3, 669, 3, 670, 5, 670, 8260, 10,
	670, 3, 671, 3, 671, 3, 672, 5, 672, 8265, 10, 672, 3, 673, 6, 673, 8268,
	10, 673, 13, 673, 14, 673, 8269, 3, 674, 3, 674, 3, 674, 5, 674, 8275,
	10, 674, 3, 675, 3, 675, 3, 675, 3, 675, 3, 675, 3, 675, 3, 675, 3, 675,
	3, 675, 5, 675, 8286, 10, 675, 3, 676, 3, 676, 3, 676, 3, 676, 3, 676,
	3, 676, 3, 676, 3, 676, 3, 676, 3, 676, 3, 676, 5, 676, 8299, 10, 676,
	3, 677, 3, 677, 3, 678, 3, 678, 3, 678, 3, 678, 3, 679, 3, 679, 3, 679,
	3, 679, 3, 679, 5, 679, 8312, 10, 679, 3, 679, 3, 679, 5, 679, 8316, 10,
	679, 3, 680, 3, 680, 3, 680, 3, 681, 3, 681, 3, 681, 3, 681, 3, 681, 3,
	681, 7, 681, 8327, 10, 681, 12, 681, 14, 681, 8330, 11, 681, 3, 682, 3,
	682, 3, 682, 3, 682, 5, 682, 8336, 10, 682, 3, 683, 3, 683, 3, 684, 3,
	684, 3, 685, 3, 685, 3, 685, 3, 685, 3, 685, 3, 685, 3, 685, 3, 685, 5,
	685, 8350, 10, 685, 3, 685, 3, 685, 3, 685, 3, 685, 3, 685, 3, 685, 3,
	685, 3, 685, 3, 685, 3, 685, 3, 685, 3, 685, 3, 685, 3, 685, 3, 685, 3,
	685, 3, 685, 3, 685, 5, 685, 8370, 10, 685, 3, 686, 3, 686, 3, 686, 3,
	686, 3, 686, 5, 686, 8377, 10, 686, 3, 686, 3, 686, 5, 686, 8381, 10, 686,
	3, 687, 3, 687, 3, 687, 3, 687, 3, 687, 3, 687, 7, 687, 8389, 10, 687,
	12, 687, 14, 687, 8392, 11, 687, 3, 688, 3, 688, 3, 688, 3, 688, 5, 688,
	8398, 10, 688, 3, 689, 3, 689, 3, 689, 3, 689, 3, 689, 3, 689, 3, 690,
	3, 690, 3, 690, 3, 690, 3, 690, 3, 690, 3, 690, 2, 125, 62, 64, 66, 68,
	70, 210, 212, 214, 216, 238, 240, 242, 244, 262, 264, 266, 268, 302, 304,
	306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334,
	336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364,
	366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394,
	396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424,
	426, 428, 430, 432, 434, 436, 472, 474, 476, 478, 480, 482, 484, 486, 626,
	628, 630, 632, 634, 636, 638, 640, 666, 668, 670, 672, 674, 676, 678, 680,
	730, 732, 734, 736, 738, 740, 742, 744, 1080, 1082, 1084, 1086, 1360, 1372,
	691, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36,
	38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72,
	74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106,
	108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136,
	138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166,
	168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196,
	198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226,
	228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256,
	258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286,
	288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316,
	318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346,
	348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376,
	378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406,
	408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436,
	438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466,
	468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496,
	498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526,
	528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556,
	558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586,
	588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616,
	618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646,
	648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676,
	678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706,
	708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736,
	738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766,
	768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796,
	798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826,
	828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856,
	858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886,
	888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916,
	918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946,
	948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976,
	978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004,
	1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028,
	1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052,
	1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076,
	1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100,
	1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124,
	1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148,
	1150, 1152, 1154, 1156, 1158, 1160, 1162, 1164, 1166, 1168, 1170, 1172,
	1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 1196,
	1198, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 1214, 1216, 1218, 1220,
	1222, 1224, 1226, 1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244,
	1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268,
	1270, 1272, 1274, 1276, 1278, 1280, 1282, 1284, 1286, 1288, 1290, 1292,
	1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316,
	1318, 1320, 1322, 1324, 1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340,
	1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1358, 1360, 1362, 1364,
	1366, 1368, 1370, 1372, 1374, 1376, 1378, 2, 11, 6, 2, 96, 97, 99, 99,
	102, 102, 108, 109, 7, 2, 96, 97, 99, 99, 102, 102, 108, 108, 131, 131,
	4, 2, 4, 5, 139, 139, 4, 2, 5, 5, 139, 139, 4, 2, 4, 4, 139, 139, 4, 2,
	110, 112, 117, 117, 5, 2, 103, 103, 112, 112, 117, 117, 3, 2, 49, 60, 3,
	2, 62, 63, 2, 8887, 2, 1380, 3, 2, 2, 2, 4, 1388, 3, 2, 2, 2, 6, 1396,
	3, 2, 2, 2, 8, 1398, 3, 2, 2, 2, 10, 1400, 3, 2, 2, 2, 12, 1409, 3, 2,
	2, 2, 14, 1411, 3, 2, 2, 2, 16, 1413, 3, 2, 2, 2, 18, 1415, 3, 2, 2, 2,
	20, 1417, 3, 2, 2, 2, 22, 1419, 3, 2, 2, 2, 24, 1421, 3, 2, 2, 2, 26, 1423,
	3, 2, 2, 2, 28, 1425, 3, 2, 2, 2, 30, 1427, 3, 2, 2, 2, 32, 1429, 3, 2,
	2, 2, 34, 1431, 3, 2, 2, 2, 36, 1446, 3, 2, 2, 2, 38, 1461, 3, 2, 2, 2,
	40, 1476, 3, 2, 2, 2, 42, 1491, 3, 2, 2, 2, 44, 1527, 3, 2, 2, 2, 46, 1563,
	3, 2, 2, 2, 48, 1599, 3, 2, 2, 2, 50, 1635, 3, 2, 2, 2, 52, 1637, 3, 2,
	2, 2, 54, 1656, 3, 2, 2, 2, 56, 1675, 3, 2, 2, 2, 58, 1694, 3, 2, 2, 2,
	60, 1713, 3, 2, 2, 2, 62, 1724, 3, 2, 2, 2, 64, 1752, 3, 2, 2, 2, 66, 1780,
	3, 2, 2, 2, 68, 1808, 3, 2, 2, 2, 70, 1827, 3, 2, 2, 2, 72, 1837, 3, 2,
	2, 2, 74, 1840, 3, 2, 2, 2, 76, 1843, 3, 2, 2, 2, 78, 1846, 3, 2, 2, 2,
	80, 1860, 3, 2, 2, 2, 82, 1873, 3, 2, 2, 2, 84, 1886, 3, 2, 2, 2, 86, 1899,
	3, 2, 2, 2, 88, 1904, 3, 2, 2, 2, 90, 1910, 3, 2, 2, 2, 92, 1916, 3, 2,
	2, 2, 94, 1922, 3, 2, 2, 2, 96, 1934, 3, 2, 2, 2, 98, 1945, 3, 2, 2, 2,
	100, 1956, 3, 2, 2, 2, 102, 1967, 3, 2, 2, 2, 104, 1971, 3, 2, 2, 2, 106,
	1975, 3, 2, 2, 2, 108, 1979, 3, 2, 2, 2, 110, 1983, 3, 2, 2, 2, 112, 1985,
	3, 2, 2, 2, 114, 1987, 3, 2, 2, 2, 116, 1991, 3, 2, 2, 2, 118, 1995, 3,
	2, 2, 2, 120, 1999, 3, 2, 2, 2, 122, 2003, 3, 2, 2, 2, 124, 2006, 3, 2,
	2, 2, 126, 2009, 3, 2, 2, 2, 128, 2012, 3, 2, 2, 2, 130, 2015, 3, 2, 2,
	2, 132, 2018, 3, 2, 2, 2, 134, 2021, 3, 2, 2, 2, 136, 2024, 3, 2, 2, 2,
	138, 2027, 3, 2, 2, 2, 140, 2030, 3, 2, 2, 2, 142, 2033, 3, 2, 2, 2, 144,
	2036, 3, 2, 2, 2, 146, 2041, 3, 2, 2, 2, 148, 2045, 3, 2, 2, 2, 150, 2049,
	3, 2, 2, 2, 152, 2053, 3, 2, 2, 2, 154, 2057, 3, 2, 2, 2, 156, 2061, 3,
	2, 2, 2, 158, 2065, 3, 2, 2, 2, 160, 2069, 3, 2, 2, 2, 162, 2071, 3, 2,
	2, 2, 164, 2075, 3, 2, 2, 2, 166, 2079, 3, 2, 2, 2, 168, 2083, 3, 2, 2,
	2, 170, 2087, 3, 2, 2, 2, 172, 2091, 3, 2, 2, 2, 174, 2095, 3, 2, 2, 2,
	176, 2099, 3, 2, 2, 2, 178, 2106, 3, 2, 2, 2, 180, 2114, 3, 2, 2, 2, 182,
	2122, 3, 2, 2, 2, 184, 2130, 3, 2, 2, 2, 186, 2138, 3, 2, 2, 2, 188, 2146,
	3, 2, 2, 2, 190, 2154, 3, 2, 2, 2, 192, 2162, 3, 2, 2, 2, 194, 2169, 3,
	2, 2, 2, 196, 2175, 3, 2, 2, 2, 198, 2181, 3, 2, 2, 2, 200, 2187, 3, 2,
	2, 2, 202, 2193, 3, 2, 2, 2, 204, 2199, 3, 2, 2, 2, 206, 2205, 3, 2, 2,
	2, 208, 2211, 3, 2, 2, 2, 210, 2223, 3, 2, 2, 2, 212, 2248, 3, 2, 2, 2,
	214, 2273, 3, 2, 2, 2, 216, 2298, 3, 2, 2, 2, 218, 2323, 3, 2, 2, 2, 220,
	2333, 3, 2, 2, 2, 222, 2343, 3, 2, 2, 2, 224, 2353, 3, 2, 2, 2, 226, 2355,
	3, 2, 2, 2, 228, 2357, 3, 2, 2, 2, 230, 2364, 3, 2, 2, 2, 232, 2369, 3,
	2, 2, 2, 234, 2374, 3, 2, 2, 2, 236, 2379, 3, 2, 2, 2, 238, 2384, 3, 2,
	2, 2, 240, 2406, 3, 2, 2, 2, 242, 2428, 3, 2, 2, 2, 244, 2450, 3, 2, 2,
	2, 246, 2469, 3, 2, 2, 2, 248, 2472, 3, 2, 2, 2, 250, 2475, 3, 2, 2, 2,
	252, 2478, 3, 2, 2, 2, 254, 2489, 3, 2, 2, 2, 256, 2499, 3, 2, 2, 2, 258,
	2509, 3, 2, 2, 2, 260, 2519, 3, 2, 2, 2, 262, 2521, 3, 2, 2, 2, 264, 2538,
	3, 2, 2, 2, 266, 2555, 3, 2, 2, 2, 268, 2572, 3, 2, 2, 2, 270, 2591, 3,
	2, 2, 2, 272, 2595, 3, 2, 2, 2, 274, 2599, 3, 2, 2, 2, 276, 2603, 3, 2,
	2, 2, 278, 2616, 3, 2, 2, 2, 280, 2629, 3, 2, 2, 2, 282, 2642, 3, 2, 2,
	2, 284, 2655, 3, 2, 2, 2, 286, 2672, 3, 2, 2, 2, 288, 2689, 3, 2, 2, 2,
	290, 2707, 3, 2, 2, 2, 292, 2725, 3, 2, 2, 2, 294, 2732, 3, 2, 2, 2, 296,
	2739, 3, 2, 2, 2, 298, 2746, 3, 2, 2, 2, 300, 2753, 3, 2, 2, 2, 302, 2755,
	3, 2, 2, 2, 304, 2766, 3, 2, 2, 2, 306, 2777, 3, 2, 2, 2, 308, 2788, 3,
	2, 2, 2, 310, 2799, 3, 2, 2, 2, 312, 2813, 3, 2, 2, 2, 314, 2827, 3, 2,
	2, 2, 316, 2841, 3, 2, 2, 2, 318, 2855, 3, 2, 2, 2, 320, 2872, 3, 2, 2,
	2, 322, 2889, 3, 2, 2, 2, 324, 2906, 3, 2, 2, 2, 326, 2923, 3, 2, 2, 2,
	328, 2952, 3, 2, 2, 2, 330, 2974, 3, 2, 2, 2, 332, 3003, 3, 2, 2, 2, 334,
	3025, 3, 2, 2, 2, 336, 3054, 3, 2, 2, 2, 338, 3076, 3, 2, 2, 2, 340, 3105,
	3, 2, 2, 2, 342, 3127, 3, 2, 2, 2, 344, 3147, 3, 2, 2, 2, 346, 3167, 3,
	2, 2, 2, 348, 3187, 3, 2, 2, 2, 350, 3207, 3, 2, 2, 2, 352, 3227, 3, 2,
	2, 2, 354, 3247, 3, 2, 2, 2, 356, 3267, 3, 2, 2, 2, 358, 3287, 3, 2, 2,
	2, 360, 3298, 3, 2, 2, 2, 362, 3309, 3, 2, 2, 2, 364, 3320, 3, 2, 2, 2,
	366, 3331, 3, 2, 2, 2, 368, 3342, 3, 2, 2, 2, 370, 3353, 3, 2, 2, 2, 372,
	3364, 3, 2, 2, 2, 374, 3375, 3, 2, 2, 2, 376, 3386, 3, 2, 2, 2, 378, 3397,
	3, 2, 2, 2, 380, 3408, 3, 2, 2, 2, 382, 3419, 3, 2, 2, 2, 384, 3430, 3,
	2, 2, 2, 386, 3441, 3, 2, 2, 2, 388, 3452, 3, 2, 2, 2, 390, 3463, 3, 2,
	2, 2, 392, 3474, 3, 2, 2, 2, 394, 3485, 3, 2, 2, 2, 396, 3496, 3, 2, 2,
	2, 398, 3507, 3, 2, 2, 2, 400, 3518, 3, 2, 2, 2, 402, 3529, 3, 2, 2, 2,
	404, 3540, 3, 2, 2, 2, 406, 3551, 3, 2, 2, 2, 408, 3562, 3, 2, 2, 2, 410,
	3573, 3, 2, 2, 2, 412, 3584, 3, 2, 2, 2, 414, 3595, 3, 2, 2, 2, 416, 3606,
	3, 2, 2, 2, 418, 3617, 3, 2, 2, 2, 420, 3628, 3, 2, 2, 2, 422, 3639, 3,
	2, 2, 2, 424, 3650, 3, 2, 2, 2, 426, 3661, 3, 2, 2, 2, 428, 3672, 3, 2,
	2, 2, 430, 3683, 3, 2, 2, 2, 432, 3694, 3, 2, 2, 2, 434, 3705, 3, 2, 2,
	2, 436, 3716, 3, 2, 2, 2, 438, 3734, 3, 2, 2, 2, 440, 3743, 3, 2, 2, 2,
	442, 3752, 3, 2, 2, 2, 444, 3761, 3, 2, 2, 2, 446, 3770, 3, 2, 2, 2, 448,
	3779, 3, 2, 2, 2, 450, 3788, 3, 2, 2, 2, 452, 3797, 3, 2, 2, 2, 454, 3799,
	3, 2, 2, 2, 456, 3812, 3, 2, 2, 2, 458, 3825, 3, 2, 2, 2, 460, 3839, 3,
	2, 2, 2, 462, 3853, 3, 2, 2, 2, 464, 3866, 3, 2, 2, 2, 466, 3879, 3, 2,
	2, 2, 468, 3893, 3, 2, 2, 2, 470, 3907, 3, 2, 2, 2, 472, 3909, 3, 2, 2,
	2, 474, 3920, 3, 2, 2, 2, 476, 3931, 3, 2, 2, 2, 478, 3942, 3, 2, 2, 2,
	480, 3953, 3, 2, 2, 2, 482, 3964, 3, 2, 2, 2, 484, 3975, 3, 2, 2, 2, 486,
	3986, 3, 2, 2, 2, 488, 4010, 3, 2, 2, 2, 490, 4025, 3, 2, 2, 2, 492, 4040,
	3, 2, 2, 2, 494, 4055, 3, 2, 2, 2, 496, 4071, 3, 2, 2, 2, 498, 4087, 3,
	2, 2, 2, 500, 4103, 3, 2, 2, 2, 502, 4119, 3, 2, 2, 2, 504, 4124, 3, 2,
	2, 2, 506, 4129, 3, 2, 2, 2, 508, 4134, 3, 2, 2, 2, 510, 4139, 3, 2, 2,
	2, 512, 4145, 3, 2, 2, 2, 514, 4151, 3, 2, 2, 2, 516, 4157, 3, 2, 2, 2,
	518, 4163, 3, 2, 2, 2, 520, 4169, 3, 2, 2, 2, 522, 4175, 3, 2, 2, 2, 524,
	4181, 3, 2, 2, 2, 526, 4187, 3, 2, 2, 2, 528, 4191, 3, 2, 2, 2, 530, 4195,
	3, 2, 2, 2, 532, 4199, 3, 2, 2, 2, 534, 4203, 3, 2, 2, 2, 536, 4207, 3,
	2, 2, 2, 538, 4211, 3, 2, 2, 2, 540, 4215, 3, 2, 2, 2, 542, 4219, 3, 2,
	2, 2, 544, 4221, 3, 2, 2, 2, 546, 4223, 3, 2, 2, 2, 548, 4225, 3, 2, 2,
	2, 550, 4227, 3, 2, 2, 2, 552, 4229, 3, 2, 2, 2, 554, 4231, 3, 2, 2, 2,
	556, 4233, 3, 2, 2, 2, 558, 4235, 3, 2, 2, 2, 560, 4237, 3, 2, 2, 2, 562,
	4243, 3, 2, 2, 2, 564, 4249, 3, 2, 2, 2, 566, 4255, 3, 2, 2, 2, 568, 4261,
	3, 2, 2, 2, 570, 4267, 3, 2, 2, 2, 572, 4273, 3, 2, 2, 2, 574, 4279, 3,
	2, 2, 2, 576, 4286, 3, 2, 2, 2, 578, 4291, 3, 2, 2, 2, 580, 4296, 3, 2,
	2, 2, 582, 4301, 3, 2, 2, 2, 584, 4306, 3, 2, 2, 2, 586, 4311, 3, 2, 2,
	2, 588, 4316, 3, 2, 2, 2, 590, 4321, 3, 2, 2, 2, 592, 4327, 3, 2, 2, 2,
	594, 4331, 3, 2, 2, 2, 596, 4335, 3, 2, 2, 2, 598, 4339, 3, 2, 2, 2, 600,
	4343, 3, 2, 2, 2, 602, 4347, 3, 2, 2, 2, 604, 4351, 3, 2, 2, 2, 606, 4355,
	3, 2, 2, 2, 608, 4357, 3, 2, 2, 2, 610, 4361, 3, 2, 2, 2, 612, 4365, 3,
	2, 2, 2, 614, 4369, 3, 2, 2, 2, 616, 4373, 3, 2, 2, 2, 618, 4377, 3, 2,
	2, 2, 620, 4381, 3, 2, 2, 2, 622, 4385, 3, 2, 2, 2, 624, 4389, 3, 2, 2,
	2, 626, 4391, 3, 2, 2, 2, 628, 4402, 3, 2, 2, 2, 630, 4413, 3, 2, 2, 2,
	632, 4424, 3, 2, 2, 2, 634, 4435, 3, 2, 2, 2, 636, 4446, 3, 2, 2, 2, 638,
	4457, 3, 2, 2, 2, 640, 4468, 3, 2, 2, 2, 642, 4486, 3, 2, 2, 2, 644, 4495,
	3, 2, 2, 2, 646, 4504, 3, 2, 2, 2, 648, 4513, 3, 2, 2, 2, 650, 4522, 3,
	2, 2, 2, 652, 4531, 3, 2, 2, 2, 654, 4540, 3, 2, 2, 2, 656, 4549, 3, 2,
	2, 2, 658, 4551, 3, 2, 2, 2, 660, 4555, 3, 2, 2, 2, 662, 4559, 3, 2, 2,
	2, 664, 4563, 3, 2, 2, 2, 666, 4567, 3, 2, 2, 2, 668, 4578, 3, 2, 2, 2,
	670, 4589, 3, 2, 2, 2, 672, 4600, 3, 2, 2, 2, 674, 4611, 3, 2, 2, 2, 676,
	4622, 3, 2, 2, 2, 678, 4633, 3, 2, 2, 2, 680, 4644, 3, 2, 2, 2, 682, 4662,
	3, 2, 2, 2, 684, 4671, 3, 2, 2, 2, 686, 4680, 3, 2, 2, 2, 688, 4689, 3,
	2, 2, 2, 690, 4698, 3, 2, 2, 2, 692, 4707, 3, 2, 2, 2, 694, 4716, 3, 2,
	2, 2, 696, 4725, 3, 2, 2, 2, 698, 4729, 3, 2, 2, 2, 700, 4733, 3, 2, 2,
	2, 702, 4737, 3, 2, 2, 2, 704, 4741, 3, 2, 2, 2, 706, 4761, 3, 2, 2, 2,
	708, 4781, 3, 2, 2, 2, 710, 4801, 3, 2, 2, 2, 712, 4821, 3, 2, 2, 2, 714,
	4846, 3, 2, 2, 2, 716, 4871, 3, 2, 2, 2, 718, 4896, 3, 2, 2, 2, 720, 4921,
	3, 2, 2, 2, 722, 4923, 3, 2, 2, 2, 724, 4926, 3, 2, 2, 2, 726, 4929, 3,
	2, 2, 2, 728, 4932, 3, 2, 2, 2, 730, 4935, 3, 2, 2, 2, 732, 4946, 3, 2,
	2, 2, 734, 4957, 3, 2, 2, 2, 736, 4968, 3, 2, 2, 2, 738, 4979, 3, 2, 2,
	2, 740, 4990, 3, 2, 2, 2, 742, 5001, 3, 2, 2, 2, 744, 5012, 3, 2, 2, 2,
	746, 5024, 3, 2, 2, 2, 748, 5029, 3, 2, 2, 2, 750, 5034, 3, 2, 2, 2, 752,
	5039, 3, 2, 2, 2, 754, 5048, 3, 2, 2, 2, 756, 5055, 3, 2, 2, 2, 758, 5062,
	3, 2, 2, 2, 760, 5069, 3, 2, 2, 2, 762, 5076, 3, 2, 2, 2, 764, 5083, 3,
	2, 2, 2, 766, 5090, 3, 2, 2, 2, 768, 5097, 3, 2, 2, 2, 770, 5099, 3, 2,
	2, 2, 772, 5103, 3, 2, 2, 2, 774, 5107, 3, 2, 2, 2, 776, 5111, 3, 2, 2,
	2, 778, 5119, 3, 2, 2, 2, 780, 5125, 3, 2, 2, 2, 782, 5131, 3, 2, 2, 2,
	784, 5137, 3, 2, 2, 2, 786, 5139, 3, 2, 2, 2, 788, 5141, 3, 2, 2, 2, 790,
	5145, 3, 2, 2, 2, 792, 5149, 3, 2, 2, 2, 794, 5153, 3, 2, 2, 2, 796, 5171,
	3, 2, 2, 2, 798, 5187, 3, 2, 2, 2, 800, 5203, 3, 2, 2, 2, 802, 5219, 3,
	2, 2, 2, 804, 5235, 3, 2, 2, 2, 806, 5251, 3, 2, 2, 2, 808, 5267, 3, 2,
	2, 2, 810, 5283, 3, 2, 2, 2, 812, 5395, 3, 2, 2, 2, 814, 5507, 3, 2, 2,
	2, 816, 5619, 3, 2, 2, 2, 818, 5731, 3, 2, 2, 2, 820, 5843, 3, 2, 2, 2,
	822, 5955, 3, 2, 2, 2, 824, 6067, 3, 2, 2, 2, 826, 6179, 3, 2, 2, 2, 828,
	6181, 3, 2, 2, 2, 830, 6184, 3, 2, 2, 2, 832, 6187, 3, 2, 2, 2, 834, 6190,
	3, 2, 2, 2, 836, 6195, 3, 2, 2, 2, 838, 6199, 3, 2, 2, 2, 840, 6203, 3,
	2, 2, 2, 842, 6207, 3, 2, 2, 2, 844, 6209, 3, 2, 2, 2, 846, 6215, 3, 2,
	2, 2, 848, 6221, 3, 2, 2, 2, 850, 6227, 3, 2, 2, 2, 852, 6233, 3, 2, 2,
	2, 854, 6239, 3, 2, 2, 2, 856, 6245, 3, 2, 2, 2, 858, 6251, 3, 2, 2, 2,
	860, 6257, 3, 2, 2, 2, 862, 6263, 3, 2, 2, 2, 864, 6269, 3, 2, 2, 2, 866,
	6275, 3, 2, 2, 2, 868, 6281, 3, 2, 2, 2, 870, 6287, 3, 2, 2, 2, 872, 6293,
	3, 2, 2, 2, 874, 6299, 3, 2, 2, 2, 876, 6305, 3, 2, 2, 2, 878, 6311, 3,
	2, 2, 2, 880, 6317, 3, 2, 2, 2, 882, 6323, 3, 2, 2, 2, 884, 6329, 3, 2,
	2, 2, 886, 6335, 3, 2, 2, 2, 888, 6341, 3, 2, 2, 2, 890, 6347, 3, 2, 2,
	2, 892, 6353, 3, 2, 2, 2, 894, 6359, 3, 2, 2, 2, 896, 6365, 3, 2, 2, 2,
	898, 6371, 3, 2, 2, 2, 900, 6401, 3, 2, 2, 2, 902, 6427, 3, 2, 2, 2, 904,
	6453, 3, 2, 2, 2, 906, 6479, 3, 2, 2, 2, 908, 6505, 3, 2, 2, 2, 910, 6531,
	3, 2, 2, 2, 912, 6557, 3, 2, 2, 2, 914, 6583, 3, 2, 2, 2, 916, 6585, 3,
	2, 2, 2, 918, 6591, 3, 2, 2, 2, 920, 6597, 3, 2, 2, 2, 922, 6603, 3, 2,
	2, 2, 924, 6609, 3, 2, 2, 2, 926, 6615, 3, 2, 2, 2, 928, 6621, 3, 2, 2,
	2, 930, 6627, 3, 2, 2, 2, 932, 6633, 3, 2, 2, 2, 934, 6638, 3, 2, 2, 2,
	936, 6643, 3, 2, 2, 2, 938, 6648, 3, 2, 2, 2, 940, 6653, 3, 2, 2, 2, 942,
	6658, 3, 2, 2, 2, 944, 6663, 3, 2, 2, 2, 946, 6668, 3, 2, 2, 2, 948, 6673,
	3, 2, 2, 2, 950, 6677, 3, 2, 2, 2, 952, 6681, 3, 2, 2, 2, 954, 6685, 3,
	2, 2, 2, 956, 6689, 3, 2, 2, 2, 958, 6693, 3, 2, 2, 2, 960, 6697, 3, 2,
	2, 2, 962, 6701, 3, 2, 2, 2, 964, 6707, 3, 2, 2, 2, 966, 6711, 3, 2, 2,
	2, 968, 6715, 3, 2, 2, 2, 970, 6719, 3, 2, 2, 2, 972, 6723, 3, 2, 2, 2,
	974, 6727, 3, 2, 2, 2, 976, 6731, 3, 2, 2, 2, 978, 6735, 3, 2, 2, 2, 980,
	6737, 3, 2, 2, 2, 982, 6741, 3, 2, 2, 2, 984, 6745, 3, 2, 2, 2, 986, 6749,
	3, 2, 2, 2, 988, 6766, 3, 2, 2, 2, 990, 6781, 3, 2, 2, 2, 992, 6796, 3,
	2, 2, 2, 994, 6811, 3, 2, 2, 2, 996, 6826, 3, 2, 2, 2, 998, 6841, 3, 2,
	2, 2, 1000, 6856, 3, 2, 2, 2, 1002, 6871, 3, 2, 2, 2, 1004, 6873, 3, 2,
	2, 2, 1006, 6879, 3, 2, 2, 2, 1008, 6885, 3, 2, 2, 2, 1010, 6891, 3, 2,
	2, 2, 1012, 6897, 3, 2, 2, 2, 1014, 6903, 3, 2, 2, 2, 1016, 6909, 3, 2,
	2, 2, 1018, 6915, 3, 2, 2, 2, 1020, 6921, 3, 2, 2, 2, 1022, 6924, 3, 2,
	2, 2, 1024, 6927, 3, 2, 2, 2, 1026, 6930, 3, 2, 2, 2, 1028, 6933, 3, 2,
	2, 2, 1030, 6936, 3, 2, 2, 2, 1032, 6939, 3, 2, 2, 2, 1034, 6942, 3, 2,
	2, 2, 1036, 6947, 3, 2, 2, 2, 1038, 6951, 3, 2, 2, 2, 1040, 6955, 3, 2,
	2, 2, 1042, 6959, 3, 2, 2, 2, 1044, 6961, 3, 2, 2, 2, 1046, 6964, 3, 2,
	2, 2, 1048, 6973, 3, 2, 2, 2, 1050, 6982, 3, 2, 2, 2, 1052, 6991, 3, 2,
	2, 2, 1054, 7017, 3, 2, 2, 2, 1056, 7036, 3, 2, 2, 2, 1058, 7055, 3, 2,
	2, 2, 1060, 7074, 3, 2, 2, 2, 1062, 7076, 3, 2, 2, 2, 1064, 7087, 3, 2,
	2, 2, 1066, 7089, 3, 2, 2, 2, 1068, 7091, 3, 2, 2, 2, 1070, 7093, 3, 2,
	2, 2, 1072, 7105, 3, 2, 2, 2, 1074, 7117, 3, 2, 2, 2, 1076, 7129, 3, 2,
	2, 2, 1078, 7141, 3, 2, 2, 2, 1080, 7143, 3, 2, 2, 2, 1082, 7154, 3, 2,
	2, 2, 1084, 7165, 3, 2, 2, 2, 1086, 7176, 3, 2, 2, 2, 1088, 7187, 3, 2,
	2, 2, 1090, 7189, 3, 2, 2, 2, 1092, 7191, 3, 2, 2, 2, 1094, 7193, 3, 2,
	2, 2, 1096, 7195, 3, 2, 2, 2, 1098, 7197, 3, 2, 2, 2, 1100, 7199, 3, 2,
	2, 2, 1102, 7201, 3, 2, 2, 2, 1104, 7203, 3, 2, 2, 2, 1106, 7205, 3, 2,
	2, 2, 1108, 7207, 3, 2, 2, 2, 1110, 7209, 3, 2, 2, 2, 1112, 7212, 3, 2,
	2, 2, 1114, 7215, 3, 2, 2, 2, 1116, 7218, 3, 2, 2, 2, 1118, 7221, 3, 2,
	2, 2, 1120, 7223, 3, 2, 2, 2, 1122, 7227, 3, 2, 2, 2, 1124, 7231, 3, 2,
	2, 2, 1126, 7235, 3, 2, 2, 2, 1128, 7239, 3, 2, 2, 2, 1130, 7243, 3, 2,
	2, 2, 1132, 7247, 3, 2, 2, 2, 1134, 7251, 3, 2, 2, 2, 1136, 7257, 3, 2,
	2, 2, 1138, 7261, 3, 2, 2, 2, 1140, 7265, 3, 2, 2, 2, 1142, 7269, 3, 2,
	2, 2, 1144, 7277, 3, 2, 2, 2, 1146, 7285, 3, 2, 2, 2, 1148, 7315, 3, 2,
	2, 2, 1150, 7345, 3, 2, 2, 2, 1152, 7375, 3, 2, 2, 2, 1154, 7405, 3, 2,
	2, 2, 1156, 7407, 3, 2, 2, 2, 1158, 7409, 3, 2, 2, 2, 1160, 7418, 3, 2,
	2, 2, 1162, 7427, 3, 2, 2, 2, 1164, 7436, 3, 2, 2, 2, 1166, 7445, 3, 2,
	2, 2, 1168, 7455, 3, 2, 2, 2, 1170, 7465, 3, 2, 2, 2, 1172, 7475, 3, 2,
	2, 2, 1174, 7504, 3, 2, 2, 2, 1176, 7525, 3, 2, 2, 2, 1178, 7546, 3, 2,
	2, 2, 1180, 7567, 3, 2, 2, 2, 1182, 7569, 3, 2, 2, 2, 1184, 7581, 3, 2,
	2, 2, 1186, 7589, 3, 2, 2, 2, 1188, 7597, 3, 2, 2, 2, 1190, 7605, 3, 2,
	2, 2, 1192, 7613, 3, 2, 2, 2, 1194, 7615, 3, 2, 2, 2, 1196, 7625, 3, 2,
	2, 2, 1198, 7635, 3, 2, 2, 2, 1200, 7645, 3, 2, 2, 2, 1202, 7655, 3, 2,
	2, 2, 1204, 7666, 3, 2, 2, 2, 1206, 7677, 3, 2, 2, 2, 1208, 7688, 3, 2,
	2, 2, 1210, 7720, 3, 2, 2, 2, 1212, 7743, 3, 2, 2, 2, 1214, 7766, 3, 2,
	2, 2, 1216, 7789, 3, 2, 2, 2, 1218, 7791, 3, 2, 2, 2, 1220, 7804, 3, 2,
	2, 2, 1222, 7806, 3, 2, 2, 2, 1224, 7810, 3, 2, 2, 2, 1226, 7814, 3, 2,
	2, 2, 1228, 7818, 3, 2, 2, 2, 1230, 7828, 3, 2, 2, 2, 1232, 7836, 3, 2,
	2, 2, 1234, 7844, 3, 2, 2, 2, 1236, 7852, 3, 2, 2, 2, 1238, 7854, 3, 2,
	2, 2, 1240, 7860, 3, 2, 2, 2, 1242, 7866, 3, 2, 2, 2, 1244, 7872, 3, 2,
	2, 2, 1246, 7879, 3, 2, 2, 2, 1248, 7888, 3, 2, 2, 2, 1250, 7897, 3, 2,
	2, 2, 1252, 7906, 3, 2, 2, 2, 1254, 7914, 3, 2, 2, 2, 1256, 7917, 3, 2,
	2, 2, 1258, 7920, 3, 2, 2, 2, 1260, 7923, 3, 2, 2, 2, 1262, 7927, 3, 2,
	2, 2, 1264, 7932, 3, 2, 2, 2, 1266, 7937, 3, 2, 2, 2, 1268, 7942, 3, 2,
	2, 2, 1270, 7951, 3, 2, 2, 2, 1272, 7958, 3, 2, 2, 2, 1274, 7965, 3, 2,
	2, 2, 1276, 7972, 3, 2, 2, 2, 1278, 7974, 3, 2, 2, 2, 1280, 7984, 3, 2,
	2, 2, 1282, 7994, 3, 2, 2, 2, 1284, 8004, 3, 2, 2, 2, 1286, 8033, 3, 2,
	2, 2, 1288, 8054, 3, 2, 2, 2, 1290, 8075, 3, 2, 2, 2, 1292, 8096, 3, 2,
	2, 2, 1294, 8098, 3, 2, 2, 2, 1296, 8110, 3, 2, 2, 2, 1298, 8119, 3, 2,
	2, 2, 1300, 8128, 3, 2, 2, 2, 1302, 8137, 3, 2, 2, 2, 1304, 8146, 3, 2,
	2, 2, 1306, 8148, 3, 2, 2, 2, 1308, 8151, 3, 2, 2, 2, 1310, 8163, 3, 2,
	2, 2, 1312, 8174, 3, 2, 2, 2, 1314, 8185, 3, 2, 2, 2, 1316, 8196, 3, 2,
	2, 2, 1318, 8207, 3, 2, 2, 2, 1320, 8218, 3, 2, 2, 2, 1322, 8229, 3, 2,
	2, 2, 1324, 8240, 3, 2, 2, 2, 1326, 8242, 3, 2, 2, 2, 1328, 8244, 3, 2,
	2, 2, 1330, 8246, 3, 2, 2, 2, 1332, 8249, 3, 2, 2, 2, 1334, 8252, 3, 2,
	2, 2, 1336, 8255, 3, 2, 2, 2, 1338, 8259, 3, 2, 2, 2, 1340, 8261, 3, 2,
	2, 2, 1342, 8264, 3, 2, 2, 2, 1344, 8267, 3, 2, 2, 2, 1346, 8274, 3, 2,
	2, 2, 1348, 8285, 3, 2, 2, 2, 1350, 8298, 3, 2, 2, 2, 1352, 8300, 3, 2,
	2, 2, 1354, 8302, 3, 2, 2, 2, 1356, 8315, 3, 2, 2, 2, 1358, 8317, 3, 2,
	2, 2, 1360, 8320, 3, 2, 2, 2, 1362, 8335, 3, 2, 2, 2, 1364, 8337, 3, 2,
	2, 2, 1366, 8339, 3, 2, 2, 2, 1368, 8369, 3, 2, 2, 2, 1370, 8380, 3, 2,
	2, 2, 1372, 8382, 3, 2, 2, 2, 1374, 8397, 3, 2, 2, 2, 1376, 8399, 3, 2,
	2, 2, 1378, 8405, 3, 2, 2, 2, 1380, 1381, 9, 2, 2, 2, 1381, 3, 3, 2, 2,
	2, 1382, 1389, 7, 96, 2, 2, 1383, 1389, 7, 97, 2, 2, 1384, 1389, 7, 99,
	2, 2, 1385, 1389, 7, 102, 2, 2, 1386, 1389, 7, 109, 2, 2, 1387, 1389, 5,
	10, 6, 2, 1388, 1382, 3, 2, 2, 2, 1388, 1383, 3, 2, 2, 2, 1388, 1384, 3,
	2, 2, 2, 1388, 1385, 3, 2, 2, 2, 1388, 1386, 3, 2, 2, 2, 1388, 1387, 3,
	2, 2, 2, 1389, 5, 3, 2, 2, 2, 1390, 1397, 7, 96, 2, 2, 1391, 1397, 7, 97,
	2, 2, 1392, 1397, 7, 99, 2, 2, 1393, 1397, 7, 102, 2, 2, 1394, 1397, 5,
	10, 6, 2, 1395, 1397, 7, 131, 2, 2, 1396, 1390, 3, 2, 2, 2, 1396, 1391,
	3, 2, 2, 2, 1396, 1392, 3, 2, 2, 2, 1396, 1393, 3, 2, 2, 2, 1396, 1394,
	3, 2, 2, 2, 1396, 1395, 3, 2, 2, 2, 1397, 7, 3, 2, 2, 2, 1398, 1399, 9,
	3, 2, 2, 1399, 9, 3, 2, 2, 2, 1400, 1401, 7, 3, 2, 2, 1401, 1402, 7, 118,
	2, 2, 1402, 1406, 7, 3, 2, 2, 1403, 1405, 7, 127, 2, 2, 1404, 1403, 3,
	2, 2, 2, 1405, 1408, 3, 2, 2, 2, 1406, 1404, 3, 2, 2, 2, 1406, 1407, 3,
	2, 2, 2, 1407, 11, 3, 2, 2, 2, 1408, 1406, 3, 2, 2, 2, 1409, 1410, 9, 4,
	2, 2, 1410, 13, 3, 2, 2, 2, 1411, 1412, 9, 5, 2, 2, 1412, 15, 3, 2, 2,
	2, 1413, 1414, 9, 6, 2, 2, 1414, 17, 3, 2, 2, 2, 1415, 1416, 7, 139, 2,
	2, 1416, 19, 3, 2, 2, 2, 1417, 1418, 9, 4, 2, 2, 1418, 21, 3, 2, 2, 2,
	1419, 1420, 9, 4, 2, 2, 1420, 23, 3, 2, 2, 2, 1421, 1422, 9, 4, 2, 2, 1422,
	25, 3, 2, 2, 2, 1423, 1424, 9, 4, 2, 2, 1424, 27, 3, 2, 2, 2, 1425, 1426,
	9, 4, 2, 2, 1426, 29, 3, 2, 2, 2, 1427, 1428, 9, 5, 2, 2, 1428, 31, 3,
	2, 2, 2, 1429, 1430, 9, 6, 2, 2, 1430, 33, 3, 2, 2, 2, 1431, 1432, 7, 139,
	2, 2, 1432, 35, 3, 2, 2, 2, 1433, 1447, 7, 6, 2, 2, 1434, 1447, 5, 12,
	7, 2, 1435, 1447, 5, 52, 27, 2, 1436, 1447, 5, 54, 28, 2, 1437, 1447, 5,
	80, 41, 2, 1438, 1447, 5, 1062, 532, 2, 1439, 1447, 5, 1238, 620, 2, 1440,
	1447, 5, 1182, 592, 2, 1441, 1447, 5, 1294, 648, 2, 1442, 1447, 5, 1218,
	610, 2, 1443, 1447, 5, 10, 6, 2, 1444, 1447, 5, 146, 74, 2, 1445, 1447,
	5, 44, 23, 2, 1446, 1433, 3, 2, 2, 2, 1446, 1434, 3, 2, 2, 2, 1446, 1435,
	3, 2, 2, 2, 1446, 1436, 3, 2, 2, 2, 1446, 1437, 3, 2, 2, 2, 1446, 1438,
	3, 2, 2, 2, 1446, 1439, 3, 2, 2, 2, 1446, 1440, 3, 2, 2, 2, 1446, 1441,
	3, 2, 2, 2, 1446, 1442, 3, 2, 2, 2, 1446, 1443, 3, 2, 2, 2, 1446, 1444,
	3, 2, 2, 2, 1446, 1445, 3, 2, 2, 2, 1447, 37, 3, 2, 2, 2, 1448, 1462, 7,
	6, 2, 2, 1449, 1462, 5, 14, 8, 2, 1450, 1462, 5, 52, 27, 2, 1451, 1462,
	5, 56, 29, 2, 1452, 1462, 5, 82, 42, 2, 1453, 1462, 5, 1062, 532, 2, 1454,
	1462, 5, 1240, 621, 2, 1455, 1462, 5, 1182, 592, 2, 1456, 1462, 5, 1294,
	648, 2, 1457, 1462, 5, 1218, 610, 2, 1458, 1462, 5, 10, 6, 2, 1459, 1462,
	5, 148, 75, 2, 1460, 1462, 5, 46, 24, 2, 1461, 1448, 3, 2, 2, 2, 1461,
	1449, 3, 2, 2, 2, 1461, 1450, 3, 2, 2, 2, 1461, 1451, 3, 2, 2, 2, 1461,
	1452, 3, 2, 2, 2, 1461, 1453, 3, 2, 2, 2, 1461, 1454, 3, 2, 2, 2, 1461,
	1455, 3, 2, 2, 2, 1461, 1456, 3, 2, 2, 2, 1461, 1457, 3, 2, 2, 2, 1461,
	1458, 3, 2, 2, 2, 1461, 1459, 3, 2, 2, 2, 1461, 1460, 3, 2, 2, 2, 1462,
	39, 3, 2, 2, 2, 1463, 1477, 7, 6, 2, 2, 1464, 1477, 5, 16, 9, 2, 1465,
	1477, 5, 52, 27, 2, 1466, 1477, 5, 58, 30, 2, 1467, 1477, 5, 84, 43, 2,
	1468, 1477, 5, 1062, 532, 2, 1469, 1477, 5, 1242, 622, 2, 1470, 1477, 5,
	1182, 592, 2, 1471, 1477, 5, 1294, 648, 2, 1472, 1477, 5, 1218, 610, 2,
	1473, 1477, 5, 10, 6, 2, 1474, 1477, 5, 150, 76, 2, 1475, 1477, 5, 48,
	25, 2, 1476, 1463, 3, 2, 2, 2, 1476, 1464, 3, 2, 2, 2, 1476, 1465, 3, 2,
	2, 2, 1476, 1466, 3, 2, 2, 2, 1476, 1467, 3, 2, 2, 2, 1476, 1468, 3, 2,
	2, 2, 1476, 1469, 3, 2, 2, 2, 1476, 1470, 3, 2, 2, 2, 1476, 1471, 3, 2,
	2, 2, 1476, 1472, 3, 2, 2, 2, 1476, 1473, 3, 2, 2, 2, 1476, 1474, 3, 2,
	2, 2, 1476, 1475, 3, 2, 2, 2, 1477, 41, 3, 2, 2, 2, 1478, 1492, 7, 6, 2,
	2, 1479, 1492, 5, 18, 10, 2, 1480, 1492, 5, 52, 27, 2, 1481, 1492, 5, 60,
	31, 2, 1482, 1492, 5, 86, 44, 2, 1483, 1492, 5, 1062, 532, 2, 1484, 1492,
	5, 1244, 623, 2, 1485, 1492, 5, 1182, 592, 2, 1486, 1492, 5, 1294, 648,
	2, 1487, 1492, 5, 1218, 610, 2, 1488, 1492, 5, 10, 6, 2, 1489, 1492, 5,
	152, 77, 2, 1490, 1492, 5, 50, 26, 2, 1491, 1478, 3, 2, 2, 2, 1491, 1479,
	3, 2, 2, 2, 1491, 1480, 3, 2, 2, 2, 1491, 1481, 3, 2, 2, 2, 1491, 1482,
	3, 2, 2, 2, 1491, 1483, 3, 2, 2, 2, 1491, 1484, 3, 2, 2, 2, 1491, 1485,
	3, 2, 2, 2, 1491, 1486, 3, 2, 2, 2, 1491, 1487, 3, 2, 2, 2, 1491, 1488,
	3, 2, 2, 2, 1491, 1489, 3, 2, 2, 2, 1491, 1490, 3, 2, 2, 2, 1492, 43, 3,
	2, 2, 2, 1493, 1494, 7, 7, 2, 2, 1494, 1495, 5, 474, 238, 2, 1495, 1496,
	7, 8, 2, 2, 1496, 1528, 3, 2, 2, 2, 1497, 1498, 7, 7, 2, 2, 1498, 1499,
	5, 474, 238, 2, 1499, 1500, 7, 8, 2, 2, 1500, 1528, 3, 2, 2, 2, 1501, 1502,
	7, 7, 2, 2, 1502, 1528, 7, 8, 2, 2, 1503, 1504, 7, 7, 2, 2, 1504, 1505,
	7, 9, 2, 2, 1505, 1506, 5, 20, 11, 2, 1506, 1507, 7, 8, 2, 2, 1507, 1528,
	3, 2, 2, 2, 1508, 1509, 7, 7, 2, 2, 1509, 1510, 7, 9, 2, 2, 1510, 1511,
	5, 20, 11, 2, 1511, 1512, 7, 8, 2, 2, 1512, 1528, 3, 2, 2, 2, 1513, 1514,
	7, 7, 2, 2, 1514, 1515, 5, 474, 238, 2, 1515, 1516, 7, 10, 2, 2, 1516,
	1517, 7, 9, 2, 2, 1517, 1518, 5, 20, 11, 2, 1518, 1519, 7, 8, 2, 2, 1519,
	1528, 3, 2, 2, 2, 1520, 1521, 7, 7, 2, 2, 1521, 1522, 5, 474, 238, 2, 1522,
	1523, 7, 10, 2, 2, 1523, 1524, 7, 9, 2, 2, 1524, 1525, 5, 698, 350, 2,
	1525, 1526, 7, 8, 2, 2, 1526, 1528, 3, 2, 2, 2, 1527, 1493, 3, 2, 2, 2,
	1527, 1497, 3, 2, 2, 2, 1527, 1501, 3, 2, 2, 2, 1527, 1503, 3, 2, 2, 2,
	1527, 1508, 3, 2, 2, 2, 1527, 1513, 3, 2, 2, 2, 1527, 1520, 3, 2, 2, 2,
	1528, 45, 3, 2, 2, 2, 1529, 1530, 7, 7, 2, 2, 1530, 1531, 5, 478, 240,
	2, 1531, 1532, 7, 8, 2, 2, 1532, 1564, 3, 2, 2, 2, 1533, 1534, 7, 7, 2,
	2, 1534, 1535, 5, 478, 240, 2, 1535, 1536, 7, 8, 2, 2, 1536, 1564, 3, 2,
	2, 2, 1537, 1538, 7, 7, 2, 2, 1538, 1564, 7, 8, 2, 2, 1539, 1540, 7, 7,
	2, 2, 1540, 1541, 7, 9, 2, 2, 1541, 1542, 5, 20, 11, 2, 1542, 1543, 7,
	8, 2, 2, 1543, 1564, 3, 2, 2, 2, 1544, 1545, 7, 7, 2, 2, 1545, 1546, 7,
	9, 2, 2, 1546, 1547, 5, 20, 11, 2, 1547, 1548, 7, 8, 2, 2, 1548, 1564,
	3, 2, 2, 2, 1549, 1550, 7, 7, 2, 2, 1550, 1551, 5, 478, 240, 2, 1551, 1552,
	7, 10, 2, 2, 1552, 1553, 7, 9, 2, 2, 1553, 1554, 5, 22, 12, 2, 1554, 1555,
	7, 8, 2, 2, 1555, 1564, 3, 2, 2, 2, 1556, 1557, 7, 7, 2, 2, 1557, 1558,
	5, 478, 240, 2, 1558, 1559, 7, 10, 2, 2, 1559, 1560, 7, 9, 2, 2, 1560,
	1561, 5, 700, 351, 2, 1561, 1562, 7, 8, 2, 2, 1562, 1564, 3, 2, 2, 2, 1563,
	1529, 3, 2, 2, 2, 1563, 1533, 3, 2, 2, 2, 1563, 1537, 3, 2, 2, 2, 1563,
	1539, 3, 2, 2, 2, 1563, 1544, 3, 2, 2, 2, 1563, 1549, 3, 2, 2, 2, 1563,
	1556, 3, 2, 2, 2, 1564, 47, 3, 2, 2, 2, 1565, 1566, 7, 7, 2, 2, 1566, 1567,
	5, 482, 242, 2, 1567, 1568, 7, 8, 2, 2, 1568, 1600, 3, 2, 2, 2, 1569, 1570,
	7, 7, 2, 2, 1570, 1571, 5, 482, 242, 2, 1571, 1572, 7, 8, 2, 2, 1572, 1600,
	3, 2, 2, 2, 1573, 1574, 7, 7, 2, 2, 1574, 1600, 7, 8, 2, 2, 1575, 1576,
	7, 7, 2, 2, 1576, 1577, 7, 9, 2, 2, 1577, 1578, 5, 20, 11, 2, 1578, 1579,
	7, 8, 2, 2, 1579, 1600, 3, 2, 2, 2, 1580, 1581, 7, 7, 2, 2, 1581, 1582,
	7, 9, 2, 2, 1582, 1583, 5, 20, 11, 2, 1583, 1584, 7, 8, 2, 2, 1584, 1600,
	3, 2, 2, 2, 1585, 1586, 7, 7, 2, 2, 1586, 1587, 5, 482, 242, 2, 1587, 1588,
	7, 10, 2, 2, 1588, 1589, 7, 9, 2, 2, 1589, 1590, 5, 24, 13, 2, 1590, 1591,
	7, 8, 2, 2, 1591, 1600, 3, 2, 2, 2, 1592, 1593, 7, 7, 2, 2, 1593, 1594,
	5, 482, 242, 2, 1594, 1595, 7, 10, 2, 2, 1595, 1596, 7, 9, 2, 2, 1596,
	1597, 5, 702, 352, 2, 1597, 1598, 7, 8, 2, 2, 1598, 1600, 3, 2, 2, 2, 1599,
	1565, 3, 2, 2, 2, 1599, 1569, 3, 2, 2, 2, 1599, 1573, 3, 2, 2, 2, 1599,
	1575, 3, 2, 2, 2, 1599, 1580, 3, 2, 2, 2, 1599, 1585, 3, 2, 2, 2, 1599,
	1592, 3, 2, 2, 2, 1600, 49, 3, 2, 2, 2, 1601, 1602, 7, 7, 2, 2, 1602, 1603,
	5, 486, 244, 2, 1603, 1604, 7, 8, 2, 2, 1604, 1636, 3, 2, 2, 2, 1605, 1606,
	7, 7, 2, 2, 1606, 1607, 5, 486, 244, 2, 1607, 1608, 7, 8, 2, 2, 1608, 1636,
	3, 2, 2, 2, 1609, 1610, 7, 7, 2, 2, 1610, 1636, 7, 8, 2, 2, 1611, 1612,
	7, 7, 2, 2, 1612, 1613, 7, 9, 2, 2, 1613, 1614, 5, 20, 11, 2, 1614, 1615,
	7, 8, 2, 2, 1615, 1636, 3, 2, 2, 2, 1616, 1617, 7, 7, 2, 2, 1617, 1618,
	7, 9, 2, 2, 1618, 1619, 5, 20, 11, 2, 1619, 1620, 7, 8, 2, 2, 1620, 1636,
	3, 2, 2, 2, 1621, 1622, 7, 7, 2, 2, 1622, 1623, 5, 486, 244, 2, 1623, 1624,
	7, 10, 2, 2, 1624, 1625, 7, 9, 2, 2, 1625, 1626, 5, 26, 14, 2, 1626, 1627,
	7, 8, 2, 2, 1627, 1636, 3, 2, 2, 2, 1628, 1629, 7, 7, 2, 2, 1629, 1630,
	5, 486, 244, 2, 1630, 1631, 7, 10, 2, 2, 1631, 1632, 7, 9, 2, 2, 1632,
	1633, 5, 704, 353, 2, 1633, 1634, 7, 8, 2, 2, 1634, 1636, 3, 2, 2, 2, 1635,
	1601, 3, 2, 2, 2, 1635, 1605, 3, 2, 2, 2, 1635, 1609, 3, 2, 2, 2, 1635,
	1611, 3, 2, 2, 2, 1635, 1616, 3, 2, 2, 2, 1635, 1621, 3, 2, 2, 2, 1635,
	1628, 3, 2, 2, 2, 1636, 51, 3, 2, 2, 2, 1637, 1638, 9, 7, 2, 2, 1638, 53,
	3, 2, 2, 2, 1639, 1641, 7, 11, 2, 2, 1640, 1642, 5, 70, 36, 2, 1641, 1640,
	3, 2, 2, 2, 1641, 1642, 3, 2, 2, 2, 1642, 1643, 3, 2, 2, 2, 1643, 1657,
	7, 12, 2, 2, 1644, 1645, 7, 11, 2, 2, 1645, 1646, 5, 62, 32, 2, 1646, 1647,
	7, 12, 2, 2, 1647, 1657, 3, 2, 2, 2, 1648, 1649, 7, 11, 2, 2, 1649, 1650,
	5, 62, 32, 2, 1650, 1652, 7, 10, 2, 2, 1651, 1653, 5, 70, 36, 2, 1652,
	1651, 3, 2, 2, 2, 1652, 1653, 3, 2, 2, 2, 1653, 1654, 3, 2, 2, 2, 1654,
	1655, 7, 12, 2, 2, 1655, 1657, 3, 2, 2, 2, 1656, 1639, 3, 2, 2, 2, 1656,
	1644, 3, 2, 2, 2, 1656, 1648, 3, 2, 2, 2, 1657, 55, 3, 2, 2, 2, 1658, 1660,
	7, 11, 2, 2, 1659, 1661, 5, 70, 36, 2, 1660, 1659, 3, 2, 2, 2, 1660, 1661,
	3, 2, 2, 2, 1661, 1662, 3, 2, 2, 2, 1662, 1676, 7, 12, 2, 2, 1663, 1664,
	7, 11, 2, 2, 1664, 1665, 5, 64, 33, 2, 1665, 1666, 7, 12, 2, 2, 1666, 1676,
	3, 2, 2, 2, 1667, 1668, 7, 11, 2, 2, 1668, 1669, 5, 64, 33, 2, 1669, 1671,
	7, 10, 2, 2, 1670, 1672, 5, 70, 36, 2, 1671, 1670, 3, 2, 2, 2, 1671, 1672,
	3, 2, 2, 2, 1672, 1673, 3, 2, 2, 2, 1673, 1674, 7, 12, 2, 2, 1674, 1676,
	3, 2, 2, 2, 1675, 1658, 3, 2, 2, 2, 1675, 1663, 3, 2, 2, 2, 1675, 1667,
	3, 2, 2, 2, 1676, 57, 3, 2, 2, 2, 1677, 1679, 7, 11, 2, 2, 1678, 1680,
	5, 70, 36, 2, 1679, 1678, 3, 2, 2, 2, 1679, 1680, 3, 2, 2, 2, 1680, 1681,
	3, 2, 2, 2, 1681, 1695, 7, 12, 2, 2, 1682, 1683, 7, 11, 2, 2, 1683, 1684,
	5, 66, 34, 2, 1684, 1685, 7, 12, 2, 2, 1685, 1695, 3, 2, 2, 2, 1686, 1687,
	7, 11, 2, 2, 1687, 1688, 5, 66, 34, 2, 1688, 1690, 7, 10, 2, 2, 1689, 1691,
	5, 70, 36, 2, 1690, 1689, 3, 2, 2, 2, 1690, 1691, 3, 2, 2, 2, 1691, 1692,
	3, 2, 2, 2, 1692, 1693, 7, 12, 2, 2, 1693, 1695, 3, 2, 2, 2, 1694, 1677,
	3, 2, 2, 2, 1694, 1682, 3, 2, 2, 2, 1694, 1686, 3, 2, 2, 2, 1695, 59, 3,
	2, 2, 2, 1696, 1698, 7, 11, 2, 2, 1697, 1699, 5, 70, 36, 2, 1698, 1697,
	3, 2, 2, 2, 1698, 1699, 3, 2, 2, 2, 1699, 1700, 3, 2, 2, 2, 1700, 1714,
	7, 12, 2, 2, 1701, 1702, 7, 11, 2, 2, 1702, 1703, 5, 68, 35, 2, 1703, 1704,
	7, 12, 2, 2, 1704, 1714, 3, 2, 2, 2, 1705, 1706, 7, 11, 2, 2, 1706, 1707,
	5, 68, 35, 2, 1707, 1709, 7, 10, 2, 2, 1708, 1710, 5, 70, 36, 2, 1709,
	1708, 3, 2, 2, 2, 1709, 1710, 3, 2, 2, 2, 1710, 1711, 3, 2, 2, 2, 1711,
	1712, 7, 12, 2, 2, 1712, 1714, 3, 2, 2, 2, 1713, 1696, 3, 2, 2, 2, 1713,
	1701, 3, 2, 2, 2, 1713, 1705, 3, 2, 2, 2, 1714, 61, 3, 2, 2, 2, 1715, 1717,
	8, 32, 1, 2, 1716, 1718, 5, 70, 36, 2, 1717, 1716, 3, 2, 2, 2, 1717, 1718,
	3, 2, 2, 2, 1718, 1719, 3, 2, 2, 2, 1719, 1725, 5, 458, 230, 2, 1720, 1722,
	5, 70, 36, 2, 1721, 1720, 3, 2, 2, 2, 1721, 1722, 3, 2, 2, 2, 1722, 1723,
	3, 2, 2, 2, 1723, 1725, 5, 72, 37, 2, 1724, 1715, 3, 2, 2, 2, 1724, 1721,
	3, 2, 2, 2, 1725, 1740, 3, 2, 2, 2, 1726, 1727, 12, 4, 2, 2, 1727, 1729,
	7, 10, 2, 2, 1728, 1730, 5, 70, 36, 2, 1729, 1728, 3, 2, 2, 2, 1729, 1730,
	3, 2, 2, 2, 1730, 1731, 3, 2, 2, 2, 1731, 1739, 5, 458, 230, 2, 1732, 1733,
	12, 3, 2, 2, 1733, 1735, 7, 10, 2, 2, 1734, 1736, 5, 70, 36, 2, 1735, 1734,
	3, 2, 2, 2, 1735, 1736, 3, 2, 2, 2, 1736, 1737, 3, 2, 2, 2, 1737, 1739,
	5, 72, 37, 2, 1738, 1726, 3, 2, 2, 2, 1738, 1732, 3, 2, 2, 2, 1739, 1742,
	3, 2, 2, 2, 1740, 1738, 3, 2, 2, 2, 1740, 1741, 3, 2, 2, 2, 1741, 63, 3,
	2, 2, 2, 1742, 1740, 3, 2, 2, 2, 1743, 1745, 8, 33, 1, 2, 1744, 1746, 5,
	70, 36, 2, 1745, 1744, 3, 2, 2, 2, 1745, 1746, 3, 2, 2, 2, 1746, 1747,
	3, 2, 2, 2, 1747, 1753, 5, 462, 232, 2, 1748, 1750, 5, 70, 36, 2, 1749,
	1748, 3, 2, 2, 2, 1749, 1750, 3, 2, 2, 2, 1750, 1751, 3, 2, 2, 2, 1751,
	1753, 5, 74, 38, 2, 1752, 1743, 3, 2, 2, 2, 1752, 1749, 3, 2, 2, 2, 1753,
	1768, 3, 2, 2, 2, 1754, 1755, 12, 4, 2, 2, 1755, 1757, 7, 10, 2, 2, 1756,
	1758, 5, 70, 36, 2, 1757, 1756, 3, 2, 2, 2, 1757, 1758, 3, 2, 2, 2, 1758,
	1759, 3, 2, 2, 2, 1759, 1767, 5, 462, 232, 2, 1760, 1761, 12, 3, 2, 2,
	1761, 1763, 7, 10, 2, 2, 1762, 1764, 5, 70, 36, 2, 1763, 1762, 3, 2, 2,
	2, 1763, 1764, 3, 2, 2, 2, 1764, 1765, 3, 2, 2, 2, 1765, 1767, 5, 74, 38,
	2, 1766, 1754, 3, 2, 2, 2, 1766, 1760, 3, 2, 2, 2, 1767, 1770, 3, 2, 2,
	2, 1768, 1766, 3, 2, 2, 2, 1768, 1769, 3, 2, 2, 2, 1769, 65, 3, 2, 2, 2,
	1770, 1768, 3, 2, 2, 2, 1771, 1773, 8, 34, 1, 2, 1772, 1774, 5, 70, 36,
	2, 1773, 1772, 3, 2, 2, 2, 1773, 1774, 3, 2, 2, 2, 1774, 1775, 3, 2, 2,
	2, 1775, 1781, 5, 466, 234, 2, 1776, 1778, 5, 70, 36, 2, 1777, 1776, 3,
	2, 2, 2, 1777, 1778, 3, 2, 2, 2, 1778, 1779, 3, 2, 2, 2, 1779, 1781, 5,
	76, 39, 2, 1780, 1771, 3, 2, 2, 2, 1780, 1777, 3, 2, 2, 2, 1781, 1796,
	3, 2, 2, 2, 1782, 1783, 12, 4, 2, 2, 1783, 1785, 7, 10, 2, 2, 1784, 1786,
	5, 70, 36, 2, 1785, 1784, 3, 2, 2, 2, 1785, 1786, 3, 2, 2, 2, 1786, 1787,
	3, 2, 2, 2, 1787, 1795, 5, 466, 234, 2, 1788, 1789, 12, 3, 2, 2, 1789,
	1791, 7, 10, 2, 2, 1790, 1792, 5, 70, 36, 2, 1791, 1790, 3, 2, 2, 2, 1791,
	1792, 3, 2, 2, 2, 1792, 1793, 3, 2, 2, 2, 1793, 1795, 5, 76, 39, 2, 1794,
	1782, 3, 2, 2, 2, 1794, 1788, 3, 2, 2, 2, 1795, 1798, 3, 2, 2, 2, 1796,
	1794, 3, 2, 2, 2, 1796, 1797, 3, 2, 2, 2, 1797, 67, 3, 2, 2, 2, 1798, 1796,
	3, 2, 2, 2, 1799, 1801, 8, 35, 1, 2, 1800, 1802, 5, 70, 36, 2, 1801, 1800,
	3, 2, 2, 2, 1801, 1802, 3, 2, 2, 2, 1802, 1803, 3, 2, 2, 2, 1803, 1809,
	5, 470, 236, 2, 1804, 1806, 5, 70, 36, 2, 1805, 1804, 3, 2, 2, 2, 1805,
	1806, 3, 2, 2, 2, 1806, 1807, 3, 2, 2, 2, 1807, 1809, 5, 78, 40, 2, 1808,
	1799, 3, 2, 2, 2, 1808, 1805, 3, 2, 2, 2, 1809, 1824, 3, 2, 2, 2, 1810,
	1811, 12, 4, 2, 2, 1811, 1813, 7, 10, 2, 2, 1812, 1814, 5, 70, 36, 2, 1813,
	1812, 3, 2, 2, 2, 1813, 1814, 3, 2, 2, 2, 1814, 1815, 3, 2, 2, 2, 1815,
	1823, 5, 470, 236, 2, 1816, 1817, 12, 3, 2, 2, 1817, 1819, 7, 10, 2, 2,
	1818, 1820, 5, 70, 36, 2, 1819, 1818, 3, 2, 2, 2, 1819, 1820, 3, 2, 2,
	2, 1820, 1821, 3, 2, 2, 2, 1821, 1823, 5, 78, 40, 2, 1822, 1810, 3, 2,
	2, 2, 1822, 1816, 3, 2, 2, 2, 1823, 1826, 3, 2, 2, 2, 1824, 1822, 3, 2,
	2, 2, 1824, 1825, 3, 2, 2, 2, 1825, 69, 3, 2, 2, 2, 1826, 1824, 3, 2, 2,
	2, 1827, 1828, 8, 36, 1, 2, 1828, 1829, 7, 10, 2, 2, 1829, 1834, 3, 2,
	2, 2, 1830, 1831, 12, 3, 2, 2, 1831, 1833, 7, 10, 2, 2, 1832, 1830, 3,
	2, 2, 2, 1833, 1836, 3, 2, 2, 2, 1834, 1832, 3, 2, 2, 2, 1834, 1835, 3,
	2, 2, 2, 1835, 71, 3, 2, 2, 2, 1836, 1834, 3, 2, 2, 2, 1837, 1838, 7, 9,
	2, 2, 1838, 1839, 5, 458, 230, 2, 1839, 73, 3, 2, 2, 2, 1840, 1841, 7,
	9, 2, 2, 1841, 1842, 5, 462, 232, 2, 1842, 75, 3, 2, 2, 2, 1843, 1844,
	7, 9, 2, 2, 1844, 1845, 5, 466, 234, 2, 1845, 77, 3, 2, 2, 2, 1846, 1847,
	7, 9, 2, 2, 1847, 1848, 5, 470, 236, 2, 1848, 79, 3, 2, 2, 2, 1849, 1850,
	7, 13, 2, 2, 1850, 1861, 7, 109, 2, 2, 1851, 1852, 7, 13, 2, 2, 1852, 1853,
	5, 88, 45, 2, 1853, 1854, 7, 109, 2, 2, 1854, 1861, 3, 2, 2, 2, 1855, 1856,
	7, 13, 2, 2, 1856, 1857, 5, 88, 45, 2, 1857, 1858, 7, 10, 2, 2, 1858, 1859,
	7, 109, 2, 2, 1859, 1861, 3, 2, 2, 2, 1860, 1849, 3, 2, 2, 2, 1860, 1851,
	3, 2, 2, 2, 1860, 1855, 3, 2, 2, 2, 1861, 81, 3, 2, 2, 2, 1862, 1863, 7,
	13, 2, 2, 1863, 1874, 7, 109, 2, 2, 1864, 1865, 7, 13, 2, 2, 1865, 1866,
	5, 90, 46, 2, 1866, 1867, 7, 109, 2, 2, 1867, 1874, 3, 2, 2, 2, 1868, 1869,
	7, 13, 2, 2, 1869, 1870, 5, 90, 46, 2, 1870, 1871, 7, 10, 2, 2, 1871, 1872,
	7, 109, 2, 2, 1872, 1874, 3, 2, 2, 2, 1873, 1862, 3, 2, 2, 2, 1873, 1864,
	3, 2, 2, 2, 1873, 1868, 3, 2, 2, 2, 1874, 83, 3, 2, 2, 2, 1875, 1876, 7,
	13, 2, 2, 1876, 1887, 7, 109, 2, 2, 1877, 1878, 7, 13, 2, 2, 1878, 1879,
	5, 92, 47, 2, 1879, 1880, 7, 109, 2, 2, 1880, 1887, 3, 2, 2, 2, 1881, 1882,
	7, 13, 2, 2, 1882, 1883, 5, 92, 47, 2, 1883, 1884, 7, 10, 2, 2, 1884, 1885,
	7, 109, 2, 2, 1885, 1887, 3, 2, 2, 2, 1886, 1875, 3, 2, 2, 2, 1886, 1877,
	3, 2, 2, 2, 1886, 1881, 3, 2, 2, 2, 1887, 85, 3, 2, 2, 2, 1888, 1889, 7,
	13, 2, 2, 1889, 1900, 7, 109, 2, 2, 1890, 1891, 7, 13, 2, 2, 1891, 1892,
	5, 94, 48, 2, 1892, 1893, 7, 109, 2, 2, 1893, 1900, 3, 2, 2, 2, 1894, 1895,
	7, 13, 2, 2, 1895, 1896, 5, 94, 48, 2, 1896, 1897, 7, 10, 2, 2, 1897, 1898,
	7, 109, 2, 2, 1898, 1900, 3, 2, 2, 2, 1899, 1888, 3, 2, 2, 2, 1899, 1890,
	3, 2, 2, 2, 1899, 1894, 3, 2, 2, 2, 1900, 87, 3, 2, 2, 2, 1901, 1903, 5,
	96, 49, 2, 1902, 1901, 3, 2, 2, 2, 1903, 1906, 3, 2, 2, 2, 1904, 1902,
	3, 2, 2, 2, 1904, 1905, 3, 2, 2, 2, 1905, 89, 3, 2, 2, 2, 1906, 1904, 3,
	2, 2, 2, 1907, 1909, 5, 98, 50, 2, 1908, 1907, 3, 2, 2, 2, 1909, 1912,
	3, 2, 2, 2, 1910, 1908, 3, 2, 2, 2, 1910, 1911, 3, 2, 2, 2, 1911, 91, 3,
	2, 2, 2, 1912, 1910, 3, 2, 2, 2, 1913, 1915, 5, 100, 51, 2, 1914, 1913,
	3, 2, 2, 2, 1915, 1918, 3, 2, 2, 2, 1916, 1914, 3, 2, 2, 2, 1916, 1917,
	3, 2, 2, 2, 1917, 93, 3, 2, 2, 2, 1918, 1916, 3, 2, 2, 2, 1919, 1921, 5,
	102, 52, 2, 1920, 1919, 3, 2, 2, 2, 1921, 1924, 3, 2, 2, 2, 1922, 1920,
	3, 2, 2, 2, 1922, 1923, 3, 2, 2, 2, 1923, 95, 3, 2, 2, 2, 1924, 1922, 3,
	2, 2, 2, 1925, 1935, 5, 12, 7, 2, 1926, 1935, 5, 122, 62, 2, 1927, 1928,
	5, 104, 53, 2, 1928, 1929, 7, 14, 2, 2, 1929, 1930, 5, 458, 230, 2, 1930,
	1935, 3, 2, 2, 2, 1931, 1935, 5, 1148, 575, 2, 1932, 1933, 7, 9, 2, 2,
	1933, 1935, 5, 458, 230, 2, 1934, 1925, 3, 2, 2, 2, 1934, 1926, 3, 2, 2,
	2, 1934, 1927, 3, 2, 2, 2, 1934, 1931, 3, 2, 2, 2, 1934, 1932, 3, 2, 2,
	2, 1935, 97, 3, 2, 2, 2, 1936, 1946, 5, 14, 8, 2, 1937, 1946, 5, 124, 63,
	2, 1938, 1939, 5, 106, 54, 2, 1939, 1940, 7, 14, 2, 2, 1940, 1941, 5, 462,
	232, 2, 1941, 1946, 3, 2, 2, 2, 1942, 1946, 5, 1150, 576, 2, 1943, 1944,
	7, 9, 2, 2, 1944, 1946, 5, 462, 232, 2, 1945, 1936, 3, 2, 2, 2, 1945, 1937,
	3, 2, 2, 2, 1945, 1938, 3, 2, 2, 2, 1945, 1942, 3, 2, 2, 2, 1945, 1943,
	3, 2, 2, 2, 1946, 99, 3, 2, 2, 2, 1947, 1957, 5, 16, 9, 2, 1948, 1957,
	5, 126, 64, 2, 1949, 1950, 5, 108, 55, 2, 1950, 1951, 7, 14, 2, 2, 1951,
	1952, 5, 466, 234, 2, 1952, 1957, 3, 2, 2, 2, 1953, 1957, 5, 1152, 577,
	2, 1954, 1955, 7, 9, 2, 2, 1955, 1957, 5, 466, 234, 2, 1956, 1947, 3, 2,
	2, 2, 1956, 1948, 3, 2, 2, 2, 1956, 1949, 3, 2, 2, 2, 1956, 1953, 3, 2,
	2, 2, 1956, 1954, 3, 2, 2, 2, 1957, 101, 3, 2, 2, 2, 1958, 1968, 5, 18,
	10, 2, 1959, 1968, 5, 128, 65, 2, 1960, 1961, 5, 110, 56, 2, 1961, 1962,
	7, 14, 2, 2, 1962, 1963, 5, 470, 236, 2, 1963, 1968, 3, 2, 2, 2, 1964,
	1968, 5, 1154, 578, 2, 1965, 1966, 7, 9, 2, 2, 1966, 1968, 5, 470, 236,
	2, 1967, 1958, 3, 2, 2, 2, 1967, 1959, 3, 2, 2, 2, 1967, 1960, 3, 2, 2,
	2, 1967, 1964, 3, 2, 2, 2, 1967, 1965, 3, 2, 2, 2, 1968, 103, 3, 2, 2,
	2, 1969, 1972, 5, 112, 57, 2, 1970, 1972, 5, 114, 58, 2, 1971, 1969, 3,
	2, 2, 2, 1971, 1970, 3, 2, 2, 2, 1972, 105, 3, 2, 2, 2, 1973, 1976, 5,
	112, 57, 2, 1974, 1976, 5, 116, 59, 2, 1975, 1973, 3, 2, 2, 2, 1975, 1974,
	3, 2, 2, 2, 1976, 107, 3, 2, 2, 2, 1977, 1980, 5, 112, 57, 2, 1978, 1980,
	5, 118, 60, 2, 1979, 1977, 3, 2, 2, 2, 1979, 1978, 3, 2, 2, 2, 1980, 109,
	3, 2, 2, 2, 1981, 1984, 5, 112, 57, 2, 1982, 1984, 5, 120, 61, 2, 1983,
	1981, 3, 2, 2, 2, 1983, 1982, 3, 2, 2, 2, 1984, 111, 3, 2, 2, 2, 1985,
	1986, 9, 8, 2, 2, 1986, 113, 3, 2, 2, 2, 1987, 1988, 7, 11, 2, 2, 1988,
	1989, 5, 458, 230, 2, 1989, 1990, 7, 12, 2, 2, 1990, 115, 3, 2, 2, 2, 1991,
	1992, 7, 11, 2, 2, 1992, 1993, 5, 462, 232, 2, 1993, 1994, 7, 12, 2, 2,
	1994, 117, 3, 2, 2, 2, 1995, 1996, 7, 11, 2, 2, 1996, 1997, 5, 466, 234,
	2, 1997, 1998, 7, 12, 2, 2, 1998, 119, 3, 2, 2, 2, 1999, 2000, 7, 11, 2,
	2, 2000, 2001, 5, 470, 236, 2, 2001, 2002, 7, 12, 2, 2, 2002, 121, 3, 2,
	2, 2, 2003, 2004, 5, 12, 7, 2, 2004, 2005, 5, 132, 67, 2, 2005, 123, 3,
	2, 2, 2, 2006, 2007, 5, 14, 8, 2, 2007, 2008, 5, 136, 69, 2, 2008, 125,
	3, 2, 2, 2, 2009, 2010, 5, 16, 9, 2, 2010, 2011, 5, 140, 71, 2, 2011, 127,
	3, 2, 2, 2, 2012, 2013, 5, 18, 10, 2, 2013, 2014, 5, 144, 73, 2, 2014,
	129, 3, 2, 2, 2, 2015, 2016, 7, 15, 2, 2, 2016, 2017, 5, 456, 229, 2, 2017,
	131, 3, 2, 2, 2, 2018, 2019, 7, 15, 2, 2, 2019, 2020, 5, 458, 230, 2, 2020,
	133, 3, 2, 2, 2, 2021, 2022, 7, 15, 2, 2, 2022, 2023, 5, 460, 231, 2, 2023,
	135, 3, 2, 2, 2, 2024, 2025, 7, 15, 2, 2, 2025, 2026, 5, 462, 232, 2, 2026,
	137, 3, 2, 2, 2, 2027, 2028, 7, 15, 2, 2, 2028, 2029, 5, 464, 233, 2, 2029,
	139, 3, 2, 2, 2, 2030, 2031, 7, 15, 2, 2, 2031, 2032, 5, 466, 234, 2, 2032,
	141, 3, 2, 2, 2, 2033, 2034, 7, 15, 2, 2, 2034, 2035, 5, 468, 235, 2, 2035,
	143, 3, 2, 2, 2, 2036, 2037, 7, 15, 2, 2, 2037, 2038, 5, 470, 236, 2, 2038,
	145, 3, 2, 2, 2, 2039, 2042, 7, 129, 2, 2, 2040, 2042, 5, 162, 82, 2, 2041,
	2039, 3, 2, 2, 2, 2041, 2040, 3, 2, 2, 2, 2042, 147, 3, 2, 2, 2, 2043,
	2046, 7, 129, 2, 2, 2044, 2046, 5, 164, 83, 2, 2045, 2043, 3, 2, 2, 2,
	2045, 2044, 3, 2, 2, 2, 2046, 149, 3, 2, 2, 2, 2047, 2050, 7, 129, 2, 2,
	2048, 2050, 5, 166, 84, 2, 2049, 2047, 3, 2, 2, 2, 2049, 2048, 3, 2, 2,
	2, 2050, 151, 3, 2, 2, 2, 2051, 2054, 7, 129, 2, 2, 2052, 2054, 5, 168,
	85, 2, 2053, 2051, 3, 2, 2, 2, 2053, 2052, 3, 2, 2, 2, 2054, 153, 3, 2,
	2, 2, 2055, 2058, 7, 129, 2, 2, 2056, 2058, 5, 170, 86, 2, 2057, 2055,
	3, 2, 2, 2, 2057, 2056, 3, 2, 2, 2, 2058, 155, 3, 2, 2, 2, 2059, 2062,
	7, 129, 2, 2, 2060, 2062, 5, 172, 87, 2, 2061, 2059, 3, 2, 2, 2, 2061,
	2060, 3, 2, 2, 2, 2062, 157, 3, 2, 2, 2, 2063, 2066, 7, 129, 2, 2, 2064,
	2066, 5, 174, 88, 2, 2065, 2063, 3, 2, 2, 2, 2065, 2064, 3, 2, 2, 2, 2066,
	159, 3, 2, 2, 2, 2067, 2070, 7, 129, 2, 2, 2068, 2070, 5, 176, 89, 2, 2069,
	2067, 3, 2, 2, 2, 2069, 2068, 3, 2, 2, 2, 2070, 161, 3, 2, 2, 2, 2071,
	2072, 7, 130, 2, 2, 2072, 2073, 5, 474, 238, 2, 2073, 2074, 5, 178, 90,
	2, 2074, 163, 3, 2, 2, 2, 2075, 2076, 7, 130, 2, 2, 2076, 2077, 5, 478,
	240, 2, 2077, 2078, 5, 180, 91, 2, 2078, 165, 3, 2, 2, 2, 2079, 2080, 7,
	130, 2, 2, 2080, 2081, 5, 482, 242, 2, 2081, 2082, 5, 182, 92, 2, 2082,
	167, 3, 2, 2, 2, 2083, 2084, 7, 130, 2, 2, 2084, 2085, 5, 486, 244, 2,
	2085, 2086, 5, 184, 93, 2, 2086, 169, 3, 2, 2, 2, 2087, 2088, 7, 130, 2,
	2, 2088, 2089, 5, 474, 238, 2, 2089, 2090, 5, 186, 94, 2, 2090, 171, 3,
	2, 2, 2, 2091, 2092, 7, 130, 2, 2, 2092, 2093, 5, 478, 240, 2, 2093, 2094,
	5, 188, 95, 2, 2094, 173, 3, 2, 2, 2, 2095, 2096, 7, 130, 2, 2, 2096, 2097,
	5, 482, 242, 2, 2097, 2098, 5, 190, 96, 2, 2098, 175, 3, 2, 2, 2, 2099,
	2100, 7, 130, 2, 2, 2100, 2101, 5, 486, 244, 2, 2101, 2102, 5, 192, 97,
	2, 2102, 177, 3, 2, 2, 2, 2103, 2105, 5, 194, 98, 2, 2104, 2103, 3, 2,
	2, 2, 2105, 2108, 3, 2, 2, 2, 2106, 2104, 3, 2, 2, 2, 2106, 2107, 3, 2,
	2, 2, 2107, 2109, 3, 2, 2, 2, 2108, 2106, 3, 2, 2, 2, 2109, 2110, 7, 133,
	2, 2, 2110, 179, 3, 2, 2, 2, 2111, 2113, 5, 196, 99, 2, 2112, 2111, 3,
	2, 2, 2, 2113, 2116, 3, 2, 2, 2, 2114, 2112, 3, 2, 2, 2, 2114, 2115, 3,
	2, 2, 2, 2115, 2117, 3, 2, 2, 2, 2116, 2114, 3, 2, 2, 2, 2117, 2118, 7,
	133, 2, 2, 2118, 181, 3, 2, 2, 2, 2119, 2121, 5, 198, 100, 2, 2120, 2119,
	3, 2, 2, 2, 2121, 2124, 3, 2, 2, 2, 2122, 2120, 3, 2, 2, 2, 2122, 2123,
	3, 2, 2, 2, 2123, 2125, 3, 2, 2, 2, 2124, 2122, 3, 2, 2, 2, 2125, 2126,
	7, 133, 2, 2, 2126, 183, 3, 2, 2, 2, 2127, 2129, 5, 200, 101, 2, 2128,
	2127, 3, 2, 2, 2, 2129, 2132, 3, 2, 2, 2, 2130, 2128, 3, 2, 2, 2, 2130,
	2131, 3, 2, 2, 2, 2131, 2133, 3, 2, 2, 2, 2132, 2130, 3, 2, 2, 2, 2133,
	2134, 7, 133, 2, 2, 2134, 185, 3, 2, 2, 2, 2135, 2137, 5, 202, 102, 2,
	2136, 2135, 3, 2, 2, 2, 2137, 2140, 3, 2, 2, 2, 2138, 2136, 3, 2, 2, 2,
	2138, 2139, 3, 2, 2, 2, 2139, 2141, 3, 2, 2, 2, 2140, 2138, 3, 2, 2, 2,
	2141, 2142, 7, 133, 2, 2, 2142, 187, 3, 2, 2, 2, 2143, 2145, 5, 204, 103,
	2, 2144, 2143, 3, 2, 2, 2, 2145, 2148, 3, 2, 2, 2, 2146, 2144, 3, 2, 2,
	2, 2146, 2147, 3, 2, 2, 2, 2147, 2149, 3, 2, 2, 2, 2148, 2146, 3, 2, 2,
	2, 2149, 2150, 7, 133, 2, 2, 2150, 189, 3, 2, 2, 2, 2151, 2153, 5, 206,
	104, 2, 2152, 2151, 3, 2, 2, 2, 2153, 2156, 3, 2, 2, 2, 2154, 2152, 3,
	2, 2, 2, 2154, 2155, 3, 2, 2, 2, 2155, 2157, 3, 2, 2, 2, 2156, 2154, 3,
	2, 2, 2, 2157, 2158, 7, 133, 2, 2, 2158, 191, 3, 2, 2, 2, 2159, 2161, 5,
	208, 105, 2, 2160, 2159, 3, 2, 2, 2, 2161, 2164, 3, 2, 2, 2, 2162, 2160,
	3, 2, 2, 2, 2162, 2163, 3, 2, 2, 2, 2163, 2165, 3, 2, 2, 2, 2164, 2162,
	3, 2, 2, 2, 2165, 2166, 7, 133, 2, 2, 2166, 193, 3, 2, 2, 2, 2167, 2168,
	7, 133, 2, 2, 2168, 2170, 5, 474, 238, 2, 2169, 2167, 3, 2, 2, 2, 2170,
	2171, 3, 2, 2, 2, 2171, 2169, 3, 2, 2, 2, 2171, 2172, 3, 2, 2, 2, 2172,
	195, 3, 2, 2, 2, 2173, 2174, 7, 133, 2, 2, 2174, 2176, 5, 478, 240, 2,
	2175, 2173, 3, 2, 2, 2, 2176, 2177, 3, 2, 2, 2, 2177, 2175, 3, 2, 2, 2,
	2177, 2178, 3, 2, 2, 2, 2178, 197, 3, 2, 2, 2, 2179, 2180, 7, 133, 2, 2,
	2180, 2182, 5, 482, 242, 2, 2181, 2179, 3, 2, 2, 2, 2182, 2183, 3, 2, 2,
	2, 2183, 2181, 3, 2, 2, 2, 2183, 2184, 3, 2, 2, 2, 2184, 199, 3, 2, 2,
	2, 2185, 2186, 7, 133, 2, 2, 2186, 2188, 5, 486, 244, 2, 2187, 2185, 3,
	2, 2, 2, 2188, 2189, 3, 2, 2, 2, 2189, 2187, 3, 2, 2, 2, 2189, 2190, 3,
	2, 2, 2, 2190, 201, 3, 2, 2, 2, 2191, 2192, 7, 133, 2, 2, 2192, 2194, 5,
	474, 238, 2, 2193, 2191, 3, 2, 2, 2, 2194, 2195, 3, 2, 2, 2, 2195, 2193,
	3, 2, 2, 2, 2195, 2196, 3, 2, 2, 2, 2196, 203, 3, 2, 2, 2, 2197, 2198,
	7, 133, 2, 2, 2198, 2200, 5, 478, 240, 2, 2199, 2197, 3, 2, 2, 2, 2200,
	2201, 3, 2, 2, 2, 2201, 2199, 3, 2, 2, 2, 2201, 2202, 3, 2, 2, 2, 2202,
	205, 3, 2, 2, 2, 2203, 2204, 7, 133, 2, 2, 2204, 2206, 5, 482, 242, 2,
	2205, 2203, 3, 2, 2, 2, 2206, 2207, 3, 2, 2, 2, 2207, 2205, 3, 2, 2, 2,
	2207, 2208, 3, 2, 2, 2, 2208, 207, 3, 2, 2, 2, 2209, 2210, 7, 133, 2, 2,
	2210, 2212, 5, 486, 244, 2, 2211, 2209, 3, 2, 2, 2, 2212, 2213, 3, 2, 2,
	2, 2213, 2211, 3, 2, 2, 2, 2213, 2214, 3, 2, 2, 2, 2214, 209, 3, 2, 2,
	2, 2215, 2216, 8, 106, 1, 2, 2216, 2224, 5, 36, 19, 2, 2217, 2224, 5, 218,
	110, 2, 2218, 2224, 5, 226, 114, 2, 2219, 2220, 7, 17, 2, 2, 2220, 2221,
	5, 210, 106, 2, 2221, 2222, 5, 254, 128, 2, 2222, 2224, 3, 2, 2, 2, 2223,
	2215, 3, 2, 2, 2, 2223, 2217, 3, 2, 2, 2, 2223, 2218, 3, 2, 2, 2, 2223,
	2219, 3, 2, 2, 2, 2224, 2237, 3, 2, 2, 2, 2225, 2226, 12, 8, 2, 2, 2226,
	2227, 7, 11, 2, 2, 2227, 2228, 5, 474, 238, 2, 2228, 2229, 7, 12, 2, 2,
	2229, 2236, 3, 2, 2, 2, 2230, 2231, 12, 7, 2, 2, 2231, 2232, 7, 16, 2,
	2, 2232, 2236, 7, 103, 2, 2, 2233, 2234, 12, 6, 2, 2, 2234, 2236, 5, 154,
	78, 2, 2235, 2225, 3, 2, 2, 2, 2235, 2230, 3, 2, 2, 2, 2235, 2233, 3, 2,
	2, 2, 2236, 2239, 3, 2, 2, 2, 2237, 2235, 3, 2, 2, 2, 2237, 2238, 3, 2,
	2, 2, 2238, 211, 3, 2, 2, 2, 2239, 2237, 3, 2, 2, 2, 2240, 2241, 8, 107,
	1, 2, 2241, 2249, 5, 38, 20, 2, 2242, 2249, 5, 220, 111, 2, 2243, 2249,
	5, 226, 114, 2, 2244, 2245, 7, 17, 2, 2, 2245, 2246, 5, 212, 107, 2, 2246,
	2247, 5, 256, 129, 2, 2247, 2249, 3, 2, 2, 2, 2248, 2240, 3, 2, 2, 2, 2248,
	2242, 3, 2, 2, 2, 2248, 2243, 3, 2, 2, 2, 2248, 2244, 3, 2, 2, 2, 2249,
	2262, 3, 2, 2, 2, 2250, 2251, 12, 8, 2, 2, 2251, 2252, 7, 11, 2, 2, 2252,
	2253, 5, 478, 240, 2, 2253, 2254, 7, 12, 2, 2, 2254, 2261, 3, 2, 2, 2,
	2255, 2256, 12, 7, 2, 2, 2256, 2257, 7, 16, 2, 2, 2257, 2261, 7, 103, 2,
	2, 2258, 2259, 12, 6, 2, 2, 2259, 2261, 5, 156, 79, 2, 2260, 2250, 3, 2,
	2, 2, 2260, 2255, 3, 2, 2, 2, 2260, 2258, 3, 2, 2, 2, 2261, 2264, 3, 2,
	2, 2, 2262, 2260, 3, 2, 2, 2, 2262, 2263, 3, 2, 2, 2, 2263, 213, 3, 2,
	2, 2, 2264, 2262, 3, 2, 2, 2, 2265, 2266, 8, 108, 1, 2, 2266, 2274, 5,
	40, 21, 2, 2267, 2274, 5, 222, 112, 2, 2268, 2274, 5, 226, 114, 2, 2269,
	2270, 7, 17, 2, 2, 2270, 2271, 5, 214, 108, 2, 2271, 2272, 5, 258, 130,
	2, 2272, 2274, 3, 2, 2, 2, 2273, 2265, 3, 2, 2, 2, 2273, 2267, 3, 2, 2,
	2, 2273, 2268, 3, 2, 2, 2, 2273, 2269, 3, 2, 2, 2, 2274, 2287, 3, 2, 2,
	2, 2275, 2276, 12, 8, 2, 2, 2276, 2277, 7, 11, 2, 2, 2277, 2278, 5, 482,
	242, 2, 2278, 2279, 7, 12, 2, 2, 2279, 2286, 3, 2, 2, 2, 2280, 2281, 12,
	7, 2, 2, 2281, 2282, 7, 16, 2, 2, 2282, 2286, 7, 103, 2, 2, 2283, 2284,
	12, 6, 2, 2, 2284, 2286, 5, 158, 80, 2, 2285, 2275, 3, 2, 2, 2, 2285, 2280,
	3, 2, 2, 2, 2285, 2283, 3, 2, 2, 2, 2286, 2289, 3, 2, 2, 2, 2287, 2285,
	3, 2, 2, 2, 2287, 2288, 3, 2, 2, 2, 2288, 215, 3, 2, 2, 2, 2289, 2287,
	3, 2, 2, 2, 2290, 2291, 8, 109, 1, 2, 2291, 2299, 5, 42, 22, 2, 2292, 2299,
	5, 224, 113, 2, 2293, 2299, 5, 226, 114, 2, 2294, 2295, 7, 17, 2, 2, 2295,
	2296, 5, 216, 109, 2, 2296, 2297, 5, 260, 131, 2, 2297, 2299, 3, 2, 2,
	2, 2298, 2290, 3, 2, 2, 2, 2298, 2292, 3, 2, 2, 2, 2298, 2293, 3, 2, 2,
	2, 2298, 2294, 3, 2, 2, 2, 2299, 2312, 3, 2, 2, 2, 2300, 2301, 12, 8, 2,
	2, 2301, 2302, 7, 11, 2, 2, 2302, 2303, 5, 486, 244, 2, 2303, 2304, 7,
	12, 2, 2, 2304, 2311, 3, 2, 2, 2, 2305, 2306, 12, 7, 2, 2, 2306, 2307,
	7, 16, 2, 2, 2307, 2311, 7, 103, 2, 2, 2308, 2309, 12, 6, 2, 2, 2309, 2311,
	5, 160, 81, 2, 2310, 2300, 3, 2, 2, 2, 2310, 2305, 3, 2, 2, 2, 2310, 2308,
	3, 2, 2, 2, 2311, 2314, 3, 2, 2, 2, 2312, 2310, 3, 2, 2, 2, 2312, 2313,
	3, 2, 2, 2, 2313, 217, 3, 2, 2, 2, 2314, 2312, 3, 2, 2, 2, 2315, 2316,
	7, 18, 2, 2, 2316, 2317, 7, 11, 2, 2, 2317, 2318, 5, 474, 238, 2, 2318,
	2319, 7, 12, 2, 2, 2319, 2324, 3, 2, 2, 2, 2320, 2321, 7, 18, 2, 2, 2321,
	2322, 7, 16, 2, 2, 2322, 2324, 7, 103, 2, 2, 2323, 2315, 3, 2, 2, 2, 2323,
	2320, 3, 2, 2, 2, 2324, 219, 3, 2, 2, 2, 2325, 2326, 7, 18, 2, 2, 2326,
	2327, 7, 11, 2, 2, 2327, 2328, 5, 478, 240, 2, 2328, 2329, 7, 12, 2, 2,
	2329, 2334, 3, 2, 2, 2, 2330, 2331, 7, 18, 2, 2, 2331, 2332, 7, 16, 2,
	2, 2332, 2334, 7, 103, 2, 2, 2333, 2325, 3, 2, 2, 2, 2333, 2330, 3, 2,
	2, 2, 2334, 221, 3, 2, 2, 2, 2335, 2336, 7, 18, 2, 2, 2336, 2337, 7, 11,
	2, 2, 2337, 2338, 5, 482, 242, 2, 2338, 2339, 7, 12, 2, 2, 2339, 2344,
	3, 2, 2, 2, 2340, 2341, 7, 18, 2, 2, 2341, 2342, 7, 16, 2, 2, 2342, 2344,
	7, 103, 2, 2, 2343, 2335, 3, 2, 2, 2, 2343, 2340, 3, 2, 2, 2, 2344, 223,
	3, 2, 2, 2, 2345, 2346, 7, 18, 2, 2, 2346, 2347, 7, 11, 2, 2, 2347, 2348,
	5, 486, 244, 2, 2348, 2349, 7, 12, 2, 2, 2349, 2354, 3, 2, 2, 2, 2350,
	2351, 7, 18, 2, 2, 2351, 2352, 7, 16, 2, 2, 2352, 2354, 7, 103, 2, 2, 2353,
	2345, 3, 2, 2, 2, 2353, 2350, 3, 2, 2, 2, 2354, 225, 3, 2, 2, 2, 2355,
	2356, 5, 228, 115, 2, 2356, 227, 3, 2, 2, 2, 2357, 2358, 7, 17, 2, 2, 2358,
	2359, 7, 16, 2, 2, 2359, 2360, 7, 19, 2, 2, 2360, 229, 3, 2, 2, 2, 2361,
	2365, 5, 210, 106, 2, 2362, 2363, 7, 17, 2, 2, 2363, 2365, 5, 230, 116,
	2, 2364, 2361, 3, 2, 2, 2, 2364, 2362, 3, 2, 2, 2, 2365, 231, 3, 2, 2,
	2, 2366, 2370, 5, 212, 107, 2, 2367, 2368, 7, 17, 2, 2, 2368, 2370, 5,
	232, 117, 2, 2369, 2366, 3, 2, 2, 2, 2369, 2367, 3, 2, 2, 2, 2370, 233,
	3, 2, 2, 2, 2371, 2375, 5, 214, 108, 2, 2372, 2373, 7, 17, 2, 2, 2373,
	2375, 5, 234, 118, 2, 2374, 2371, 3, 2, 2, 2, 2374, 2372, 3, 2, 2, 2, 2375,
	235, 3, 2, 2, 2, 2376, 2380, 5, 216, 109, 2, 2377, 2378, 7, 17, 2, 2, 2378,
	2380, 5, 236, 119, 2, 2379, 2376, 3, 2, 2, 2, 2379, 2377, 3, 2, 2, 2, 2380,
	237, 3, 2, 2, 2, 2381, 2382, 8, 120, 1, 2, 2382, 2385, 5, 1330, 666, 2,
	2383, 2385, 5, 246, 124, 2, 2384, 2381, 3, 2, 2, 2, 2384, 2383, 3, 2, 2,
	2, 2385, 2400, 3, 2, 2, 2, 2386, 2387, 12, 6, 2, 2, 2387, 2399, 5, 254,
	128, 2, 2388, 2389, 12, 5, 2, 2, 2389, 2390, 7, 11, 2, 2, 2390, 2391, 5,
	474, 238, 2, 2391, 2392, 7, 12, 2, 2, 2392, 2399, 3, 2, 2, 2, 2393, 2394,
	12, 4, 2, 2, 2394, 2395, 7, 16, 2, 2, 2395, 2399, 7, 103, 2, 2, 2396, 2397,
	12, 3, 2, 2, 2397, 2399, 5, 154, 78, 2, 2398, 2386, 3, 2, 2, 2, 2398, 2388,
	3, 2, 2, 2, 2398, 2393, 3, 2, 2, 2, 2398, 2396, 3, 2, 2, 2, 2399, 2402,
	3, 2, 2, 2, 2400, 2398, 3, 2, 2, 2, 2400, 2401, 3, 2, 2, 2, 2401, 239,
	3, 2, 2, 2, 2402, 2400, 3, 2, 2, 2, 2403, 2404, 8, 121, 1, 2, 2404, 2407,
	5, 1332, 667, 2, 2405, 2407, 5, 248, 125, 2, 2406, 2403, 3, 2, 2, 2, 2406,
	2405, 3, 2, 2, 2, 2407, 2422, 3, 2, 2, 2, 2408, 2409, 12, 6, 2, 2, 2409,
	2421, 5, 256, 129, 2, 2410, 2411, 12, 5, 2, 2, 2411, 2412, 7, 11, 2, 2,
	2412, 2413, 5, 478, 240, 2, 2413, 2414, 7, 12, 2, 2, 2414, 2421, 3, 2,
	2, 2, 2415, 2416, 12, 4, 2, 2, 2416, 2417, 7, 16, 2, 2, 2417, 2421, 7,
	103, 2, 2, 2418, 2419, 12, 3, 2, 2, 2419, 2421, 5, 156, 79, 2, 2420, 2408,
	3, 2, 2, 2, 2420, 2410, 3, 2, 2, 2, 2420, 2415, 3, 2, 2, 2, 2420, 2418,
	3, 2, 2, 2, 2421, 2424, 3, 2, 2, 2, 2422, 2420, 3, 2, 2, 2, 2422, 2423,
	3, 2, 2, 2, 2423, 241, 3, 2, 2, 2, 2424, 2422, 3, 2, 2, 2, 2425, 2426,
	8, 122, 1, 2, 2426, 2429, 5, 1334, 668, 2, 2427, 2429, 5, 250, 126, 2,
	2428, 2425, 3, 2, 2, 2, 2428, 2427, 3, 2, 2, 2, 2429, 2444, 3, 2, 2, 2,
	2430, 2431, 12, 6, 2, 2, 2431, 2443, 5, 258, 130, 2, 2432, 2433, 12, 5,
	2, 2, 2433, 2434, 7, 11, 2, 2, 2434, 2435, 5, 482, 242, 2, 2435, 2436,
	7, 12, 2, 2, 2436, 2443, 3, 2, 2, 2, 2437, 2438, 12, 4, 2, 2, 2438, 2439,
	7, 16, 2, 2, 2439, 2443, 7, 103, 2, 2, 2440, 2441, 12, 3, 2, 2, 2441, 2443,
	5, 158, 80, 2, 2442, 2430, 3, 2, 2, 2, 2442, 2432, 3, 2, 2, 2, 2442, 2437,
	3, 2, 2, 2, 2442, 2440, 3, 2, 2, 2, 2443, 2446, 3, 2, 2, 2, 2444, 2442,
	3, 2, 2, 2, 2444, 2445, 3, 2, 2, 2, 2445, 243, 3, 2, 2, 2, 2446, 2444,
	3, 2, 2, 2, 2447, 2448, 8, 123, 1, 2, 2448, 2451, 5, 1336, 669, 2, 2449,
	2451, 5, 252, 127, 2, 2450, 2447, 3, 2, 2, 2, 2450, 2449, 3, 2, 2, 2, 2451,
	2466, 3, 2, 2, 2, 2452, 2453, 12, 6, 2, 2, 2453, 2465, 5, 260, 131, 2,
	2454, 2455, 12, 5, 2, 2, 2455, 2456, 7, 11, 2, 2, 2456, 2457, 5, 486, 244,
	2, 2457, 2458, 7, 12, 2, 2, 2458, 2465, 3, 2, 2, 2, 2459, 2460, 12, 4,
	2, 2, 2460, 2461, 7, 16, 2, 2, 2461, 2465, 7, 103, 2, 2, 2462, 2463, 12,
	3, 2, 2, 2463, 2465, 5, 160, 81, 2, 2464, 2452, 3, 2, 2, 2, 2464, 2454,
	3, 2, 2, 2, 2464, 2459, 3, 2, 2, 2, 2464, 2462, 3, 2, 2, 2, 2465, 2468,
	3, 2, 2, 2, 2466, 2464, 3, 2, 2, 2, 2466, 2467, 3, 2, 2, 2, 2467, 245,
	3, 2, 2, 2, 2468, 2466, 3, 2, 2, 2, 2469, 2470, 7, 18, 2, 2, 2470, 2471,
	5, 254, 128, 2, 2471, 247, 3, 2, 2, 2, 2472, 2473, 7, 18, 2, 2, 2473, 2474,
	5, 256, 129, 2, 2474, 249, 3, 2, 2, 2, 2475, 2476, 7, 18, 2, 2, 2476, 2477,
	5, 258, 130, 2, 2477, 251, 3, 2, 2, 2, 2478, 2479, 7, 18, 2, 2, 2479, 2480,
	5, 260, 131, 2, 2480, 253, 3, 2, 2, 2, 2481, 2482, 7, 7, 2, 2, 2482, 2490,
	7, 8, 2, 2, 2483, 2485, 7, 7, 2, 2, 2484, 2486, 5, 262, 132, 2, 2485, 2484,
	3, 2, 2, 2, 2485, 2486, 3, 2, 2, 2, 2486, 2487, 3, 2, 2, 2, 2487, 2488,
	7, 10, 2, 2, 2488, 2490, 7, 8, 2, 2, 2489, 2481, 3, 2, 2, 2, 2489, 2483,
	3, 2, 2, 2, 2490, 255, 3, 2, 2, 2, 2491, 2492, 7, 7, 2, 2, 2492, 2500,
	7, 8, 2, 2, 2493, 2495, 7, 7, 2, 2, 2494, 2496, 5, 264, 133, 2, 2495, 2494,
	3, 2, 2, 2, 2495, 2496, 3, 2, 2, 2, 2496, 2497, 3, 2, 2, 2, 2497, 2498,
	7, 10, 2, 2, 2498, 2500, 7, 8, 2, 2, 2499, 2491, 3, 2, 2, 2, 2499, 2493,
	3, 2, 2, 2, 2500, 257, 3, 2, 2, 2, 2501, 2502, 7, 7, 2, 2, 2502, 2510,
	7, 8, 2, 2, 2503, 2505, 7, 7, 2, 2, 2504, 2506, 5, 266, 134, 2, 2505, 2504,
	3, 2, 2, 2, 2505, 2506, 3, 2, 2, 2, 2506, 2507, 3, 2, 2, 2, 2507, 2508,
	7, 10, 2, 2, 2508, 2510, 7, 8, 2, 2, 2509, 2501, 3, 2, 2, 2, 2509, 2503,
	3, 2, 2, 2, 2510, 259, 3, 2, 2, 2, 2511, 2512, 7, 7, 2, 2, 2512, 2520,
	7, 8, 2, 2, 2513, 2515, 7, 7, 2, 2, 2514, 2516, 5, 268, 135, 2, 2515, 2514,
	3, 2, 2, 2, 2515, 2516, 3, 2, 2, 2, 2516, 2517, 3, 2, 2, 2, 2517, 2518,
	7, 10, 2, 2, 2518, 2520, 7, 8, 2, 2, 2519, 2511, 3, 2, 2, 2, 2519, 2513,
	3, 2, 2, 2, 2520, 261, 3, 2, 2, 2, 2521, 2523, 8, 132, 1, 2, 2522, 2524,
	7, 9, 2, 2, 2523, 2522, 3, 2, 2, 2, 2523, 2524, 3, 2, 2, 2, 2524, 2525,
	3, 2, 2, 2, 2525, 2526, 5, 458, 230, 2, 2526, 2535, 3, 2, 2, 2, 2527, 2528,
	12, 3, 2, 2, 2528, 2530, 7, 10, 2, 2, 2529, 2531, 7, 9, 2, 2, 2530, 2529,
	3, 2, 2, 2, 2530, 2531, 3, 2, 2, 2, 2531, 2532, 3, 2, 2, 2, 2532, 2534,
	5, 458, 230, 2, 2533, 2527, 3, 2, 2, 2, 2534, 2537, 3, 2, 2, 2, 2535, 2533,
	3, 2, 2, 2, 2535, 2536, 3, 2, 2, 2, 2536, 263, 3, 2, 2, 2, 2537, 2535,
	3, 2, 2, 2, 2538, 2540, 8, 133, 1, 2, 2539, 2541, 7, 9, 2, 2, 2540, 2539,
	3, 2, 2, 2, 2540, 2541, 3, 2, 2, 2, 2541, 2542, 3, 2, 2, 2, 2542, 2543,
	5, 462, 232, 2, 2543, 2552, 3, 2, 2, 2, 2544, 2545, 12, 3, 2, 2, 2545,
	2547, 7, 10, 2, 2, 2546, 2548, 7, 9, 2, 2, 2547, 2546, 3, 2, 2, 2, 2547,
	2548, 3, 2, 2, 2, 2548, 2549, 3, 2, 2, 2, 2549, 2551, 5, 462, 232, 2, 2550,
	2544, 3, 2, 2, 2, 2551, 2554, 3, 2, 2, 2, 2552, 2550, 3, 2, 2, 2, 2552,
	2553, 3, 2, 2, 2, 2553, 265, 3, 2, 2, 2, 2554, 2552, 3, 2, 2, 2, 2555,
	2557, 8, 134, 1, 2, 2556, 2558, 7, 9, 2, 2, 2557, 2556, 3, 2, 2, 2, 2557,
	2558, 3, 2, 2, 2, 2558, 2559, 3, 2, 2, 2, 2559, 2560, 5, 466, 234, 2, 2560,
	2569, 3, 2, 2, 2, 2561, 2562, 12, 3, 2, 2, 2562, 2564, 7, 10, 2, 2, 2563,
	2565, 7, 9, 2, 2, 2564, 2563, 3, 2, 2, 2, 2564, 2565, 3, 2, 2, 2, 2565,
	2566, 3, 2, 2, 2, 2566, 2568, 5, 466, 234, 2, 2567, 2561, 3, 2, 2, 2, 2568,
	2571, 3, 2, 2, 2, 2569, 2567, 3, 2, 2, 2, 2569, 2570, 3, 2, 2, 2, 2570,
	267, 3, 2, 2, 2, 2571, 2569, 3, 2, 2, 2, 2572, 2574, 8, 135, 1, 2, 2573,
	2575, 7, 9, 2, 2, 2574, 2573, 3, 2, 2, 2, 2574, 2575, 3, 2, 2, 2, 2575,
	2576, 3, 2, 2, 2, 2576, 2577, 5, 470, 236, 2, 2577, 2586, 3, 2, 2, 2, 2578,
	2579, 12, 3, 2, 2, 2579, 2581, 7, 10, 2, 2, 2580, 2582, 7, 9, 2, 2, 2581,
	2580, 3, 2, 2, 2, 2581, 2582, 3, 2, 2, 2, 2582, 2583, 3, 2, 2, 2, 2583,
	2585, 5, 470, 236, 2, 2584, 2578, 3, 2, 2, 2, 2585, 2588, 3, 2, 2, 2, 2586,
	2584, 3, 2, 2, 2, 2586, 2587, 3, 2, 2, 2, 2587, 269, 3, 2, 2, 2, 2588,
	2586, 3, 2, 2, 2, 2589, 2592, 5, 230, 116, 2, 2590, 2592, 5, 238, 120,
	2, 2591, 2589, 3, 2, 2, 2, 2591, 2590, 3, 2, 2, 2, 2592, 271, 3, 2, 2,
	2, 2593, 2596, 5, 232, 117, 2, 2594, 2596, 5, 240, 121, 2, 2595, 2593,
	3, 2, 2, 2, 2595, 2594, 3, 2, 2, 2, 2596, 273, 3, 2, 2, 2, 2597, 2600,
	5, 234, 118, 2, 2598, 2600, 5, 242, 122, 2, 2599, 2597, 3, 2, 2, 2, 2599,
	2598, 3, 2, 2, 2, 2600, 275, 3, 2, 2, 2, 2601, 2604, 5, 236, 119, 2, 2602,
	2604, 5, 244, 123, 2, 2603, 2601, 3, 2, 2, 2, 2603, 2602, 3, 2, 2, 2, 2604,
	277, 3, 2, 2, 2, 2605, 2617, 5, 270, 136, 2, 2606, 2607, 5, 270, 136, 2,
	2607, 2608, 7, 20, 2, 2, 2608, 2617, 3, 2, 2, 2, 2609, 2610, 5, 270, 136,
	2, 2610, 2611, 7, 21, 2, 2, 2611, 2617, 3, 2, 2, 2, 2612, 2613, 7, 20,
	2, 2, 2613, 2617, 5, 286, 144, 2, 2614, 2615, 7, 21, 2, 2, 2615, 2617,
	5, 286, 144, 2, 2616, 2605, 3, 2, 2, 2, 2616, 2606, 3, 2, 2, 2, 2616, 2609,
	3, 2, 2, 2, 2616, 2612, 3, 2, 2, 2, 2616, 2614, 3, 2, 2, 2, 2617, 279,
	3, 2, 2, 2, 2618, 2630, 5, 272, 137, 2, 2619, 2620, 5, 272, 137, 2, 2620,
	2621, 7, 20, 2, 2, 2621, 2630, 3, 2, 2, 2, 2622, 2623, 5, 272, 137, 2,
	2623, 2624, 7, 21, 2, 2, 2624, 2630, 3, 2, 2, 2, 2625, 2626, 7, 20, 2,
	2, 2626, 2630, 5, 288, 145, 2, 2627, 2628, 7, 21, 2, 2, 2628, 2630, 5,
	288, 145, 2, 2629, 2618, 3, 2, 2, 2, 2629, 2619, 3, 2, 2, 2, 2629, 2622,
	3, 2, 2, 2, 2629, 2625, 3, 2, 2, 2, 2629, 2627, 3, 2, 2, 2, 2630, 281,
	3, 2, 2, 2, 2631, 2643, 5, 274, 138, 2, 2632, 2633, 5, 274, 138, 2, 2633,
	2634, 7, 20, 2, 2, 2634, 2643, 3, 2, 2, 2, 2635, 2636, 5, 274, 138, 2,
	2636, 2637, 7, 21, 2, 2, 2637, 2643, 3, 2, 2, 2, 2638, 2639, 7, 20, 2,
	2, 2639, 2643, 5, 290, 146, 2, 2640, 2641, 7, 21, 2, 2, 2641, 2643, 5,
	290, 146, 2, 2642, 2631, 3, 2, 2, 2, 2642, 2632, 3, 2, 2, 2, 2642, 2635,
	3, 2, 2, 2, 2642, 2638, 3, 2, 2, 2, 2642, 2640, 3, 2, 2, 2, 2643, 283,
	3, 2, 2, 2, 2644, 2656, 5, 276, 139, 2, 2645, 2646, 5, 276, 139, 2, 2646,
	2647, 7, 20, 2, 2, 2647, 2656, 3, 2, 2, 2, 2648, 2649, 5, 276, 139, 2,
	2649, 2650, 7, 21, 2, 2, 2650, 2656, 3, 2, 2, 2, 2651, 2652, 7, 20, 2,
	2, 2652, 2656, 5, 292, 147, 2, 2653, 2654, 7, 21, 2, 2, 2654, 2656, 5,
	292, 147, 2, 2655, 2644, 3, 2, 2, 2, 2655, 2645, 3, 2, 2, 2, 2655, 2648,
	3, 2, 2, 2, 2655, 2651, 3, 2, 2, 2, 2655, 2653, 3, 2, 2, 2, 2656, 285,
	3, 2, 2, 2, 2657, 2673, 5, 278, 140, 2, 2658, 2659, 7, 22, 2, 2, 2659,
	2673, 5, 286, 144, 2, 2660, 2661, 7, 23, 2, 2, 2661, 2673, 5, 286, 144,
	2, 2662, 2663, 7, 24, 2, 2, 2663, 2673, 5, 286, 144, 2, 2664, 2665, 7,
	25, 2, 2, 2665, 2673, 5, 286, 144, 2, 2666, 2667, 7, 26, 2, 2, 2667, 2673,
	5, 286, 144, 2, 2668, 2669, 7, 27, 2, 2, 2669, 2673, 5, 286, 144, 2, 2670,
	2671, 7, 28, 2, 2, 2671, 2673, 5, 286, 144, 2, 2672, 2657, 3, 2, 2, 2,
	2672, 2658, 3, 2, 2, 2, 2672, 2660, 3, 2, 2, 2, 2672, 2662, 3, 2, 2, 2,
	2672, 2664, 3, 2, 2, 2, 2672, 2666, 3, 2, 2, 2, 2672, 2668, 3, 2, 2, 2,
	2672, 2670, 3, 2, 2, 2, 2673, 287, 3, 2, 2, 2, 2674, 2690, 5, 280, 141,
	2, 2675, 2676, 7, 22, 2, 2, 2676, 2690, 5, 288, 145, 2, 2677, 2678, 7,
	23, 2, 2, 2678, 2690, 5, 288, 145, 2, 2679, 2680, 7, 24, 2, 2, 2680, 2690,
	5, 288, 145, 2, 2681, 2682, 7, 25, 2, 2, 2682, 2690, 5, 288, 145, 2, 2683,
	2684, 7, 26, 2, 2, 2684, 2690, 5, 288, 145, 2, 2685, 2686, 7, 27, 2, 2,
	2686, 2690, 5, 288, 145, 2, 2687, 2688, 7, 28, 2, 2, 2688, 2690, 5, 288,
	145, 2, 2689, 2674, 3, 2, 2, 2, 2689, 2675, 3, 2, 2, 2, 2689, 2677, 3,
	2, 2, 2, 2689, 2679, 3, 2, 2, 2, 2689, 2681, 3, 2, 2, 2, 2689, 2683, 3,
	2, 2, 2, 2689, 2685, 3, 2, 2, 2, 2689, 2687, 3, 2, 2, 2, 2690, 289, 3,
	2, 2, 2, 2691, 2708, 5, 282, 142, 2, 2692, 2693, 7, 22, 2, 2, 2693, 2708,
	5, 290, 146, 2, 2694, 2695, 7, 23, 2, 2, 2695, 2708, 5, 290, 146, 2, 2696,
	2697, 7, 24, 2, 2, 2697, 2708, 5, 290, 146, 2, 2698, 2699, 7, 25, 2, 2,
	2699, 2708, 5, 290, 146, 2, 2700, 2701, 7, 26, 2, 2, 2701, 2708, 5, 290,
	146, 2, 2702, 2703, 7, 27, 2, 2, 2703, 2708, 5, 290, 146, 2, 2704, 2705,
	7, 28, 2, 2, 2705, 2708, 5, 290, 146, 2, 2706, 2708, 5, 1306, 654, 2, 2707,
	2691, 3, 2, 2, 2, 2707, 2692, 3, 2, 2, 2, 2707, 2694, 3, 2, 2, 2, 2707,
	2696, 3, 2, 2, 2, 2707, 2698, 3, 2, 2, 2, 2707, 2700, 3, 2, 2, 2, 2707,
	2702, 3, 2, 2, 2, 2707, 2704, 3, 2, 2, 2, 2707, 2706, 3, 2, 2, 2, 2708,
	291, 3, 2, 2, 2, 2709, 2726, 5, 284, 143, 2, 2710, 2711, 7, 22, 2, 2, 2711,
	2726, 5, 292, 147, 2, 2712, 2713, 7, 23, 2, 2, 2713, 2726, 5, 292, 147,
	2, 2714, 2715, 7, 24, 2, 2, 2715, 2726, 5, 292, 147, 2, 2716, 2717, 7,
	25, 2, 2, 2717, 2726, 5, 292, 147, 2, 2718, 2719, 7, 26, 2, 2, 2719, 2726,
	5, 292, 147, 2, 2720, 2721, 7, 27, 2, 2, 2721, 2726, 5, 292, 147, 2, 2722,
	2723, 7, 28, 2, 2, 2723, 2726, 5, 292, 147, 2, 2724, 2726, 5, 1308, 655,
	2, 2725, 2709, 3, 2, 2, 2, 2725, 2710, 3, 2, 2, 2, 2725, 2712, 3, 2, 2,
	2, 2725, 2714, 3, 2, 2, 2, 2725, 2716, 3, 2, 2, 2, 2725, 2718, 3, 2, 2,
	2, 2725, 2720, 3, 2, 2, 2, 2725, 2722, 3, 2, 2, 2, 2725, 2724, 3, 2, 2,
	2, 2726, 293, 3, 2, 2, 2, 2727, 2733, 5, 286, 144, 2, 2728, 2729, 5, 278,
	140, 2, 2729, 2730, 7, 29, 2, 2, 2730, 2731, 5, 294, 148, 2, 2731, 2733,
	3, 2, 2, 2, 2732, 2727, 3, 2, 2, 2, 2732, 2728, 3, 2, 2, 2, 2733, 295,
	3, 2, 2, 2, 2734, 2740, 5, 288, 145, 2, 2735, 2736, 5, 280, 141, 2, 2736,
	2737, 7, 29, 2, 2, 2737, 2738, 5, 296, 149, 2, 2738, 2740, 3, 2, 2, 2,
	2739, 2734, 3, 2, 2, 2, 2739, 2735, 3, 2, 2, 2, 2740, 297, 3, 2, 2, 2,
	2741, 2747, 5, 290, 146, 2, 2742, 2743, 5, 282, 142, 2, 2743, 2744, 7,
	29, 2, 2, 2744, 2745, 5, 298, 150, 2, 2745, 2747, 3, 2, 2, 2, 2746, 2741,
	3, 2, 2, 2, 2746, 2742, 3, 2, 2, 2, 2747, 299, 3, 2, 2, 2, 2748, 2754,
	5, 292, 147, 2, 2749, 2750, 5, 284, 143, 2, 2750, 2751, 7, 29, 2, 2, 2751,
	2752, 5, 300, 151, 2, 2752, 2754, 3, 2, 2, 2, 2753, 2748, 3, 2, 2, 2, 2753,
	2749, 3, 2, 2, 2, 2754, 301, 3, 2, 2, 2, 2755, 2756, 8, 152, 1, 2, 2756,
	2757, 5, 294, 148, 2, 2757, 2763, 3, 2, 2, 2, 2758, 2759, 12, 3, 2, 2,
	2759, 2760, 7, 140, 2, 2, 2760, 2762, 5, 294, 148, 2, 2761, 2758, 3, 2,
	2, 2, 2762, 2765, 3, 2, 2, 2, 2763, 2761, 3, 2, 2, 2, 2763, 2764, 3, 2,
	2, 2, 2764, 303, 3, 2, 2, 2, 2765, 2763, 3, 2, 2, 2, 2766, 2767, 8, 153,
	1, 2, 2767, 2768, 5, 296, 149, 2, 2768, 2774, 3, 2, 2, 2, 2769, 2770, 12,
	3, 2, 2, 2770, 2771, 7, 140, 2, 2, 2771, 2773, 5, 296, 149, 2, 2772, 2769,
	3, 2, 2, 2, 2773, 2776, 3, 2, 2, 2, 2774, 2772, 3, 2, 2, 2, 2774, 2775,
	3, 2, 2, 2, 2775, 305, 3, 2, 2, 2, 2776, 2774, 3, 2, 2, 2, 2777, 2778,
	8, 154, 1, 2, 2778, 2779, 5, 298, 150, 2, 2779, 2785, 3, 2, 2, 2, 2780,
	2781, 12, 3, 2, 2, 2781, 2782, 7, 140, 2, 2, 2782, 2784, 5, 298, 150, 2,
	2783, 2780, 3, 2, 2, 2, 2784, 2787, 3, 2, 2, 2, 2785, 2783, 3, 2, 2, 2,
	2785, 2786, 3, 2, 2, 2, 2786, 307, 3, 2, 2, 2, 2787, 2785, 3, 2, 2, 2,
	2788, 2789, 8, 155, 1, 2, 2789, 2790, 5, 300, 151, 2, 2790, 2796, 3, 2,
	2, 2, 2791, 2792, 12, 3, 2, 2, 2792, 2793, 7, 140, 2, 2, 2793, 2795, 5,
	300, 151, 2, 2794, 2791, 3, 2, 2, 2, 2795, 2798, 3, 2, 2, 2, 2796, 2794,
	3, 2, 2, 2, 2796, 2797, 3, 2, 2, 2, 2797, 309, 3, 2, 2, 2, 2798, 2796,
	3, 2, 2, 2, 2799, 2800, 8, 156, 1, 2, 2800, 2801, 5, 302, 152, 2, 2801,
	2810, 3, 2, 2, 2, 2802, 2803, 12, 4, 2, 2, 2803, 2804, 7, 25, 2, 2, 2804,
	2809, 5, 302, 152, 2, 2805, 2806, 12, 3, 2, 2, 2806, 2807, 7, 26, 2, 2,
	2807, 2809, 5, 302, 152, 2, 2808, 2802, 3, 2, 2, 2, 2808, 2805, 3, 2, 2,
	2, 2809, 2812, 3, 2, 2, 2, 2810, 2808, 3, 2, 2, 2, 2810, 2811, 3, 2, 2,
	2, 2811, 311, 3, 2, 2, 2, 2812, 2810, 3, 2, 2, 2, 2813, 2814, 8, 157, 1,
	2, 2814, 2815, 5, 304, 153, 2, 2815, 2824, 3, 2, 2, 2, 2816, 2817, 12,
	4, 2, 2, 2817, 2818, 7, 25, 2, 2, 2818, 2823, 5, 304, 153, 2, 2819, 2820,
	12, 3, 2, 2, 2820, 2821, 7, 26, 2, 2, 2821, 2823, 5, 304, 153, 2, 2822,
	2816, 3, 2, 2, 2, 2822, 2819, 3, 2, 2, 2, 2823, 2826, 3, 2, 2, 2, 2824,
	2822, 3, 2, 2, 2, 2824, 2825, 3, 2, 2, 2, 2825, 313, 3, 2, 2, 2, 2826,
	2824, 3, 2, 2, 2, 2827, 2828, 8, 158, 1, 2, 2828, 2829, 5, 306, 154, 2,
	2829, 2838, 3, 2, 2, 2, 2830, 2831, 12, 4, 2, 2, 2831, 2832, 7, 25, 2,
	2, 2832, 2837, 5, 306, 154, 2, 2833, 2834, 12, 3, 2, 2, 2834, 2835, 7,
	26, 2, 2, 2835, 2837, 5, 306, 154, 2, 2836, 2830, 3, 2, 2, 2, 2836, 2833,
	3, 2, 2, 2, 2837, 2840, 3, 2, 2, 2, 2838, 2836, 3, 2, 2, 2, 2838, 2839,
	3, 2, 2, 2, 2839, 315, 3, 2, 2, 2, 2840, 2838, 3, 2, 2, 2, 2841, 2842,
	8, 159, 1, 2, 2842, 2843, 5, 308, 155, 2, 2843, 2852, 3, 2, 2, 2, 2844,
	2845, 12, 4, 2, 2, 2845, 2846, 7, 25, 2, 2, 2846, 2851, 5, 308, 155, 2,
	2847, 2848, 12, 3, 2, 2, 2848, 2849, 7, 26, 2, 2, 2849, 2851, 5, 308, 155,
	2, 2850, 2844, 3, 2, 2, 2, 2850, 2847, 3, 2, 2, 2, 2851, 2854, 3, 2, 2,
	2, 2852, 2850, 3, 2, 2, 2, 2852, 2853, 3, 2, 2, 2, 2853, 317, 3, 2, 2,
	2, 2854, 2852, 3, 2, 2, 2, 2855, 2856, 8, 160, 1, 2, 2856, 2857, 5, 310,
	156, 2, 2857, 2869, 3, 2, 2, 2, 2858, 2859, 12, 5, 2, 2, 2859, 2860, 7,
	30, 2, 2, 2860, 2868, 5, 310, 156, 2, 2861, 2862, 12, 4, 2, 2, 2862, 2863,
	7, 31, 2, 2, 2863, 2868, 5, 310, 156, 2, 2864, 2865, 12, 3, 2, 2, 2865,
	2866, 7, 32, 2, 2, 2866, 2868, 5, 310, 156, 2, 2867, 2858, 3, 2, 2, 2,
	2867, 2861, 3, 2, 2, 2, 2867, 2864, 3, 2, 2, 2, 2868, 2871, 3, 2, 2, 2,
	2869, 2867, 3, 2, 2, 2, 2869, 2870, 3, 2, 2, 2, 2870, 319, 3, 2, 2, 2,
	2871, 2869, 3, 2, 2, 2, 2872, 2873, 8, 161, 1, 2, 2873, 2874, 5, 312, 157,
	2, 2874, 2886, 3, 2, 2, 2, 2875, 2876, 12, 5, 2, 2, 2876, 2877, 7, 30,
	2, 2, 2877, 2885, 5, 312, 157, 2, 2878, 2879, 12, 4, 2, 2, 2879, 2880,
	7, 31, 2, 2, 2880, 2885, 5, 312, 157, 2, 2881, 2882, 12, 3, 2, 2, 2882,
	2883, 7, 32, 2, 2, 2883, 2885, 5, 312, 157, 2, 2884, 2875, 3, 2, 2, 2,
	2884, 2878, 3, 2, 2, 2, 2884, 2881, 3, 2, 2, 2, 2885, 2888, 3, 2, 2, 2,
	2886, 2884, 3, 2, 2, 2, 2886, 2887, 3, 2, 2, 2, 2887, 321, 3, 2, 2, 2,
	2888, 2886, 3, 2, 2, 2, 2889, 2890, 8, 162, 1, 2, 2890, 2891, 5, 314, 158,
	2, 2891, 2903, 3, 2, 2, 2, 2892, 2893, 12, 5, 2, 2, 2893, 2894, 7, 30,
	2, 2, 2894, 2902, 5, 314, 158, 2, 2895, 2896, 12, 4, 2, 2, 2896, 2897,
	7, 31, 2, 2, 2897, 2902, 5, 314, 158, 2, 2898, 2899, 12, 3, 2, 2, 2899,
	2900, 7, 32, 2, 2, 2900, 2902, 5, 314, 158, 2, 2901, 2892, 3, 2, 2, 2,
	2901, 2895, 3, 2, 2, 2, 2901, 2898, 3, 2, 2, 2, 2902, 2905, 3, 2, 2, 2,
	2903, 2901, 3, 2, 2, 2, 2903, 2904, 3, 2, 2, 2, 2904, 323, 3, 2, 2, 2,
	2905, 2903, 3, 2, 2, 2, 2906, 2907, 8, 163, 1, 2, 2907, 2908, 5, 316, 159,
	2, 2908, 2920, 3, 2, 2, 2, 2909, 2910, 12, 5, 2, 2, 2910, 2911, 7, 30,
	2, 2, 2911, 2919, 5, 316, 159, 2, 2912, 2913, 12, 4, 2, 2, 2913, 2914,
	7, 31, 2, 2, 2914, 2919, 5, 316, 159, 2, 2915, 2916, 12, 3, 2, 2, 2916,
	2917, 7, 32, 2, 2, 2917, 2919, 5, 316, 159, 2, 2918, 2909, 3, 2, 2, 2,
	2918, 2912, 3, 2, 2, 2, 2918, 2915, 3, 2, 2, 2, 2919, 2922, 3, 2, 2, 2,
	2920, 2918, 3, 2, 2, 2, 2920, 2921, 3, 2, 2, 2, 2921, 325, 3, 2, 2, 2,
	2922, 2920, 3, 2, 2, 2, 2923, 2924, 8, 164, 1, 2, 2924, 2925, 5, 318, 160,
	2, 2925, 2943, 3, 2, 2, 2, 2926, 2927, 12, 7, 2, 2, 2927, 2928, 7, 33,
	2, 2, 2928, 2942, 5, 318, 160, 2, 2929, 2930, 12, 6, 2, 2, 2930, 2931,
	7, 34, 2, 2, 2931, 2942, 5, 318, 160, 2, 2932, 2933, 12, 5, 2, 2, 2933,
	2934, 7, 35, 2, 2, 2934, 2942, 5, 318, 160, 2, 2935, 2936, 12, 4, 2, 2,
	2936, 2937, 7, 36, 2, 2, 2937, 2942, 5, 318, 160, 2, 2938, 2939, 12, 3,
	2, 2, 2939, 2940, 7, 37, 2, 2, 2940, 2942, 5, 318, 160, 2, 2941, 2926,
	3, 2, 2, 2, 2941, 2929, 3, 2, 2, 2, 2941, 2932, 3, 2, 2, 2, 2941, 2935,
	3, 2, 2, 2, 2941, 2938, 3, 2, 2, 2, 2942, 2945, 3, 2, 2, 2, 2943, 2941,
	3, 2, 2, 2, 2943, 2944, 3, 2, 2, 2, 2944, 327, 3, 2, 2, 2, 2945, 2943,
	3, 2, 2, 2, 2946, 2947, 8, 165, 1, 2, 2947, 2953, 5, 318, 160, 2, 2948,
	2949, 5, 326, 164, 2, 2949, 2950, 7, 38, 2, 2, 2950, 2951, 5, 318, 160,
	2, 2951, 2953, 3, 2, 2, 2, 2952, 2946, 3, 2, 2, 2, 2952, 2948, 3, 2, 2,
	2, 2953, 2971, 3, 2, 2, 2, 2954, 2955, 12, 8, 2, 2, 2955, 2956, 7, 33,
	2, 2, 2956, 2970, 5, 318, 160, 2, 2957, 2958, 12, 7, 2, 2, 2958, 2959,
	7, 34, 2, 2, 2959, 2970, 5, 318, 160, 2, 2960, 2961, 12, 6, 2, 2, 2961,
	2962, 7, 35, 2, 2, 2962, 2970, 5, 318, 160, 2, 2963, 2964, 12, 5, 2, 2,
	2964, 2965, 7, 36, 2, 2, 2965, 2970, 5, 318, 160, 2, 2966, 2967, 12, 4,
	2, 2, 2967, 2968, 7, 37, 2, 2, 2968, 2970, 5, 318, 160, 2, 2969, 2954,
	3, 2, 2, 2, 2969, 2957, 3, 2, 2, 2, 2969, 2960, 3, 2, 2, 2, 2969, 2963,
	3, 2, 2, 2, 2969, 2966, 3, 2, 2, 2, 2970, 2973, 3, 2, 2, 2, 2971, 2969,
	3, 2, 2, 2, 2971, 2972, 3, 2, 2, 2, 2972, 329, 3, 2, 2, 2, 2973, 2971,
	3, 2, 2, 2, 2974, 2975, 8, 166, 1, 2, 2975, 2976, 5, 318, 160, 2, 2976,
	2994, 3, 2, 2, 2, 2977, 2978, 12, 7, 2, 2, 2978, 2979, 7, 33, 2, 2, 2979,
	2993, 5, 318, 160, 2, 2980, 2981, 12, 6, 2, 2, 2981, 2982, 7, 34, 2, 2,
	2982, 2993, 5, 318, 160, 2, 2983, 2984, 12, 5, 2, 2, 2984, 2985, 7, 35,
	2, 2, 2985, 2993, 5, 318, 160, 2, 2986, 2987, 12, 4, 2, 2, 2987, 2988,
	7, 36, 2, 2, 2988, 2993, 5, 318, 160, 2, 2989, 2990, 12, 3, 2, 2, 2990,
	2991, 7, 37, 2, 2, 2991, 2993, 5, 318, 160, 2, 2992, 2977, 3, 2, 2, 2,
	2992, 2980, 3, 2, 2, 2, 2992, 2983, 3, 2, 2, 2, 2992, 2986, 3, 2, 2, 2,
	2992, 2989, 3, 2, 2, 2, 2993, 2996, 3, 2, 2, 2, 2994, 2992, 3, 2, 2, 2,
	2994, 2995, 3, 2, 2, 2, 2995, 331, 3, 2, 2, 2, 2996, 2994, 3, 2, 2, 2,
	2997, 2998, 8, 167, 1, 2, 2998, 3004, 5, 318, 160, 2, 2999, 3000, 5, 330,
	166, 2, 3000, 3001, 7, 38, 2, 2, 3001, 3002, 5, 320, 161, 2, 3002, 3004,
	3, 2, 2, 2, 3003, 2997, 3, 2, 2, 2, 3003, 2999, 3, 2, 2, 2, 3004, 3022,
	3, 2, 2, 2, 3005, 3006, 12, 8, 2, 2, 3006, 3007, 7, 33, 2, 2, 3007, 3021,
	5, 318, 160, 2, 3008, 3009, 12, 7, 2, 2, 3009, 3010, 7, 34, 2, 2, 3010,
	3021, 5, 318, 160, 2, 3011, 3012, 12, 6, 2, 2, 3012, 3013, 7, 35, 2, 2,
	3013, 3021, 5, 318, 160, 2, 3014, 3015, 12, 5, 2, 2, 3015, 3016, 7, 36,
	2, 2, 3016, 3021, 5, 318, 160, 2, 3017, 3018, 12, 4, 2, 2, 3018, 3019,
	7, 37, 2, 2, 3019, 3021, 5, 318, 160, 2, 3020, 3005, 3, 2, 2, 2, 3020,
	3008, 3, 2, 2, 2, 3020, 3011, 3, 2, 2, 2, 3020, 3014, 3, 2, 2, 2, 3020,
	3017, 3, 2, 2, 2, 3021, 3024, 3, 2, 2, 2, 3022, 3020, 3, 2, 2, 2, 3022,
	3023, 3, 2, 2, 2, 3023, 333, 3, 2, 2, 2, 3024, 3022, 3, 2, 2, 2, 3025,
	3026, 8, 168, 1, 2, 3026, 3027, 5, 318, 160, 2, 3027, 3045, 3, 2, 2, 2,
	3028, 3029, 12, 7, 2, 2, 3029, 3030, 7, 33, 2, 2, 3030, 3044, 5, 318, 160,
	2, 3031, 3032, 12, 6, 2, 2, 3032, 3033, 7, 34, 2, 2, 3033, 3044, 5, 318,
	160, 2, 3034, 3035, 12, 5, 2, 2, 3035, 3036, 7, 35, 2, 2, 3036, 3044, 5,
	318, 160, 2, 3037, 3038, 12, 4, 2, 2, 3038, 3039, 7, 36, 2, 2, 3039, 3044,
	5, 318, 160, 2, 3040, 3041, 12, 3, 2, 2, 3041, 3042, 7, 37, 2, 2, 3042,
	3044, 5, 318, 160, 2, 3043, 3028, 3, 2, 2, 2, 3043, 3031, 3, 2, 2, 2, 3043,
	3034, 3, 2, 2, 2, 3043, 3037, 3, 2, 2, 2, 3043, 3040, 3, 2, 2, 2, 3044,
	3047, 3, 2, 2, 2, 3045, 3043, 3, 2, 2, 2, 3045, 3046, 3, 2, 2, 2, 3046,
	335, 3, 2, 2, 2, 3047, 3045, 3, 2, 2, 2, 3048, 3049, 8, 169, 1, 2, 3049,
	3055, 5, 318, 160, 2, 3050, 3051, 5, 334, 168, 2, 3051, 3052, 7, 38, 2,
	2, 3052, 3053, 5, 322, 162, 2, 3053, 3055, 3, 2, 2, 2, 3054, 3048, 3, 2,
	2, 2, 3054, 3050, 3, 2, 2, 2, 3055, 3073, 3, 2, 2, 2, 3056, 3057, 12, 8,
	2, 2, 3057, 3058, 7, 33, 2, 2, 3058, 3072, 5, 318, 160, 2, 3059, 3060,
	12, 7, 2, 2, 3060, 3061, 7, 34, 2, 2, 3061, 3072, 5, 318, 160, 2, 3062,
	3063, 12, 6, 2, 2, 3063, 3064, 7, 35, 2, 2, 3064, 3072, 5, 318, 160, 2,
	3065, 3066, 12, 5, 2, 2, 3066, 3067, 7, 36, 2, 2, 3067, 3072, 5, 318, 160,
	2, 3068, 3069, 12, 4, 2, 2, 3069, 3070, 7, 37, 2, 2, 3070, 3072, 5, 318,
	160, 2, 3071, 3056, 3, 2, 2, 2, 3071, 3059, 3, 2, 2, 2, 3071, 3062, 3,
	2, 2, 2, 3071, 3065, 3, 2, 2, 2, 3071, 3068, 3, 2, 2, 2, 3072, 3075, 3,
	2, 2, 2, 3073, 3071, 3, 2, 2, 2, 3073, 3074, 3, 2, 2, 2, 3074, 337, 3,
	2, 2, 2, 3075, 3073, 3, 2, 2, 2, 3076, 3077, 8, 170, 1, 2, 3077, 3078,
	5, 318, 160, 2, 3078, 3096, 3, 2, 2, 2, 3079, 3080, 12, 7, 2, 2, 3080,
	3081, 7, 33, 2, 2, 3081, 3095, 5, 318, 160, 2, 3082, 3083, 12, 6, 2, 2,
	3083, 3084, 7, 34, 2, 2, 3084, 3095, 5, 318, 160, 2, 3085, 3086, 12, 5,
	2, 2, 3086, 3087, 7, 35, 2, 2, 3087, 3095, 5, 318, 160, 2, 3088, 3089,
	12, 4, 2, 2, 3089, 3090, 7, 36, 2, 2, 3090, 3095, 5, 318, 160, 2, 3091,
	3092, 12, 3, 2, 2, 3092, 3093, 7, 37, 2, 2, 3093, 3095, 5, 318, 160, 2,
	3094, 3079, 3, 2, 2, 2, 3094, 3082, 3, 2, 2, 2, 3094, 3085, 3, 2, 2, 2,
	3094, 3088, 3, 2, 2, 2, 3094, 3091, 3, 2, 2, 2, 3095, 3098, 3, 2, 2, 2,
	3096, 3094, 3, 2, 2, 2, 3096, 3097, 3, 2, 2, 2, 3097, 339, 3, 2, 2, 2,
	3098, 3096, 3, 2, 2, 2, 3099, 3100, 8, 171, 1, 2, 3100, 3106, 5, 318, 160,
	2, 3101, 3102, 5, 338, 170, 2, 3102, 3103, 7, 38, 2, 2, 3103, 3104, 5,
	324, 163, 2, 3104, 3106, 3, 2, 2, 2, 3105, 3099, 3, 2, 2, 2, 3105, 3101,
	3, 2, 2, 2, 3106, 3124, 3, 2, 2, 2, 3107, 3108, 12, 8, 2, 2, 3108, 3109,
	7, 33, 2, 2, 3109, 3123, 5, 318, 160, 2, 3110, 3111, 12, 7, 2, 2, 3111,
	3112, 7, 34, 2, 2, 3112, 3123, 5, 318, 160, 2, 3113, 3114, 12, 6, 2, 2,
	3114, 3115, 7, 35, 2, 2, 3115, 3123, 5, 318, 160, 2, 3116, 3117, 12, 5,
	2, 2, 3117, 3118, 7, 36, 2, 2, 3118, 3123, 5, 318, 160, 2, 3119, 3120,
	12, 4, 2, 2, 3120, 3121, 7, 37, 2, 2, 3121, 3123, 5, 318, 160, 2, 3122,
	3107, 3, 2, 2, 2, 3122, 3110, 3, 2, 2, 2, 3122, 3113, 3, 2, 2, 2, 3122,
	3116, 3, 2, 2, 2, 3122, 3119, 3, 2, 2, 2, 3123, 3126, 3, 2, 2, 2, 3124,
	3122, 3, 2, 2, 2, 3124, 3125, 3, 2, 2, 2, 3125, 341, 3, 2, 2, 2, 3126,
	3124, 3, 2, 2, 2, 3127, 3128, 8, 172, 1, 2, 3128, 3129, 5, 326, 164, 2,
	3129, 3144, 3, 2, 2, 2, 3130, 3131, 12, 6, 2, 2, 3131, 3132, 7, 39, 2,
	2, 3132, 3143, 5, 326, 164, 2, 3133, 3134, 12, 5, 2, 2, 3134, 3135, 7,
	40, 2, 2, 3135, 3143, 5, 326, 164, 2, 3136, 3137, 12, 4, 2, 2, 3137, 3138,
	7, 41, 2, 2, 3138, 3143, 5, 326, 164, 2, 3139, 3140, 12, 3, 2, 2, 3140,
	3141, 7, 42, 2, 2, 3141, 3143, 5, 326, 164, 2, 3142, 3130, 3, 2, 2, 2,
	3142, 3133, 3, 2, 2, 2, 3142, 3136, 3, 2, 2, 2, 3142, 3139, 3, 2, 2, 2,
	3143, 3146, 3, 2, 2, 2, 3144, 3142, 3, 2, 2, 2, 3144, 3145, 3, 2, 2, 2,
	3145, 343, 3, 2, 2, 2, 3146, 3144, 3, 2, 2, 2, 3147, 3148, 8, 173, 1, 2,
	3148, 3149, 5, 328, 165, 2, 3149, 3164, 3, 2, 2, 2, 3150, 3151, 12, 6,
	2, 2, 3151, 3152, 7, 39, 2, 2, 3152, 3163, 5, 328, 165, 2, 3153, 3154,
	12, 5, 2, 2, 3154, 3155, 7, 40, 2, 2, 3155, 3163, 5, 328, 165, 2, 3156,
	3157, 12, 4, 2, 2, 3157, 3158, 7, 41, 2, 2, 3158, 3163, 5, 328, 165, 2,
	3159, 3160, 12, 3, 2, 2, 3160, 3161, 7, 42, 2, 2, 3161, 3163, 5, 328, 165,
	2, 3162, 3150, 3, 2, 2, 2, 3162, 3153, 3, 2, 2, 2, 3162, 3156, 3, 2, 2,
	2, 3162, 3159, 3, 2, 2, 2, 3163, 3166, 3, 2, 2, 2, 3164, 3162, 3, 2, 2,
	2, 3164, 3165, 3, 2, 2, 2, 3165, 345, 3, 2, 2, 2, 3166, 3164, 3, 2, 2,
	2, 3167, 3168, 8, 174, 1, 2, 3168, 3169, 5, 330, 166, 2, 3169, 3184, 3,
	2, 2, 2, 3170, 3171, 12, 6, 2, 2, 3171, 3172, 7, 39, 2, 2, 3172, 3183,
	5, 330, 166, 2, 3173, 3174, 12, 5, 2, 2, 3174, 3175, 7, 40, 2, 2, 3175,
	3183, 5, 330, 166, 2, 3176, 3177, 12, 4, 2, 2, 3177, 3178, 7, 41, 2, 2,
	3178, 3183, 5, 330, 166, 2, 3179, 3180, 12, 3, 2, 2, 3180, 3181, 7, 42,
	2, 2, 3181, 3183, 5, 330, 166, 2, 3182, 3170, 3, 2, 2, 2, 3182, 3173, 3,
	2, 2, 2, 3182, 3176, 3, 2, 2, 2, 3182, 3179, 3, 2, 2, 2, 3183, 3186, 3,
	2, 2, 2, 3184, 3182, 3, 2, 2, 2, 3184, 3185, 3, 2, 2, 2, 3185, 347, 3,
	2, 2, 2, 3186, 3184, 3, 2, 2, 2, 3187, 3188, 8, 175, 1, 2, 3188, 3189,
	5, 332, 167, 2, 3189, 3204, 3, 2, 2, 2, 3190, 3191, 12, 6, 2, 2, 3191,
	3192, 7, 39, 2, 2, 3192, 3203, 5, 332, 167, 2, 3193, 3194, 12, 5, 2, 2,
	3194, 3195, 7, 40, 2, 2, 3195, 3203, 5, 332, 167, 2, 3196, 3197, 12, 4,
	2, 2, 3197, 3198, 7, 41, 2, 2, 3198, 3203, 5, 332, 167, 2, 3199, 3200,
	12, 3, 2, 2, 3200, 3201, 7, 42, 2, 2, 3201, 3203, 5, 332, 167, 2, 3202,
	3190, 3, 2, 2, 2, 3202, 3193, 3, 2, 2, 2, 3202, 3196, 3, 2, 2, 2, 3202,
	3199, 3, 2, 2, 2, 3203, 3206, 3, 2, 2, 2, 3204, 3202, 3, 2, 2, 2, 3204,
	3205, 3, 2, 2, 2, 3205, 349, 3, 2, 2, 2, 3206, 3204, 3, 2, 2, 2, 3207,
	3208, 8, 176, 1, 2, 3208, 3209, 5, 334, 168, 2, 3209, 3224, 3, 2, 2, 2,
	3210, 3211, 12, 6, 2, 2, 3211, 3212, 7, 39, 2, 2, 3212, 3223, 5, 334, 168,
	2, 3213, 3214, 12, 5, 2, 2, 3214, 3215, 7, 40, 2, 2, 3215, 3223, 5, 334,
	168, 2, 3216, 3217, 12, 4, 2, 2, 3217, 3218, 7, 41, 2, 2, 3218, 3223, 5,
	334, 168, 2, 3219, 3220, 12, 3, 2, 2, 3220, 3221, 7, 42, 2, 2, 3221, 3223,
	5, 334, 168, 2, 3222, 3210, 3, 2, 2, 2, 3222, 3213, 3, 2, 2, 2, 3222, 3216,
	3, 2, 2, 2, 3222, 3219, 3, 2, 2, 2, 3223, 3226, 3, 2, 2, 2, 3224, 3222,
	3, 2, 2, 2, 3224, 3225, 3, 2, 2, 2, 3225, 351, 3, 2, 2, 2, 3226, 3224,
	3, 2, 2, 2, 3227, 3228, 8, 177, 1, 2, 3228, 3229, 5, 336, 169, 2, 3229,
	3244, 3, 2, 2, 2, 3230, 3231, 12, 6, 2, 2, 3231, 3232, 7, 39, 2, 2, 3232,
	3243, 5, 336, 169, 2, 3233, 3234, 12, 5, 2, 2, 3234, 3235, 7, 40, 2, 2,
	3235, 3243, 5, 336, 169, 2, 3236, 3237, 12, 4, 2, 2, 3237, 3238, 7, 41,
	2, 2, 3238, 3243, 5, 336, 169, 2, 3239, 3240, 12, 3, 2, 2, 3240, 3241,
	7, 42, 2, 2, 3241, 3243, 5, 336, 169, 2, 3242, 3230, 3, 2, 2, 2, 3242,
	3233, 3, 2, 2, 2, 3242, 3236, 3, 2, 2, 2, 3242, 3239, 3, 2, 2, 2, 3243,
	3246, 3, 2, 2, 2, 3244, 3242, 3, 2, 2, 2, 3244, 3245, 3, 2, 2, 2, 3245,
	353, 3, 2, 2, 2, 3246, 3244, 3, 2, 2, 2, 3247, 3248, 8, 178, 1, 2, 3248,
	3249, 5, 338, 170, 2, 3249, 3264, 3, 2, 2, 2, 3250, 3251, 12, 6, 2, 2,
	3251, 3252, 7, 39, 2, 2, 3252, 3263, 5, 338, 170, 2, 3253, 3254, 12, 5,
	2, 2, 3254, 3255, 7, 40, 2, 2, 3255, 3263, 5, 338, 170, 2, 3256, 3257,
	12, 4, 2, 2, 3257, 3258, 7, 41, 2, 2, 3258, 3263, 5, 338, 170, 2, 3259,
	3260, 12, 3, 2, 2, 3260, 3261, 7, 42, 2, 2, 3261, 3263, 5, 338, 170, 2,
	3262, 3250, 3, 2, 2, 2, 3262, 3253, 3, 2, 2, 2, 3262, 3256, 3, 2, 2, 2,
	3262, 3259, 3, 2, 2, 2, 3263, 3266, 3, 2, 2, 2, 3264, 3262, 3, 2, 2, 2,
	3264, 3265, 3, 2, 2, 2, 3265, 355, 3, 2, 2, 2, 3266, 3264, 3, 2, 2, 2,
	3267, 3268, 8, 179, 1, 2, 3268, 3269, 5, 340, 171, 2, 3269, 3284, 3, 2,
	2, 2, 3270, 3271, 12, 6, 2, 2, 3271, 3272, 7, 39, 2, 2, 3272, 3283, 5,
	340, 171, 2, 3273, 3274, 12, 5, 2, 2, 3274, 3275, 7, 40, 2, 2, 3275, 3283,
	5, 340, 171, 2, 3276, 3277, 12, 4, 2, 2, 3277, 3278, 7, 41, 2, 2, 3278,
	3283, 5, 340, 171, 2, 3279, 3280, 12, 3, 2, 2, 3280, 3281, 7, 42, 2, 2,
	3281, 3283, 5, 340, 171, 2, 3282, 3270, 3, 2, 2, 2, 3282, 3273, 3, 2, 2,
	2, 3282, 3276, 3, 2, 2, 2, 3282, 3279, 3, 2, 2, 2, 3283, 3286, 3, 2, 2,
	2, 3284, 3282, 3, 2, 2, 2, 3284, 3285, 3, 2, 2, 2, 3285, 357, 3, 2, 2,
	2, 3286, 3284, 3, 2, 2, 2, 3287, 3288, 8, 180, 1, 2, 3288, 3289, 5, 342,
	172, 2, 3289, 3295, 3, 2, 2, 2, 3290, 3291, 12, 3, 2, 2, 3291, 3292, 7,
	43, 2, 2, 3292, 3294, 5, 342, 172, 2, 3293, 3290, 3, 2, 2, 2, 3294, 3297,
	3, 2, 2, 2, 3295, 3293, 3, 2, 2, 2, 3295, 3296, 3, 2, 2, 2, 3296, 359,
	3, 2, 2, 2, 3297, 3295, 3, 2, 2, 2, 3298, 3299, 8, 181, 1, 2, 3299, 3300,
	5, 344, 173, 2, 3300, 3306, 3, 2, 2, 2, 3301, 3302, 12, 3, 2, 2, 3302,
	3303, 7, 43, 2, 2, 3303, 3305, 5, 344, 173, 2, 3304, 3301, 3, 2, 2, 2,
	3305, 3308, 3, 2, 2, 2, 3306, 3304, 3, 2, 2, 2, 3306, 3307, 3, 2, 2, 2,
	3307, 361, 3, 2, 2, 2, 3308, 3306, 3, 2, 2, 2, 3309, 3310, 8, 182, 1, 2,
	3310, 3311, 5, 346, 174, 2, 3311, 3317, 3, 2, 2, 2, 3312, 3313, 12, 3,
	2, 2, 3313, 3314, 7, 43, 2, 2, 3314, 3316, 5, 346, 174, 2, 3315, 3312,
	3, 2, 2, 2, 3316, 3319, 3, 2, 2, 2, 3317, 3315, 3, 2, 2, 2, 3317, 3318,
	3, 2, 2, 2, 3318, 363, 3, 2, 2, 2, 3319, 3317, 3, 2, 2, 2, 3320, 3321,
	8, 183, 1, 2, 3321, 3322, 5, 348, 175, 2, 3322, 3328, 3, 2, 2, 2, 3323,
	3324, 12, 3, 2, 2, 3324, 3325, 7, 43, 2, 2, 3325, 3327, 5, 348, 175, 2,
	3326, 3323, 3, 2, 2, 2, 3327, 3330, 3, 2, 2, 2, 3328, 3326, 3, 2, 2, 2,
	3328, 3329, 3, 2, 2, 2, 3329, 365, 3, 2, 2, 2, 3330, 3328, 3, 2, 2, 2,
	3331, 3332, 8, 184, 1, 2, 3332, 3333, 5, 350, 176, 2, 3333, 3339, 3, 2,
	2, 2, 3334, 3335, 12, 3, 2, 2, 3335, 3336, 7, 43, 2, 2, 3336, 3338, 5,
	350, 176, 2, 3337, 3334, 3, 2, 2, 2, 3338, 3341, 3, 2, 2, 2, 3339, 3337,
	3, 2, 2, 2, 3339, 3340, 3, 2, 2, 2, 3340, 367, 3, 2, 2, 2, 3341, 3339,
	3, 2, 2, 2, 3342, 3343, 8, 185, 1, 2, 3343, 3344, 5, 352, 177, 2, 3344,
	3350, 3, 2, 2, 2, 3345, 3346, 12, 3, 2, 2, 3346, 3347, 7, 43, 2, 2, 3347,
	3349, 5, 352, 177, 2, 3348, 3345, 3, 2, 2, 2, 3349, 3352, 3, 2, 2, 2, 3350,
	3348, 3, 2, 2, 2, 3350, 3351, 3, 2, 2, 2, 3351, 369, 3, 2, 2, 2, 3352,
	3350, 3, 2, 2, 2, 3353, 3354, 8, 186, 1, 2, 3354, 3355, 5, 354, 178, 2,
	3355, 3361, 3, 2, 2, 2, 3356, 3357, 12, 3, 2, 2, 3357, 3358, 7, 43, 2,
	2, 3358, 3360, 5, 354, 178, 2, 3359, 3356, 3, 2, 2, 2, 3360, 3363, 3, 2,
	2, 2, 3361, 3359, 3, 2, 2, 2, 3361, 3362, 3, 2, 2, 2, 3362, 371, 3, 2,
	2, 2, 3363, 3361, 3, 2, 2, 2, 3364, 3365, 8, 187, 1, 2, 3365, 3366, 5,
	356, 179, 2, 3366, 3372, 3, 2, 2, 2, 3367, 3368, 12, 3, 2, 2, 3368, 3369,
	7, 43, 2, 2, 3369, 3371, 5, 356, 179, 2, 3370, 3367, 3, 2, 2, 2, 3371,
	3374, 3, 2, 2, 2, 3372, 3370, 3, 2, 2, 2, 3372, 3373, 3, 2, 2, 2, 3373,
	373, 3, 2, 2, 2, 3374, 3372, 3, 2, 2, 2, 3375, 3376, 8, 188, 1, 2, 3376,
	3377, 5, 342, 172, 2, 3377, 3383, 3, 2, 2, 2, 3378, 3379, 12, 3, 2, 2,
	3379, 3380, 7, 44, 2, 2, 3380, 3382, 5, 342, 172, 2, 3381, 3378, 3, 2,
	2, 2, 3382, 3385, 3, 2, 2, 2, 3383, 3381, 3, 2, 2, 2, 3383, 3384, 3, 2,
	2, 2, 3384, 375, 3, 2, 2, 2, 3385, 3383, 3, 2, 2, 2, 3386, 3387, 8, 189,
	1, 2, 3387, 3388, 5, 344, 173, 2, 3388, 3394, 3, 2, 2, 2, 3389, 3390, 12,
	3, 2, 2, 3390, 3391, 7, 44, 2, 2, 3391, 3393, 5, 344, 173, 2, 3392, 3389,
	3, 2, 2, 2, 3393, 3396, 3, 2, 2, 2, 3394, 3392, 3, 2, 2, 2, 3394, 3395,
	3, 2, 2, 2, 3395, 377, 3, 2, 2, 2, 3396, 3394, 3, 2, 2, 2, 3397, 3398,
	8, 190, 1, 2, 3398, 3399, 5, 346, 174, 2, 3399, 3405, 3, 2, 2, 2, 3400,
	3401, 12, 3, 2, 2, 3401, 3402, 7, 44, 2, 2, 3402, 3404, 5, 346, 174, 2,
	3403, 3400, 3, 2, 2, 2, 3404, 3407, 3, 2, 2, 2, 3405, 3403, 3, 2, 2, 2,
	3405, 3406, 3, 2, 2, 2, 3406, 379, 3, 2, 2, 2, 3407, 3405, 3, 2, 2, 2,
	3408, 3409, 8, 191, 1, 2, 3409, 3410, 5, 348, 175, 2, 3410, 3416, 3, 2,
	2, 2, 3411, 3412, 12, 3, 2, 2, 3412, 3413, 7, 44, 2, 2, 3413, 3415, 5,
	348, 175, 2, 3414, 3411, 3, 2, 2, 2, 3415, 3418, 3, 2, 2, 2, 3416, 3414,
	3, 2, 2, 2, 3416, 3417, 3, 2, 2, 2, 3417, 381, 3, 2, 2, 2, 3418, 3416,
	3, 2, 2, 2, 3419, 3420, 8, 192, 1, 2, 3420, 3421, 5, 350, 176, 2, 3421,
	3427, 3, 2, 2, 2, 3422, 3423, 12, 3, 2, 2, 3423, 3424, 7, 44, 2, 2, 3424,
	3426, 5, 350, 176, 2, 3425, 3422, 3, 2, 2, 2, 3426, 3429, 3, 2, 2, 2, 3427,
	3425, 3, 2, 2, 2, 3427, 3428, 3, 2, 2, 2, 3428, 383, 3, 2, 2, 2, 3429,
	3427, 3, 2, 2, 2, 3430, 3431, 8, 193, 1, 2, 3431, 3432, 5, 352, 177, 2,
	3432, 3438, 3, 2, 2, 2, 3433, 3434, 12, 3, 2, 2, 3434, 3435, 7, 44, 2,
	2, 3435, 3437, 5, 352, 177, 2, 3436, 3433, 3, 2, 2, 2, 3437, 3440, 3, 2,
	2, 2, 3438, 3436, 3, 2, 2, 2, 3438, 3439, 3, 2, 2, 2, 3439, 385, 3, 2,
	2, 2, 3440, 3438, 3, 2, 2, 2, 3441, 3442, 8, 194, 1, 2, 3442, 3443, 5,
	354, 178, 2, 3443, 3449, 3, 2, 2, 2, 3444, 3445, 12, 3, 2, 2, 3445, 3446,
	7, 44, 2, 2, 3446, 3448, 5, 354, 178, 2, 3447, 3444, 3, 2, 2, 2, 3448,
	3451, 3, 2, 2, 2, 3449, 3447, 3, 2, 2, 2, 3449, 3450, 3, 2, 2, 2, 3450,
	387, 3, 2, 2, 2, 3451, 3449, 3, 2, 2, 2, 3452, 3453, 8, 195, 1, 2, 3453,
	3454, 5, 356, 179, 2, 3454, 3460, 3, 2, 2, 2, 3455, 3456, 12, 3, 2, 2,
	3456, 3457, 7, 44, 2, 2, 3457, 3459, 5, 356, 179, 2, 3458, 3455, 3, 2,
	2, 2, 3459, 3462, 3, 2, 2, 2, 3460, 3458, 3, 2, 2, 2, 3460, 3461, 3, 2,
	2, 2, 3461, 389, 3, 2, 2, 2, 3462, 3460, 3, 2, 2, 2, 3463, 3464, 8, 196,
	1, 2, 3464, 3465, 5, 342, 172, 2, 3465, 3471, 3, 2, 2, 2, 3466, 3467, 12,
	3, 2, 2, 3467, 3468, 7, 45, 2, 2, 3468, 3470, 5, 342, 172, 2, 3469, 3466,
	3, 2, 2, 2, 3470, 3473, 3, 2, 2, 2, 3471, 3469, 3, 2, 2, 2, 3471, 3472,
	3, 2, 2, 2, 3472, 391, 3, 2, 2, 2, 3473, 3471, 3, 2, 2, 2, 3474, 3475,
	8, 197, 1, 2, 3475, 3476, 5, 344, 173, 2, 3476, 3482, 3, 2, 2, 2, 3477,
	3478, 12, 3, 2, 2, 3478, 3479, 7, 45, 2, 2, 3479, 3481, 5, 344, 173, 2,
	3480, 3477, 3, 2, 2, 2, 3481, 3484, 3, 2, 2, 2, 3482, 3480, 3, 2, 2, 2,
	3482, 3483, 3, 2, 2, 2, 3483, 393, 3, 2, 2, 2, 3484, 3482, 3, 2, 2, 2,
	3485, 3486, 8, 198, 1, 2, 3486, 3487, 5, 346, 174, 2, 3487, 3493, 3, 2,
	2, 2, 3488, 3489, 12, 3, 2, 2, 3489, 3490, 7, 45, 2, 2, 3490, 3492, 5,
	346, 174, 2, 3491, 3488, 3, 2, 2, 2, 3492, 3495, 3, 2, 2, 2, 3493, 3491,
	3, 2, 2, 2, 3493, 3494, 3, 2, 2, 2, 3494, 395, 3, 2, 2, 2, 3495, 3493,
	3, 2, 2, 2, 3496, 3497, 8, 199, 1, 2, 3497, 3498, 5, 348, 175, 2, 3498,
	3504, 3, 2, 2, 2, 3499, 3500, 12, 3, 2, 2, 3500, 3501, 7, 45, 2, 2, 3501,
	3503, 5, 348, 175, 2, 3502, 3499, 3, 2, 2, 2, 3503, 3506, 3, 2, 2, 2, 3504,
	3502, 3, 2, 2, 2, 3504, 3505, 3, 2, 2, 2, 3505, 397, 3, 2, 2, 2, 3506,
	3504, 3, 2, 2, 2, 3507, 3508, 8, 200, 1, 2, 3508, 3509, 5, 350, 176, 2,
	3509, 3515, 3, 2, 2, 2, 3510, 3511, 12, 3, 2, 2, 3511, 3512, 7, 45, 2,
	2, 3512, 3514, 5, 350, 176, 2, 3513, 3510, 3, 2, 2, 2, 3514, 3517, 3, 2,
	2, 2, 3515, 3513, 3, 2, 2, 2, 3515, 3516, 3, 2, 2, 2, 3516, 399, 3, 2,
	2, 2, 3517, 3515, 3, 2, 2, 2, 3518, 3519, 8, 201, 1, 2, 3519, 3520, 5,
	352, 177, 2, 3520, 3526, 3, 2, 2, 2, 3521, 3522, 12, 3, 2, 2, 3522, 3523,
	7, 45, 2, 2, 3523, 3525, 5, 352, 177, 2, 3524, 3521, 3, 2, 2, 2, 3525,
	3528, 3, 2, 2, 2, 3526, 3524, 3, 2, 2, 2, 3526, 3527, 3, 2, 2, 2, 3527,
	401, 3, 2, 2, 2, 3528, 3526, 3, 2, 2, 2, 3529, 3530, 8, 202, 1, 2, 3530,
	3531, 5, 354, 178, 2, 3531, 3537, 3, 2, 2, 2, 3532, 3533, 12, 3, 2, 2,
	3533, 3534, 7, 45, 2, 2, 3534, 3536, 5, 354, 178, 2, 3535, 3532, 3, 2,
	2, 2, 3536, 3539, 3, 2, 2, 2, 3537, 3535, 3, 2, 2, 2, 3537, 3538, 3, 2,
	2, 2, 3538, 403, 3, 2, 2, 2, 3539, 3537, 3, 2, 2, 2, 3540, 3541, 8, 203,
	1, 2, 3541, 3542, 5, 356, 179, 2, 3542, 3548, 3, 2, 2, 2, 3543, 3544, 12,
	3, 2, 2, 3544, 3545, 7, 45, 2, 2, 3545, 3547, 5, 356, 179, 2, 3546, 3543,
	3, 2, 2, 2, 3547, 3550, 3, 2, 2, 2, 3548, 3546, 3, 2, 2, 2, 3548, 3549,
	3, 2, 2, 2, 3549, 405, 3, 2, 2, 2, 3550, 3548, 3, 2, 2, 2, 3551, 3552,
	8, 204, 1, 2, 3552, 3553, 5, 390, 196, 2, 3553, 3559, 3, 2, 2, 2, 3554,
	3555, 12, 3, 2, 2, 3555, 3556, 7, 46, 2, 2, 3556, 3558, 5, 390, 196, 2,
	3557, 3554, 3, 2, 2, 2, 3558, 3561, 3, 2, 2, 2, 3559, 3557, 3, 2, 2, 2,
	3559, 3560, 3, 2, 2, 2, 3560, 407, 3, 2, 2, 2, 3561, 3559, 3, 2, 2, 2,
	3562, 3563, 8, 205, 1, 2, 3563, 3564, 5, 392, 197, 2, 3564, 3570, 3, 2,
	2, 2, 3565, 3566, 12, 3, 2, 2, 3566, 3567, 7, 46, 2, 2, 3567, 3569, 5,
	392, 197, 2, 3568, 3565, 3, 2, 2, 2, 3569, 3572, 3, 2, 2, 2, 3570, 3568,
	3, 2, 2, 2, 3570, 3571, 3, 2, 2, 2, 3571, 409, 3, 2, 2, 2, 3572, 3570,
	3, 2, 2, 2, 3573, 3574, 8, 206, 1, 2, 3574, 3575, 5, 394, 198, 2, 3575,
	3581, 3, 2, 2, 2, 3576, 3577, 12, 3, 2, 2, 3577, 3578, 7, 46, 2, 2, 3578,
	3580, 5, 394, 198, 2, 3579, 3576, 3, 2, 2, 2, 3580, 3583, 3, 2, 2, 2, 3581,
	3579, 3, 2, 2, 2, 3581, 3582, 3, 2, 2, 2, 3582, 411, 3, 2, 2, 2, 3583,
	3581, 3, 2, 2, 2, 3584, 3585, 8, 207, 1, 2, 3585, 3586, 5, 396, 199, 2,
	3586, 3592, 3, 2, 2, 2, 3587, 3588, 12, 3, 2, 2, 3588, 3589, 7, 46, 2,
	2, 3589, 3591, 5, 396, 199, 2, 3590, 3587, 3, 2, 2, 2, 3591, 3594, 3, 2,
	2, 2, 3592, 3590, 3, 2, 2, 2, 3592, 3593, 3, 2, 2, 2, 3593, 413, 3, 2,
	2, 2, 3594, 3592, 3, 2, 2, 2, 3595, 3596, 8, 208, 1, 2, 3596, 3597, 5,
	398, 200, 2, 3597, 3603, 3, 2, 2, 2, 3598, 3599, 12, 3, 2, 2, 3599, 3600,
	7, 46, 2, 2, 3600, 3602, 5, 398, 200, 2, 3601, 3598, 3, 2, 2, 2, 3602,
	3605, 3, 2, 2, 2, 3603, 3601, 3, 2, 2, 2, 3603, 3604, 3, 2, 2, 2, 3604,
	415, 3, 2, 2, 2, 3605, 3603, 3, 2, 2, 2, 3606, 3607, 8, 209, 1, 2, 3607,
	3608, 5, 400, 201, 2, 3608, 3614, 3, 2, 2, 2, 3609, 3610, 12, 3, 2, 2,
	3610, 3611, 7, 46, 2, 2, 3611, 3613, 5, 400, 201, 2, 3612, 3609, 3, 2,
	2, 2, 3613, 3616, 3, 2, 2, 2, 3614, 3612, 3, 2, 2, 2, 3614, 3615, 3, 2,
	2, 2, 3615, 417, 3, 2, 2, 2, 3616, 3614, 3, 2, 2, 2, 3617, 3618, 8, 210,
	1, 2, 3618, 3619, 5, 402, 202, 2, 3619, 3625, 3, 2, 2, 2, 3620, 3621, 12,
	3, 2, 2, 3621, 3622, 7, 46, 2, 2, 3622, 3624, 5, 402, 202, 2, 3623, 3620,
	3, 2, 2, 2, 3624, 3627, 3, 2, 2, 2, 3625, 3623, 3, 2, 2, 2, 3625, 3626,
	3, 2, 2, 2, 3626, 419, 3, 2, 2, 2, 3627, 3625, 3, 2, 2, 2, 3628, 3629,
	8, 211, 1, 2, 3629, 3630, 5, 404, 203, 2, 3630, 3636, 3, 2, 2, 2, 3631,
	3632, 12, 3, 2, 2, 3632, 3633, 7, 46, 2, 2, 3633, 3635, 5, 404, 203, 2,
	3634, 3631, 3, 2, 2, 2, 3635, 3638, 3, 2, 2, 2, 3636, 3634, 3, 2, 2, 2,
	3636, 3637, 3, 2, 2, 2, 3637, 421, 3, 2, 2, 2, 3638, 3636, 3, 2, 2, 2,
	3639, 3640, 8, 212, 1, 2, 3640, 3641, 5, 390, 196, 2, 3641, 3647, 3, 2,
	2, 2, 3642, 3643, 12, 3, 2, 2, 3643, 3644, 7, 47, 2, 2, 3644, 3646, 5,
	390, 196, 2, 3645, 3642, 3, 2, 2, 2, 3646, 3649, 3, 2, 2, 2, 3647, 3645,
	3, 2, 2, 2, 3647, 3648, 3, 2, 2, 2, 3648, 423, 3, 2, 2, 2, 3649, 3647,
	3, 2, 2, 2, 3650, 3651, 8, 213, 1, 2, 3651, 3652, 5, 392, 197, 2, 3652,
	3658, 3, 2, 2, 2, 3653, 3654, 12, 3, 2, 2, 3654, 3655, 7, 47, 2, 2, 3655,
	3657, 5, 392, 197, 2, 3656, 3653, 3, 2, 2, 2, 3657, 3660, 3, 2, 2, 2, 3658,
	3656, 3, 2, 2, 2, 3658, 3659, 3, 2, 2, 2, 3659, 425, 3, 2, 2, 2, 3660,
	3658, 3, 2, 2, 2, 3661, 3662, 8, 214, 1, 2, 3662, 3663, 5, 394, 198, 2,
	3663, 3669, 3, 2, 2, 2, 3664, 3665, 12, 3, 2, 2, 3665, 3666, 7, 47, 2,
	2, 3666, 3668, 5, 394, 198, 2, 3667, 3664, 3, 2, 2, 2, 3668, 3671, 3, 2,
	2, 2, 3669, 3667, 3, 2, 2, 2, 3669, 3670, 3, 2, 2, 2, 3670, 427, 3, 2,
	2, 2, 3671, 3669, 3, 2, 2, 2, 3672, 3673, 8, 215, 1, 2, 3673, 3674, 5,
	396, 199, 2, 3674, 3680, 3, 2, 2, 2, 3675, 3676, 12, 3, 2, 2, 3676, 3677,
	7, 47, 2, 2, 3677, 3679, 5, 396, 199, 2, 3678, 3675, 3, 2, 2, 2, 3679,
	3682, 3, 2, 2, 2, 3680, 3678, 3, 2, 2, 2, 3680, 3681, 3, 2, 2, 2, 3681,
	429, 3, 2, 2, 2, 3682, 3680, 3, 2, 2, 2, 3683, 3684, 8, 216, 1, 2, 3684,
	3685, 5, 398, 200, 2, 3685, 3691, 3, 2, 2, 2, 3686, 3687, 12, 3, 2, 2,
	3687, 3688, 7, 47, 2, 2, 3688, 3690, 5, 398, 200, 2, 3689, 3686, 3, 2,
	2, 2, 3690, 3693, 3, 2, 2, 2, 3691, 3689, 3, 2, 2, 2, 3691, 3692, 3, 2,
	2, 2, 3692, 431, 3, 2, 2, 2, 3693, 3691, 3, 2, 2, 2, 3694, 3695, 8, 217,
	1, 2, 3695, 3696, 5, 400, 201, 2, 3696, 3702, 3, 2, 2, 2, 3697, 3698, 12,
	3, 2, 2, 3698, 3699, 7, 47, 2, 2, 3699, 3701, 5, 400, 201, 2, 3700, 3697,
	3, 2, 2, 2, 3701, 3704, 3, 2, 2, 2, 3702, 3700, 3, 2, 2, 2, 3702, 3703,
	3, 2, 2, 2, 3703, 433, 3, 2, 2, 2, 3704, 3702, 3, 2, 2, 2, 3705, 3706,
	8, 218, 1, 2, 3706, 3707, 5, 402, 202, 2, 3707, 3713, 3, 2, 2, 2, 3708,
	3709, 12, 3, 2, 2, 3709, 3710, 7, 47, 2, 2, 3710, 3712, 5, 402, 202, 2,
	3711, 3708, 3, 2, 2, 2, 3712, 3715, 3, 2, 2, 2, 3713, 3711, 3, 2, 2, 2,
	3713, 3714, 3, 2, 2, 2, 3714, 435, 3, 2, 2, 2, 3715, 3713, 3, 2, 2, 2,
	3716, 3717, 8, 219, 1, 2, 3717, 3718, 5, 404, 203, 2, 3718, 3724, 3, 2,
	2, 2, 3719, 3720, 12, 3, 2, 2, 3720, 3721, 7, 47, 2, 2, 3721, 3723, 5,
	404, 203, 2, 3722, 3719, 3, 2, 2, 2, 3723, 3726, 3, 2, 2, 2, 3724, 3722,
	3, 2, 2, 2, 3724, 3725, 3, 2, 2, 2, 3725, 437, 3, 2, 2, 2, 3726, 3724,
	3, 2, 2, 2, 3727, 3735, 5, 422, 212, 2, 3728, 3729, 5, 422, 212, 2, 3729,
	3730, 7, 48, 2, 2, 3730, 3731, 5, 458, 230, 2, 3731, 3732, 7, 14, 2, 2,
	3732, 3733, 5, 456, 229, 2, 3733, 3735, 3, 2, 2, 2, 3734, 3727, 3, 2, 2,
	2, 3734, 3728, 3, 2, 2, 2, 3735, 439, 3, 2, 2, 2, 3736, 3744, 5, 424, 213,
	2, 3737, 3738, 5, 424, 213, 2, 3738, 3739, 7, 48, 2, 2, 3739, 3740, 5,
	458, 230, 2, 3740, 3741, 7, 14, 2, 2, 3741, 3742, 5, 458, 230, 2, 3742,
	3744, 3, 2, 2, 2, 3743, 3736, 3, 2, 2, 2, 3743, 3737, 3, 2, 2, 2, 3744,
	441, 3, 2, 2, 2, 3745, 3753, 5, 426, 214, 2, 3746, 3747, 5, 426, 214, 2,
	3747, 3748, 7, 48, 2, 2, 3748, 3749, 5, 462, 232, 2, 3749, 3750, 7, 14,
	2, 2, 3750, 3751, 5, 460, 231, 2, 3751, 3753, 3, 2, 2, 2, 3752, 3745, 3,
	2, 2, 2, 3752, 3746, 3, 2, 2, 2, 3753, 443, 3, 2, 2, 2, 3754, 3762, 5,
	428, 215, 2, 3755, 3756, 5, 428, 215, 2, 3756, 3757, 7, 48, 2, 2, 3757,
	3758, 5, 462, 232, 2, 3758, 3759, 7, 14, 2, 2, 3759, 3760, 5, 462, 232,
	2, 3760, 3762, 3, 2, 2, 2, 3761, 3754, 3, 2, 2, 2, 3761, 3755, 3, 2, 2,
	2, 3762, 445, 3, 2, 2, 2, 3763, 3771, 5, 430, 216, 2, 3764, 3765, 5, 430,
	216, 2, 3765, 3766, 7, 48, 2, 2, 3766, 3767, 5, 466, 234, 2, 3767, 3768,
	7, 14, 2, 2, 3768, 3769, 5, 464, 233, 2, 3769, 3771, 3, 2, 2, 2, 3770,
	3763, 3, 2, 2, 2, 3770, 3764, 3, 2, 2, 2, 3771, 447, 3, 2, 2, 2, 3772,
	3780, 5, 432, 217, 2, 3773, 3774, 5, 432, 217, 2, 3774, 3775, 7, 48, 2,
	2, 3775, 3776, 5, 466, 234, 2, 3776, 3777, 7, 14, 2, 2, 3777, 3778, 5,
	466, 234, 2, 3778, 3780, 3, 2, 2, 2, 3779, 3772, 3, 2, 2, 2, 3779, 3773,
	3, 2, 2, 2, 3780, 449, 3, 2, 2, 2, 3781, 3789, 5, 434, 218, 2, 3782, 3783,
	5, 434, 218, 2, 3783, 3784, 7, 48, 2, 2, 3784, 3785, 5, 470, 236, 2, 3785,
	3786, 7, 14, 2, 2, 3786, 3787, 5, 468, 235, 2, 3787, 3789, 3, 2, 2, 2,
	3788, 3781, 3, 2, 2, 2, 3788, 3782, 3, 2, 2, 2, 3789, 451, 3, 2, 2, 2,
	3790, 3798, 5, 436, 219, 2, 3791, 3792, 5, 436, 219, 2, 3792, 3793, 7,
	48, 2, 2, 3793, 3794, 5, 470, 236, 2, 3794, 3795, 7, 14, 2, 2, 3795, 3796,
	5, 470, 236, 2, 3796, 3798, 3, 2, 2, 2, 3797, 3790, 3, 2, 2, 2, 3797, 3791,
	3, 2, 2, 2, 3798, 453, 3, 2, 2, 2, 3799, 3800, 9, 9, 2, 2, 3800, 455, 3,
	2, 2, 2, 3801, 3813, 5, 438, 220, 2, 3802, 3813, 5, 1120, 561, 2, 3803,
	3813, 5, 1310, 656, 2, 3804, 3805, 5, 270, 136, 2, 3805, 3806, 7, 15, 2,
	2, 3806, 3807, 5, 456, 229, 2, 3807, 3813, 3, 2, 2, 2, 3808, 3809, 5, 270,
	136, 2, 3809, 3810, 5, 454, 228, 2, 3810, 3811, 5, 456, 229, 2, 3811, 3813,
	3, 2, 2, 2, 3812, 3801, 3, 2, 2, 2, 3812, 3802, 3, 2, 2, 2, 3812, 3803,
	3, 2, 2, 2, 3812, 3804, 3, 2, 2, 2, 3812, 3808, 3, 2, 2, 2, 3813, 457,
	3, 2, 2, 2, 3814, 3826, 5, 440, 221, 2, 3815, 3826, 5, 1122, 562, 2, 3816,
	3826, 5, 1312, 657, 2, 3817, 3818, 5, 270, 136, 2, 3818, 3819, 7, 15, 2,
	2, 3819, 3820, 5, 458, 230, 2, 3820, 3826, 3, 2, 2, 2, 3821, 3822, 5, 270,
	136, 2, 3822, 3823, 5, 454, 228, 2, 3823, 3824, 5, 458, 230, 2, 3824, 3826,
	3, 2, 2, 2, 3825, 3814, 3, 2, 2, 2, 3825, 3815, 3, 2, 2, 2, 3825, 3816,
	3, 2, 2, 2, 3825, 3817, 3, 2, 2, 2, 3825, 3821, 3, 2, 2, 2, 3826, 459,
	3, 2, 2, 2, 3827, 3840, 5, 442, 222, 2, 3828, 3840, 5, 1186, 594, 2, 3829,
	3840, 5, 1124, 563, 2, 3830, 3840, 5, 1314, 658, 2, 3831, 3832, 5, 270,
	136, 2, 3832, 3833, 7, 15, 2, 2, 3833, 3834, 5, 460, 231, 2, 3834, 3840,
	3, 2, 2, 2, 3835, 3836, 5, 270, 136, 2, 3836, 3837, 5, 454, 228, 2, 3837,
	3838, 5, 460, 231, 2, 3838, 3840, 3, 2, 2, 2, 3839, 3827, 3, 2, 2, 2, 3839,
	3828, 3, 2, 2, 2, 3839, 3829, 3, 2, 2, 2, 3839, 3830, 3, 2, 2, 2, 3839,
	3831, 3, 2, 2, 2, 3839, 3835, 3, 2, 2, 2, 3840, 461, 3, 2, 2, 2, 3841,
	3854, 5, 444, 223, 2, 3842, 3854, 5, 1188, 595, 2, 3843, 3854, 5, 1126,
	564, 2, 3844, 3854, 5, 1316, 659, 2, 3845, 3846, 5, 270, 136, 2, 3846,
	3847, 7, 15, 2, 2, 3847, 3848, 5, 462, 232, 2, 3848, 3854, 3, 2, 2, 2,
	3849, 3850, 5, 270, 136, 2, 3850, 3851, 5, 454, 228, 2, 3851, 3852, 5,
	462, 232, 2, 3852, 3854, 3, 2, 2, 2, 3853, 3841, 3, 2, 2, 2, 3853, 3842,
	3, 2, 2, 2, 3853, 3843, 3, 2, 2, 2, 3853, 3844, 3, 2, 2, 2, 3853, 3845,
	3, 2, 2, 2, 3853, 3849, 3, 2, 2, 2, 3854, 463, 3, 2, 2, 2, 3855, 3867,
	5, 446, 224, 2, 3856, 3867, 5, 1128, 565, 2, 3857, 3867, 5, 1318, 660,
	2, 3858, 3859, 5, 270, 136, 2, 3859, 3860, 7, 15, 2, 2, 3860, 3861, 5,
	464, 233, 2, 3861, 3867, 3, 2, 2, 2, 3862, 3863, 5, 270, 136, 2, 3863,
	3864, 5, 454, 228, 2, 3864, 3865, 5, 464, 233, 2, 3865, 3867, 3, 2, 2,
	2, 3866, 3855, 3, 2, 2, 2, 3866, 3856, 3, 2, 2, 2, 3866, 3857, 3, 2, 2,
	2, 3866, 3858, 3, 2, 2, 2, 3866, 3862, 3, 2, 2, 2, 3867, 465, 3, 2, 2,
	2, 3868, 3880, 5, 448, 225, 2, 3869, 3880, 5, 1130, 566, 2, 3870, 3880,
	5, 1320, 661, 2, 3871, 3872, 5, 270, 136, 2, 3872, 3873, 7, 15, 2, 2, 3873,
	3874, 5, 466, 234, 2, 3874, 3880, 3, 2, 2, 2, 3875, 3876, 5, 270, 136,
	2, 3876, 3877, 5, 454, 228, 2, 3877, 3878, 5, 466, 234, 2, 3878, 3880,
	3, 2, 2, 2, 3879, 3868, 3, 2, 2, 2, 3879, 3869, 3, 2, 2, 2, 3879, 3870,
	3, 2, 2, 2, 3879, 3871, 3, 2, 2, 2, 3879, 3875, 3, 2, 2, 2, 3880, 467,
	3, 2, 2, 2, 3881, 3894, 5, 450, 226, 2, 3882, 3894, 5, 1190, 596, 2, 3883,
	3894, 5, 1132, 567, 2, 3884, 3894, 5, 1322, 662, 2, 3885, 3886, 5, 270,
	136, 2, 3886, 3887, 7, 15, 2, 2, 3887, 3888, 5, 468, 235, 2, 3888, 3894,
	3, 2, 2, 2, 3889, 3890, 5, 270, 136, 2, 3890, 3891, 5, 454, 228, 2, 3891,
	3892, 5, 468, 235, 2, 3892, 3894, 3, 2, 2, 2, 3893, 3881, 3, 2, 2, 2, 3893,
	3882, 3, 2, 2, 2, 3893, 3883, 3, 2, 2, 2, 3893, 3884, 3, 2, 2, 2, 3893,
	3885, 3, 2, 2, 2, 3893, 3889, 3, 2, 2, 2, 3894, 469, 3, 2, 2, 2, 3895,
	3908, 5, 452, 227, 2, 3896, 3908, 5, 1192, 597, 2, 3897, 3908, 5, 1134,
	568, 2, 3898, 3908, 5, 1324, 663, 2, 3899, 3900, 5, 270, 136, 2, 3900,
	3901, 7, 15, 2, 2, 3901, 3902, 5, 470, 236, 2, 3902, 3908, 3, 2, 2, 2,
	3903, 3904, 5, 270, 136, 2, 3904, 3905, 5, 454, 228, 2, 3905, 3906, 5,
	470, 236, 2, 3906, 3908, 3, 2, 2, 2, 3907, 3895, 3, 2, 2, 2, 3907, 3896,
	3, 2, 2, 2, 3907, 3897, 3, 2, 2, 2, 3907, 3898, 3, 2, 2, 2, 3907, 3899,
	3, 2, 2, 2, 3907, 3903, 3, 2, 2, 2, 3908, 471, 3, 2, 2, 2, 3909, 3910,
	8, 237, 1, 2, 3910, 3911, 5, 456, 229, 2, 3911, 3917, 3, 2, 2, 2, 3912,
	3913, 12, 3, 2, 2, 3913, 3914, 7, 10, 2, 2, 3914, 3916, 5, 456, 229, 2,
	3915, 3912, 3, 2, 2, 2, 3916, 3919, 3, 2, 2, 2, 3917, 3915, 3, 2, 2, 2,
	3917, 3918, 3, 2, 2, 2, 3918, 473, 3, 2, 2, 2, 3919, 3917, 3, 2, 2, 2,
	3920, 3921, 8, 238, 1, 2, 3921, 3922, 5, 458, 230, 2, 3922, 3928, 3, 2,
	2, 2, 3923, 3924, 12, 3, 2, 2, 3924, 3925, 7, 10, 2, 2, 3925, 3927, 5,
	458, 230, 2, 3926, 3923, 3, 2, 2, 2, 3927, 3930, 3, 2, 2, 2, 3928, 3926,
	3, 2, 2, 2, 3928, 3929, 3, 2, 2, 2, 3929, 475, 3, 2, 2, 2, 3930, 3928,
	3, 2, 2, 2, 3931, 3932, 8, 239, 1, 2, 3932, 3933, 5, 460, 231, 2, 3933,
	3939, 3, 2, 2, 2, 3934, 3935, 12, 3, 2, 2, 3935, 3936, 7, 10, 2, 2, 3936,
	3938, 5, 460, 231, 2, 3937, 3934, 3, 2, 2, 2, 3938, 3941, 3, 2, 2, 2, 3939,
	3937, 3, 2, 2, 2, 3939, 3940, 3, 2, 2, 2, 3940, 477, 3, 2, 2, 2, 3941,
	3939, 3, 2, 2, 2, 3942, 3943, 8, 240, 1, 2, 3943, 3944, 5, 462, 232, 2,
	3944, 3950, 3, 2, 2, 2, 3945, 3946, 12, 3, 2, 2, 3946, 3947, 7, 10, 2,
	2, 3947, 3949, 5, 462, 232, 2, 3948, 3945, 3, 2, 2, 2, 3949, 3952, 3, 2,
	2, 2, 3950, 3948, 3, 2, 2, 2, 3950, 3951, 3, 2, 2, 2, 3951, 479, 3, 2,
	2, 2, 3952, 3950, 3, 2, 2, 2, 3953, 3954, 8, 241, 1, 2, 3954, 3955, 5,
	464, 233, 2, 3955, 3961, 3, 2, 2, 2, 3956, 3957, 12, 3, 2, 2, 3957, 3958,
	7, 10, 2, 2, 3958, 3960, 5, 464, 233, 2, 3959, 3956, 3, 2, 2, 2, 3960,
	3963, 3, 2, 2, 2, 3961, 3959, 3, 2, 2, 2, 3961, 3962, 3, 2, 2, 2, 3962,
	481, 3, 2, 2, 2, 3963, 3961, 3, 2, 2, 2, 3964, 3965, 8, 242, 1, 2, 3965,
	3966, 5, 466, 234, 2, 3966, 3972, 3, 2, 2, 2, 3967, 3968, 12, 3, 2, 2,
	3968, 3969, 7, 10, 2, 2, 3969, 3971, 5, 466, 234, 2, 3970, 3967, 3, 2,
	2, 2, 3971, 3974, 3, 2, 2, 2, 3972, 3970, 3, 2, 2, 2, 3972, 3973, 3, 2,
	2, 2, 3973, 483, 3, 2, 2, 2, 3974, 3972, 3, 2, 2, 2, 3975, 3976, 8, 243,
	1, 2, 3976, 3977, 5, 468, 235, 2, 3977, 3983, 3, 2, 2, 2, 3978, 3979, 12,
	3, 2, 2, 3979, 3980, 7, 10, 2, 2, 3980, 3982, 5, 468, 235, 2, 3981, 3978,
	3, 2, 2, 2, 3982, 3985, 3, 2, 2, 2, 3983, 3981, 3, 2, 2, 2, 3983, 3984,
	3, 2, 2, 2, 3984, 485, 3, 2, 2, 2, 3985, 3983, 3, 2, 2, 2, 3986, 3987,
	8, 244, 1, 2, 3987, 3988, 5, 470, 236, 2, 3988, 3994, 3, 2, 2, 2, 3989,
	3990, 12, 3, 2, 2, 3990, 3991, 7, 10, 2, 2, 3991, 3993, 5, 470, 236, 2,
	3992, 3989, 3, 2, 2, 2, 3993, 3996, 3, 2, 2, 2, 3994, 3992, 3, 2, 2, 2,
	3994, 3995, 3, 2, 2, 2, 3995, 487, 3, 2, 2, 2, 3996, 3994, 3, 2, 2, 2,
	3997, 4011, 5, 544, 273, 2, 3998, 4011, 5, 658, 330, 2, 3999, 4011, 5,
	786, 394, 2, 4000, 4011, 5, 788, 395, 2, 4001, 4011, 5, 796, 399, 2, 4002,
	4011, 5, 528, 265, 2, 4003, 4011, 5, 844, 423, 2, 4004, 4011, 5, 852, 427,
	2, 4005, 4011, 5, 868, 435, 2, 4006, 4011, 5, 948, 475, 2, 4007, 4011,
	5, 980, 491, 2, 4008, 4011, 5, 988, 495, 2, 4009, 4011, 5, 1044, 523, 2,
	4010, 3997, 3, 2, 2, 2, 4010, 3998, 3, 2, 2, 2, 4010, 3999, 3, 2, 2, 2,
	4010, 4000, 3, 2, 2, 2, 4010, 4001, 3, 2, 2, 2, 4010, 4002, 3, 2, 2, 2,
	4010, 4003, 3, 2, 2, 2, 4010, 4004, 3, 2, 2, 2, 4010, 4005, 3, 2, 2, 2,
	4010, 4006, 3, 2, 2, 2, 4010, 4007, 3, 2, 2, 2, 4010, 4008, 3, 2, 2, 2,
	4010, 4009, 3, 2, 2, 2, 4011, 489, 3, 2, 2, 2, 4012, 4026, 5, 546, 274,
	2, 4013, 4026, 5, 660, 331, 2, 4014, 4026, 5, 786, 394, 2, 4015, 4026,
	5, 790, 396, 2, 4016, 4026, 5, 798, 400, 2, 4017, 4026, 5, 530, 266, 2,
	4018, 4026, 5, 846, 424, 2, 4019, 4026, 5, 854, 428, 2, 4020, 4026, 5,
	870, 436, 2, 4021, 4026, 5, 950, 476, 2, 4022, 4026, 5, 982, 492, 2, 4023,
	4026, 5, 990, 496, 2, 4024, 4026, 5, 1044, 523, 2, 4025, 4012, 3, 2, 2,
	2, 4025, 4013, 3, 2, 2, 2, 4025, 4014, 3, 2, 2, 2, 4025, 4015, 3, 2, 2,
	2, 4025, 4016, 3, 2, 2, 2, 4025, 4017, 3, 2, 2, 2, 4025, 4018, 3, 2, 2,
	2, 4025, 4019, 3, 2, 2, 2, 4025, 4020, 3, 2, 2, 2, 4025, 4021, 3, 2, 2,
	2, 4025, 4022, 3, 2, 2, 2, 4025, 4023, 3, 2, 2, 2, 4025, 4024, 3, 2, 2,
	2, 4026, 491, 3, 2, 2, 2, 4027, 4041, 5, 548, 275, 2, 4028, 4041, 5, 662,
	332, 2, 4029, 4041, 5, 786, 394, 2, 4030, 4041, 5, 792, 397, 2, 4031, 4041,
	5, 800, 401, 2, 4032, 4041, 5, 532, 267, 2, 4033, 4041, 5, 848, 425, 2,
	4034, 4041, 5, 856, 429, 2, 4035, 4041, 5, 872, 437, 2, 4036, 4041, 5,
	952, 477, 2, 4037, 4041, 5, 984, 493, 2, 4038, 4041, 5, 992, 497, 2, 4039,
	4041, 5, 1044, 523, 2, 4040, 4027, 3, 2, 2, 2, 4040, 4028, 3, 2, 2, 2,
	4040, 4029, 3, 2, 2, 2, 4040, 4030, 3, 2, 2, 2, 4040, 4031, 3, 2, 2, 2,
	4040, 4032, 3, 2, 2, 2, 4040, 4033, 3, 2, 2, 2, 4040, 4034, 3, 2, 2, 2,
	4040, 4035, 3, 2, 2, 2, 4040, 4036, 3, 2, 2, 2, 4040, 4037, 3, 2, 2, 2,
	4040, 4038, 3, 2, 2, 2, 4040, 4039, 3, 2, 2, 2, 4041, 493, 3, 2, 2, 2,
	4042, 4056, 5, 550, 276, 2, 4043, 4056, 5, 664, 333, 2, 4044, 4056, 5,
	786, 394, 2, 4045, 4056, 5, 794, 398, 2, 4046, 4056, 5, 802, 402, 2, 4047,
	4056, 5, 534, 268, 2, 4048, 4056, 5, 850, 426, 2, 4049, 4056, 5, 858, 430,
	2, 4050, 4056, 5, 874, 438, 2, 4051, 4056, 5, 954, 478, 2, 4052, 4056,
	5, 986, 494, 2, 4053, 4056, 5, 994, 498, 2, 4054, 4056, 5, 1044, 523, 2,
	4055, 4042, 3, 2, 2, 2, 4055, 4043, 3, 2, 2, 2, 4055, 4044, 3, 2, 2, 2,
	4055, 4045, 3, 2, 2, 2, 4055, 4046, 3, 2, 2, 2, 4055, 4047, 3, 2, 2, 2,
	4055, 4048, 3, 2, 2, 2, 4055, 4049, 3, 2, 2, 2, 4055, 4050, 3, 2, 2, 2,
	4055, 4051, 3, 2, 2, 2, 4055, 4052, 3, 2, 2, 2, 4055, 4053, 3, 2, 2, 2,
	4055, 4054, 3, 2, 2, 2, 4056, 495, 3, 2, 2, 2, 4057, 4072, 5, 552, 277,
	2, 4058, 4072, 5, 658, 330, 2, 4059, 4072, 5, 786, 394, 2, 4060, 4072,
	5, 788, 395, 2, 4061, 4072, 5, 804, 403, 2, 4062, 4072, 5, 536, 269, 2,
	4063, 4072, 5, 844, 423, 2, 4064, 4072, 5, 852, 427, 2, 4065, 4072, 5,
	860, 431, 2, 4066, 4072, 5, 876, 439, 2, 4067, 4072, 5, 956, 479, 2, 4068,
	4072, 5, 980, 491, 2, 4069, 4072, 5, 996, 499, 2, 4070, 4072, 5, 1044,
	523, 2, 4071, 4057, 3, 2, 2, 2, 4071, 4058, 3, 2, 2, 2, 4071, 4059, 3,
	2, 2, 2, 4071, 4060, 3, 2, 2, 2, 4071, 4061, 3, 2, 2, 2, 4071, 4062, 3,
	2, 2, 2, 4071, 4063, 3, 2, 2, 2, 4071, 4064, 3, 2, 2, 2, 4071, 4065, 3,
	2, 2, 2, 4071, 4066, 3, 2, 2, 2, 4071, 4067, 3, 2, 2, 2, 4071, 4068, 3,
	2, 2, 2, 4071, 4069, 3, 2, 2, 2, 4071, 4070, 3, 2, 2, 2, 4072, 497, 3,
	2, 2, 2, 4073, 4088, 5, 554, 278, 2, 4074, 4088, 5, 660, 331, 2, 4075,
	4088, 5, 786, 394, 2, 4076, 4088, 5, 790, 396, 2, 4077, 4088, 5, 806, 404,
	2, 4078, 4088, 5, 538, 270, 2, 4079, 4088, 5, 846, 424, 2, 4080, 4088,
	5, 854, 428, 2, 4081, 4088, 5, 862, 432, 2, 4082, 4088, 5, 878, 440, 2,
	4083, 4088, 5, 958, 480, 2, 4084, 4088, 5, 982, 492, 2, 4085, 4088, 5,
	998, 500, 2, 4086, 4088, 5, 1044, 523, 2, 4087, 4073, 3, 2, 2, 2, 4087,
	4074, 3, 2, 2, 2, 4087, 4075, 3, 2, 2, 2, 4087, 4076, 3, 2, 2, 2, 4087,
	4077, 3, 2, 2, 2, 4087, 4078, 3, 2, 2, 2, 4087, 4079, 3, 2, 2, 2, 4087,
	4080, 3, 2, 2, 2, 4087, 4081, 3, 2, 2, 2, 4087, 4082, 3, 2, 2, 2, 4087,
	4083, 3, 2, 2, 2, 4087, 4084, 3, 2, 2, 2, 4087, 4085, 3, 2, 2, 2, 4087,
	4086, 3, 2, 2, 2, 4088, 499, 3, 2, 2, 2, 4089, 4104, 5, 556, 279, 2, 4090,
	4104, 5, 662, 332, 2, 4091, 4104, 5, 786, 394, 2, 4092, 4104, 5, 792, 397,
	2, 4093, 4104, 5, 808, 405, 2, 4094, 4104, 5, 540, 271, 2, 4095, 4104,
	5, 848, 425, 2, 4096, 4104, 5, 856, 429, 2, 4097, 4104, 5, 864, 433, 2,
	4098, 4104, 5, 880, 441, 2, 4099, 4104, 5, 960, 481, 2, 4100, 4104, 5,
	984, 493, 2, 4101, 4104, 5, 1000, 501, 2, 4102, 4104, 5, 1044, 523, 2,
	4103, 4089, 3, 2, 2, 2, 4103, 4090, 3, 2, 2, 2, 4103, 4091, 3, 2, 2, 2,
	4103, 4092, 3, 2, 2, 2, 4103, 4093, 3, 2, 2, 2, 4103, 4094, 3, 2, 2, 2,
	4103, 4095, 3, 2, 2, 2, 4103, 4096, 3, 2, 2, 2, 4103, 4097, 3, 2, 2, 2,
	4103, 4098, 3, 2, 2, 2, 4103, 4099, 3, 2, 2, 2, 4103, 4100, 3, 2, 2, 2,
	4103, 4101, 3, 2, 2, 2, 4103, 4102, 3, 2, 2, 2, 4104, 501, 3, 2, 2, 2,
	4105, 4120, 5, 558, 280, 2, 4106, 4120, 5, 664, 333, 2, 4107, 4120, 5,
	786, 394, 2, 4108, 4120, 5, 794, 398, 2, 4109, 4120, 5, 810, 406, 2, 4110,
	4120, 5, 542, 272, 2, 4111, 4120, 5, 850, 426, 2, 4112, 4120, 5, 858, 430,
	2, 4113, 4120, 5, 866, 434, 2, 4114, 4120, 5, 882, 442, 2, 4115, 4120,
	5, 962, 482, 2, 4116, 4120, 5, 986, 494, 2, 4117, 4120, 5, 1002, 502, 2,
	4118, 4120, 5, 1044, 523, 2, 4119, 4105, 3, 2, 2, 2, 4119, 4106, 3, 2,
	2, 2, 4119, 4107, 3, 2, 2, 2, 4119, 4108, 3, 2, 2, 2, 4119, 4109, 3, 2,
	2, 2, 4119, 4110, 3, 2, 2, 2, 4119, 4111, 3, 2, 2, 2, 4119, 4112, 3, 2,
	2, 2, 4119, 4113, 3, 2, 2, 2, 4119, 4114, 3, 2, 2, 2, 4119, 4115, 3, 2,
	2, 2, 4119, 4116, 3, 2, 2, 2, 4119, 4117, 3, 2, 2, 2, 4119, 4118, 3, 2,
	2, 2, 4120, 503, 3, 2, 2, 2, 4121, 4125, 5, 512, 257, 2, 4122, 4125, 5,
	1222, 612, 2, 4123, 4125, 5, 610, 306, 2, 4124, 4121, 3, 2, 2, 2, 4124,
	4122, 3, 2, 2, 2, 4124, 4123, 3, 2, 2, 2, 4125, 505, 3, 2, 2, 2, 4126,
	4130, 5, 514, 258, 2, 4127, 4130, 5, 1224, 613, 2, 4128, 4130, 5, 614,
	308, 2, 4129, 4126, 3, 2, 2, 2, 4129, 4127, 3, 2, 2, 2, 4129, 4128, 3,
	2, 2, 2, 4130, 507, 3, 2, 2, 2, 4131, 4135, 5, 516, 259, 2, 4132, 4135,
	5, 1226, 614, 2, 4133, 4135, 5, 618, 310, 2, 4134, 4131, 3, 2, 2, 2, 4134,
	4132, 3, 2, 2, 2, 4134, 4133, 3, 2, 2, 2, 4135, 509, 3, 2, 2, 2, 4136,
	4140, 5, 518, 260, 2, 4137, 4140, 5, 1228, 615, 2, 4138, 4140, 5, 622,
	312, 2, 4139, 4136, 3, 2, 2, 2, 4139, 4137, 3, 2, 2, 2, 4139, 4138, 3,
	2, 2, 2, 4140, 511, 3, 2, 2, 2, 4141, 4146, 5, 1046, 524, 2, 4142, 4146,
	5, 1166, 584, 2, 4143, 4146, 5, 1278, 640, 2, 4144, 4146, 5, 1202, 602,
	2, 4145, 4141, 3, 2, 2, 2, 4145, 4142, 3, 2, 2, 2, 4145, 4143, 3, 2, 2,
	2, 4145, 4144, 3, 2, 2, 2, 4146, 513, 3, 2, 2, 2, 4147, 4152, 5, 1048,
	525, 2, 4148, 4152, 5, 1168, 585, 2, 4149, 4152, 5, 1280, 641, 2, 4150,
	4152, 5, 1204, 603, 2, 4151, 4147, 3, 2, 2, 2, 4151, 4148, 3, 2, 2, 2,
	4151, 4149, 3, 2, 2, 2, 4151, 4150, 3, 2, 2, 2, 4152, 515, 3, 2, 2, 2,
	4153, 4158, 5, 1050, 526, 2, 4154, 4158, 5, 1170, 586, 2, 4155, 4158, 5,
	1282, 642, 2, 4156, 4158, 5, 1206, 604, 2, 4157, 4153, 3, 2, 2, 2, 4157,
	4154, 3, 2, 2, 2, 4157, 4155, 3, 2, 2, 2, 4157, 4156, 3, 2, 2, 2, 4158,
	517, 3, 2, 2, 2, 4159, 4164, 5, 1052, 527, 2, 4160, 4164, 5, 1172, 587,
	2, 4161, 4164, 5, 1284, 643, 2, 4162, 4164, 5, 1208, 605, 2, 4163, 4159,
	3, 2, 2, 2, 4163, 4160, 3, 2, 2, 2, 4163, 4161, 3, 2, 2, 2, 4163, 4162,
	3, 2, 2, 2, 4164, 519, 3, 2, 2, 2, 4165, 4170, 5, 1054, 528, 2, 4166, 4170,
	5, 1174, 588, 2, 4167, 4170, 5, 1286, 644, 2, 4168, 4170, 5, 1210, 606,
	2, 4169, 4165, 3, 2, 2, 2, 4169, 4166, 3, 2, 2, 2, 4169, 4167, 3, 2, 2,
	2, 4169, 4168, 3, 2, 2, 2, 4170, 521, 3, 2, 2, 2, 4171, 4176, 5, 1056,
	529, 2, 4172, 4176, 5, 1176, 589, 2, 4173, 4176, 5, 1288, 645, 2, 4174,
	4176, 5, 1212, 607, 2, 4175, 4171, 3, 2, 2, 2, 4175, 4172, 3, 2, 2, 2,
	4175, 4173, 3, 2, 2, 2, 4175, 4174, 3, 2, 2, 2, 4176, 523, 3, 2, 2, 2,
	4177, 4182, 5, 1058, 530, 2, 4178, 4182, 5, 1178, 590, 2, 4179, 4182, 5,
	1290, 646, 2, 4180, 4182, 5, 1214, 608, 2, 4181, 4177, 3, 2, 2, 2, 4181,
	4178, 3, 2, 2, 2, 4181, 4179, 3, 2, 2, 2, 4181, 4180, 3, 2, 2, 2, 4182,
	525, 3, 2, 2, 2, 4183, 4188, 5, 1060, 531, 2, 4184, 4188, 5, 1180, 591,
	2, 4185, 4188, 5, 1292, 647, 2, 4186, 4188, 5, 1216, 609, 2, 4187, 4183,
	3, 2, 2, 2, 4187, 4184, 3, 2, 2, 2, 4187, 4185, 3, 2, 2, 2, 4187, 4186,
	3, 2, 2, 2, 4188, 527, 3, 2, 2, 2, 4189, 4192, 5, 812, 407, 2, 4190, 4192,
	5, 884, 443, 2, 4191, 4189, 3, 2, 2, 2, 4191, 4190, 3, 2, 2, 2, 4192, 529,
	3, 2, 2, 2, 4193, 4196, 5, 814, 408, 2, 4194, 4196, 5, 886, 444, 2, 4195,
	4193, 3, 2, 2, 2, 4195, 4194, 3, 2, 2, 2, 4196, 531, 3, 2, 2, 2, 4197,
	4200, 5, 816, 409, 2, 4198, 4200, 5, 888, 445, 2, 4199, 4197, 3, 2, 2,
	2, 4199, 4198, 3, 2, 2, 2, 4200, 533, 3, 2, 2, 2, 4201, 4204, 5, 818, 410,
	2, 4202, 4204, 5, 890, 446, 2, 4203, 4201, 3, 2, 2, 2, 4203, 4202, 3, 2,
	2, 2, 4204, 535, 3, 2, 2, 2, 4205, 4208, 5, 820, 411, 2, 4206, 4208, 5,
	892, 447, 2, 4207, 4205, 3, 2, 2, 2, 4207, 4206, 3, 2, 2, 2, 4208, 537,
	3, 2, 2, 2, 4209, 4212, 5, 822, 412, 2, 4210, 4212, 5, 894, 448, 2, 4211,
	4209, 3, 2, 2, 2, 4211, 4210, 3, 2, 2, 2, 4212, 539, 3, 2, 2, 2, 4213,
	4216, 5, 824, 413, 2, 4214, 4216, 5, 896, 449, 2, 4215, 4213, 3, 2, 2,
	2, 4215, 4214, 3, 2, 2, 2, 4216, 541, 3, 2, 2, 2, 4217, 4220, 5, 826, 414,
	2, 4218, 4220, 5, 898, 450, 2, 4219, 4217, 3, 2, 2, 2, 4219, 4218, 3, 2,
	2, 2, 4220, 543, 3, 2, 2, 2, 4221, 4222, 5, 560, 281, 2, 4222, 545, 3,
	2, 2, 2, 4223, 4224, 5, 562, 282, 2, 4224, 547, 3, 2, 2, 2, 4225, 4226,
	5, 564, 283, 2, 4226, 549, 3, 2, 2, 2, 4227, 4228, 5, 566, 284, 2, 4228,
	551, 3, 2, 2, 2, 4229, 4230, 5, 568, 285, 2, 4230, 553, 3, 2, 2, 2, 4231,
	4232, 5, 570, 286, 2, 4232, 555, 3, 2, 2, 2, 4233, 4234, 5, 572, 287, 2,
	4234, 557, 3, 2, 2, 2, 4235, 4236, 5, 574, 288, 2, 4236, 559, 3, 2, 2,
	2, 4237, 4239, 7, 13, 2, 2, 4238, 4240, 5, 576, 289, 2, 4239, 4238, 3,
	2, 2, 2, 4239, 4240, 3, 2, 2, 2, 4240, 4241, 3, 2, 2, 2, 4241, 4242, 7,
	109, 2, 2, 4242, 561, 3, 2, 2, 2, 4243, 4245, 7, 13, 2, 2, 4244, 4246,
	5, 578, 290, 2, 4245, 4244, 3, 2, 2, 2, 4245, 4246, 3, 2, 2, 2, 4246, 4247,
	3, 2, 2, 2, 4247, 4248, 7, 109, 2, 2, 4248, 563, 3, 2, 2, 2, 4249, 4251,
	7, 13, 2, 2, 4250, 4252, 5, 580, 291, 2, 4251, 4250, 3, 2, 2, 2, 4251,
	4252, 3, 2, 2, 2, 4252, 4253, 3, 2, 2, 2, 4253, 4254, 7, 109, 2, 2, 4254,
	565, 3, 2, 2, 2, 4255, 4257, 7, 13, 2, 2, 4256, 4258, 5, 582, 292, 2, 4257,
	4256, 3, 2, 2, 2, 4257, 4258, 3, 2, 2, 2, 4258, 4259, 3, 2, 2, 2, 4259,
	4260, 7, 109, 2, 2, 4260, 567, 3, 2, 2, 2, 4261, 4263, 7, 13, 2, 2, 4262,
	4264, 5, 584, 293, 2, 4263, 4262, 3, 2, 2, 2, 4263, 4264, 3, 2, 2, 2, 4264,
	4265, 3, 2, 2, 2, 4265, 4266, 7, 109, 2, 2, 4266, 569, 3, 2, 2, 2, 4267,
	4269, 7, 13, 2, 2, 4268, 4270, 5, 586, 294, 2, 4269, 4268, 3, 2, 2, 2,
	4269, 4270, 3, 2, 2, 2, 4270, 4271, 3, 2, 2, 2, 4271, 4272, 7, 109, 2,
	2, 4272, 571, 3, 2, 2, 2, 4273, 4275, 7, 13, 2, 2, 4274, 4276, 5, 588,
	295, 2, 4275, 4274, 3, 2, 2, 2, 4275, 4276, 3, 2, 2, 2, 4276, 4277, 3,
	2, 2, 2, 4277, 4278, 7, 109, 2, 2, 4278, 573, 3, 2, 2, 2, 4279, 4281, 7,
	13, 2, 2, 4280, 4282, 5, 590, 296, 2, 4281, 4280, 3, 2, 2, 2, 4281, 4282,
	3, 2, 2, 2, 4282, 4283, 3, 2, 2, 2, 4283, 4284, 7, 109, 2, 2, 4284, 575,
	3, 2, 2, 2, 4285, 4287, 5, 592, 297, 2, 4286, 4285, 3, 2, 2, 2, 4287, 4288,
	3, 2, 2, 2, 4288, 4286, 3, 2, 2, 2, 4288, 4289, 3, 2, 2, 2, 4289, 577,
	3, 2, 2, 2, 4290, 4292, 5, 594, 298, 2, 4291, 4290, 3, 2, 2, 2, 4292, 4293,
	3, 2, 2, 2, 4293, 4291, 3, 2, 2, 2, 4293, 4294, 3, 2, 2, 2, 4294, 579,
	3, 2, 2, 2, 4295, 4297, 5, 596, 299, 2, 4296, 4295, 3, 2, 2, 2, 4297, 4298,
	3, 2, 2, 2, 4298, 4296, 3, 2, 2, 2, 4298, 4299, 3, 2, 2, 2, 4299, 581,
	3, 2, 2, 2, 4300, 4302, 5, 598, 300, 2, 4301, 4300, 3, 2, 2, 2, 4302, 4303,
	3, 2, 2, 2, 4303, 4301, 3, 2, 2, 2, 4303, 4304, 3, 2, 2, 2, 4304, 583,
	3, 2, 2, 2, 4305, 4307, 5, 600, 301, 2, 4306, 4305, 3, 2, 2, 2, 4307, 4308,
	3, 2, 2, 2, 4308, 4306, 3, 2, 2, 2, 4308, 4309, 3, 2, 2, 2, 4309, 585,
	3, 2, 2, 2, 4310, 4312, 5, 602, 302, 2, 4311, 4310, 3, 2, 2, 2, 4312, 4313,
	3, 2, 2, 2, 4313, 4311, 3, 2, 2, 2, 4313, 4314, 3, 2, 2, 2, 4314, 587,
	3, 2, 2, 2, 4315, 4317, 5, 604, 303, 2, 4316, 4315, 3, 2, 2, 2, 4317, 4318,
	3, 2, 2, 2, 4318, 4316, 3, 2, 2, 2, 4318, 4319, 3, 2, 2, 2, 4319, 589,
	3, 2, 2, 2, 4320, 4322, 5, 606, 304, 2, 4321, 4320, 3, 2, 2, 2, 4322, 4323,
	3, 2, 2, 2, 4323, 4321, 3, 2, 2, 2, 4323, 4324, 3, 2, 2, 2, 4324, 591,
	3, 2, 2, 2, 4325, 4328, 5, 488, 245, 2, 4326, 4328, 5, 504, 253, 2, 4327,
	4325, 3, 2, 2, 2, 4327, 4326, 3, 2, 2, 2, 4328, 593, 3, 2, 2, 2, 4329,
	4332, 5, 490, 246, 2, 4330, 4332, 5, 506, 254, 2, 4331, 4329, 3, 2, 2,
	2, 4331, 4330, 3, 2, 2, 2, 4332, 595, 3, 2, 2, 2, 4333, 4336, 5, 492, 247,
	2, 4334, 4336, 5, 508, 255, 2, 4335, 4333, 3, 2, 2, 2, 4335, 4334, 3, 2,
	2, 2, 4336, 597, 3, 2, 2, 2, 4337, 4340, 5, 494, 248, 2, 4338, 4340, 5,
	510, 256, 2, 4339, 4337, 3, 2, 2, 2, 4339, 4338, 3, 2, 2, 2, 4340, 599,
	3, 2, 2, 2, 4341, 4344, 5, 496, 249, 2, 4342, 4344, 5, 504, 253, 2, 4343,
	4341, 3, 2, 2, 2, 4343, 4342, 3, 2, 2, 2, 4344, 601, 3, 2, 2, 2, 4345,
	4348, 5, 498, 250, 2, 4346, 4348, 5, 506, 254, 2, 4347, 4345, 3, 2, 2,
	2, 4347, 4346, 3, 2, 2, 2, 4348, 603, 3, 2, 2, 2, 4349, 4352, 5, 500, 251,
	2, 4350, 4352, 5, 508, 255, 2, 4351, 4349, 3, 2, 2, 2, 4351, 4350, 3, 2,
	2, 2, 4352, 605, 3, 2, 2, 2, 4353, 4356, 5, 502, 252, 2, 4354, 4356, 5,
	510, 256, 2, 4355, 4353, 3, 2, 2, 2, 4355, 4354, 3, 2, 2, 2, 4356, 607,
	3, 2, 2, 2, 4357, 4358, 5, 624, 313, 2, 4358, 4359, 5, 626, 314, 2, 4359,
	4360, 7, 61, 2, 2, 4360, 609, 3, 2, 2, 2, 4361, 4362, 5, 624, 313, 2, 4362,
	4363, 5, 628, 315, 2, 4363, 4364, 7, 61, 2, 2, 4364, 611, 3, 2, 2, 2, 4365,
	4366, 5, 624, 313, 2, 4366, 4367, 5, 630, 316, 2, 4367, 4368, 7, 61, 2,
	2, 4368, 613, 3, 2, 2, 2, 4369, 4370, 5, 624, 313, 2, 4370, 4371, 5, 632,
	317, 2, 4371, 4372, 7, 61, 2, 2, 4372, 615, 3, 2, 2, 2, 4373, 4374, 5,
	624, 313, 2, 4374, 4375, 5, 634, 318, 2, 4375, 4376, 7, 61, 2, 2, 4376,
	617, 3, 2, 2, 2, 4377, 4378, 5, 624, 313, 2, 4378, 4379, 5, 636, 319, 2,
	4379, 4380, 7, 61, 2, 2, 4380, 619, 3, 2, 2, 2, 4381, 4382, 5, 624, 313,
	2, 4382, 4383, 5, 638, 320, 2, 4383, 4384, 7, 61, 2, 2, 4384, 621, 3, 2,
	2, 2, 4385, 4386, 5, 624, 313, 2, 4386, 4387, 5, 640, 321, 2, 4387, 4388,
	7, 61, 2, 2, 4388, 623, 3, 2, 2, 2, 4389, 4390, 9, 10, 2, 2, 4390, 625,
	3, 2, 2, 2, 4391, 4392, 8, 314, 1, 2, 4392, 4393, 5, 642, 322, 2, 4393,
	4399, 3, 2, 2, 2, 4394, 4395, 12, 3, 2, 2, 4395, 4396, 7, 10, 2, 2, 4396,
	4398, 5, 642, 322, 2, 4397, 4394, 3, 2, 2, 2, 4398, 4401, 3, 2, 2, 2, 4399,
	4397, 3, 2, 2, 2, 4399, 4400, 3, 2, 2, 2, 4400, 627, 3, 2, 2, 2, 4401,
	4399, 3, 2, 2, 2, 4402, 4403, 8, 315, 1, 2, 4403, 4404, 5, 644, 323, 2,
	4404, 4410, 3, 2, 2, 2, 4405, 4406, 12, 3, 2, 2, 4406, 4407, 7, 10, 2,
	2, 4407, 4409, 5, 644, 323, 2, 4408, 4405, 3, 2, 2, 2, 4409, 4412, 3, 2,
	2, 2, 4410, 4408, 3, 2, 2, 2, 4410, 4411, 3, 2, 2, 2, 4411, 629, 3, 2,
	2, 2, 4412, 4410, 3, 2, 2, 2, 4413, 4414, 8, 316, 1, 2, 4414, 4415, 5,
	646, 324, 2, 4415, 4421, 3, 2, 2, 2, 4416, 4417, 12, 3, 2, 2, 4417, 4418,
	7, 10, 2, 2, 4418, 4420, 5, 646, 324, 2, 4419, 4416, 3, 2, 2, 2, 4420,
	4423, 3, 2, 2, 2, 4421, 4419, 3, 2, 2, 2, 4421, 4422, 3, 2, 2, 2, 4422,
	631, 3, 2, 2, 2, 4423, 4421, 3, 2, 2, 2, 4424, 4425, 8, 317, 1, 2, 4425,
	4426, 5, 648, 325, 2, 4426, 4432, 3, 2, 2, 2, 4427, 4428, 12, 3, 2, 2,
	4428, 4429, 7, 10, 2, 2, 4429, 4431, 5, 648, 325, 2, 4430, 4427, 3, 2,
	2, 2, 4431, 4434, 3, 2, 2, 2, 4432, 4430, 3, 2, 2, 2, 4432, 4433, 3, 2,
	2, 2, 4433, 633, 3, 2, 2, 2, 4434, 4432, 3, 2, 2, 2, 4435, 4436, 8, 318,
	1, 2, 4436, 4437, 5, 650, 326, 2, 4437, 4443, 3, 2, 2, 2, 4438, 4439, 12,
	3, 2, 2, 4439, 4440, 7, 10, 2, 2, 4440, 4442, 5, 650, 326, 2, 4441, 4438,
	3, 2, 2, 2, 4442, 4445, 3, 2, 2, 2, 4443, 4441, 3, 2, 2, 2, 4443, 4444,
	3, 2, 2, 2, 4444, 635, 3, 2, 2, 2, 4445, 4443, 3, 2, 2, 2, 4446, 4447,
	8, 319, 1, 2, 4447, 4448, 5, 652, 327, 2, 4448, 4454, 3, 2, 2, 2, 4449,
	4450, 12, 3, 2, 2, 4450, 4451, 7, 10, 2, 2, 4451, 4453, 5, 652, 327, 2,
	4452, 4449, 3, 2, 2, 2, 4453, 4456, 3, 2, 2, 2, 4454, 4452, 3, 2, 2, 2,
	4454, 4455, 3, 2, 2, 2, 4455, 637, 3, 2, 2, 2, 4456, 4454, 3, 2, 2, 2,
	4457, 4458, 8, 320, 1, 2, 4458, 4459, 5, 654, 328, 2, 4459, 4465, 3, 2,
	2, 2, 4460, 4461, 12, 3, 2, 2, 4461, 4462, 7, 10, 2, 2, 4462, 4464, 5,
	654, 328, 2, 4463, 4460, 3, 2, 2, 2, 4464, 4467, 3, 2, 2, 2, 4465, 4463,
	3, 2, 2, 2, 4465, 4466, 3, 2, 2, 2, 4466, 639, 3, 2, 2, 2, 4467, 4465,
	3, 2, 2, 2, 4468, 4469, 8, 321, 1, 2, 4469, 4470, 5, 656, 329, 2, 4470,
	4476, 3, 2, 2, 2, 4471, 4472, 12, 3, 2, 2, 4472, 4473, 7, 10, 2, 2, 4473,
	4475, 5, 656, 329, 2, 4474, 4471, 3, 2, 2, 2, 4475, 4478, 3, 2, 2, 2, 4476,
	4474, 3, 2, 2, 2, 4476, 4477, 3, 2, 2, 2, 4477, 641, 3, 2, 2, 2, 4478,
	4476, 3, 2, 2, 2, 4479, 4481, 5, 20, 11, 2, 4480, 4482, 5, 130, 66, 2,
	4481, 4480, 3, 2, 2, 2, 4481, 4482, 3, 2, 2, 2, 4482, 4487, 3, 2, 2, 2,
	4483, 4484, 5, 698, 350, 2, 4484, 4485, 5, 130, 66, 2, 4485, 4487, 3, 2,
	2, 2, 4486, 4479, 3, 2, 2, 2, 4486, 4483, 3, 2, 2, 2, 4487, 643, 3, 2,
	2, 2, 4488, 4490, 5, 20, 11, 2, 4489, 4491, 5, 132, 67, 2, 4490, 4489,
	3, 2, 2, 2, 4490, 4491, 3, 2, 2, 2, 4491, 4496, 3, 2, 2, 2, 4492, 4493,
	5, 698, 350, 2, 4493, 4494, 5, 132, 67, 2, 4494, 4496, 3, 2, 2, 2, 4495,
	4488, 3, 2, 2, 2, 4495, 4492, 3, 2, 2, 2, 4496, 645, 3, 2, 2, 2, 4497,
	4499, 5, 22, 12, 2, 4498, 4500, 5, 134, 68, 2, 4499, 4498, 3, 2, 2, 2,
	4499, 4500, 3, 2, 2, 2, 4500, 4505, 3, 2, 2, 2, 4501, 4502, 5, 700, 351,
	2, 4502, 4503, 5, 134, 68, 2, 4503, 4505, 3, 2, 2, 2, 4504, 4497, 3, 2,
	2, 2, 4504, 4501, 3, 2, 2, 2, 4505, 647, 3, 2, 2, 2, 4506, 4508, 5, 22,
	12, 2, 4507, 4509, 5, 136, 69, 2, 4508, 4507, 3, 2, 2, 2, 4508, 4509, 3,
	2, 2, 2, 4509, 4514, 3, 2, 2, 2, 4510, 4511, 5, 700, 351, 2, 4511, 4512,
	5, 136, 69, 2, 4512, 4514, 3, 2, 2, 2, 4513, 4506, 3, 2, 2, 2, 4513, 4510,
	3, 2, 2, 2, 4514, 649, 3, 2, 2, 2, 4515, 4517, 5, 24, 13, 2, 4516, 4518,
	5, 138, 70, 2, 4517, 4516, 3, 2, 2, 2, 4517, 4518, 3, 2, 2, 2, 4518, 4523,
	3, 2, 2, 2, 4519, 4520, 5, 702, 352, 2, 4520, 4521, 5, 138, 70, 2, 4521,
	4523, 3, 2, 2, 2, 4522, 4515, 3, 2, 2, 2, 4522, 4519, 3, 2, 2, 2, 4523,
	651, 3, 2, 2, 2, 4524, 4526, 5, 24, 13, 2, 4525, 4527, 5, 140, 71, 2, 4526,
	4525, 3, 2, 2, 2, 4526, 4527, 3, 2, 2, 2, 4527, 4532, 3, 2, 2, 2, 4528,
	4529, 5, 702, 352, 2, 4529, 4530, 5, 140, 71, 2, 4530, 4532, 3, 2, 2, 2,
	4531, 4524, 3, 2, 2, 2, 4531, 4528, 3, 2, 2, 2, 4532, 653, 3, 2, 2, 2,
	4533, 4535, 5, 26, 14, 2, 4534, 4536, 5, 142, 72, 2, 4535, 4534, 3, 2,
	2, 2, 4535, 4536, 3, 2, 2, 2, 4536, 4541, 3, 2, 2, 2, 4537, 4538, 5, 704,
	353, 2, 4538, 4539, 5, 142, 72, 2, 4539, 4541, 3, 2, 2, 2, 4540, 4533,
	3, 2, 2, 2, 4540, 4537, 3, 2, 2, 2, 4541, 655, 3, 2, 2, 2, 4542, 4544,
	5, 26, 14, 2, 4543, 4545, 5, 144, 73, 2, 4544, 4543, 3, 2, 2, 2, 4544,
	4545, 3, 2, 2, 2, 4545, 4550, 3, 2, 2, 2, 4546, 4547, 5, 704, 353, 2, 4547,
	4548, 5, 144, 73, 2, 4548, 4550, 3, 2, 2, 2, 4549, 4542, 3, 2, 2, 2, 4549,
	4546, 3, 2, 2, 2, 4550, 657, 3, 2, 2, 2, 4551, 4552, 7, 64, 2, 2, 4552,
	4553, 5, 668, 335, 2, 4553, 4554, 7, 61, 2, 2, 4554, 659, 3, 2, 2, 2, 4555,
	4556, 7, 64, 2, 2, 4556, 4557, 5, 672, 337, 2, 4557, 4558, 7, 61, 2, 2,
	4558, 661, 3, 2, 2, 2, 4559, 4560, 7, 64, 2, 2, 4560, 4561, 5, 676, 339,
	2, 4561, 4562, 7, 61, 2, 2, 4562, 663, 3, 2, 2, 2, 4563, 4564, 7, 64, 2,
	2, 4564, 4565, 5, 680, 341, 2, 4565, 4566, 7, 61, 2, 2, 4566, 665, 3, 2,
	2, 2, 4567, 4568, 8, 334, 1, 2, 4568, 4569, 5, 682, 342, 2, 4569, 4575,
	3, 2, 2, 2, 4570, 4571, 12, 3, 2, 2, 4571, 4572, 7, 10, 2, 2, 4572, 4574,
	5, 682, 342, 2, 4573, 4570, 3, 2, 2, 2, 4574, 4577, 3, 2, 2, 2, 4575, 4573,
	3, 2, 2, 2, 4575, 4576, 3, 2, 2, 2, 4576, 667, 3, 2, 2, 2, 4577, 4575,
	3, 2, 2, 2, 4578, 4579, 8, 335, 1, 2, 4579, 4580, 5, 684, 343, 2, 4580,
	4586, 3, 2, 2, 2, 4581, 4582, 12, 3, 2, 2, 4582, 4583, 7, 10, 2, 2, 4583,
	4585, 5, 684, 343, 2, 4584, 4581, 3, 2, 2, 2, 4585, 4588, 3, 2, 2, 2, 4586,
	4584, 3, 2, 2, 2, 4586, 4587, 3, 2, 2, 2, 4587, 669, 3, 2, 2, 2, 4588,
	4586, 3, 2, 2, 2, 4589, 4590, 8, 336, 1, 2, 4590, 4591, 5, 686, 344, 2,
	4591, 4597, 3, 2, 2, 2, 4592, 4593, 12, 3, 2, 2, 4593, 4594, 7, 10, 2,
	2, 4594, 4596, 5, 686, 344, 2, 4595, 4592, 3, 2, 2, 2, 4596, 4599, 3, 2,
	2, 2, 4597, 4595, 3, 2, 2, 2, 4597, 4598, 3, 2, 2, 2, 4598, 671, 3, 2,
	2, 2, 4599, 4597, 3, 2, 2, 2, 4600, 4601, 8, 337, 1, 2, 4601, 4602, 5,
	688, 345, 2, 4602, 4608, 3, 2, 2, 2, 4603, 4604, 12, 3, 2, 2, 4604, 4605,
	7, 10, 2, 2, 4605, 4607, 5, 688, 345, 2, 4606, 4603, 3, 2, 2, 2, 4607,
	4610, 3, 2, 2, 2, 4608, 4606, 3, 2, 2, 2, 4608, 4609, 3, 2, 2, 2, 4609,
	673, 3, 2, 2, 2, 4610, 4608, 3, 2, 2, 2, 4611, 4612, 8, 338, 1, 2, 4612,
	4613, 5, 690, 346, 2, 4613, 4619, 3, 2, 2, 2, 4614, 4615, 12, 3, 2, 2,
	4615, 4616, 7, 10, 2, 2, 4616, 4618, 5, 690, 346, 2, 4617, 4614, 3, 2,
	2, 2, 4618, 4621, 3, 2, 2, 2, 4619, 4617, 3, 2, 2, 2, 4619, 4620, 3, 2,
	2, 2, 4620, 675, 3, 2, 2, 2, 4621, 4619, 3, 2, 2, 2, 4622, 4623, 8, 339,
	1, 2, 4623, 4624, 5, 692, 347, 2, 4624, 4630, 3, 2, 2, 2, 4625, 4626, 12,
	3, 2, 2, 4626, 4627, 7, 10, 2, 2, 4627, 4629, 5, 692, 347, 2, 4628, 4625,
	3, 2, 2, 2, 4629, 4632, 3, 2, 2, 2, 4630, 4628, 3, 2, 2, 2, 4630, 4631,
	3, 2, 2, 2, 4631, 677, 3, 2, 2, 2, 4632, 4630, 3, 2, 2, 2, 4633, 4634,
	8, 340, 1, 2, 4634, 4635, 5, 694, 348, 2, 4635, 4641, 3, 2, 2, 2, 4636,
	4637, 12, 3, 2, 2, 4637, 4638, 7, 10, 2, 2, 4638, 4640, 5, 694, 348, 2,
	4639, 4636, 3, 2, 2, 2, 4640, 4643, 3, 2, 2, 2, 4641, 4639, 3, 2, 2, 2,
	4641, 4642, 3, 2, 2, 2, 4642, 679, 3, 2, 2, 2, 4643, 4641, 3, 2, 2, 2,
	4644, 4645, 8, 341, 1, 2, 4645, 4646, 5, 696, 349, 2, 4646, 4652, 3, 2,
	2, 2, 4647, 4648, 12, 3, 2, 2, 4648, 4649, 7, 10, 2, 2, 4649, 4651, 5,
	696, 349, 2, 4650, 4647, 3, 2, 2, 2, 4651, 4654, 3, 2, 2, 2, 4652, 4650,
	3, 2, 2, 2, 4652, 4653, 3, 2, 2, 2, 4653, 681, 3, 2, 2, 2, 4654, 4652,
	3, 2, 2, 2, 4655, 4657, 5, 20, 11, 2, 4656, 4658, 5, 130, 66, 2, 4657,
	4656, 3, 2, 2, 2, 4657, 4658, 3, 2, 2, 2, 4658, 4663, 3, 2, 2, 2, 4659,
	4660, 5, 698, 350, 2, 4660, 4661, 5, 130, 66, 2, 4661, 4663, 3, 2, 2, 2,
	4662, 4655, 3, 2, 2, 2, 4662, 4659, 3, 2, 2, 2, 4663, 683, 3, 2, 2, 2,
	4664, 4666, 5, 20, 11, 2, 4665, 4667, 5, 132, 67, 2, 4666, 4665, 3, 2,
	2, 2, 4666, 4667, 3, 2, 2, 2, 4667, 4672, 3, 2, 2, 2, 4668, 4669, 5, 698,
	350, 2, 4669, 4670, 5, 132, 67, 2, 4670, 4672, 3, 2, 2, 2, 4671, 4664,
	3, 2, 2, 2, 4671, 4668, 3, 2, 2, 2, 4672, 685, 3, 2, 2, 2, 4673, 4675,
	5, 22, 12, 2, 4674, 4676, 5, 134, 68, 2, 4675, 4674, 3, 2, 2, 2, 4675,
	4676, 3, 2, 2, 2, 4676, 4681, 3, 2, 2, 2, 4677, 4678, 5, 700, 351, 2, 4678,
	4679, 5, 134, 68, 2, 4679, 4681, 3, 2, 2, 2, 4680, 4673, 3, 2, 2, 2, 4680,
	4677, 3, 2, 2, 2, 4681, 687, 3, 2, 2, 2, 4682, 4684, 5, 22, 12, 2, 4683,
	4685, 5, 136, 69, 2, 4684, 4683, 3, 2, 2, 2, 4684, 4685, 3, 2, 2, 2, 4685,
	4690, 3, 2, 2, 2, 4686, 4687, 5, 700, 351, 2, 4687, 4688, 5, 136, 69, 2,
	4688, 4690, 3, 2, 2, 2, 4689, 4682, 3, 2, 2, 2, 4689, 4686, 3, 2, 2, 2,
	4690, 689, 3, 2, 2, 2, 4691, 4693, 5, 24, 13, 2, 4692, 4694, 5, 138, 70,
	2, 4693, 4692, 3, 2, 2, 2, 4693, 4694, 3, 2, 2, 2, 4694, 4699, 3, 2, 2,
	2, 4695, 4696, 5, 702, 352, 2, 4696, 4697, 5, 138, 70, 2, 4697, 4699, 3,
	2, 2, 2, 4698, 4691, 3, 2, 2, 2, 4698, 4695, 3, 2, 2, 2, 4699, 691, 3,
	2, 2, 2, 4700, 4702, 5, 24, 13, 2, 4701, 4703, 5, 140, 71, 2, 4702, 4701,
	3, 2, 2, 2, 4702, 4703, 3, 2, 2, 2, 4703, 4708, 3, 2, 2, 2, 4704, 4705,
	5, 702, 352, 2, 4705, 4706, 5, 140, 71, 2, 4706, 4708, 3, 2, 2, 2, 4707,
	4700, 3, 2, 2, 2, 4707, 4704, 3, 2, 2, 2, 4708, 693, 3, 2, 2, 2, 4709,
	4711, 5, 26, 14, 2, 4710, 4712, 5, 142, 72, 2, 4711, 4710, 3, 2, 2, 2,
	4711, 4712, 3, 2, 2, 2, 4712, 4717, 3, 2, 2, 2, 4713, 4714, 5, 704, 353,
	2, 4714, 4715, 5, 142, 72, 2, 4715, 4717, 3, 2, 2, 2, 4716, 4709, 3, 2,
	2, 2, 4716, 4713, 3, 2, 2, 2, 4717, 695, 3, 2, 2, 2, 4718, 4720, 5, 26,
	14, 2, 4719, 4721, 5, 144, 73, 2, 4720, 4719, 3, 2, 2, 2, 4720, 4721, 3,
	2, 2, 2, 4721, 4726, 3, 2, 2, 2, 4722, 4723, 5, 704, 353, 2, 4723, 4724,
	5, 144, 73, 2, 4724, 4726, 3, 2, 2, 2, 4725, 4718, 3, 2, 2, 2, 4725, 4722,
	3, 2, 2, 2, 4726, 697, 3, 2, 2, 2, 4727, 4730, 5, 706, 354, 2, 4728, 4730,
	5, 714, 358, 2, 4729, 4727, 3, 2, 2, 2, 4729, 4728, 3, 2, 2, 2, 4730, 699,
	3, 2, 2, 2, 4731, 4734, 5, 708, 355, 2, 4732, 4734, 5, 716, 359, 2, 4733,
	4731, 3, 2, 2, 2, 4733, 4732, 3, 2, 2, 2, 4734, 701, 3, 2, 2, 2, 4735,
	4738, 5, 710, 356, 2, 4736, 4738, 5, 718, 360, 2, 4737, 4735, 3, 2, 2,
	2, 4737, 4736, 3, 2, 2, 2, 4738, 703, 3, 2, 2, 2, 4739, 4742, 5, 712, 357,
	2, 4740, 4742, 5, 720, 361, 2, 4741, 4739, 3, 2, 2, 2, 4741, 4740, 3, 2,
	2, 2, 4742, 705, 3, 2, 2, 2, 4743, 4744, 7, 13, 2, 2, 4744, 4762, 7, 109,
	2, 2, 4745, 4746, 7, 13, 2, 2, 4746, 4747, 5, 722, 362, 2, 4747, 4748,
	7, 109, 2, 2, 4748, 4762, 3, 2, 2, 2, 4749, 4750, 7, 13, 2, 2, 4750, 4751,
	5, 730, 366, 2, 4751, 4752, 7, 109, 2, 2, 4752, 4762, 3, 2, 2, 2, 4753,
	4754, 7, 13, 2, 2, 4754, 4755, 5, 730, 366, 2, 4755, 4757, 7, 10, 2, 2,
	4756, 4758, 5, 722, 362, 2, 4757, 4756, 3, 2, 2, 2, 4757, 4758, 3, 2, 2,
	2, 4758, 4759, 3, 2, 2, 2, 4759, 4760, 7, 109, 2, 2, 4760, 4762, 3, 2,
	2, 2, 4761, 4743, 3, 2, 2, 2, 4761, 4745, 3, 2, 2, 2, 4761, 4749, 3, 2,
	2, 2, 4761, 4753, 3, 2, 2, 2, 4762, 707, 3, 2, 2, 2, 4763, 4764, 7, 13,
	2, 2, 4764, 4782, 7, 109, 2, 2, 4765, 4766, 7, 13, 2, 2, 4766, 4767, 5,
	724, 363, 2, 4767, 4768, 7, 109, 2, 2, 4768, 4782, 3, 2, 2, 2, 4769, 4770,
	7, 13, 2, 2, 4770, 4771, 5, 732, 367, 2, 4771, 4772, 7, 109, 2, 2, 4772,
	4782, 3, 2, 2, 2, 4773, 4774, 7, 13, 2, 2, 4774, 4775, 5, 732, 367, 2,
	4775, 4777, 7, 10, 2, 2, 4776, 4778, 5, 724, 363, 2, 4777, 4776, 3, 2,
	2, 2, 4777, 4778, 3, 2, 2, 2, 4778, 4779, 3, 2, 2, 2, 4779, 4780, 7, 109,
	2, 2, 4780, 4782, 3, 2, 2, 2, 4781, 4763, 3, 2, 2, 2, 4781, 4765, 3, 2,
	2, 2, 4781, 4769, 3, 2, 2, 2, 4781, 4773, 3, 2, 2, 2, 4782, 709, 3, 2,
	2, 2, 4783, 4784, 7, 13, 2, 2, 4784, 4802, 7, 109, 2, 2, 4785, 4786, 7,
	13, 2, 2, 4786, 4787, 5, 726, 364, 2, 4787, 4788, 7, 109, 2, 2, 4788, 4802,
	3, 2, 2, 2, 4789, 4790, 7, 13, 2, 2, 4790, 4791, 5, 734, 368, 2, 4791,
	4792, 7, 109, 2, 2, 4792, 4802, 3, 2, 2, 2, 4793, 4794, 7, 13, 2, 2, 4794,
	4795, 5, 734, 368, 2, 4795, 4797, 7, 10, 2, 2, 4796, 4798, 5, 726, 364,
	2, 4797, 4796, 3, 2, 2, 2, 4797, 4798, 3, 2, 2, 2, 4798, 4799, 3, 2, 2,
	2, 4799, 4800, 7, 109, 2, 2, 4800, 4802, 3, 2, 2, 2, 4801, 4783, 3, 2,
	2, 2, 4801, 4785, 3, 2, 2, 2, 4801, 4789, 3, 2, 2, 2, 4801, 4793, 3, 2,
	2, 2, 4802, 711, 3, 2, 2, 2, 4803, 4804, 7, 13, 2, 2, 4804, 4822, 7, 109,
	2, 2, 4805, 4806, 7, 13, 2, 2, 4806, 4807, 5, 728, 365, 2, 4807, 4808,
	7, 109, 2, 2, 4808, 4822, 3, 2, 2, 2, 4809, 4810, 7, 13, 2, 2, 4810, 4811,
	5, 736, 369, 2, 4811, 4812, 7, 109, 2, 2, 4812, 4822, 3, 2, 2, 2, 4813,
	4814, 7, 13, 2, 2, 4814, 4815, 5, 736, 369, 2, 4815, 4817, 7, 10, 2, 2,
	4816, 4818, 5, 728, 365, 2, 4817, 4816, 3, 2, 2, 2, 4817, 4818, 3, 2, 2,
	2, 4818, 4819, 3, 2, 2, 2, 4819, 4820, 7, 109, 2, 2, 4820, 4822, 3, 2,
	2, 2, 4821, 4803, 3, 2, 2, 2, 4821, 4805, 3, 2, 2, 2, 4821, 4809, 3, 2,
	2, 2, 4821, 4813, 3, 2, 2, 2, 4822, 713, 3, 2, 2, 2, 4823, 4825, 7, 11,
	2, 2, 4824, 4826, 5, 70, 36, 2, 4825, 4824, 3, 2, 2, 2, 4825, 4826, 3,
	2, 2, 2, 4826, 4828, 3, 2, 2, 2, 4827, 4829, 5, 778, 390, 2, 4828, 4827,
	3, 2, 2, 2, 4828, 4829, 3, 2, 2, 2, 4829, 4830, 3, 2, 2, 2, 4830, 4847,
	7, 12, 2, 2, 4831, 4832, 7, 11, 2, 2, 4832, 4833, 5, 738, 370, 2, 4833,
	4834, 7, 12, 2, 2, 4834, 4847, 3, 2, 2, 2, 4835, 4836, 7, 11, 2, 2, 4836,
	4837, 5, 738, 370, 2, 4837, 4839, 7, 10, 2, 2, 4838, 4840, 5, 70, 36, 2,
	4839, 4838, 3, 2, 2, 2, 4839, 4840, 3, 2, 2, 2, 4840, 4842, 3, 2, 2, 2,
	4841, 4843, 5, 778, 390, 2, 4842, 4841, 3, 2, 2, 2, 4842, 4843, 3, 2, 2,
	2, 4843, 4844, 3, 2, 2, 2, 4844, 4845, 7, 12, 2, 2, 4845, 4847, 3, 2, 2,
	2, 4846, 4823, 3, 2, 2, 2, 4846, 4831, 3, 2, 2, 2, 4846, 4835, 3, 2, 2,
	2, 4847, 715, 3, 2, 2, 2, 4848, 4850, 7, 11, 2, 2, 4849, 4851, 5, 70, 36,
	2, 4850, 4849, 3, 2, 2, 2, 4850, 4851, 3, 2, 2, 2, 4851, 4853, 3, 2, 2,
	2, 4852, 4854, 5, 780, 391, 2, 4853, 4852, 3, 2, 2, 2, 4853, 4854, 3, 2,
	2, 2, 4854, 4855, 3, 2, 2, 2, 4855, 4872, 7, 12, 2, 2, 4856, 4857, 7, 11,
	2, 2, 4857, 4858, 5, 740, 371, 2, 4858, 4859, 7, 12, 2, 2, 4859, 4872,
	3, 2, 2, 2, 4860, 4861, 7, 11, 2, 2, 4861, 4862, 5, 740, 371, 2, 4862,
	4864, 7, 10, 2, 2, 4863, 4865, 5, 70, 36, 2, 4864, 4863, 3, 2, 2, 2, 4864,
	4865, 3, 2, 2, 2, 4865, 4867, 3, 2, 2, 2, 4866, 4868, 5, 780, 391, 2, 4867,
	4866, 3, 2, 2, 2, 4867, 4868, 3, 2, 2, 2, 4868, 4869, 3, 2, 2, 2, 4869,
	4870, 7, 12, 2, 2, 4870, 4872, 3, 2, 2, 2, 4871, 4848, 3, 2, 2, 2, 4871,
	4856, 3, 2, 2, 2, 4871, 4860, 3, 2, 2, 2, 4872, 717, 3, 2, 2, 2, 4873,
	4875, 7, 11, 2, 2, 4874, 4876, 5, 70, 36, 2, 4875, 4874, 3, 2, 2, 2, 4875,
	4876, 3, 2, 2, 2, 4876, 4878, 3, 2, 2, 2, 4877, 4879, 5, 782, 392, 2, 4878,
	4877, 3, 2, 2, 2, 4878, 4879, 3, 2, 2, 2, 4879, 4880, 3, 2, 2, 2, 4880,
	4897, 7, 12, 2, 2, 4881, 4882, 7, 11, 2, 2, 4882, 4883, 5, 742, 372, 2,
	4883, 4884, 7, 12, 2, 2, 4884, 4897, 3, 2, 2, 2, 4885, 4886, 7, 11, 2,
	2, 4886, 4887, 5, 742, 372, 2, 4887, 4889, 7, 10, 2, 2, 4888, 4890, 5,
	70, 36, 2, 4889, 4888, 3, 2, 2, 2, 4889, 4890, 3, 2, 2, 2, 4890, 4892,
	3, 2, 2, 2, 4891, 4893, 5, 782, 392, 2, 4892, 4891, 3, 2, 2, 2, 4892, 4893,
	3, 2, 2, 2, 4893, 4894, 3, 2, 2, 2, 4894, 4895, 7, 12, 2, 2, 4895, 4897,
	3, 2, 2, 2, 4896, 4873, 3, 2, 2, 2, 4896, 4881, 3, 2, 2, 2, 4896, 4885,
	3, 2, 2, 2, 4897, 719, 3, 2, 2, 2, 4898, 4900, 7, 11, 2, 2, 4899, 4901,
	5, 70, 36, 2, 4900, 4899, 3, 2, 2, 2, 4900, 4901, 3, 2, 2, 2, 4901, 4903,
	3, 2, 2, 2, 4902, 4904, 5, 784, 393, 2, 4903, 4902, 3, 2, 2, 2, 4903, 4904,
	3, 2, 2, 2, 4904, 4905, 3, 2, 2, 2, 4905, 4922, 7, 12, 2, 2, 4906, 4907,
	7, 11, 2, 2, 4907, 4908, 5, 744, 373, 2, 4908, 4909, 7, 12, 2, 2, 4909,
	4922, 3, 2, 2, 2, 4910, 4911, 7, 11, 2, 2, 4911, 4912, 5, 744, 373, 2,
	4912, 4914, 7, 10, 2, 2, 4913, 4915, 5, 70, 36, 2, 4914, 4913, 3, 2, 2,
	2, 4914, 4915, 3, 2, 2, 2, 4915, 4917, 3, 2, 2, 2, 4916, 4918, 5, 784,
	393, 2, 4917, 4916, 3, 2, 2, 2, 4917, 4918, 3, 2, 2, 2, 4918, 4919, 3,
	2, 2, 2, 4919, 4920, 7, 12, 2, 2, 4920, 4922, 3, 2, 2, 2, 4921, 4898, 3,
	2, 2, 2, 4921, 4906, 3, 2, 2, 2, 4921, 4910, 3, 2, 2, 2, 4922, 721, 3,
	2, 2, 2, 4923, 4924, 7, 9, 2, 2, 4924, 4925, 5, 20, 11, 2, 4925, 723, 3,
	2, 2, 2, 4926, 4927, 7, 9, 2, 2, 4927, 4928, 5, 22, 12, 2, 4928, 725, 3,
	2, 2, 2, 4929, 4930, 7, 9, 2, 2, 4930, 4931, 5, 24, 13, 2, 4931, 727, 3,
	2, 2, 2, 4932, 4933, 7, 9, 2, 2, 4933, 4934, 5, 26, 14, 2, 4934, 729, 3,
	2, 2, 2, 4935, 4936, 8, 366, 1, 2, 4936, 4937, 5, 754, 378, 2, 4937, 4943,
	3, 2, 2, 2, 4938, 4939, 12, 3, 2, 2, 4939, 4940, 7, 10, 2, 2, 4940, 4942,
	5, 754, 378, 2, 4941, 4938, 3, 2, 2, 2, 4942, 4945, 3, 2, 2, 2, 4943, 4941,
	3, 2, 2, 2, 4943, 4944, 3, 2, 2, 2, 4944, 731, 3, 2, 2, 2, 4945, 4943,
	3, 2, 2, 2, 4946, 4947, 8, 367, 1, 2, 4947, 4948, 5, 756, 379, 2, 4948,
	4954, 3, 2, 2, 2, 4949, 4950, 12, 3, 2, 2, 4950, 4951, 7, 10, 2, 2, 4951,
	4953, 5, 756, 379, 2, 4952, 4949, 3, 2, 2, 2, 4953, 4956, 3, 2, 2, 2, 4954,
	4952, 3, 2, 2, 2, 4954, 4955, 3, 2, 2, 2, 4955, 733, 3, 2, 2, 2, 4956,
	4954, 3, 2, 2, 2, 4957, 4958, 8, 368, 1, 2, 4958, 4959, 5, 758, 380, 2,
	4959, 4965, 3, 2, 2, 2, 4960, 4961, 12, 3, 2, 2, 4961, 4962, 7, 10, 2,
	2, 4962, 4964, 5, 758, 380, 2, 4963, 4960, 3, 2, 2, 2, 4964, 4967, 3, 2,
	2, 2, 4965, 4963, 3, 2, 2, 2, 4965, 4966, 3, 2, 2, 2, 4966, 735, 3, 2,
	2, 2, 4967, 4965, 3, 2, 2, 2, 4968, 4969, 8, 369, 1, 2, 4969, 4970, 5,
	760, 381, 2, 4970, 4976, 3, 2, 2, 2, 4971, 4972, 12, 3, 2, 2, 4972, 4973,
	7, 10, 2, 2, 4973, 4975, 5, 760, 381, 2, 4974, 4971, 3, 2, 2, 2, 4975,
	4978, 3, 2, 2, 2, 4976, 4974, 3, 2, 2, 2, 4976, 4977, 3, 2, 2, 2, 4977,
	737, 3, 2, 2, 2, 4978, 4976, 3, 2, 2, 2, 4979, 4980, 8, 370, 1, 2, 4980,
	4981, 5, 746, 374, 2, 4981, 4987, 3, 2, 2, 2, 4982, 4983, 12, 3, 2, 2,
	4983, 4984, 7, 10, 2, 2, 4984, 4986, 5, 746, 374, 2, 4985, 4982, 3, 2,
	2, 2, 4986, 4989, 3, 2, 2, 2, 4987, 4985, 3, 2, 2, 2, 4987, 4988, 3, 2,
	2, 2, 4988, 739, 3, 2, 2, 2, 4989, 4987, 3, 2, 2, 2, 4990, 4991, 8, 371,
	1, 2, 4991, 4992, 5, 748, 375, 2, 4992, 4998, 3, 2, 2, 2, 4993, 4994, 12,
	3, 2, 2, 4994, 4995, 7, 10, 2, 2, 4995, 4997, 5, 748, 375, 2, 4996, 4993,
	3, 2, 2, 2, 4997, 5000, 3, 2, 2, 2, 4998, 4996, 3, 2, 2, 2, 4998, 4999,
	3, 2, 2, 2, 4999, 741, 3, 2, 2, 2, 5000, 4998, 3, 2, 2, 2, 5001, 5002,
	8, 372, 1, 2, 5002, 5003, 5, 750, 376, 2, 5003, 5009, 3, 2, 2, 2, 5004,
	5005, 12, 3, 2, 2, 5005, 5006, 7, 10, 2, 2, 5006, 5008, 5, 750, 376, 2,
	5007, 5004, 3, 2, 2, 2, 5008, 5011, 3, 2, 2, 2, 5009, 5007, 3, 2, 2, 2,
	5009, 5010, 3, 2, 2, 2, 5010, 743, 3, 2, 2, 2, 5011, 5009, 3, 2, 2, 2,
	5012, 5013, 8, 373, 1, 2, 5013, 5014, 5, 752, 377, 2, 5014, 5020, 3, 2,
	2, 2, 5015, 5016, 12, 3, 2, 2, 5016, 5017, 7, 10, 2, 2, 5017, 5019, 5,
	752, 377, 2, 5018, 5015, 3, 2, 2, 2, 5019, 5022, 3, 2, 2, 2, 5020, 5018,
	3, 2, 2, 2, 5020, 5021, 3, 2, 2, 2, 5021, 745, 3, 2, 2, 2, 5022, 5020,
	3, 2, 2, 2, 5023, 5025, 5, 70, 36, 2, 5024, 5023, 3, 2, 2, 2, 5024, 5025,
	3, 2, 2, 2, 5025, 5026, 3, 2, 2, 2, 5026, 5027, 5, 762, 382, 2, 5027, 747,
	3, 2, 2, 2, 5028, 5030, 5, 70, 36, 2, 5029, 5028, 3, 2, 2, 2, 5029, 5030,
	3, 2, 2, 2, 5030, 5031, 3, 2, 2, 2, 5031, 5032, 5, 764, 383, 2, 5032, 749,
	3, 2, 2, 2, 5033, 5035, 5, 70, 36, 2, 5034, 5033, 3, 2, 2, 2, 5034, 5035,
	3, 2, 2, 2, 5035, 5036, 3, 2, 2, 2, 5036, 5037, 5, 766, 384, 2, 5037, 751,
	3, 2, 2, 2, 5038, 5040, 5, 70, 36, 2, 5039, 5038, 3, 2, 2, 2, 5039, 5040,
	3, 2, 2, 2, 5040, 5041, 3, 2, 2, 2, 5041, 5042, 5, 768, 385, 2, 5042, 753,
	3, 2, 2, 2, 5043, 5049, 5, 770, 386, 2, 5044, 5045, 5, 104, 53, 2, 5045,
	5046, 7, 14, 2, 2, 5046, 5047, 5, 762, 382, 2, 5047, 5049, 3, 2, 2, 2,
	5048, 5043, 3, 2, 2, 2, 5048, 5044, 3, 2, 2, 2, 5049, 755, 3, 2, 2, 2,
	5050, 5056, 5, 772, 387, 2, 5051, 5052, 5, 106, 54, 2, 5052, 5053, 7, 14,
	2, 2, 5053, 5054, 5, 764, 383, 2, 5054, 5056, 3, 2, 2, 2, 5055, 5050, 3,
	2, 2, 2, 5055, 5051, 3, 2, 2, 2, 5056, 757, 3, 2, 2, 2, 5057, 5063, 5,
	774, 388, 2, 5058, 5059, 5, 108, 55, 2, 5059, 5060, 7, 14, 2, 2, 5060,
	5061, 5, 766, 384, 2, 5061, 5063, 3, 2, 2, 2, 5062, 5057, 3, 2, 2, 2, 5062,
	5058, 3, 2, 2, 2, 5063, 759, 3, 2, 2, 2, 5064, 5070, 5, 776, 389, 2, 5065,
	5066, 5, 110, 56, 2, 5066, 5067, 7, 14, 2, 2, 5067, 5068, 5, 768, 385,
	2, 5068, 5070, 3, 2, 2, 2, 5069, 5064, 3, 2, 2, 2, 5069, 5065, 3, 2, 2,
	2, 5070, 761, 3, 2, 2, 2, 5071, 5077, 5, 770, 386, 2, 5072, 5074, 5, 698,
	350, 2, 5073, 5075, 5, 132, 67, 2, 5074, 5073, 3, 2, 2, 2, 5074, 5075,
	3, 2, 2, 2, 5075, 5077, 3, 2, 2, 2, 5076, 5071, 3, 2, 2, 2, 5076, 5072,
	3, 2, 2, 2, 5077, 763, 3, 2, 2, 2, 5078, 5084, 5, 772, 387, 2, 5079, 5081,
	5, 700, 351, 2, 5080, 5082, 5, 136, 69, 2, 5081, 5080, 3, 2, 2, 2, 5081,
	5082, 3, 2, 2, 2, 5082, 5084, 3, 2, 2, 2, 5083, 5078, 3, 2, 2, 2, 5083,
	5079, 3, 2, 2, 2, 5084, 765, 3, 2, 2, 2, 5085, 5091, 5, 774, 388, 2, 5086,
	5088, 5, 702, 352, 2, 5087, 5089, 5, 140, 71, 2, 5088, 5087, 3, 2, 2, 2,
	5088, 5089, 3, 2, 2, 2, 5089, 5091, 3, 2, 2, 2, 5090, 5085, 3, 2, 2, 2,
	5090, 5086, 3, 2, 2, 2, 5091, 767, 3, 2, 2, 2, 5092, 5098, 5, 776, 389,
	2, 5093, 5095, 5, 704, 353, 2, 5094, 5096, 5, 144, 73, 2, 5095, 5094, 3,
	2, 2, 2, 5095, 5096, 3, 2, 2, 2, 5096, 5098, 3, 2, 2, 2, 5097, 5092, 3,
	2, 2, 2, 5097, 5093, 3, 2, 2, 2, 5098, 769, 3, 2, 2, 2, 5099, 5101, 5,
	20, 11, 2, 5100, 5102, 5, 132, 67, 2, 5101, 5100, 3, 2, 2, 2, 5101, 5102,
	3, 2, 2, 2, 5102, 771, 3, 2, 2, 2, 5103, 5105, 5, 22, 12, 2, 5104, 5106,
	5, 136, 69, 2, 5105, 5104, 3, 2, 2, 2, 5105, 5106, 3, 2, 2, 2, 5106, 773,
	3, 2, 2, 2, 5107, 5109, 5, 24, 13, 2, 5108, 5110, 5, 140, 71, 2, 5109,
	5108, 3, 2, 2, 2, 5109, 5110, 3, 2, 2, 2, 5110, 775, 3, 2, 2, 2, 5111,
	5113, 5, 26, 14, 2, 5112, 5114, 5, 144, 73, 2, 5113, 5112, 3, 2, 2, 2,
	5113, 5114, 3, 2, 2, 2, 5114, 777, 3, 2, 2, 2, 5115, 5116, 7, 9, 2, 2,
	5116, 5120, 5, 20, 11, 2, 5117, 5118, 7, 9, 2, 2, 5118, 5120, 5, 698, 350,
	2, 5119, 5115, 3, 2, 2, 2, 5119, 5117, 3, 2, 2, 2, 5120, 779, 3, 2, 2,
	2, 5121, 5122, 7, 9, 2, 2, 5122, 5126, 5, 22, 12, 2, 5123, 5124, 7, 9,
	2, 2, 5124, 5126, 5, 700, 351, 2, 5125, 5121, 3, 2, 2, 2, 5125, 5123, 3,
	2, 2, 2, 5126, 781, 3, 2, 2, 2, 5127, 5128, 7, 9, 2, 2, 5128, 5132, 5,
	24, 13, 2, 5129, 5130, 7, 9, 2, 2, 5130, 5132, 5, 702, 352, 2, 5131, 5127,
	3, 2, 2, 2, 5131, 5129, 3, 2, 2, 2, 5132, 783, 3, 2, 2, 2, 5133, 5134,
	7, 9, 2, 2, 5134, 5138, 5, 26, 14, 2, 5135, 5136, 7, 9, 2, 2, 5136, 5138,
	5, 704, 353, 2, 5137, 5133, 3, 2, 2, 2, 5137, 5135, 3, 2, 2, 2, 5138, 785,
	3, 2, 2, 2, 5139, 5140, 7, 61, 2, 2, 5140, 787, 3, 2, 2, 2, 5141, 5142,
	5, 474, 238, 2, 5142, 5143, 6, 395, 211, 2, 5143, 5144, 7, 61, 2, 2, 5144,
	789, 3, 2, 2, 2, 5145, 5146, 5, 478, 240, 2, 5146, 5147, 6, 396, 212, 2,
	5147, 5148, 7, 61, 2, 2, 5148, 791, 3, 2, 2, 2, 5149, 5150, 5, 482, 242,
	2, 5150, 5151, 6, 397, 213, 2, 5151, 5152, 7, 61, 2, 2, 5152, 793, 3, 2,
	2, 2, 5153, 5154, 5, 486, 244, 2, 5154, 5155, 6, 398, 214, 2, 5155, 5156,
	7, 61, 2, 2, 5156, 795, 3, 2, 2, 2, 5157, 5158, 7, 65, 2, 2, 5158, 5159,
	7, 7, 2, 2, 5159, 5160, 5, 474, 238, 2, 5160, 5161, 7, 8, 2, 2, 5161, 5162,
	5, 488, 245, 2, 5162, 5163, 7, 66, 2, 2, 5163, 5164, 5, 488, 245, 2, 5164,
	5172, 3, 2, 2, 2, 5165, 5166, 7, 65, 2, 2, 5166, 5167, 7, 7, 2, 2, 5167,
	5168, 5, 474, 238, 2, 5168, 5169, 7, 8, 2, 2, 5169, 5170, 5, 488, 245,
	2, 5170, 5172, 3, 2, 2, 2, 5171, 5157, 3, 2, 2, 2, 5171, 5165, 3, 2, 2,
	2, 5172, 797, 3, 2, 2, 2, 5173, 5174, 7, 65, 2, 2, 5174, 5175, 7, 7, 2,
	2, 5175, 5176, 5, 478, 240, 2, 5176, 5177, 7, 8, 2, 2, 5177, 5178, 5, 490,
	246, 2, 5178, 5179, 7, 66, 2, 2, 5179, 5180, 5, 490, 246, 2, 5180, 5188,
	3, 2, 2, 2, 5181, 5182, 7, 65, 2, 2, 5182, 5183, 7, 7, 2, 2, 5183, 5184,
	5, 478, 240, 2, 5184, 5185, 7, 8, 2, 2, 5185, 5186, 5, 490, 246, 2, 5186,
	5188, 3, 2, 2, 2, 5187, 5173, 3, 2, 2, 2, 5187, 5181, 3, 2, 2, 2, 5188,
	799, 3, 2, 2, 2, 5189, 5190, 7, 65, 2, 2, 5190, 5191, 7, 7, 2, 2, 5191,
	5192, 5, 482, 242, 2, 5192, 5193, 7, 8, 2, 2, 5193, 5194, 5, 492, 247,
	2, 5194, 5195, 7, 66, 2, 2, 5195, 5196, 5, 492, 247, 2, 5196, 5204, 3,
	2, 2, 2, 5197, 5198, 7, 65, 2, 2, 5198, 5199, 7, 7, 2, 2, 5199, 5200, 5,
	482, 242, 2, 5200, 5201, 7, 8, 2, 2, 5201, 5202, 5, 492, 247, 2, 5202,
	5204, 3, 2, 2, 2, 5203, 5189, 3, 2, 2, 2, 5203, 5197, 3, 2, 2, 2, 5204,
	801, 3, 2, 2, 2, 5205, 5206, 7, 65, 2, 2, 5206, 5207, 7, 7, 2, 2, 5207,
	5208, 5, 486, 244, 2, 5208, 5209, 7, 8, 2, 2, 5209, 5210, 5, 494, 248,
	2, 5210, 5211, 7, 66, 2, 2, 5211, 5212, 5, 494, 248, 2, 5212, 5220, 3,
	2, 2, 2, 5213, 5214, 7, 65, 2, 2, 5214, 5215, 7, 7, 2, 2, 5215, 5216, 5,
	486, 244, 2, 5216, 5217, 7, 8, 2, 2, 5217, 5218, 5, 494, 248, 2, 5218,
	5220, 3, 2, 2, 2, 5219, 5205, 3, 2, 2, 2, 5219, 5213, 3, 2, 2, 2, 5220,
	803, 3, 2, 2, 2, 5221, 5222, 7, 65, 2, 2, 5222, 5223, 7, 7, 2, 2, 5223,
	5224, 5, 474, 238, 2, 5224, 5225, 7, 8, 2, 2, 5225, 5226, 5, 496, 249,
	2, 5226, 5227, 7, 66, 2, 2, 5227, 5228, 5, 496, 249, 2, 5228, 5236, 3,
	2, 2, 2, 5229, 5230, 7, 65, 2, 2, 5230, 5231, 7, 7, 2, 2, 5231, 5232, 5,
	474, 238, 2, 5232, 5233, 7, 8, 2, 2, 5233, 5234, 5, 496, 249, 2, 5234,
	5236, 3, 2, 2, 2, 5235, 5221, 3, 2, 2, 2, 5235, 5229, 3, 2, 2, 2, 5236,
	805, 3, 2, 2, 2, 5237, 5238, 7, 65, 2, 2, 5238, 5239, 7, 7, 2, 2, 5239,
	5240, 5, 478, 240, 2, 5240, 5241, 7, 8, 2, 2, 5241, 5242, 5, 498, 250,
	2, 5242, 5243, 7, 66, 2, 2, 5243, 5244, 5, 498, 250, 2, 5244, 5252, 3,
	2, 2, 2, 5245, 5246, 7, 65, 2, 2, 5246, 5247, 7, 7, 2, 2, 5247, 5248, 5,
	478, 240, 2, 5248, 5249, 7, 8, 2, 2, 5249, 5250, 5, 498, 250, 2, 5250,
	5252, 3, 2, 2, 2, 5251, 5237, 3, 2, 2, 2, 5251, 5245, 3, 2, 2, 2, 5252,
	807, 3, 2, 2, 2, 5253, 5254, 7, 65, 2, 2, 5254, 5255, 7, 7, 2, 2, 5255,
	5256, 5, 482, 242, 2, 5256, 5257, 7, 8, 2, 2, 5257, 5258, 5, 500, 251,
	2, 5258, 5259, 7, 66, 2, 2, 5259, 5260, 5, 500, 251, 2, 5260, 5268, 3,
	2, 2, 2, 5261, 5262, 7, 65, 2, 2, 5262, 5263, 7, 7, 2, 2, 5263, 5264, 5,
	482, 242, 2, 5264, 5265, 7, 8, 2, 2, 5265, 5266, 5, 500, 251, 2, 5266,
	5268, 3, 2, 2, 2, 5267, 5253, 3, 2, 2, 2, 5267, 5261, 3, 2, 2, 2, 5268,
	809, 3, 2, 2, 2, 5269, 5270, 7, 65, 2, 2, 5270, 5271, 7, 7, 2, 2, 5271,
	5272, 5, 486, 244, 2, 5272, 5273, 7, 8, 2, 2, 5273, 5274, 5, 502, 252,
	2, 5274, 5275, 7, 66, 2, 2, 5275, 5276, 5, 502, 252, 2, 5276, 5284, 3,
	2, 2, 2, 5277, 5278, 7, 65, 2, 2, 5278, 5279, 7, 7, 2, 2, 5279, 5280, 5,
	486, 244, 2, 5280, 5281, 7, 8, 2, 2, 5281, 5282, 5, 502, 252, 2, 5282,
	5284, 3, 2, 2, 2, 5283, 5269, 3, 2, 2, 2, 5283, 5277, 3, 2, 2, 2, 5284,
	811, 3, 2, 2, 2, 5285, 5286, 7, 67, 2, 2, 5286, 5287, 5, 488, 245, 2, 5287,
	5288, 7, 68, 2, 2, 5288, 5289, 7, 7, 2, 2, 5289, 5290, 5, 474, 238, 2,
	5290, 5291, 7, 8, 2, 2, 5291, 5292, 7, 61, 2, 2, 5292, 5396, 3, 2, 2, 2,
	5293, 5294, 7, 68, 2, 2, 5294, 5295, 7, 7, 2, 2, 5295, 5296, 5, 474, 238,
	2, 5296, 5297, 7, 8, 2, 2, 5297, 5298, 5, 488, 245, 2, 5298, 5396, 3, 2,
	2, 2, 5299, 5300, 7, 69, 2, 2, 5300, 5301, 7, 7, 2, 2, 5301, 5303, 6, 407,
	215, 2, 5302, 5304, 5, 472, 237, 2, 5303, 5302, 3, 2, 2, 2, 5303, 5304,
	3, 2, 2, 2, 5304, 5305, 3, 2, 2, 2, 5305, 5307, 7, 61, 2, 2, 5306, 5308,
	5, 474, 238, 2, 5307, 5306, 3, 2, 2, 2, 5307, 5308, 3, 2, 2, 2, 5308, 5309,
	3, 2, 2, 2, 5309, 5311, 7, 61, 2, 2, 5310, 5312, 5, 474, 238, 2, 5311,
	5310, 3, 2, 2, 2, 5311, 5312, 3, 2, 2, 2, 5312, 5313, 3, 2, 2, 2, 5313,
	5314, 7, 8, 2, 2, 5314, 5396, 5, 488, 245, 2, 5315, 5316, 7, 69, 2, 2,
	5316, 5317, 7, 7, 2, 2, 5317, 5318, 7, 64, 2, 2, 5318, 5319, 5, 666, 334,
	2, 5319, 5321, 7, 61, 2, 2, 5320, 5322, 5, 474, 238, 2, 5321, 5320, 3,
	2, 2, 2, 5321, 5322, 3, 2, 2, 2, 5322, 5323, 3, 2, 2, 2, 5323, 5325, 7,
	61, 2, 2, 5324, 5326, 5, 474, 238, 2, 5325, 5324, 3, 2, 2, 2, 5325, 5326,
	3, 2, 2, 2, 5326, 5327, 3, 2, 2, 2, 5327, 5328, 7, 8, 2, 2, 5328, 5329,
	5, 488, 245, 2, 5329, 5396, 3, 2, 2, 2, 5330, 5331, 7, 69, 2, 2, 5331,
	5332, 7, 7, 2, 2, 5332, 5334, 5, 608, 305, 2, 5333, 5335, 5, 474, 238,
	2, 5334, 5333, 3, 2, 2, 2, 5334, 5335, 3, 2, 2, 2, 5335, 5336, 3, 2, 2,
	2, 5336, 5338, 7, 61, 2, 2, 5337, 5339, 5, 474, 238, 2, 5338, 5337, 3,
	2, 2, 2, 5338, 5339, 3, 2, 2, 2, 5339, 5340, 3, 2, 2, 2, 5340, 5341, 7,
	8, 2, 2, 5341, 5342, 5, 488, 245, 2, 5342, 5396, 3, 2, 2, 2, 5343, 5344,
	7, 69, 2, 2, 5344, 5345, 7, 7, 2, 2, 5345, 5346, 6, 407, 216, 2, 5346,
	5347, 5, 270, 136, 2, 5347, 5348, 7, 38, 2, 2, 5348, 5349, 5, 474, 238,
	2, 5349, 5350, 7, 8, 2, 2, 5350, 5351, 5, 488, 245, 2, 5351, 5396, 3, 2,
	2, 2, 5352, 5353, 7, 69, 2, 2, 5353, 5354, 7, 7, 2, 2, 5354, 5355, 7, 64,
	2, 2, 5355, 5356, 5, 836, 419, 2, 5356, 5357, 7, 38, 2, 2, 5357, 5358,
	5, 474, 238, 2, 5358, 5359, 7, 8, 2, 2, 5359, 5360, 5, 488, 245, 2, 5360,
	5396, 3, 2, 2, 2, 5361, 5362, 7, 69, 2, 2, 5362, 5363, 7, 7, 2, 2, 5363,
	5364, 5, 828, 415, 2, 5364, 5365, 7, 38, 2, 2, 5365, 5366, 5, 474, 238,
	2, 5366, 5367, 7, 8, 2, 2, 5367, 5368, 5, 488, 245, 2, 5368, 5396, 3, 2,
	2, 2, 5369, 5370, 7, 69, 2, 2, 5370, 5371, 7, 7, 2, 2, 5371, 5372, 6, 407,
	217, 2, 5372, 5373, 5, 270, 136, 2, 5373, 5374, 7, 70, 2, 2, 5374, 5375,
	5, 458, 230, 2, 5375, 5376, 7, 8, 2, 2, 5376, 5377, 5, 488, 245, 2, 5377,
	5396, 3, 2, 2, 2, 5378, 5379, 7, 69, 2, 2, 5379, 5380, 7, 7, 2, 2, 5380,
	5381, 7, 64, 2, 2, 5381, 5382, 5, 836, 419, 2, 5382, 5383, 7, 70, 2, 2,
	5383, 5384, 5, 458, 230, 2, 5384, 5385, 7, 8, 2, 2, 5385, 5386, 5, 488,
	245, 2, 5386, 5396, 3, 2, 2, 2, 5387, 5388, 7, 69, 2, 2, 5388, 5389, 7,
	7, 2, 2, 5389, 5390, 5, 828, 415, 2, 5390, 5391, 7, 70, 2, 2, 5391, 5392,
	5, 458, 230, 2, 5392, 5393, 7, 8, 2, 2, 5393, 5394, 5, 488, 245, 2, 5394,
	5396, 3, 2, 2, 2, 5395, 5285, 3, 2, 2, 2, 5395, 5293, 3, 2, 2, 2, 5395,
	5299, 3, 2, 2, 2, 5395, 5315, 3, 2, 2, 2, 5395, 5330, 3, 2, 2, 2, 5395,
	5343, 3, 2, 2, 2, 5395, 5352, 3, 2, 2, 2, 5395, 5361, 3, 2, 2, 2, 5395,
	5369, 3, 2, 2, 2, 5395, 5378, 3, 2, 2, 2, 5395, 5387, 3, 2, 2, 2, 5396,
	813, 3, 2, 2, 2, 5397, 5398, 7, 67, 2, 2, 5398, 5399, 5, 490, 246, 2, 5399,
	5400, 7, 68, 2, 2, 5400, 5401, 7, 7, 2, 2, 5401, 5402, 5, 478, 240, 2,
	5402, 5403, 7, 8, 2, 2, 5403, 5404, 7, 61, 2, 2, 5404, 5508, 3, 2, 2, 2,
	5405, 5406, 7, 68, 2, 2, 5406, 5407, 7, 7, 2, 2, 5407, 5408, 5, 478, 240,
	2, 5408, 5409, 7, 8, 2, 2, 5409, 5410, 5, 490, 246, 2, 5410, 5508, 3, 2,
	2, 2, 5411, 5412, 7, 69, 2, 2, 5412, 5413, 7, 7, 2, 2, 5413, 5415, 6, 408,
	218, 2, 5414, 5416, 5, 476, 239, 2, 5415, 5414, 3, 2, 2, 2, 5415, 5416,
	3, 2, 2, 2, 5416, 5417, 3, 2, 2, 2, 5417, 5419, 7, 61, 2, 2, 5418, 5420,
	5, 478, 240, 2, 5419, 5418, 3, 2, 2, 2, 5419, 5420, 3, 2, 2, 2, 5420, 5421,
	3, 2, 2, 2, 5421, 5423, 7, 61, 2, 2, 5422, 5424, 5, 478, 240, 2, 5423,
	5422, 3, 2, 2, 2, 5423, 5424, 3, 2, 2, 2, 5424, 5425, 3, 2, 2, 2, 5425,
	5426, 7, 8, 2, 2, 5426, 5508, 5, 490, 246, 2, 5427, 5428, 7, 69, 2, 2,
	5428, 5429, 7, 7, 2, 2, 5429, 5430, 7, 64, 2, 2, 5430, 5431, 5, 670, 336,
	2, 5431, 5433, 7, 61, 2, 2, 5432, 5434, 5, 478, 240, 2, 5433, 5432, 3,
	2, 2, 2, 5433, 5434, 3, 2, 2, 2, 5434, 5435, 3, 2, 2, 2, 5435, 5437, 7,
	61, 2, 2, 5436, 5438, 5, 478, 240, 2, 5437, 5436, 3, 2, 2, 2, 5437, 5438,
	3, 2, 2, 2, 5438, 5439, 3, 2, 2, 2, 5439, 5440, 7, 8, 2, 2, 5440, 5441,
	5, 490, 246, 2, 5441, 5508, 3, 2, 2, 2, 5442, 5443, 7, 69, 2, 2, 5443,
	5444, 7, 7, 2, 2, 5444, 5446, 5, 612, 307, 2, 5445, 5447, 5, 478, 240,
	2, 5446, 5445, 3, 2, 2, 2, 5446, 5447, 3, 2, 2, 2, 5447, 5448, 3, 2, 2,
	2, 5448, 5450, 7, 61, 2, 2, 5449, 5451, 5, 478, 240, 2, 5450, 5449, 3,
	2, 2, 2, 5450, 5451, 3, 2, 2, 2, 5451, 5452, 3, 2, 2, 2, 5452, 5453, 7,
	8, 2, 2, 5453, 5454, 5, 490, 246, 2, 5454, 5508, 3, 2, 2, 2, 5455, 5456,
	7, 69, 2, 2, 5456, 5457, 7, 7, 2, 2, 5457, 5458, 6, 408, 219, 2, 5458,
	5459, 5, 272, 137, 2, 5459, 5460, 7, 38, 2, 2, 5460, 5461, 5, 478, 240,
	2, 5461, 5462, 7, 8, 2, 2, 5462, 5463, 5, 490, 246, 2, 5463, 5508, 3, 2,
	2, 2, 5464, 5465, 7, 69, 2, 2, 5465, 5466, 7, 7, 2, 2, 5466, 5467, 7, 64,
	2, 2, 5467, 5468, 5, 838, 420, 2, 5468, 5469, 7, 38, 2, 2, 5469, 5470,
	5, 478, 240, 2, 5470, 5471, 7, 8, 2, 2, 5471, 5472, 5, 490, 246, 2, 5472,
	5508, 3, 2, 2, 2, 5473, 5474, 7, 69, 2, 2, 5474, 5475, 7, 7, 2, 2, 5475,
	5476, 5, 830, 416, 2, 5476, 5477, 7, 38, 2, 2, 5477, 5478, 5, 478, 240,
	2, 5478, 5479, 7, 8, 2, 2, 5479, 5480, 5, 490, 246, 2, 5480, 5508, 3, 2,
	2, 2, 5481, 5482, 7, 69, 2, 2, 5482, 5483, 7, 7, 2, 2, 5483, 5484, 6, 408,
	220, 2, 5484, 5485, 5, 272, 137, 2, 5485, 5486, 7, 70, 2, 2, 5486, 5487,
	5, 462, 232, 2, 5487, 5488, 7, 8, 2, 2, 5488, 5489, 5, 490, 246, 2, 5489,
	5508, 3, 2, 2, 2, 5490, 5491, 7, 69, 2, 2, 5491, 5492, 7, 7, 2, 2, 5492,
	5493, 7, 64, 2, 2, 5493, 5494, 5, 838, 420, 2, 5494, 5495, 7, 70, 2, 2,
	5495, 5496, 5, 462, 232, 2, 5496, 5497, 7, 8, 2, 2, 5497, 5498, 5, 490,
	246, 2, 5498, 5508, 3, 2, 2, 2, 5499, 5500, 7, 69, 2, 2, 5500, 5501, 7,
	7, 2, 2, 5501, 5502, 5, 830, 416, 2, 5502, 5503, 7, 70, 2, 2, 5503, 5504,
	5, 462, 232, 2, 5504, 5505, 7, 8, 2, 2, 5505, 5506, 5, 490, 246, 2, 5506,
	5508, 3, 2, 2, 2, 5507, 5397, 3, 2, 2, 2, 5507, 5405, 3, 2, 2, 2, 5507,
	5411, 3, 2, 2, 2, 5507, 5427, 3, 2, 2, 2, 5507, 5442, 3, 2, 2, 2, 5507,
	5455, 3, 2, 2, 2, 5507, 5464, 3, 2, 2, 2, 5507, 5473, 3, 2, 2, 2, 5507,
	5481, 3, 2, 2, 2, 5507, 5490, 3, 2, 2, 2, 5507, 5499, 3, 2, 2, 2, 5508,
	815, 3, 2, 2, 2, 5509, 5510, 7, 67, 2, 2, 5510, 5511, 5, 492, 247, 2, 5511,
	5512, 7, 68, 2, 2, 5512, 5513, 7, 7, 2, 2, 5513, 5514, 5, 482, 242, 2,
	5514, 5515, 7, 8, 2, 2, 5515, 5516, 7, 61, 2, 2, 5516, 5620, 3, 2, 2, 2,
	5517, 5518, 7, 68, 2, 2, 5518, 5519, 7, 7, 2, 2, 5519, 5520, 5, 482, 242,
	2, 5520, 5521, 7, 8, 2, 2, 5521, 5522, 5, 492, 247, 2, 5522, 5620, 3, 2,
	2, 2, 5523, 5524, 7, 69, 2, 2, 5524, 5525, 7, 7, 2, 2, 5525, 5527, 6, 409,
	221, 2, 5526, 5528, 5, 480, 241, 2, 5527, 5526, 3, 2, 2, 2, 5527, 5528,
	3, 2, 2, 2, 5528, 5529, 3, 2, 2, 2, 5529, 5531, 7, 61, 2, 2, 5530, 5532,
	5, 482, 242, 2, 5531, 5530, 3, 2, 2, 2, 5531, 5532, 3, 2, 2, 2, 5532, 5533,
	3, 2, 2, 2, 5533, 5535, 7, 61, 2, 2, 5534, 5536, 5, 482, 242, 2, 5535,
	5534, 3, 2, 2, 2, 5535, 5536, 3, 2, 2, 2, 5536, 5537, 3, 2, 2, 2, 5537,
	5538, 7, 8, 2, 2, 5538, 5620, 5, 492, 247, 2, 5539, 5540, 7, 69, 2, 2,
	5540, 5541, 7, 7, 2, 2, 5541, 5542, 7, 64, 2, 2, 5542, 5543, 5, 674, 338,
	2, 5543, 5545, 7, 61, 2, 2, 5544, 5546, 5, 482, 242, 2, 5545, 5544, 3,
	2, 2, 2, 5545, 5546, 3, 2, 2, 2, 5546, 5547, 3, 2, 2, 2, 5547, 5549, 7,
	61, 2, 2, 5548, 5550, 5, 482, 242, 2, 5549, 5548, 3, 2, 2, 2, 5549, 5550,
	3, 2, 2, 2, 5550, 5551, 3, 2, 2, 2, 5551, 5552, 7, 8, 2, 2, 5552, 5553,
	5, 492, 247, 2, 5553, 5620, 3, 2, 2, 2, 5554, 5555, 7, 69, 2, 2, 5555,
	5556, 7, 7, 2, 2, 5556, 5558, 5, 616, 309, 2, 5557, 5559, 5, 482, 242,
	2, 5558, 5557, 3, 2, 2, 2, 5558, 5559, 3, 2, 2, 2, 5559, 5560, 3, 2, 2,
	2, 5560, 5562, 7, 61, 2, 2, 5561, 5563, 5, 482, 242, 2, 5562, 5561, 3,
	2, 2, 2, 5562, 5563, 3, 2, 2, 2, 5563, 5564, 3, 2, 2, 2, 5564, 5565, 7,
	8, 2, 2, 5565, 5566, 5, 492, 247, 2, 5566, 5620, 3, 2, 2, 2, 5567, 5568,
	7, 69, 2, 2, 5568, 5569, 7, 7, 2, 2, 5569, 5570, 6, 409, 222, 2, 5570,
	5571, 5, 274, 138, 2, 5571, 5572, 7, 38, 2, 2, 5572, 5573, 5, 482, 242,
	2, 5573, 5574, 7, 8, 2, 2, 5574, 5575, 5, 492, 247, 2, 5575, 5620, 3, 2,
	2, 2, 5576, 5577, 7, 69, 2, 2, 5577, 5578, 7, 7, 2, 2, 5578, 5579, 7, 64,
	2, 2, 5579, 5580, 5, 840, 421, 2, 5580, 5581, 7, 38, 2, 2, 5581, 5582,
	5, 482, 242, 2, 5582, 5583, 7, 8, 2, 2, 5583, 5584, 5, 492, 247, 2, 5584,
	5620, 3, 2, 2, 2, 5585, 5586, 7, 69, 2, 2, 5586, 5587, 7, 7, 2, 2, 5587,
	5588, 5, 832, 417, 2, 5588, 5589, 7, 38, 2, 2, 5589, 5590, 5, 482, 242,
	2, 5590, 5591, 7, 8, 2, 2, 5591, 5592, 5, 492, 247, 2, 5592, 5620, 3, 2,
	2, 2, 5593, 5594, 7, 69, 2, 2, 5594, 5595, 7, 7, 2, 2, 5595, 5596, 6, 409,
	223, 2, 5596, 5597, 5, 274, 138, 2, 5597, 5598, 7, 70, 2, 2, 5598, 5599,
	5, 466, 234, 2, 5599, 5600, 7, 8, 2, 2, 5600, 5601, 5, 492, 247, 2, 5601,
	5620, 3, 2, 2, 2, 5602, 5603, 7, 69, 2, 2, 5603, 5604, 7, 7, 2, 2, 5604,
	5605, 7, 64, 2, 2, 5605, 5606, 5, 840, 421, 2, 5606, 5607, 7, 70, 2, 2,
	5607, 5608, 5, 466, 234, 2, 5608, 5609, 7, 8, 2, 2, 5609, 5610, 5, 492,
	247, 2, 5610, 5620, 3, 2, 2, 2, 5611, 5612, 7, 69, 2, 2, 5612, 5613, 7,
	7, 2, 2, 5613, 5614, 5, 832, 417, 2, 5614, 5615, 7, 70, 2, 2, 5615, 5616,
	5, 466, 234, 2, 5616, 5617, 7, 8, 2, 2, 5617, 5618, 5, 492, 247, 2, 5618,
	5620, 3, 2, 2, 2, 5619, 5509, 3, 2, 2, 2, 5619, 5517, 3, 2, 2, 2, 5619,
	5523, 3, 2, 2, 2, 5619, 5539, 3, 2, 2, 2, 5619, 5554, 3, 2, 2, 2, 5619,
	5567, 3, 2, 2, 2, 5619, 5576, 3, 2, 2, 2, 5619, 5585, 3, 2, 2, 2, 5619,
	5593, 3, 2, 2, 2, 5619, 5602, 3, 2, 2, 2, 5619, 5611, 3, 2, 2, 2, 5620,
	817, 3, 2, 2, 2, 5621, 5622, 7, 67, 2, 2, 5622, 5623, 5, 494, 248, 2, 5623,
	5624, 7, 68, 2, 2, 5624, 5625, 7, 7, 2, 2, 5625, 5626, 5, 486, 244, 2,
	5626, 5627, 7, 8, 2, 2, 5627, 5628, 7, 61, 2, 2, 5628, 5732, 3, 2, 2, 2,
	5629, 5630, 7, 68, 2, 2, 5630, 5631, 7, 7, 2, 2, 5631, 5632, 5, 486, 244,
	2, 5632, 5633, 7, 8, 2, 2, 5633, 5634, 5, 494, 248, 2, 5634, 5732, 3, 2,
	2, 2, 5635, 5636, 7, 69, 2, 2, 5636, 5637, 7, 7, 2, 2, 5637, 5639, 6, 410,
	224, 2, 5638, 5640, 5, 484, 243, 2, 5639, 5638, 3, 2, 2, 2, 5639, 5640,
	3, 2, 2, 2, 5640, 5641, 3, 2, 2, 2, 5641, 5643, 7, 61, 2, 2, 5642, 5644,
	5, 486, 244, 2, 5643, 5642, 3, 2, 2, 2, 5643, 5644, 3, 2, 2, 2, 5644, 5645,
	3, 2, 2, 2, 5645, 5647, 7, 61, 2, 2, 5646, 5648, 5, 486, 244, 2, 5647,
	5646, 3, 2, 2, 2, 5647, 5648, 3, 2, 2, 2, 5648, 5649, 3, 2, 2, 2, 5649,
	5650, 7, 8, 2, 2, 5650, 5732, 5, 494, 248, 2, 5651, 5652, 7, 69, 2, 2,
	5652, 5653, 7, 7, 2, 2, 5653, 5654, 7, 64, 2, 2, 5654, 5655, 5, 678, 340,
	2, 5655, 5657, 7, 61, 2, 2, 5656, 5658, 5, 486, 244, 2, 5657, 5656, 3,
	2, 2, 2, 5657, 5658, 3, 2, 2, 2, 5658, 5659, 3, 2, 2, 2, 5659, 5661, 7,
	61, 2, 2, 5660, 5662, 5, 486, 244, 2, 5661, 5660, 3, 2, 2, 2, 5661, 5662,
	3, 2, 2, 2, 5662, 5663, 3, 2, 2, 2, 5663, 5664, 7, 8, 2, 2, 5664, 5665,
	5, 494, 248, 2, 5665, 5732, 3, 2, 2, 2, 5666, 5667, 7, 69, 2, 2, 5667,
	5668, 7, 7, 2, 2, 5668, 5670, 5, 620, 311, 2, 5669, 5671, 5, 486, 244,
	2, 5670, 5669, 3, 2, 2, 2, 5670, 5671, 3, 2, 2, 2, 5671, 5672, 3, 2, 2,
	2, 5672, 5674, 7, 61, 2, 2, 5673, 5675, 5, 486, 244, 2, 5674, 5673, 3,
	2, 2, 2, 5674, 5675, 3, 2, 2, 2, 5675, 5676, 3, 2, 2, 2, 5676, 5677, 7,
	8, 2, 2, 5677, 5678, 5, 494, 248, 2, 5678, 5732, 3, 2, 2, 2, 5679, 5680,
	7, 69, 2, 2, 5680, 5681, 7, 7, 2, 2, 5681, 5682, 6, 410, 225, 2, 5682,
	5683, 5, 276, 139, 2, 5683, 5684, 7, 38, 2, 2, 5684, 5685, 5, 486, 244,
	2, 5685, 5686, 7, 8, 2, 2, 5686, 5687, 5, 494, 248, 2, 5687, 5732, 3, 2,
	2, 2, 5688, 5689, 7, 69, 2, 2, 5689, 5690, 7, 7, 2, 2, 5690, 5691, 7, 64,
	2, 2, 5691, 5692, 5, 842, 422, 2, 5692, 5693, 7, 38, 2, 2, 5693, 5694,
	5, 486, 244, 2, 5694, 5695, 7, 8, 2, 2, 5695, 5696, 5, 494, 248, 2, 5696,
	5732, 3, 2, 2, 2, 5697, 5698, 7, 69, 2, 2, 5698, 5699, 7, 7, 2, 2, 5699,
	5700, 5, 834, 418, 2, 5700, 5701, 7, 38, 2, 2, 5701, 5702, 5, 486, 244,
	2, 5702, 5703, 7, 8, 2, 2, 5703, 5704, 5, 494, 248, 2, 5704, 5732, 3, 2,
	2, 2, 5705, 5706, 7, 69, 2, 2, 5706, 5707, 7, 7, 2, 2, 5707, 5708, 6, 410,
	226, 2, 5708, 5709, 5, 276, 139, 2, 5709, 5710, 7, 70, 2, 2, 5710, 5711,
	5, 470, 236, 2, 5711, 5712, 7, 8, 2, 2, 5712, 5713, 5, 494, 248, 2, 5713,
	5732, 3, 2, 2, 2, 5714, 5715, 7, 69, 2, 2, 5715, 5716, 7, 7, 2, 2, 5716,
	5717, 7, 64, 2, 2, 5717, 5718, 5, 842, 422, 2, 5718, 5719, 7, 70, 2, 2,
	5719, 5720, 5, 470, 236, 2, 5720, 5721, 7, 8, 2, 2, 5721, 5722, 5, 494,
	248, 2, 5722, 5732, 3, 2, 2, 2, 5723, 5724, 7, 69, 2, 2, 5724, 5725, 7,
	7, 2, 2, 5725, 5726, 5, 834, 418, 2, 5726, 5727, 7, 70, 2, 2, 5727, 5728,
	5, 470, 236, 2, 5728, 5729, 7, 8, 2, 2, 5729, 5730, 5, 494, 248, 2, 5730,
	5732, 3, 2, 2, 2, 5731, 5621, 3, 2, 2, 2, 5731, 5629, 3, 2, 2, 2, 5731,
	5635, 3, 2, 2, 2, 5731, 5651, 3, 2, 2, 2, 5731, 5666, 3, 2, 2, 2, 5731,
	5679, 3, 2, 2, 2, 5731, 5688, 3, 2, 2, 2, 5731, 5697, 3, 2, 2, 2, 5731,
	5705, 3, 2, 2, 2, 5731, 5714, 3, 2, 2, 2, 5731, 5723, 3, 2, 2, 2, 5732,
	819, 3, 2, 2, 2, 5733, 5734, 7, 67, 2, 2, 5734, 5735, 5, 496, 249, 2, 5735,
	5736, 7, 68, 2, 2, 5736, 5737, 7, 7, 2, 2, 5737, 5738, 5, 474, 238, 2,
	5738, 5739, 7, 8, 2, 2, 5739, 5740, 7, 61, 2, 2, 5740, 5844, 3, 2, 2, 2,
	5741, 5742, 7, 68, 2, 2, 5742, 5743, 7, 7, 2, 2, 5743, 5744, 5, 474, 238,
	2, 5744, 5745, 7, 8, 2, 2, 5745, 5746, 5, 496, 249, 2, 5746, 5844, 3, 2,
	2, 2, 5747, 5748, 7, 69, 2, 2, 5748, 5749, 7, 7, 2, 2, 5749, 5751, 6, 411,
	227, 2, 5750, 5752, 5, 472, 237, 2, 5751, 5750, 3, 2, 2, 2, 5751, 5752,
	3, 2, 2, 2, 5752, 5753, 3, 2, 2, 2, 5753, 5755, 7, 61, 2, 2, 5754, 5756,
	5, 474, 238, 2, 5755, 5754, 3, 2, 2, 2, 5755, 5756, 3, 2, 2, 2, 5756, 5757,
	3, 2, 2, 2, 5757, 5759, 7, 61, 2, 2, 5758, 5760, 5, 474, 238, 2, 5759,
	5758, 3, 2, 2, 2, 5759, 5760, 3, 2, 2, 2, 5760, 5761, 3, 2, 2, 2, 5761,
	5762, 7, 8, 2, 2, 5762, 5844, 5, 496, 249, 2, 5763, 5764, 7, 69, 2, 2,
	5764, 5765, 7, 7, 2, 2, 5765, 5766, 7, 64, 2, 2, 5766, 5767, 5, 666, 334,
	2, 5767, 5769, 7, 61, 2, 2, 5768, 5770, 5, 474, 238, 2, 5769, 5768, 3,
	2, 2, 2, 5769, 5770, 3, 2, 2, 2, 5770, 5771, 3, 2, 2, 2, 5771, 5773, 7,
	61, 2, 2, 5772, 5774, 5, 474, 238, 2, 5773, 5772, 3, 2, 2, 2, 5773, 5774,
	3, 2, 2, 2, 5774, 5775, 3, 2, 2, 2, 5775, 5776, 7, 8, 2, 2, 5776, 5777,
	5, 496, 249, 2, 5777, 5844, 3, 2, 2, 2, 5778, 5779, 7, 69, 2, 2, 5779,
	5780, 7, 7, 2, 2, 5780, 5782, 5, 608, 305, 2, 5781, 5783, 5, 474, 238,
	2, 5782, 5781, 3, 2, 2, 2, 5782, 5783, 3, 2, 2, 2, 5783, 5784, 3, 2, 2,
	2, 5784, 5786, 7, 61, 2, 2, 5785, 5787, 5, 474, 238, 2, 5786, 5785, 3,
	2, 2, 2, 5786, 5787, 3, 2, 2, 2, 5787, 5788, 3, 2, 2, 2, 5788, 5789, 7,
	8, 2, 2, 5789, 5790, 5, 496, 249, 2, 5790, 5844, 3, 2, 2, 2, 5791, 5792,
	7, 69, 2, 2, 5792, 5793, 7, 7, 2, 2, 5793, 5794, 6, 411, 228, 2, 5794,
	5795, 5, 270, 136, 2, 5795, 5796, 7, 38, 2, 2, 5796, 5797, 5, 474, 238,
	2, 5797, 5798, 7, 8, 2, 2, 5798, 5799, 5, 496, 249, 2, 5799, 5844, 3, 2,
	2, 2, 5800, 5801, 7, 69, 2, 2, 5801, 5802, 7, 7, 2, 2, 5802, 5803, 7, 64,
	2, 2, 5803, 5804, 5, 836, 419, 2, 5804, 5805, 7, 38, 2, 2, 5805, 5806,
	5, 474, 238, 2, 5806, 5807, 7, 8, 2, 2, 5807, 5808, 5, 496, 249, 2, 5808,
	5844, 3, 2, 2, 2, 5809, 5810, 7, 69, 2, 2, 5810, 5811, 7, 7, 2, 2, 5811,
	5812, 5, 828, 415, 2, 5812, 5813, 7, 38, 2, 2, 5813, 5814, 5, 474, 238,
	2, 5814, 5815, 7, 8, 2, 2, 5815, 5816, 5, 496, 249, 2, 5816, 5844, 3, 2,
	2, 2, 5817, 5818, 7, 69, 2, 2, 5818, 5819, 7, 7, 2, 2, 5819, 5820, 6, 411,
	229, 2, 5820, 5821, 5, 270, 136, 2, 5821, 5822, 7, 70, 2, 2, 5822, 5823,
	5, 458, 230, 2, 5823, 5824, 7, 8, 2, 2, 5824, 5825, 5, 496, 249, 2, 5825,
	5844, 3, 2, 2, 2, 5826, 5827, 7, 69, 2, 2, 5827, 5828, 7, 7, 2, 2, 5828,
	5829, 7, 64, 2, 2, 5829, 5830, 5, 836, 419, 2, 5830, 5831, 7, 70, 2, 2,
	5831, 5832, 5, 458, 230, 2, 5832, 5833, 7, 8, 2, 2, 5833, 5834, 5, 496,
	249, 2, 5834, 5844, 3, 2, 2, 2, 5835, 5836, 7, 69, 2, 2, 5836, 5837, 7,
	7, 2, 2, 5837, 5838, 5, 828, 415, 2, 5838, 5839, 7, 70, 2, 2, 5839, 5840,
	5, 458, 230, 2, 5840, 5841, 7, 8, 2, 2, 5841, 5842, 5, 496, 249, 2, 5842,
	5844, 3, 2, 2, 2, 5843, 5733, 3, 2, 2, 2, 5843, 5741, 3, 2, 2, 2, 5843,
	5747, 3, 2, 2, 2, 5843, 5763, 3, 2, 2, 2, 5843, 5778, 3, 2, 2, 2, 5843,
	5791, 3, 2, 2, 2, 5843, 5800, 3, 2, 2, 2, 5843, 5809, 3, 2, 2, 2, 5843,
	5817, 3, 2, 2, 2, 5843, 5826, 3, 2, 2, 2, 5843, 5835, 3, 2, 2, 2, 5844,
	821, 3, 2, 2, 2, 5845, 5846, 7, 67, 2, 2, 5846, 5847, 5, 498, 250, 2, 5847,
	5848, 7, 68, 2, 2, 5848, 5849, 7, 7, 2, 2, 5849, 5850, 5, 478, 240, 2,
	5850, 5851, 7, 8, 2, 2, 5851, 5852, 7, 61, 2, 2, 5852, 5956, 3, 2, 2, 2,
	5853, 5854, 7, 68, 2, 2, 5854, 5855, 7, 7, 2, 2, 5855, 5856, 5, 478, 240,
	2, 5856, 5857, 7, 8, 2, 2, 5857, 5858, 5, 498, 250, 2, 5858, 5956, 3, 2,
	2, 2, 5859, 5860, 7, 69, 2, 2, 5860, 5861, 7, 7, 2, 2, 5861, 5863, 6, 412,
	230, 2, 5862, 5864, 5, 476, 239, 2, 5863, 5862, 3, 2, 2, 2, 5863, 5864,
	3, 2, 2, 2, 5864, 5865, 3, 2, 2, 2, 5865, 5867, 7, 61, 2, 2, 5866, 5868,
	5, 478, 240, 2, 5867, 5866, 3, 2, 2, 2, 5867, 5868, 3, 2, 2, 2, 5868, 5869,
	3, 2, 2, 2, 5869, 5871, 7, 61, 2, 2, 5870, 5872, 5, 478, 240, 2, 5871,
	5870, 3, 2, 2, 2, 5871, 5872, 3, 2, 2, 2, 5872, 5873, 3, 2, 2, 2, 5873,
	5874, 7, 8, 2, 2, 5874, 5956, 5, 498, 250, 2, 5875, 5876, 7, 69, 2, 2,
	5876, 5877, 7, 7, 2, 2, 5877, 5878, 7, 64, 2, 2, 5878, 5879, 5, 670, 336,
	2, 5879, 5881, 7, 61, 2, 2, 5880, 5882, 5, 478, 240, 2, 5881, 5880, 3,
	2, 2, 2, 5881, 5882, 3, 2, 2, 2, 5882, 5883, 3, 2, 2, 2, 5883, 5885, 7,
	61, 2, 2, 5884, 5886, 5, 478, 240, 2, 5885, 5884, 3, 2, 2, 2, 5885, 5886,
	3, 2, 2, 2, 5886, 5887, 3, 2, 2, 2, 5887, 5888, 7, 8, 2, 2, 5888, 5889,
	5, 498, 250, 2, 5889, 5956, 3, 2, 2, 2, 5890, 5891, 7, 69, 2, 2, 5891,
	5892, 7, 7, 2, 2, 5892, 5894, 5, 612, 307, 2, 5893, 5895, 5, 478, 240,
	2, 5894, 5893, 3, 2, 2, 2, 5894, 5895, 3, 2, 2, 2, 5895, 5896, 3, 2, 2,
	2, 5896, 5898, 7, 61, 2, 2, 5897, 5899, 5, 478, 240, 2, 5898, 5897, 3,
	2, 2, 2, 5898, 5899, 3, 2, 2, 2, 5899, 5900, 3, 2, 2, 2, 5900, 5901, 7,
	8, 2, 2, 5901, 5902, 5, 498, 250, 2, 5902, 5956, 3, 2, 2, 2, 5903, 5904,
	7, 69, 2, 2, 5904, 5905, 7, 7, 2, 2, 5905, 5906, 6, 412, 231, 2, 5906,
	5907, 5, 272, 137, 2, 5907, 5908, 7, 38, 2, 2, 5908, 5909, 5, 478, 240,
	2, 5909, 5910, 7, 8, 2, 2, 5910, 5911, 5, 498, 250, 2, 5911, 5956, 3, 2,
	2, 2, 5912, 5913, 7, 69, 2, 2, 5913, 5914, 7, 7, 2, 2, 5914, 5915, 7, 64,
	2, 2, 5915, 5916, 5, 838, 420, 2, 5916, 5917, 7, 38, 2, 2, 5917, 5918,
	5, 478, 240, 2, 5918, 5919, 7, 8, 2, 2, 5919, 5920, 5, 498, 250, 2, 5920,
	5956, 3, 2, 2, 2, 5921, 5922, 7, 69, 2, 2, 5922, 5923, 7, 7, 2, 2, 5923,
	5924, 5, 830, 416, 2, 5924, 5925, 7, 38, 2, 2, 5925, 5926, 5, 478, 240,
	2, 5926, 5927, 7, 8, 2, 2, 5927, 5928, 5, 498, 250, 2, 5928, 5956, 3, 2,
	2, 2, 5929, 5930, 7, 69, 2, 2, 5930, 5931, 7, 7, 2, 2, 5931, 5932, 6, 412,
	232, 2, 5932, 5933, 5, 272, 137, 2, 5933, 5934, 7, 70, 2, 2, 5934, 5935,
	5, 462, 232, 2, 5935, 5936, 7, 8, 2, 2, 5936, 5937, 5, 498, 250, 2, 5937,
	5956, 3, 2, 2, 2, 5938, 5939, 7, 69, 2, 2, 5939, 5940, 7, 7, 2, 2, 5940,
	5941, 7, 64, 2, 2, 5941, 5942, 5, 838, 420, 2, 5942, 5943, 7, 70, 2, 2,
	5943, 5944, 5, 462, 232, 2, 5944, 5945, 7, 8, 2, 2, 5945, 5946, 5, 498,
	250, 2, 5946, 5956, 3, 2, 2, 2, 5947, 5948, 7, 69, 2, 2, 5948, 5949, 7,
	7, 2, 2, 5949, 5950, 5, 830, 416, 2, 5950, 5951, 7, 70, 2, 2, 5951, 5952,
	5, 462, 232, 2, 5952, 5953, 7, 8, 2, 2, 5953, 5954, 5, 498, 250, 2, 5954,
	5956, 3, 2, 2, 2, 5955, 5845, 3, 2, 2, 2, 5955, 5853, 3, 2, 2, 2, 5955,
	5859, 3, 2, 2, 2, 5955, 5875, 3, 2, 2, 2, 5955, 5890, 3, 2, 2, 2, 5955,
	5903, 3, 2, 2, 2, 5955, 5912, 3, 2, 2, 2, 5955, 5921, 3, 2, 2, 2, 5955,
	5929, 3, 2, 2, 2, 5955, 5938, 3, 2, 2, 2, 5955, 5947, 3, 2, 2, 2, 5956,
	823, 3, 2, 2, 2, 5957, 5958, 7, 67, 2, 2, 5958, 5959, 5, 500, 251, 2, 5959,
	5960, 7, 68, 2, 2, 5960, 5961, 7, 7, 2, 2, 5961, 5962, 5, 482, 242, 2,
	5962, 5963, 7, 8, 2, 2, 5963, 5964, 7, 61, 2, 2, 5964, 6068, 3, 2, 2, 2,
	5965, 5966, 7, 68, 2, 2, 5966, 5967, 7, 7, 2, 2, 5967, 5968, 5, 482, 242,
	2, 5968, 5969, 7, 8, 2, 2, 5969, 5970, 5, 500, 251, 2, 5970, 6068, 3, 2,
	2, 2, 5971, 5972, 7, 69, 2, 2, 5972, 5973, 7, 7, 2, 2, 5973, 5975, 6, 413,
	233, 2, 5974, 5976, 5, 480, 241, 2, 5975, 5974, 3, 2, 2, 2, 5975, 5976,
	3, 2, 2, 2, 5976, 5977, 3, 2, 2, 2, 5977, 5979, 7, 61, 2, 2, 5978, 5980,
	5, 482, 242, 2, 5979, 5978, 3, 2, 2, 2, 5979, 5980, 3, 2, 2, 2, 5980, 5981,
	3, 2, 2, 2, 5981, 5983, 7, 61, 2, 2, 5982, 5984, 5, 482, 242, 2, 5983,
	5982, 3, 2, 2, 2, 5983, 5984, 3, 2, 2, 2, 5984, 5985, 3, 2, 2, 2, 5985,
	5986, 7, 8, 2, 2, 5986, 6068, 5, 500, 251, 2, 5987, 5988, 7, 69, 2, 2,
	5988, 5989, 7, 7, 2, 2, 5989, 5990, 7, 64, 2, 2, 5990, 5991, 5, 674, 338,
	2, 5991, 5993, 7, 61, 2, 2, 5992, 5994, 5, 482, 242, 2, 5993, 5992, 3,
	2, 2, 2, 5993, 5994, 3, 2, 2, 2, 5994, 5995, 3, 2, 2, 2, 5995, 5997, 7,
	61, 2, 2, 5996, 5998, 5, 482, 242, 2, 5997, 5996, 3, 2, 2, 2, 5997, 5998,
	3, 2, 2, 2, 5998, 5999, 3, 2, 2, 2, 5999, 6000, 7, 8, 2, 2, 6000, 6001,
	5, 500, 251, 2, 6001, 6068, 3, 2, 2, 2, 6002, 6003, 7, 69, 2, 2, 6003,
	6004, 7, 7, 2, 2, 6004, 6006, 5, 616, 309, 2, 6005, 6007, 5, 482, 242,
	2, 6006, 6005, 3, 2, 2, 2, 6006, 6007, 3, 2, 2, 2, 6007, 6008, 3, 2, 2,
	2, 6008, 6010, 7, 61, 2, 2, 6009, 6011, 5, 482, 242, 2, 6010, 6009, 3,
	2, 2, 2, 6010, 6011, 3, 2, 2, 2, 6011, 6012, 3, 2, 2, 2, 6012, 6013, 7,
	8, 2, 2, 6013, 6014, 5, 500, 251, 2, 6014, 6068, 3, 2, 2, 2, 6015, 6016,
	7, 69, 2, 2, 6016, 6017, 7, 7, 2, 2, 6017, 6018, 6, 413, 234, 2, 6018,
	6019, 5, 274, 138, 2, 6019, 6020, 7, 38, 2, 2, 6020, 6021, 5, 482, 242,
	2, 6021, 6022, 7, 8, 2, 2, 6022, 6023, 5, 500, 251, 2, 6023, 6068, 3, 2,
	2, 2, 6024, 6025, 7, 69, 2, 2, 6025, 6026, 7, 7, 2, 2, 6026, 6027, 7, 64,
	2, 2, 6027, 6028, 5, 840, 421, 2, 6028, 6029, 7, 38, 2, 2, 6029, 6030,
	5, 482, 242, 2, 6030, 6031, 7, 8, 2, 2, 6031, 6032, 5, 500, 251, 2, 6032,
	6068, 3, 2, 2, 2, 6033, 6034, 7, 69, 2, 2, 6034, 6035, 7, 7, 2, 2, 6035,
	6036, 5, 832, 417, 2, 6036, 6037, 7, 38, 2, 2, 6037, 6038, 5, 482, 242,
	2, 6038, 6039, 7, 8, 2, 2, 6039, 6040, 5, 500, 251, 2, 6040, 6068, 3, 2,
	2, 2, 6041, 6042, 7, 69, 2, 2, 6042, 6043, 7, 7, 2, 2, 6043, 6044, 6, 413,
	235, 2, 6044, 6045, 5, 274, 138, 2, 6045, 6046, 7, 70, 2, 2, 6046, 6047,
	5, 466, 234, 2, 6047, 6048, 7, 8, 2, 2, 6048, 6049, 5, 500, 251, 2, 6049,
	6068, 3, 2, 2, 2, 6050, 6051, 7, 69, 2, 2, 6051, 6052, 7, 7, 2, 2, 6052,
	6053, 7, 64, 2, 2, 6053, 6054, 5, 840, 421, 2, 6054, 6055, 7, 70, 2, 2,
	6055, 6056, 5, 466, 234, 2, 6056, 6057, 7, 8, 2, 2, 6057, 6058, 5, 500,
	251, 2, 6058, 6068, 3, 2, 2, 2, 6059, 6060, 7, 69, 2, 2, 6060, 6061, 7,
	7, 2, 2, 6061, 6062, 5, 832, 417, 2, 6062, 6063, 7, 70, 2, 2, 6063, 6064,
	5, 466, 234, 2, 6064, 6065, 7, 8, 2, 2, 6065, 6066, 5, 500, 251, 2, 6066,
	6068, 3, 2, 2, 2, 6067, 5957, 3, 2, 2, 2, 6067, 5965, 3, 2, 2, 2, 6067,
	5971, 3, 2, 2, 2, 6067, 5987, 3, 2, 2, 2, 6067, 6002, 3, 2, 2, 2, 6067,
	6015, 3, 2, 2, 2, 6067, 6024, 3, 2, 2, 2, 6067, 6033, 3, 2, 2, 2, 6067,
	6041, 3, 2, 2, 2, 6067, 6050, 3, 2, 2, 2, 6067, 6059, 3, 2, 2, 2, 6068,
	825, 3, 2, 2, 2, 6069, 6070, 7, 67, 2, 2, 6070, 6071, 5, 502, 252, 2, 6071,
	6072, 7, 68, 2, 2, 6072, 6073, 7, 7, 2, 2, 6073, 6074, 5, 486, 244, 2,
	6074, 6075, 7, 8, 2, 2, 6075, 6076, 7, 61, 2, 2, 6076, 6180, 3, 2, 2, 2,
	6077, 6078, 7, 68, 2, 2, 6078, 6079, 7, 7, 2, 2, 6079, 6080, 5, 486, 244,
	2, 6080, 6081, 7, 8, 2, 2, 6081, 6082, 5, 502, 252, 2, 6082, 6180, 3, 2,
	2, 2, 6083, 6084, 7, 69, 2, 2, 6084, 6085, 7, 7, 2, 2, 6085, 6087, 6, 414,
	236, 2, 6086, 6088, 5, 484, 243, 2, 6087, 6086, 3, 2, 2, 2, 6087, 6088,
	3, 2, 2, 2, 6088, 6089, 3, 2, 2, 2, 6089, 6091, 7, 61, 2, 2, 6090, 6092,
	5, 486, 244, 2, 6091, 6090, 3, 2, 2, 2, 6091, 6092, 3, 2, 2, 2, 6092, 6093,
	3, 2, 2, 2, 6093, 6095, 7, 61, 2, 2, 6094, 6096, 5, 486, 244, 2, 6095,
	6094, 3, 2, 2, 2, 6095, 6096, 3, 2, 2, 2, 6096, 6097, 3, 2, 2, 2, 6097,
	6098, 7, 8, 2, 2, 6098, 6180, 5, 502, 252, 2, 6099, 6100, 7, 69, 2, 2,
	6100, 6101, 7, 7, 2, 2, 6101, 6102, 7, 64, 2, 2, 6102, 6103, 5, 678, 340,
	2, 6103, 6105, 7, 61, 2, 2, 6104, 6106, 5, 486, 244, 2, 6105, 6104, 3,
	2, 2, 2, 6105, 6106, 3, 2, 2, 2, 6106, 6107, 3, 2, 2, 2, 6107, 6109, 7,
	61, 2, 2, 6108, 6110, 5, 486, 244, 2, 6109, 6108, 3, 2, 2, 2, 6109, 6110,
	3, 2, 2, 2, 6110, 6111, 3, 2, 2, 2, 6111, 6112, 7, 8, 2, 2, 6112, 6113,
	5, 502, 252, 2, 6113, 6180, 3, 2, 2, 2, 6114, 6115, 7, 69, 2, 2, 6115,
	6116, 7, 7, 2, 2, 6116, 6118, 5, 620, 311, 2, 6117, 6119, 5, 486, 244,
	2, 6118, 6117, 3, 2, 2, 2, 6118, 6119, 3, 2, 2, 2, 6119, 6120, 3, 2, 2,
	2, 6120, 6122, 7, 61, 2, 2, 6121, 6123, 5, 486, 244, 2, 6122, 6121, 3,
	2, 2, 2, 6122, 6123, 3, 2, 2, 2, 6123, 6124, 3, 2, 2, 2, 6124, 6125, 7,
	8, 2, 2, 6125, 6126, 5, 502, 252, 2, 6126, 6180, 3, 2, 2, 2, 6127, 6128,
	7, 69, 2, 2, 6128, 6129, 7, 7, 2, 2, 6129, 6130, 6, 414, 237, 2, 6130,
	6131, 5, 276, 139, 2, 6131, 6132, 7, 38, 2, 2, 6132, 6133, 5, 486, 244,
	2, 6133, 6134, 7, 8, 2, 2, 6134, 6135, 5, 502, 252, 2, 6135, 6180, 3, 2,
	2, 2, 6136, 6137, 7, 69, 2, 2, 6137, 6138, 7, 7, 2, 2, 6138, 6139, 7, 64,
	2, 2, 6139, 6140, 5, 842, 422, 2, 6140, 6141, 7, 38, 2, 2, 6141, 6142,
	5, 486, 244, 2, 6142, 6143, 7, 8, 2, 2, 6143, 6144, 5, 502, 252, 2, 6144,
	6180, 3, 2, 2, 2, 6145, 6146, 7, 69, 2, 2, 6146, 6147, 7, 7, 2, 2, 6147,
	6148, 5, 834, 418, 2, 6148, 6149, 7, 38, 2, 2, 6149, 6150, 5, 486, 244,
	2, 6150, 6151, 7, 8, 2, 2, 6151, 6152, 5, 502, 252, 2, 6152, 6180, 3, 2,
	2, 2, 6153, 6154, 7, 69, 2, 2, 6154, 6155, 7, 7, 2, 2, 6155, 6156, 6, 414,
	238, 2, 6156, 6157, 5, 276, 139, 2, 6157, 6158, 7, 70, 2, 2, 6158, 6159,
	5, 470, 236, 2, 6159, 6160, 7, 8, 2, 2, 6160, 6161, 5, 502, 252, 2, 6161,
	6180, 3, 2, 2, 2, 6162, 6163, 7, 69, 2, 2, 6163, 6164, 7, 7, 2, 2, 6164,
	6165, 7, 64, 2, 2, 6165, 6166, 5, 842, 422, 2, 6166, 6167, 7, 70, 2, 2,
	6167, 6168, 5, 470, 236, 2, 6168, 6169, 7, 8, 2, 2, 6169, 6170, 5, 502,
	252, 2, 6170, 6180, 3, 2, 2, 2, 6171, 6172, 7, 69, 2, 2, 6172, 6173, 7,
	7, 2, 2, 6173, 6174, 5, 834, 418, 2, 6174, 6175, 7, 70, 2, 2, 6175, 6176,
	5, 470, 236, 2, 6176, 6177, 7, 8, 2, 2, 6177, 6178, 5, 502, 252, 2, 6178,
	6180, 3, 2, 2, 2, 6179, 6069, 3, 2, 2, 2, 6179, 6077, 3, 2, 2, 2, 6179,
	6083, 3, 2, 2, 2, 6179, 6099, 3, 2, 2, 2, 6179, 6114, 3, 2, 2, 2, 6179,
	6127, 3, 2, 2, 2, 6179, 6136, 3, 2, 2, 2, 6179, 6145, 3, 2, 2, 2, 6179,
	6153, 3, 2, 2, 2, 6179, 6162, 3, 2, 2, 2, 6179, 6171, 3, 2, 2, 2, 6180,
	827, 3, 2, 2, 2, 6181, 6182, 5, 624, 313, 2, 6182, 6183, 5, 836, 419, 2,
	6183, 829, 3, 2, 2, 2, 6184, 6185, 5, 624, 313, 2, 6185, 6186, 5, 838,
	420, 2, 6186, 831, 3, 2, 2, 2, 6187, 6188, 5, 624, 313, 2, 6188, 6189,
	5, 840, 421, 2, 6189, 833, 3, 2, 2, 2, 6190, 6191, 5, 624, 313, 2, 6191,
	6192, 5, 842, 422, 2, 6192, 835, 3, 2, 2, 2, 6193, 6196, 5, 20, 11, 2,
	6194, 6196, 5, 698, 350, 2, 6195, 6193, 3, 2, 2, 2, 6195, 6194, 3, 2, 2,
	2, 6196, 837, 3, 2, 2, 2, 6197, 6200, 5, 22, 12, 2, 6198, 6200, 5, 700,
	351, 2, 6199, 6197, 3, 2, 2, 2, 6199, 6198, 3, 2, 2, 2, 6200, 839, 3, 2,
	2, 2, 6201, 6204, 5, 24, 13, 2, 6202, 6204, 5, 702, 352, 2, 6203, 6201,
	3, 2, 2, 2, 6203, 6202, 3, 2, 2, 2, 6204, 841, 3, 2, 2, 2, 6205, 6208,
	5, 26, 14, 2, 6206, 6208, 5, 704, 353, 2, 6207, 6205, 3, 2, 2, 2, 6207,
	6206, 3, 2, 2, 2, 6208, 843, 3, 2, 2, 2, 6209, 6211, 7, 71, 2, 2, 6210,
	6212, 5, 28, 15, 2, 6211, 6210, 3, 2, 2, 2, 6211, 6212, 3, 2, 2, 2, 6212,
	6213, 3, 2, 2, 2, 6213, 6214, 7, 61, 2, 2, 6214, 845, 3, 2, 2, 2, 6215,
	6217, 7, 71, 2, 2, 6216, 6218, 5, 30, 16, 2, 6217, 6216, 3, 2, 2, 2, 6217,
	6218, 3, 2, 2, 2, 6218, 6219, 3, 2, 2, 2, 6219, 6220, 7, 61, 2, 2, 6220,
	847, 3, 2, 2, 2, 6221, 6223, 7, 71, 2, 2, 6222, 6224, 5, 32, 17, 2, 6223,
	6222, 3, 2, 2, 2, 6223, 6224, 3, 2, 2, 2, 6224, 6225, 3, 2, 2, 2, 6225,
	6226, 7, 61, 2, 2, 6226, 849, 3, 2, 2, 2, 6227, 6229, 7, 71, 2, 2, 6228,
	6230, 5, 34, 18, 2, 6229, 6228, 3, 2, 2, 2, 6229, 6230, 3, 2, 2, 2, 6230,
	6231, 3, 2, 2, 2, 6231, 6232, 7, 61, 2, 2, 6232, 851, 3, 2, 2, 2, 6233,
	6235, 7, 72, 2, 2, 6234, 6236, 5, 28, 15, 2, 6235, 6234, 3, 2, 2, 2, 6235,
	6236, 3, 2, 2, 2, 6236, 6237, 3, 2, 2, 2, 6237, 6238, 7, 61, 2, 2, 6238,
	853, 3, 2, 2, 2, 6239, 6241, 7, 72, 2, 2, 6240, 6242, 5, 30, 16, 2, 6241,
	6240, 3, 2, 2, 2, 6241, 6242, 3, 2, 2, 2, 6242, 6243, 3, 2, 2, 2, 6243,
	6244, 7, 61, 2, 2, 6244, 855, 3, 2, 2, 2, 6245, 6247, 7, 72, 2, 2, 6246,
	6248, 5, 32, 17, 2, 6247, 6246, 3, 2, 2, 2, 6247, 6248, 3, 2, 2, 2, 6248,
	6249, 3, 2, 2, 2, 6249, 6250, 7, 61, 2, 2, 6250, 857, 3, 2, 2, 2, 6251,
	6253, 7, 72, 2, 2, 6252, 6254, 5, 34, 18, 2, 6253, 6252, 3, 2, 2, 2, 6253,
	6254, 3, 2, 2, 2, 6254, 6255, 3, 2, 2, 2, 6255, 6256, 7, 61, 2, 2, 6256,
	859, 3, 2, 2, 2, 6257, 6259, 7, 73, 2, 2, 6258, 6260, 5, 474, 238, 2, 6259,
	6258, 3, 2, 2, 2, 6259, 6260, 3, 2, 2, 2, 6260, 6261, 3, 2, 2, 2, 6261,
	6262, 7, 61, 2, 2, 6262, 861, 3, 2, 2, 2, 6263, 6265, 7, 73, 2, 2, 6264,
	6266, 5, 478, 240, 2, 6265, 6264, 3, 2, 2, 2, 6265, 6266, 3, 2, 2, 2, 6266,
	6267, 3, 2, 2, 2, 6267, 6268, 7, 61, 2, 2, 6268, 863, 3, 2, 2, 2, 6269,
	6271, 7, 73, 2, 2, 6270, 6272, 5, 482, 242, 2, 6271, 6270, 3, 2, 2, 2,
	6271, 6272, 3, 2, 2, 2, 6272, 6273, 3, 2, 2, 2, 6273, 6274, 7, 61, 2, 2,
	6274, 865, 3, 2, 2, 2, 6275, 6277, 7, 73, 2, 2, 6276, 6278, 5, 486, 244,
	2, 6277, 6276, 3, 2, 2, 2, 6277, 6278, 3, 2, 2, 2, 6278, 6279, 3, 2, 2,
	2, 6279, 6280, 7, 61, 2, 2, 6280, 867, 3, 2, 2, 2, 6281, 6282, 7, 74, 2,
	2, 6282, 6283, 7, 7, 2, 2, 6283, 6284, 5, 474, 238, 2, 6284, 6285, 7, 8,
	2, 2, 6285, 6286, 5, 488, 245, 2, 6286, 869, 3, 2, 2, 2, 6287, 6288, 7,
	74, 2, 2, 6288, 6289, 7, 7, 2, 2, 6289, 6290, 5, 478, 240, 2, 6290, 6291,
	7, 8, 2, 2, 6291, 6292, 5, 490, 246, 2, 6292, 871, 3, 2, 2, 2, 6293, 6294,
	7, 74, 2, 2, 6294, 6295, 7, 7, 2, 2, 6295, 6296, 5, 482, 242, 2, 6296,
	6297, 7, 8, 2, 2, 6297, 6298, 5, 492, 247, 2, 6298, 873, 3, 2, 2, 2, 6299,
	6300, 7, 74, 2, 2, 6300, 6301, 7, 7, 2, 2, 6301, 6302, 5, 486, 244, 2,
	6302, 6303, 7, 8, 2, 2, 6303, 6304, 5, 494, 248, 2, 6304, 875, 3, 2, 2,
	2, 6305, 6306, 7, 74, 2, 2, 6306, 6307, 7, 7, 2, 2, 6307, 6308, 5, 474,
	238, 2, 6308, 6309, 7, 8, 2, 2, 6309, 6310, 5, 496, 249, 2, 6310, 877,
	3, 2, 2, 2, 6311, 6312, 7, 74, 2, 2, 6312, 6313, 7, 7, 2, 2, 6313, 6314,
	5, 478, 240, 2, 6314, 6315, 7, 8, 2, 2, 6315, 6316, 5, 498, 250, 2, 6316,
	879, 3, 2, 2, 2, 6317, 6318, 7, 74, 2, 2, 6318, 6319, 7, 7, 2, 2, 6319,
	6320, 5, 482, 242, 2, 6320, 6321, 7, 8, 2, 2, 6321, 6322, 5, 500, 251,
	2, 6322, 881, 3, 2, 2, 2, 6323, 6324, 7, 74, 2, 2, 6324, 6325, 7, 7, 2,
	2, 6325, 6326, 5, 486, 244, 2, 6326, 6327, 7, 8, 2, 2, 6327, 6328, 5, 502,
	252, 2, 6328, 883, 3, 2, 2, 2, 6329, 6330, 7, 75, 2, 2, 6330, 6331, 7,
	7, 2, 2, 6331, 6332, 5, 474, 238, 2, 6332, 6333, 7, 8, 2, 2, 6333, 6334,
	5, 900, 451, 2, 6334, 885, 3, 2, 2, 2, 6335, 6336, 7, 75, 2, 2, 6336, 6337,
	7, 7, 2, 2, 6337, 6338, 5, 478, 240, 2, 6338, 6339, 7, 8, 2, 2, 6339, 6340,
	5, 902, 452, 2, 6340, 887, 3, 2, 2, 2, 6341, 6342, 7, 75, 2, 2, 6342, 6343,
	7, 7, 2, 2, 6343, 6344, 5, 482, 242, 2, 6344, 6345, 7, 8, 2, 2, 6345, 6346,
	5, 904, 453, 2, 6346, 889, 3, 2, 2, 2, 6347, 6348, 7, 75, 2, 2, 6348, 6349,
	7, 7, 2, 2, 6349, 6350, 5, 486, 244, 2, 6350, 6351, 7, 8, 2, 2, 6351, 6352,
	5, 906, 454, 2, 6352, 891, 3, 2, 2, 2, 6353, 6354, 7, 75, 2, 2, 6354, 6355,
	7, 7, 2, 2, 6355, 6356, 5, 474, 238, 2, 6356, 6357, 7, 8, 2, 2, 6357, 6358,
	5, 908, 455, 2, 6358, 893, 3, 2, 2, 2, 6359, 6360, 7, 75, 2, 2, 6360, 6361,
	7, 7, 2, 2, 6361, 6362, 5, 478, 240, 2, 6362, 6363, 7, 8, 2, 2, 6363, 6364,
	5, 910, 456, 2, 6364, 895, 3, 2, 2, 2, 6365, 6366, 7, 75, 2, 2, 6366, 6367,
	7, 7, 2, 2, 6367, 6368, 5, 482, 242, 2, 6368, 6369, 7, 8, 2, 2, 6369, 6370,
	5, 912, 457, 2, 6370, 897, 3, 2, 2, 2, 6371, 6372, 7, 75, 2, 2, 6372, 6373,
	7, 7, 2, 2, 6373, 6374, 5, 486, 244, 2, 6374, 6375, 7, 8, 2, 2, 6375, 6376,
	5, 914, 458, 2, 6376, 899, 3, 2, 2, 2, 6377, 6381, 7, 13, 2, 2, 6378, 6380,
	5, 916, 459, 2, 6379, 6378, 3, 2, 2, 2, 6380, 6383, 3, 2, 2, 2, 6381, 6379,
	3, 2, 2, 2, 6381, 6382, 3, 2, 2, 2, 6382, 6384, 3, 2, 2, 2, 6383, 6381,
	3, 2, 2, 2, 6384, 6402, 7, 109, 2, 2, 6385, 6389, 7, 13, 2, 2, 6386, 6388,
	5, 916, 459, 2, 6387, 6386, 3, 2, 2, 2, 6388, 6391, 3, 2, 2, 2, 6389, 6387,
	3, 2, 2, 2, 6389, 6390, 3, 2, 2, 2, 6390, 6392, 3, 2, 2, 2, 6391, 6389,
	3, 2, 2, 2, 6392, 6396, 5, 932, 467, 2, 6393, 6395, 5, 916, 459, 2, 6394,
	6393, 3, 2, 2, 2, 6395, 6398, 3, 2, 2, 2, 6396, 6394, 3, 2, 2, 2, 6396,
	6397, 3, 2, 2, 2, 6397, 6399, 3, 2, 2, 2, 6398, 6396, 3, 2, 2, 2, 6399,
	6400, 7, 109, 2, 2, 6400, 6402, 3, 2, 2, 2, 6401, 6377, 3, 2, 2, 2, 6401,
	6385, 3, 2, 2, 2, 6402, 901, 3, 2, 2, 2, 6403, 6407, 7, 13, 2, 2, 6404,
	6406, 5, 918, 460, 2, 6405, 6404, 3, 2, 2, 2, 6406, 6409, 3, 2, 2, 2, 6407,
	6405, 3, 2, 2, 2, 6407, 6408, 3, 2, 2, 2, 6408, 6410, 3, 2, 2, 2, 6409,
	6407, 3, 2, 2, 2, 6410, 6428, 7, 109, 2, 2, 6411, 6415, 7, 13, 2, 2, 6412,
	6414, 5, 918, 460, 2, 6413, 6412, 3, 2, 2, 2, 6414, 6417, 3, 2, 2, 2, 6415,
	6413, 3, 2, 2, 2, 6415, 6416, 3, 2, 2, 2, 6416, 6418, 3, 2, 2, 2, 6417,
	6415, 3, 2, 2, 2, 6418, 6422, 5, 934, 468, 2, 6419, 6421, 5, 918, 460,
	2, 6420, 6419, 3, 2, 2, 2, 6421, 6424, 3, 2, 2, 2, 6422, 6420, 3, 2, 2,
	2, 6422, 6423, 3, 2, 2, 2, 6423, 6425, 3, 2, 2, 2, 6424, 6422, 3, 2, 2,
	2, 6425, 6426, 7, 109, 2, 2, 6426, 6428, 3, 2, 2, 2, 6427, 6403, 3, 2,
	2, 2, 6427, 6411, 3, 2, 2, 2, 6428, 903, 3, 2, 2, 2, 6429, 6433, 7, 13,
	2, 2, 6430, 6432, 5, 920, 461, 2, 6431, 6430, 3, 2, 2, 2, 6432, 6435, 3,
	2, 2, 2, 6433, 6431, 3, 2, 2, 2, 6433, 6434, 3, 2, 2, 2, 6434, 6436, 3,
	2, 2, 2, 6435, 6433, 3, 2, 2, 2, 6436, 6454, 7, 109, 2, 2, 6437, 6441,
	7, 13, 2, 2, 6438, 6440, 5, 920, 461, 2, 6439, 6438, 3, 2, 2, 2, 6440,
	6443, 3, 2, 2, 2, 6441, 6439, 3, 2, 2, 2, 6441, 6442, 3, 2, 2, 2, 6442,
	6444, 3, 2, 2, 2, 6443, 6441, 3, 2, 2, 2, 6444, 6448, 5, 936, 469, 2, 6445,
	6447, 5, 920, 461, 2, 6446, 6445, 3, 2, 2, 2, 6447, 6450, 3, 2, 2, 2, 6448,
	6446, 3, 2, 2, 2, 6448, 6449, 3, 2, 2, 2, 6449, 6451, 3, 2, 2, 2, 6450,
	6448, 3, 2, 2, 2, 6451, 6452, 7, 109, 2, 2, 6452, 6454, 3, 2, 2, 2, 6453,
	6429, 3, 2, 2, 2, 6453, 6437, 3, 2, 2, 2, 6454, 905, 3, 2, 2, 2, 6455,
	6459, 7, 13, 2, 2, 6456, 6458, 5, 922, 462, 2, 6457, 6456, 3, 2, 2, 2,
	6458, 6461, 3, 2, 2, 2, 6459, 6457, 3, 2, 2, 2, 6459, 6460, 3, 2, 2, 2,
	6460, 6462, 3, 2, 2, 2, 6461, 6459, 3, 2, 2, 2, 6462, 6480, 7, 109, 2,
	2, 6463, 6467, 7, 13, 2, 2, 6464, 6466, 5, 922, 462, 2, 6465, 6464, 3,
	2, 2, 2, 6466, 6469, 3, 2, 2, 2, 6467, 6465, 3, 2, 2, 2, 6467, 6468, 3,
	2, 2, 2, 6468, 6470, 3, 2, 2, 2, 6469, 6467, 3, 2, 2, 2, 6470, 6474, 5,
	938, 470, 2, 6471, 6473, 5, 922, 462, 2, 6472, 6471, 3, 2, 2, 2, 6473,
	6476, 3, 2, 2, 2, 6474, 6472, 3, 2, 2, 2, 6474, 6475, 3, 2, 2, 2, 6475,
	6477, 3, 2, 2, 2, 6476, 6474, 3, 2, 2, 2, 6477, 6478, 7, 109, 2, 2, 6478,
	6480, 3, 2, 2, 2, 6479, 6455, 3, 2, 2, 2, 6479, 6463, 3, 2, 2, 2, 6480,
	907, 3, 2, 2, 2, 6481, 6485, 7, 13, 2, 2, 6482, 6484, 5, 924, 463, 2, 6483,
	6482, 3, 2, 2, 2, 6484, 6487, 3, 2, 2, 2, 6485, 6483, 3, 2, 2, 2, 6485,
	6486, 3, 2, 2, 2, 6486, 6488, 3, 2, 2, 2, 6487, 6485, 3, 2, 2, 2, 6488,
	6506, 7, 109, 2, 2, 6489, 6493, 7, 13, 2, 2, 6490, 6492, 5, 924, 463, 2,
	6491, 6490, 3, 2, 2, 2, 6492, 6495, 3, 2, 2, 2, 6493, 6491, 3, 2, 2, 2,
	6493, 6494, 3, 2, 2, 2, 6494, 6496, 3, 2, 2, 2, 6495, 6493, 3, 2, 2, 2,
	6496, 6500, 5, 940, 471, 2, 6497, 6499, 5, 924, 463, 2, 6498, 6497, 3,
	2, 2, 2, 6499, 6502, 3, 2, 2, 2, 6500, 6498, 3, 2, 2, 2, 6500, 6501, 3,
	2, 2, 2, 6501, 6503, 3, 2, 2, 2, 6502, 6500, 3, 2, 2, 2, 6503, 6504, 7,
	109, 2, 2, 6504, 6506, 3, 2, 2, 2, 6505, 6481, 3, 2, 2, 2, 6505, 6489,
	3, 2, 2, 2, 6506, 909, 3, 2, 2, 2, 6507, 6511, 7, 13, 2, 2, 6508, 6510,
	5, 926, 464, 2, 6509, 6508, 3, 2, 2, 2, 6510, 6513, 3, 2, 2, 2, 6511, 6509,
	3, 2, 2, 2, 6511, 6512, 3, 2, 2, 2, 6512, 6514, 3, 2, 2, 2, 6513, 6511,
	3, 2, 2, 2, 6514, 6532, 7, 109, 2, 2, 6515, 6519, 7, 13, 2, 2, 6516, 6518,
	5, 926, 464, 2, 6517, 6516, 3, 2, 2, 2, 6518, 6521, 3, 2, 2, 2, 6519, 6517,
	3, 2, 2, 2, 6519, 6520, 3, 2, 2, 2, 6520, 6522, 3, 2, 2, 2, 6521, 6519,
	3, 2, 2, 2, 6522, 6526, 5, 942, 472, 2, 6523, 6525, 5, 926, 464, 2, 6524,
	6523, 3, 2, 2, 2, 6525, 6528, 3, 2, 2, 2, 6526, 6524, 3, 2, 2, 2, 6526,
	6527, 3, 2, 2, 2, 6527, 6529, 3, 2, 2, 2, 6528, 6526, 3, 2, 2, 2, 6529,
	6530, 7, 109, 2, 2, 6530, 6532, 3, 2, 2, 2, 6531, 6507, 3, 2, 2, 2, 6531,
	6515, 3, 2, 2, 2, 6532, 911, 3, 2, 2, 2, 6533, 6537, 7, 13, 2, 2, 6534,
	6536, 5, 928, 465, 2, 6535, 6534, 3, 2, 2, 2, 6536, 6539, 3, 2, 2, 2, 6537,
	6535, 3, 2, 2, 2, 6537, 6538, 3, 2, 2, 2, 6538, 6540, 3, 2, 2, 2, 6539,
	6537, 3, 2, 2, 2, 6540, 6558, 7, 109, 2, 2, 6541, 6545, 7, 13, 2, 2, 6542,
	6544, 5, 928, 465, 2, 6543, 6542, 3, 2, 2, 2, 6544, 6547, 3, 2, 2, 2, 6545,
	6543, 3, 2, 2, 2, 6545, 6546, 3, 2, 2, 2, 6546, 6548, 3, 2, 2, 2, 6547,
	6545, 3, 2, 2, 2, 6548, 6552, 5, 944, 473, 2, 6549, 6551, 5, 928, 465,
	2, 6550, 6549, 3, 2, 2, 2, 6551, 6554, 3, 2, 2, 2, 6552, 6550, 3, 2, 2,
	2, 6552, 6553, 3, 2, 2, 2, 6553, 6555, 3, 2, 2, 2, 6554, 6552, 3, 2, 2,
	2, 6555, 6556, 7, 109, 2, 2, 6556, 6558, 3, 2, 2, 2, 6557, 6533, 3, 2,
	2, 2, 6557, 6541, 3, 2, 2, 2, 6558, 913, 3, 2, 2, 2, 6559, 6563, 7, 13,
	2, 2, 6560, 6562, 5, 930, 466, 2, 6561, 6560, 3, 2, 2, 2, 6562, 6565, 3,
	2, 2, 2, 6563, 6561, 3, 2, 2, 2, 6563, 6564, 3, 2, 2, 2, 6564, 6566, 3,
	2, 2, 2, 6565, 6563, 3, 2, 2, 2, 6566, 6584, 7, 109, 2, 2, 6567, 6571,
	7, 13, 2, 2, 6568, 6570, 5, 930, 466, 2, 6569, 6568, 3, 2, 2, 2, 6570,
	6573, 3, 2, 2, 2, 6571, 6569, 3, 2, 2, 2, 6571, 6572, 3, 2, 2, 2, 6572,
	6574, 3, 2, 2, 2, 6573, 6571, 3, 2, 2, 2, 6574, 6578, 5, 946, 474, 2, 6575,
	6577, 5, 930, 466, 2, 6576, 6575, 3, 2, 2, 2, 6577, 6580, 3, 2, 2, 2, 6578,
	6576, 3, 2, 2, 2, 6578, 6579, 3, 2, 2, 2, 6579, 6581, 3, 2, 2, 2, 6580,
	6578, 3, 2, 2, 2, 6581, 6582, 7, 109, 2, 2, 6582, 6584, 3, 2, 2, 2, 6583,
	6559, 3, 2, 2, 2, 6583, 6567, 3, 2, 2, 2, 6584, 915, 3, 2, 2, 2, 6585,
	6586, 7, 76, 2, 2, 6586, 6587, 5, 474, 238, 2, 6587, 6589, 7, 14, 2, 2,
	6588, 6590, 5, 576, 289, 2, 6589, 6588, 3, 2, 2, 2, 6589, 6590, 3, 2, 2,
	2, 6590, 917, 3, 2, 2, 2, 6591, 6592, 7, 76, 2, 2, 6592, 6593, 5, 478,
	240, 2, 6593, 6595, 7, 14, 2, 2, 6594, 6596, 5, 578, 290, 2, 6595, 6594,
	3, 2, 2, 2, 6595, 6596, 3, 2, 2, 2, 6596, 919, 3, 2, 2, 2, 6597, 6598,
	7, 76, 2, 2, 6598, 6599, 5, 482, 242, 2, 6599, 6601, 7, 14, 2, 2, 6600,
	6602, 5, 580, 291, 2, 6601, 6600, 3, 2, 2, 2, 6601, 6602, 3, 2, 2, 2, 6602,
	921, 3, 2, 2, 2, 6603, 6604, 7, 76, 2, 2, 6604, 6605, 5, 486, 244, 2, 6605,
	6607, 7, 14, 2, 2, 6606, 6608, 5, 582, 292, 2, 6607, 6606, 3, 2, 2, 2,
	6607, 6608, 3, 2, 2, 2, 6608, 923, 3, 2, 2, 2, 6609, 6610, 7, 76, 2, 2,
	6610, 6611, 5, 474, 238, 2, 6611, 6613, 7, 14, 2, 2, 6612, 6614, 5, 584,
	293, 2, 6613, 6612, 3, 2, 2, 2, 6613, 6614, 3, 2, 2, 2, 6614, 925, 3, 2,
	2, 2, 6615, 6616, 7, 76, 2, 2, 6616, 6617, 5, 478, 240, 2, 6617, 6619,
	7, 14, 2, 2, 6618, 6620, 5, 586, 294, 2, 6619, 6618, 3, 2, 2, 2, 6619,
	6620, 3, 2, 2, 2, 6620, 927, 3, 2, 2, 2, 6621, 6622, 7, 76, 2, 2, 6622,
	6623, 5, 482, 242, 2, 6623, 6625, 7, 14, 2, 2, 6624, 6626, 5, 588, 295,
	2, 6625, 6624, 3, 2, 2, 2, 6625, 6626, 3, 2, 2, 2, 6626, 929, 3, 2, 2,
	2, 6627, 6628, 7, 76, 2, 2, 6628, 6629, 5, 486, 244, 2, 6629, 6631, 7,
	14, 2, 2, 6630, 6632, 5, 590, 296, 2, 6631, 6630, 3, 2, 2, 2, 6631, 6632,
	3, 2, 2, 2, 6632, 931, 3, 2, 2, 2, 6633, 6634, 7, 77, 2, 2, 6634, 6636,
	7, 14, 2, 2, 6635, 6637, 5, 576, 289, 2, 6636, 6635, 3, 2, 2, 2, 6636,
	6637, 3, 2, 2, 2, 6637, 933, 3, 2, 2, 2, 6638, 6639, 7, 77, 2, 2, 6639,
	6641, 7, 14, 2, 2, 6640, 6642, 5, 578, 290, 2, 6641, 6640, 3, 2, 2, 2,
	6641, 6642, 3, 2, 2, 2, 6642, 935, 3, 2, 2, 2, 6643, 6644, 7, 77, 2, 2,
	6644, 6646, 7, 14, 2, 2, 6645, 6647, 5, 580, 291, 2, 6646, 6645, 3, 2,
	2, 2, 6646, 6647, 3, 2, 2, 2, 6647, 937, 3, 2, 2, 2, 6648, 6649, 7, 77,
	2, 2, 6649, 6651, 7, 14, 2, 2, 6650, 6652, 5, 582, 292, 2, 6651, 6650,
	3, 2, 2, 2, 6651, 6652, 3, 2, 2, 2, 6652, 939, 3, 2, 2, 2, 6653, 6654,
	7, 77, 2, 2, 6654, 6656, 7, 14, 2, 2, 6655, 6657, 5, 584, 293, 2, 6656,
	6655, 3, 2, 2, 2, 6656, 6657, 3, 2, 2, 2, 6657, 941, 3, 2, 2, 2, 6658,
	6659, 7, 77, 2, 2, 6659, 6661, 7, 14, 2, 2, 6660, 6662, 5, 586, 294, 2,
	6661, 6660, 3, 2, 2, 2, 6661, 6662, 3, 2, 2, 2, 6662, 943, 3, 2, 2, 2,
	6663, 6664, 7, 77, 2, 2, 6664, 6666, 7, 14, 2, 2, 6665, 6667, 5, 588, 295,
	2, 6666, 6665, 3, 2, 2, 2, 6666, 6667, 3, 2, 2, 2, 6667, 945, 3, 2, 2,
	2, 6668, 6669, 7, 77, 2, 2, 6669, 6671, 7, 14, 2, 2, 6670, 6672, 5, 590,
	296, 2, 6671, 6670, 3, 2, 2, 2, 6671, 6672, 3, 2, 2, 2, 6672, 947, 3, 2,
	2, 2, 6673, 6674, 5, 28, 15, 2, 6674, 6675, 7, 14, 2, 2, 6675, 6676, 5,
	964, 483, 2, 6676, 949, 3, 2, 2, 2, 6677, 6678, 5, 30, 16, 2, 6678, 6679,
	7, 14, 2, 2, 6679, 6680, 5, 966, 484, 2, 6680, 951, 3, 2, 2, 2, 6681, 6682,
	5, 32, 17, 2, 6682, 6683, 7, 14, 2, 2, 6683, 6684, 5, 968, 485, 2, 6684,
	953, 3, 2, 2, 2, 6685, 6686, 5, 34, 18, 2, 6686, 6687, 7, 14, 2, 2, 6687,
	6688, 5, 970, 486, 2, 6688, 955, 3, 2, 2, 2, 6689, 6690, 5, 28, 15, 2,
	6690, 6691, 7, 14, 2, 2, 6691, 6692, 5, 972, 487, 2, 6692, 957, 3, 2, 2,
	2, 6693, 6694, 5, 30, 16, 2, 6694, 6695, 7, 14, 2, 2, 6695, 6696, 5, 974,
	488, 2, 6696, 959, 3, 2, 2, 2, 6697, 6698, 5, 32, 17, 2, 6698, 6699, 7,
	14, 2, 2, 6699, 6700, 5, 976, 489, 2, 6700, 961, 3, 2, 2, 2, 6701, 6702,
	5, 34, 18, 2, 6702, 6703, 7, 14, 2, 2, 6703, 6704, 5, 978, 490, 2, 6704,
	963, 3, 2, 2, 2, 6705, 6708, 5, 488, 245, 2, 6706, 6708, 5, 1046, 524,
	2, 6707, 6705, 3, 2, 2, 2, 6707, 6706, 3, 2, 2, 2, 6708, 965, 3, 2, 2,
	2, 6709, 6712, 5, 490, 246, 2, 6710, 6712, 5, 1048, 525, 2, 6711, 6709,
	3, 2, 2, 2, 6711, 6710, 3, 2, 2, 2, 6712, 967, 3, 2, 2, 2, 6713, 6716,
	5, 492, 247, 2, 6714, 6716, 5, 1050, 526, 2, 6715, 6713, 3, 2, 2, 2, 6715,
	6714, 3, 2, 2, 2, 6716, 969, 3, 2, 2, 2, 6717, 6720, 5, 494, 248, 2, 6718,
	6720, 5, 1052, 527, 2, 6719, 6717, 3, 2, 2, 2, 6719, 6718, 3, 2, 2, 2,
	6720, 971, 3, 2, 2, 2, 6721, 6724, 5, 496, 249, 2, 6722, 6724, 5, 1046,
	524, 2, 6723, 6721, 3, 2, 2, 2, 6723, 6722, 3, 2, 2, 2, 6724, 973, 3, 2,
	2, 2, 6725, 6728, 5, 498, 250, 2, 6726, 6728, 5, 1048, 525, 2, 6727, 6725,
	3, 2, 2, 2, 6727, 6726, 3, 2, 2, 2, 6728, 975, 3, 2, 2, 2, 6729, 6732,
	5, 500, 251, 2, 6730, 6732, 5, 1050, 526, 2, 6731, 6729, 3, 2, 2, 2, 6731,
	6730, 3, 2, 2, 2, 6732, 977, 3, 2, 2, 2, 6733, 6736, 5, 502, 252, 2, 6734,
	6736, 5, 1052, 527, 2, 6735, 6733, 3, 2, 2, 2, 6735, 6734, 3, 2, 2, 2,
	6736, 979, 3, 2, 2, 2, 6737, 6738, 7, 78, 2, 2, 6738, 6739, 5, 474, 238,
	2, 6739, 6740, 7, 61, 2, 2, 6740, 981, 3, 2, 2, 2, 6741, 6742, 7, 78, 2,
	2, 6742, 6743, 5, 478, 240, 2, 6743, 6744, 7, 61, 2, 2, 6744, 983, 3, 2,
	2, 2, 6745, 6746, 7, 78, 2, 2, 6746, 6747, 5, 482, 242, 2, 6747, 6748,
	7, 61, 2, 2, 6748, 985, 3, 2, 2, 2, 6749, 6750, 7, 78, 2, 2, 6750, 6751,
	5, 486, 244, 2, 6751, 6752, 7, 61, 2, 2, 6752, 987, 3, 2, 2, 2, 6753, 6754,
	7, 79, 2, 2, 6754, 6755, 5, 560, 281, 2, 6755, 6756, 5, 1004, 503, 2, 6756,
	6767, 3, 2, 2, 2, 6757, 6758, 7, 79, 2, 2, 6758, 6759, 5, 560, 281, 2,
	6759, 6760, 5, 1020, 511, 2, 6760, 6767, 3, 2, 2, 2, 6761, 6762, 7, 79,
	2, 2, 6762, 6763, 5, 560, 281, 2, 6763, 6764, 5, 1004, 503, 2, 6764, 6765,
	5, 1020, 511, 2, 6765, 6767, 3, 2, 2, 2, 6766, 6753, 3, 2, 2, 2, 6766,
	6757, 3, 2, 2, 2, 6766, 6761, 3, 2, 2, 2, 6767, 989, 3, 2, 2, 2, 6768,
	6769, 7, 79, 2, 2, 6769, 6770, 5, 562, 282, 2, 6770, 6771, 5, 1006, 504,
	2, 6771, 6782, 3, 2, 2, 2, 6772, 6773, 7, 79, 2, 2, 6773, 6774, 5, 562,
	282, 2, 6774, 6775, 5, 1022, 512, 2, 6775, 6782, 3, 2, 2, 2, 6776, 6777,
	7, 79, 2, 2, 6777, 6778, 5, 562, 282, 2, 6778, 6779, 5, 1006, 504, 2, 6779,
	6780, 5, 1022, 512, 2, 6780, 6782, 3, 2, 2, 2, 6781, 6768, 3, 2, 2, 2,
	6781, 6772, 3, 2, 2, 2, 6781, 6776, 3, 2, 2, 2, 6782, 991, 3, 2, 2, 2,
	6783, 6784, 7, 79, 2, 2, 6784, 6785, 5, 564, 283, 2, 6785, 6786, 5, 1008,
	505, 2, 6786, 6797, 3, 2, 2, 2, 6787, 6788, 7, 79, 2, 2, 6788, 6789, 5,
	564, 283, 2, 6789, 6790, 5, 1024, 513, 2, 6790, 6797, 3, 2, 2, 2, 6791,
	6792, 7, 79, 2, 2, 6792, 6793, 5, 564, 283, 2, 6793, 6794, 5, 1008, 505,
	2, 6794, 6795, 5, 1024, 513, 2, 6795, 6797, 3, 2, 2, 2, 6796, 6783, 3,
	2, 2, 2, 6796, 6787, 3, 2, 2, 2, 6796, 6791, 3, 2, 2, 2, 6797, 993, 3,
	2, 2, 2, 6798, 6799, 7, 79, 2, 2, 6799, 6800, 5, 566, 284, 2, 6800, 6801,
	5, 1010, 506, 2, 6801, 6812, 3, 2, 2, 2, 6802, 6803, 7, 79, 2, 2, 6803,
	6804, 5, 566, 284, 2, 6804, 6805, 5, 1026, 514, 2, 6805, 6812, 3, 2, 2,
	2, 6806, 6807, 7, 79, 2, 2, 6807, 6808, 5, 566, 284, 2, 6808, 6809, 5,
	1010, 506, 2, 6809, 6810, 5, 1026, 514, 2, 6810, 6812, 3, 2, 2, 2, 6811,
	6798, 3, 2, 2, 2, 6811, 6802, 3, 2, 2, 2, 6811, 6806, 3, 2, 2, 2, 6812,
	995, 3, 2, 2, 2, 6813, 6814, 7, 79, 2, 2, 6814, 6815, 5, 568, 285, 2, 6815,
	6816, 5, 1012, 507, 2, 6816, 6827, 3, 2, 2, 2, 6817, 6818, 7, 79, 2, 2,
	6818, 6819, 5, 568, 285, 2, 6819, 6820, 5, 1028, 515, 2, 6820, 6827, 3,
	2, 2, 2, 6821, 6822, 7, 79, 2, 2, 6822, 6823, 5, 568, 285, 2, 6823, 6824,
	5, 1012, 507, 2, 6824, 6825, 5, 1028, 515, 2, 6825, 6827, 3, 2, 2, 2, 6826,
	6813, 3, 2, 2, 2, 6826, 6817, 3, 2, 2, 2, 6826, 6821, 3, 2, 2, 2, 6827,
	997, 3, 2, 2, 2, 6828, 6829, 7, 79, 2, 2, 6829, 6830, 5, 570, 286, 2, 6830,
	6831, 5, 1014, 508, 2, 6831, 6842, 3, 2, 2, 2, 6832, 6833, 7, 79, 2, 2,
	6833, 6834, 5, 570, 286, 2, 6834, 6835, 5, 1030, 516, 2, 6835, 6842, 3,
	2, 2, 2, 6836, 6837, 7, 79, 2, 2, 6837, 6838, 5, 570, 286, 2, 6838, 6839,
	5, 1014, 508, 2, 6839, 6840, 5, 1030, 516, 2, 6840, 6842, 3, 2, 2, 2, 6841,
	6828, 3, 2, 2, 2, 6841, 6832, 3, 2, 2, 2, 6841, 6836, 3, 2, 2, 2, 6842,
	999, 3, 2, 2, 2, 6843, 6844, 7, 79, 2, 2, 6844, 6845, 5, 572, 287, 2, 6845,
	6846, 5, 1016, 509, 2, 6846, 6857, 3, 2, 2, 2, 6847, 6848, 7, 79, 2, 2,
	6848, 6849, 5, 572, 287, 2, 6849, 6850, 5, 1032, 517, 2, 6850, 6857, 3,
	2, 2, 2, 6851, 6852, 7, 79, 2, 2, 6852, 6853, 5, 572, 287, 2, 6853, 6854,
	5, 1016, 509, 2, 6854, 6855, 5, 1032, 517, 2, 6855, 6857, 3, 2, 2, 2, 6856,
	6843, 3, 2, 2, 2, 6856, 6847, 3, 2, 2, 2, 6856, 6851, 3, 2, 2, 2, 6857,
	1001, 3, 2, 2, 2, 6858, 6859, 7, 79, 2, 2, 6859, 6860, 5, 574, 288, 2,
	6860, 6861, 5, 1018, 510, 2, 6861, 6872, 3, 2, 2, 2, 6862, 6863, 7, 79,
	2, 2, 6863, 6864, 5, 574, 288, 2, 6864, 6865, 5, 1034, 518, 2, 6865, 6872,
	3, 2, 2, 2, 6866, 6867, 7, 79, 2, 2, 6867, 6868, 5, 574, 288, 2, 6868,
	6869, 5, 1018, 510, 2, 6869, 6870, 5, 1034, 518, 2, 6870, 6872, 3, 2, 2,
	2, 6871, 6858, 3, 2, 2, 2, 6871, 6862, 3, 2, 2, 2, 6871, 6866, 3, 2, 2,
	2, 6872, 1003, 3, 2, 2, 2, 6873, 6874, 7, 80, 2, 2, 6874, 6875, 7, 7, 2,
	2, 6875, 6876, 5, 1036, 519, 2, 6876, 6877, 7, 8, 2, 2, 6877, 6878, 5,
	560, 281, 2, 6878, 1005, 3, 2, 2, 2, 6879, 6880, 7, 80, 2, 2, 6880, 6881,
	7, 7, 2, 2, 6881, 6882, 5, 1038, 520, 2, 6882, 6883, 7, 8, 2, 2, 6883,
	6884, 5, 562, 282, 2, 6884, 1007, 3, 2, 2, 2, 6885, 6886, 7, 80, 2, 2,
	6886, 6887, 7, 7, 2, 2, 6887, 6888, 5, 1040, 521, 2, 6888, 6889, 7, 8,
	2, 2, 6889, 6890, 5, 564, 283, 2, 6890, 1009, 3, 2, 2, 2, 6891, 6892, 7,
	80, 2, 2, 6892, 6893, 7, 7, 2, 2, 6893, 6894, 5, 1042, 522, 2, 6894, 6895,
	7, 8, 2, 2, 6895, 6896, 5, 566, 284, 2, 6896, 1011, 3, 2, 2, 2, 6897, 6898,
	7, 80, 2, 2, 6898, 6899, 7, 7, 2, 2, 6899, 6900, 5, 1036, 519, 2, 6900,
	6901, 7, 8, 2, 2, 6901, 6902, 5, 568, 285, 2, 6902, 1013, 3, 2, 2, 2, 6903,
	6904, 7, 80, 2, 2, 6904, 6905, 7, 7, 2, 2, 6905, 6906, 5, 1038, 520, 2,
	6906, 6907, 7, 8, 2, 2, 6907, 6908, 5, 570, 286, 2, 6908, 1015, 3, 2, 2,
	2, 6909, 6910, 7, 80, 2, 2, 6910, 6911, 7, 7, 2, 2, 6911, 6912, 5, 1040,
	521, 2, 6912, 6913, 7, 8, 2, 2, 6913, 6914, 5, 572, 287, 2, 6914, 1017,
	3, 2, 2, 2, 6915, 6916, 7, 80, 2, 2, 6916, 6917, 7, 7, 2, 2, 6917, 6918,
	5, 1042, 522, 2, 6918, 6919, 7, 8, 2, 2, 6919, 6920, 5, 574, 288, 2, 6920,
	1019, 3, 2, 2, 2, 6921, 6922, 7, 81, 2, 2, 6922, 6923, 5, 560, 281, 2,
	6923, 1021, 3, 2, 2, 2, 6924, 6925, 7, 81, 2, 2, 6925, 6926, 5, 562, 282,
	2, 6926, 1023, 3, 2, 2, 2, 6927, 6928, 7, 81, 2, 2, 6928, 6929, 5, 564,
	283, 2, 6929, 1025, 3, 2, 2, 2, 6930, 6931, 7, 81, 2, 2, 6931, 6932, 5,
	566, 284, 2, 6932, 1027, 3, 2, 2, 2, 6933, 6934, 7, 81, 2, 2, 6934, 6935,
	5, 568, 285, 2, 6935, 1029, 3, 2, 2, 2, 6936, 6937, 7, 81, 2, 2, 6937,
	6938, 5, 570, 286, 2, 6938, 1031, 3, 2, 2, 2, 6939, 6940, 7, 81, 2, 2,
	6940, 6941, 5, 572, 287, 2, 6941, 1033, 3, 2, 2, 2, 6942, 6943, 7, 81,
	2, 2, 6943, 6944, 5, 574, 288, 2, 6944, 1035, 3, 2, 2, 2, 6945, 6948, 5,
	20, 11, 2, 6946, 6948, 5, 698, 350, 2, 6947, 6945, 3, 2, 2, 2, 6947, 6946,
	3, 2, 2, 2, 6948, 1037, 3, 2, 2, 2, 6949, 6952, 5, 22, 12, 2, 6950, 6952,
	5, 700, 351, 2, 6951, 6949, 3, 2, 2, 2, 6951, 6950, 3, 2, 2, 2, 6952, 1039,
	3, 2, 2, 2, 6953, 6956, 5, 24, 13, 2, 6954, 6956, 5, 702, 352, 2, 6955,
	6953, 3, 2, 2, 2, 6955, 6954, 3, 2, 2, 2, 6956, 1041, 3, 2, 2, 2, 6957,
	6960, 5, 26, 14, 2, 6958, 6960, 5, 704, 353, 2, 6959, 6957, 3, 2, 2, 2,
	6959, 6958, 3, 2, 2, 2, 6960, 1043, 3, 2, 2, 2, 6961, 6962, 7, 82, 2, 2,
	6962, 6963, 7, 61, 2, 2, 6963, 1045, 3, 2, 2, 2, 6964, 6965, 7, 83, 2,
	2, 6965, 6966, 5, 20, 11, 2, 6966, 6967, 7, 7, 2, 2, 6967, 6968, 5, 1072,
	537, 2, 6968, 6969, 7, 8, 2, 2, 6969, 6970, 7, 13, 2, 2, 6970, 6971, 5,
	1104, 553, 2, 6971, 6972, 7, 109, 2, 2, 6972, 1047, 3, 2, 2, 2, 6973, 6974,
	7, 83, 2, 2, 6974, 6975, 5, 22, 12, 2, 6975, 6976, 7, 7, 2, 2, 6976, 6977,
	5, 1072, 537, 2, 6977, 6978, 7, 8, 2, 2, 6978, 6979, 7, 13, 2, 2, 6979,
	6980, 5, 1104, 553, 2, 6980, 6981, 7, 109, 2, 2, 6981, 1049, 3, 2, 2, 2,
	6982, 6983, 7, 83, 2, 2, 6983, 6984, 5, 24, 13, 2, 6984, 6985, 7, 7, 2,
	2, 6985, 6986, 5, 1072, 537, 2, 6986, 6987, 7, 8, 2, 2, 6987, 6988, 7,
	13, 2, 2, 6988, 6989, 5, 1104, 553, 2, 6989, 6990, 7, 109, 2, 2, 6990,
	1051, 3, 2, 2, 2, 6991, 6992, 7, 83, 2, 2, 6992, 6993, 5, 26, 14, 2, 6993,
	6994, 7, 7, 2, 2, 6994, 6995, 5, 1072, 537, 2, 6995, 6996, 7, 8, 2, 2,
	6996, 6997, 7, 13, 2, 2, 6997, 6998, 5, 1104, 553, 2, 6998, 6999, 7, 109,
	2, 2, 6999, 1053, 3, 2, 2, 2, 7000, 7001, 7, 83, 2, 2, 7001, 7002, 5, 20,
	11, 2, 7002, 7003, 7, 7, 2, 2, 7003, 7004, 5, 1072, 537, 2, 7004, 7005,
	7, 8, 2, 2, 7005, 7006, 7, 13, 2, 2, 7006, 7007, 5, 1104, 553, 2, 7007,
	7008, 7, 109, 2, 2, 7008, 7018, 3, 2, 2, 2, 7009, 7010, 7, 83, 2, 2, 7010,
	7011, 7, 7, 2, 2, 7011, 7012, 5, 1072, 537, 2, 7012, 7013, 7, 8, 2, 2,
	7013, 7014, 7, 13, 2, 2, 7014, 7015, 5, 1104, 553, 2, 7015, 7016, 7, 109,
	2, 2, 7016, 7018, 3, 2, 2, 2, 7017, 7000, 3, 2, 2, 2, 7017, 7009, 3, 2,
	2, 2, 7018, 1055, 3, 2, 2, 2, 7019, 7020, 7, 83, 2, 2, 7020, 7021, 5, 22,
	12, 2, 7021, 7022, 7, 7, 2, 2, 7022, 7023, 5, 1072, 537, 2, 7023, 7024,
	7, 8, 2, 2, 7024, 7025, 7, 13, 2, 2, 7025, 7026, 5, 1104, 553, 2, 7026,
	7027, 7, 109, 2, 2, 7027, 7037, 3, 2, 2, 2, 7028, 7029, 7, 83, 2, 2, 7029,
	7030, 7, 7, 2, 2, 7030, 7031, 5, 1072, 537, 2, 7031, 7032, 7, 8, 2, 2,
	7032, 7033, 7, 13, 2, 2, 7033, 7034, 5, 1104, 553, 2, 7034, 7035, 7, 109,
	2, 2, 7035, 7037, 3, 2, 2, 2, 7036, 7019, 3, 2, 2, 2, 7036, 7028, 3, 2,
	2, 2, 7037, 1057, 3, 2, 2, 2, 7038, 7039, 7, 83, 2, 2, 7039, 7040, 5, 24,
	13, 2, 7040, 7041, 7, 7, 2, 2, 7041, 7042, 5, 1072, 537, 2, 7042, 7043,
	7, 8, 2, 2, 7043, 7044, 7, 13, 2, 2, 7044, 7045, 5, 1104, 553, 2, 7045,
	7046, 7, 109, 2, 2, 7046, 7056, 3, 2, 2, 2, 7047, 7048, 7, 83, 2, 2, 7048,
	7049, 7, 7, 2, 2, 7049, 7050, 5, 1072, 537, 2, 7050, 7051, 7, 8, 2, 2,
	7051, 7052, 7, 13, 2, 2, 7052, 7053, 5, 1104, 553, 2, 7053, 7054, 7, 109,
	2, 2, 7054, 7056, 3, 2, 2, 2, 7055, 7038, 3, 2, 2, 2, 7055, 7047, 3, 2,
	2, 2, 7056, 1059, 3, 2, 2, 2, 7057, 7058, 7, 83, 2, 2, 7058, 7059, 5, 26,
	14, 2, 7059, 7060, 7, 7, 2, 2, 7060, 7061, 5, 1072, 537, 2, 7061, 7062,
	7, 8, 2, 2, 7062, 7063, 7, 13, 2, 2, 7063, 7064, 5, 1104, 553, 2, 7064,
	7065, 7, 109, 2, 2, 7065, 7075, 3, 2, 2, 2, 7066, 7067, 7, 83, 2, 2, 7067,
	7068, 7, 7, 2, 2, 7068, 7069, 5, 1072, 537, 2, 7069, 7070, 7, 8, 2, 2,
	7070, 7071, 7, 13, 2, 2, 7071, 7072, 5, 1104, 553, 2, 7072, 7073, 7, 109,
	2, 2, 7073, 7075, 3, 2, 2, 2, 7074, 7057, 3, 2, 2, 2, 7074, 7066, 3, 2,
	2, 2, 7075, 1061, 3, 2, 2, 2, 7076, 7078, 7, 83, 2, 2, 7077, 7079, 5, 20,
	11, 2, 7078, 7077, 3, 2, 2, 2, 7078, 7079, 3, 2, 2, 2, 7079, 7080, 3, 2,
	2, 2, 7080, 7081, 7, 7, 2, 2, 7081, 7082, 5, 1072, 537, 2, 7082, 7083,
	7, 8, 2, 2, 7083, 7084, 7, 13, 2, 2, 7084, 7085, 5, 1104, 553, 2, 7085,
	7086, 7, 109, 2, 2, 7086, 1063, 3, 2, 2, 2, 7087, 7088, 5, 1072, 537, 2,
	7088, 1065, 3, 2, 2, 2, 7089, 7090, 5, 1074, 538, 2, 7090, 1067, 3, 2,
	2, 2, 7091, 7092, 5, 1076, 539, 2, 7092, 1069, 3, 2, 2, 2, 7093, 7094,
	5, 1078, 540, 2, 7094, 1071, 3, 2, 2, 2, 7095, 7106, 3, 2, 2, 2, 7096,
	7106, 5, 1088, 545, 2, 7097, 7106, 5, 1080, 541, 2, 7098, 7099, 5, 1080,
	541, 2, 7099, 7100, 7, 10, 2, 2, 7100, 7106, 3, 2, 2, 2, 7101, 7102, 5,
	1080, 541, 2, 7102, 7103, 7, 10, 2, 2, 7103, 7104, 5, 1088, 545, 2, 7104,
	7106, 3, 2, 2, 2, 7105, 7095, 3, 2, 2, 2, 7105, 7096, 3, 2, 2, 2, 7105,
	7097, 3, 2, 2, 2, 7105, 7098, 3, 2, 2, 2, 7105, 7101, 3, 2, 2, 2, 7106,
	1073, 3, 2, 2, 2, 7107, 7118, 3, 2, 2, 2, 7108, 7118, 5, 1090, 546, 2,
	7109, 7118, 5, 1082, 542, 2, 7110, 7111, 5, 1082, 542, 2, 7111, 7112, 7,
	10, 2, 2, 7112, 7118, 3, 2, 2, 2, 7113, 7114, 5, 1082, 542, 2, 7114, 7115,
	7, 10, 2, 2, 7115, 7116, 5, 1090, 546, 2, 7116, 7118, 3, 2, 2, 2, 7117,
	7107, 3, 2, 2, 2, 7117, 7108, 3, 2, 2, 2, 7117, 7109, 3, 2, 2, 2, 7117,
	7110, 3, 2, 2, 2, 7117, 7113, 3, 2, 2, 2, 7118, 1075, 3, 2, 2, 2, 7119,
	7130, 3, 2, 2, 2, 7120, 7130, 5, 1092, 547, 2, 7121, 7130, 5, 1084, 543,
	2, 7122, 7123, 5, 1084, 543, 2, 7123, 7124, 7, 10, 2, 2, 7124, 7130, 3,
	2, 2, 2, 7125, 7126, 5, 1084, 543, 2, 7126, 7127, 7, 10, 2, 2, 7127, 7128,
	5, 1092, 547, 2, 7128, 7130, 3, 2, 2, 2, 7129, 7119, 3, 2, 2, 2, 7129,
	7120, 3, 2, 2, 2, 7129, 7121, 3, 2, 2, 2, 7129, 7122, 3, 2, 2, 2, 7129,
	7125, 3, 2, 2, 2, 7130, 1077, 3, 2, 2, 2, 7131, 7142, 3, 2, 2, 2, 7132,
	7142, 5, 1094, 548, 2, 7133, 7142, 5, 1086, 544, 2, 7134, 7135, 5, 1086,
	544, 2, 7135, 7136, 7, 10, 2, 2, 7136, 7142, 3, 2, 2, 2, 7137, 7138, 5,
	1086, 544, 2, 7138, 7139, 7, 10, 2, 2, 7139, 7140, 5, 1094, 548, 2, 7140,
	7142, 3, 2, 2, 2, 7141, 7131, 3, 2, 2, 2, 7141, 7132, 3, 2, 2, 2, 7141,
	7133, 3, 2, 2, 2, 7141, 7134, 3, 2, 2, 2, 7141, 7137, 3, 2, 2, 2, 7142,
	1079, 3, 2, 2, 2, 7143, 7144, 8, 541, 1, 2, 7144, 7145, 5, 1096, 549, 2,
	7145, 7151, 3, 2, 2, 2, 7146, 7147, 12, 3, 2, 2, 7147, 7148, 7, 10, 2,
	2, 7148, 7150, 5, 1096, 549, 2, 7149, 7146, 3, 2, 2, 2, 7150, 7153, 3,
	2, 2, 2, 7151, 7149, 3, 2, 2, 2, 7151, 7152, 3, 2, 2, 2, 7152, 1081, 3,
	2, 2, 2, 7153, 7151, 3, 2, 2, 2, 7154, 7155, 8, 542, 1, 2, 7155, 7156,
	5, 1098, 550, 2, 7156, 7162, 3, 2, 2, 2, 7157, 7158, 12, 3, 2, 2, 7158,
	7159, 7, 10, 2, 2, 7159, 7161, 5, 1098, 550, 2, 7160, 7157, 3, 2, 2, 2,
	7161, 7164, 3, 2, 2, 2, 7162, 7160, 3, 2, 2, 2, 7162, 7163, 3, 2, 2, 2,
	7163, 1083, 3, 2, 2, 2, 7164, 7162, 3, 2, 2, 2, 7165, 7166, 8, 543, 1,
	2, 7166, 7167, 5, 1100, 551, 2, 7167, 7173, 3, 2, 2, 2, 7168, 7169, 12,
	3, 2, 2, 7169, 7170, 7, 10, 2, 2, 7170, 7172, 5, 1100, 551, 2, 7171, 7168,
	3, 2, 2, 2, 7172, 7175, 3, 2, 2, 2, 7173, 7171, 3, 2, 2, 2, 7173, 7174,
	3, 2, 2, 2, 7174, 1085, 3, 2, 2, 2, 7175, 7173, 3, 2, 2, 2, 7176, 7177,
	8, 544, 1, 2, 7177, 7178, 5, 1102, 552, 2, 7178, 7184, 3, 2, 2, 2, 7179,
	7180, 12, 3, 2, 2, 7180, 7181, 7, 10, 2, 2, 7181, 7183, 5, 1102, 552, 2,
	7182, 7179, 3, 2, 2, 2, 7183, 7186, 3, 2, 2, 2, 7184, 7182, 3, 2, 2, 2,
	7184, 7185, 3, 2, 2, 2, 7185, 1087, 3, 2, 2, 2, 7186, 7184, 3, 2, 2, 2,
	7187, 7188, 5, 778, 390, 2, 7188, 1089, 3, 2, 2, 2, 7189, 7190, 5, 780,
	391, 2, 7190, 1091, 3, 2, 2, 2, 7191, 7192, 5, 782, 392, 2, 7192, 1093,
	3, 2, 2, 2, 7193, 7194, 5, 784, 393, 2, 7194, 1095, 3, 2, 2, 2, 7195, 7196,
	5, 762, 382, 2, 7196, 1097, 3, 2, 2, 2, 7197, 7198, 5, 764, 383, 2, 7198,
	1099, 3, 2, 2, 2, 7199, 7200, 5, 766, 384, 2, 7200, 1101, 3, 2, 2, 2, 7201,
	7202, 5, 768, 385, 2, 7202, 1103, 3, 2, 2, 2, 7203, 7204, 5, 1112, 557,
	2, 7204, 1105, 3, 2, 2, 2, 7205, 7206, 5, 1114, 558, 2, 7206, 1107, 3,
	2, 2, 2, 7207, 7208, 5, 1116, 559, 2, 7208, 1109, 3, 2, 2, 2, 7209, 7210,
	5, 1118, 560, 2, 7210, 1111, 3, 2, 2, 2, 7211, 7213, 5, 584, 293, 2, 7212,
	7211, 3, 2, 2, 2, 7212, 7213, 3, 2, 2, 2, 7213, 1113, 3, 2, 2, 2, 7214,
	7216, 5, 586, 294, 2, 7215, 7214, 3, 2, 2, 2, 7215, 7216, 3, 2, 2, 2, 7216,
	1115, 3, 2, 2, 2, 7217, 7219, 5, 588, 295, 2, 7218, 7217, 3, 2, 2, 2, 7218,
	7219, 3, 2, 2, 2, 7219, 1117, 3, 2, 2, 2, 7220, 7222, 5, 590, 296, 2, 7221,
	7220, 3, 2, 2, 2, 7221, 7222, 3, 2, 2, 2, 7222, 1119, 3, 2, 2, 2, 7223,
	7224, 5, 1136, 569, 2, 7224, 7225, 7, 84, 2, 2, 7225, 7226, 5, 1144, 573,
	2, 7226, 1121, 3, 2, 2, 2, 7227, 7228, 5, 1136, 569, 2, 7228, 7229, 7,
	84, 2, 2, 7229, 7230, 5, 1146, 574, 2, 7230, 1123, 3, 2, 2, 2, 7231, 7232,
	5, 1138, 570, 2, 7232, 7233, 7, 84, 2, 2, 7233, 7234, 5, 1144, 573, 2,
	7234, 1125, 3, 2, 2, 2, 7235, 7236, 5, 1138, 570, 2, 7236, 7237, 7, 84,
	2, 2, 7237, 7238, 5, 1146, 574, 2, 7238, 1127, 3, 2, 2, 2, 7239, 7240,
	5, 1140, 571, 2, 7240, 7241, 7, 84, 2, 2, 7241, 7242, 5, 1144, 573, 2,
	7242, 1129, 3, 2, 2, 2, 7243, 7244, 5, 1140, 571, 2, 7244, 7245, 7, 84,
	2, 2, 7245, 7246, 5, 1146, 574, 2, 7246, 1131, 3, 2, 2, 2, 7247, 7248,
	5, 1142, 572, 2, 7248, 7249, 7, 84, 2, 2, 7249, 7250, 5, 1144, 573, 2,
	7250, 1133, 3, 2, 2, 2, 7251, 7252, 5, 1142, 572, 2, 7252, 7253, 7, 84,
	2, 2, 7253, 7254, 5, 1146, 574, 2, 7254, 1135, 3, 2, 2, 2, 7255, 7258,
	5, 20, 11, 2, 7256, 7258, 5, 44, 23, 2, 7257, 7255, 3, 2, 2, 2, 7257, 7256,
	3, 2, 2, 2, 7258, 1137, 3, 2, 2, 2, 7259, 7262, 5, 22, 12, 2, 7260, 7262,
	5, 46, 24, 2, 7261, 7259, 3, 2, 2, 2, 7261, 7260, 3, 2, 2, 2, 7262, 1139,
	3, 2, 2, 2, 7263, 7266, 5, 24, 13, 2, 7264, 7266, 5, 48, 25, 2, 7265, 7263,
	3, 2, 2, 2, 7265, 7264, 3, 2, 2, 2, 7266, 1141, 3, 2, 2, 2, 7267, 7270,
	5, 26, 14, 2, 7268, 7270, 5, 50, 26, 2, 7269, 7267, 3, 2, 2, 2, 7269, 7268,
	3, 2, 2, 2, 7270, 1143, 3, 2, 2, 2, 7271, 7272, 6, 573, 243, 2, 7272, 7278,
	5, 456, 229, 2, 7273, 7274, 7, 13, 2, 2, 7274, 7275, 5, 1104, 553, 2, 7275,
	7276, 7, 109, 2, 2, 7276, 7278, 3, 2, 2, 2, 7277, 7271, 3, 2, 2, 2, 7277,
	7273, 3, 2, 2, 2, 7278, 1145, 3, 2, 2, 2, 7279, 7280, 6, 574, 244, 2, 7280,
	7286, 5, 458, 230, 2, 7281, 7282, 7, 13, 2, 2, 7282, 7283, 5, 1104, 553,
	2, 7283, 7284, 7, 109, 2, 2, 7284, 7286, 3, 2, 2, 2, 7285, 7279, 3, 2,
	2, 2, 7285, 7281, 3, 2, 2, 2, 7286, 1147, 3, 2, 2, 2, 7287, 7288, 5, 104,
	53, 2, 7288, 7289, 7, 7, 2, 2, 7289, 7290, 5, 1064, 533, 2, 7290, 7291,
	7, 8, 2, 2, 7291, 7292, 7, 13, 2, 2, 7292, 7293, 5, 1104, 553, 2, 7293,
	7294, 7, 109, 2, 2, 7294, 7316, 3, 2, 2, 2, 7295, 7316, 5, 1158, 580, 2,
	7296, 7316, 5, 1296, 649, 2, 7297, 7316, 5, 1194, 598, 2, 7298, 7299, 7,
	85, 2, 2, 7299, 7300, 5, 104, 53, 2, 7300, 7301, 7, 7, 2, 2, 7301, 7302,
	7, 8, 2, 2, 7302, 7303, 7, 13, 2, 2, 7303, 7304, 5, 1104, 553, 2, 7304,
	7305, 7, 109, 2, 2, 7305, 7316, 3, 2, 2, 2, 7306, 7307, 7, 86, 2, 2, 7307,
	7308, 5, 104, 53, 2, 7308, 7309, 7, 13, 2, 2, 7309, 7310, 5, 1156, 579,
	2, 7310, 7311, 7, 8, 2, 2, 7311, 7312, 7, 13, 2, 2, 7312, 7313, 5, 1104,
	553, 2, 7313, 7314, 7, 109, 2, 2, 7314, 7316, 3, 2, 2, 2, 7315, 7287, 3,
	2, 2, 2, 7315, 7295, 3, 2, 2, 2, 7315, 7296, 3, 2, 2, 2, 7315, 7297, 3,
	2, 2, 2, 7315, 7298, 3, 2, 2, 2, 7315, 7306, 3, 2, 2, 2, 7316, 1149, 3,
	2, 2, 2, 7317, 7318, 5, 106, 54, 2, 7318, 7319, 7, 7, 2, 2, 7319, 7320,
	5, 1064, 533, 2, 7320, 7321, 7, 8, 2, 2, 7321, 7322, 7, 13, 2, 2, 7322,
	7323, 5, 1104, 553, 2, 7323, 7324, 7, 109, 2, 2, 7324, 7346, 3, 2, 2, 2,
	7325, 7346, 5, 1160, 581, 2, 7326, 7346, 5, 1298, 650, 2, 7327, 7346, 5,
	1196, 599, 2, 7328, 7329, 7, 85, 2, 2, 7329, 7330, 5, 106, 54, 2, 7330,
	7331, 7, 7, 2, 2, 7331, 7332, 7, 8, 2, 2, 7332, 7333, 7, 13, 2, 2, 7333,
	7334, 5, 1104, 553, 2, 7334, 7335, 7, 109, 2, 2, 7335, 7346, 3, 2, 2, 2,
	7336, 7337, 7, 86, 2, 2, 7337, 7338, 5, 106, 54, 2, 7338, 7339, 7, 13,
	2, 2, 7339, 7340, 5, 1156, 579, 2, 7340, 7341, 7, 8, 2, 2, 7341, 7342,
	7, 13, 2, 2, 7342, 7343, 5, 1104, 553, 2, 7343, 7344, 7, 109, 2, 2, 7344,
	7346, 3, 2, 2, 2, 7345, 7317, 3, 2, 2, 2, 7345, 7325, 3, 2, 2, 2, 7345,
	7326, 3, 2, 2, 2, 7345, 7327, 3, 2, 2, 2, 7345, 7328, 3, 2, 2, 2, 7345,
	7336, 3, 2, 2, 2, 7346, 1151, 3, 2, 2, 2, 7347, 7348, 5, 108, 55, 2, 7348,
	7349, 7, 7, 2, 2, 7349, 7350, 5, 1064, 533, 2, 7350, 7351, 7, 8, 2, 2,
	7351, 7352, 7, 13, 2, 2, 7352, 7353, 5, 1104, 553, 2, 7353, 7354, 7, 109,
	2, 2, 7354, 7376, 3, 2, 2, 2, 7355, 7376, 5, 1162, 582, 2, 7356, 7376,
	5, 1300, 651, 2, 7357, 7376, 5, 1198, 600, 2, 7358, 7359, 7, 85, 2, 2,
	7359, 7360, 5, 108, 55, 2, 7360, 7361, 7, 7, 2, 2, 7361, 7362, 7, 8, 2,
	2, 7362, 7363, 7, 13, 2, 2, 7363, 7364, 5, 1104, 553, 2, 7364, 7365, 7,
	109, 2, 2, 7365, 7376, 3, 2, 2, 2, 7366, 7367, 7, 86, 2, 2, 7367, 7368,
	5, 108, 55, 2, 7368, 7369, 7, 13, 2, 2, 7369, 7370, 5, 1156, 579, 2, 7370,
	7371, 7, 8, 2, 2, 7371, 7372, 7, 13, 2, 2, 7372, 7373, 5, 1104, 553, 2,
	7373, 7374, 7, 109, 2, 2, 7374, 7376, 3, 2, 2, 2, 7375, 7347, 3, 2, 2,
	2, 7375, 7355, 3, 2, 2, 2, 7375, 7356, 3, 2, 2, 2, 7375, 7357, 3, 2, 2,
	2, 7375, 7358, 3, 2, 2, 2, 7375, 7366, 3, 2, 2, 2, 7376, 1153, 3, 2, 2,
	2, 7377, 7378, 5, 110, 56, 2, 7378, 7379, 7, 7, 2, 2, 7379, 7380, 5, 1064,
	533, 2, 7380, 7381, 7, 8, 2, 2, 7381, 7382, 7, 13, 2, 2, 7382, 7383, 5,
	1104, 553, 2, 7383, 7384, 7, 109, 2, 2, 7384, 7406, 3, 2, 2, 2, 7385, 7406,
	5, 1164, 583, 2, 7386, 7406, 5, 1302, 652, 2, 7387, 7406, 5, 1200, 601,
	2, 7388, 7389, 7, 85, 2, 2, 7389, 7390, 5, 110, 56, 2, 7390, 7391, 7, 7,
	2, 2, 7391, 7392, 7, 8, 2, 2, 7392, 7393, 7, 13, 2, 2, 7393, 7394, 5, 1104,
	553, 2, 7394, 7395, 7, 109, 2, 2, 7395, 7406, 3, 2, 2, 2, 7396, 7397, 7,
	86, 2, 2, 7397, 7398, 5, 110, 56, 2, 7398, 7399, 7, 13, 2, 2, 7399, 7400,
	5, 1156, 579, 2, 7400, 7401, 7, 8, 2, 2, 7401, 7402, 7, 13, 2, 2, 7402,
	7403, 5, 1104, 553, 2, 7403, 7404, 7, 109, 2, 2, 7404, 7406, 3, 2, 2, 2,
	7405, 7377, 3, 2, 2, 2, 7405, 7385, 3, 2, 2, 2, 7405, 7386, 3, 2, 2, 2,
	7405, 7387, 3, 2, 2, 2, 7405, 7388, 3, 2, 2, 2, 7405, 7396, 3, 2, 2, 2,
	7406, 1155, 3, 2, 2, 2, 7407, 7408, 5, 1096, 549, 2, 7408, 1157, 3, 2,
	2, 2, 7409, 7410, 7, 87, 2, 2, 7410, 7411, 5, 104, 53, 2, 7411, 7412, 7,
	7, 2, 2, 7412, 7413, 5, 1066, 534, 2, 7413, 7414, 7, 8, 2, 2, 7414, 7415,
	7, 13, 2, 2, 7415, 7416, 5, 1184, 593, 2, 7416, 7417, 7, 109, 2, 2, 7417,
	1159, 3, 2, 2, 2, 7418, 7419, 7, 87, 2, 2, 7419, 7420, 5, 106, 54, 2, 7420,
	7421, 7, 7, 2, 2, 7421, 7422, 5, 1066, 534, 2, 7422, 7423, 7, 8, 2, 2,
	7423, 7424, 7, 13, 2, 2, 7424, 7425, 5, 1184, 593, 2, 7425, 7426, 7, 109,
	2, 2, 7426, 1161, 3, 2, 2, 2, 7427, 7428, 7, 87, 2, 2, 7428, 7429, 5, 108,
	55, 2, 7429, 7430, 7, 7, 2, 2, 7430, 7431, 5, 1066, 534, 2, 7431, 7432,
	7, 8, 2, 2, 7432, 7433, 7, 13, 2, 2, 7433, 7434, 5, 1184, 593, 2, 7434,
	7435, 7, 109, 2, 2, 7435, 1163, 3, 2, 2, 2, 7436, 7437, 7, 87, 2, 2, 7437,
	7438, 5, 110, 56, 2, 7438, 7439, 7, 7, 2, 2, 7439, 7440, 5, 1066, 534,
	2, 7440, 7441, 7, 8, 2, 2, 7441, 7442, 7, 13, 2, 2, 7442, 7443, 5, 1184,
	593, 2, 7443, 7444, 7, 109, 2, 2, 7444, 1165, 3, 2, 2, 2, 7445, 7446, 7,
	83, 2, 2, 7446, 7447, 7, 87, 2, 2, 7447, 7448, 5, 20, 11, 2, 7448, 7449,
	7, 7, 2, 2, 7449, 7450, 5, 1074, 538, 2, 7450, 7451, 7, 8, 2, 2, 7451,
	7452, 7, 13, 2, 2, 7452, 7453, 5, 1184, 593, 2, 7453, 7454, 7, 109, 2,
	2, 7454, 1167, 3, 2, 2, 2, 7455, 7456, 7, 83, 2, 2, 7456, 7457, 7, 87,
	2, 2, 7457, 7458, 5, 22, 12, 2, 7458, 7459, 7, 7, 2, 2, 7459, 7460, 5,
	1074, 538, 2, 7460, 7461, 7, 8, 2, 2, 7461, 7462, 7, 13, 2, 2, 7462, 7463,
	5, 1184, 593, 2, 7463, 7464, 7, 109, 2, 2, 7464, 1169, 3, 2, 2, 2, 7465,
	7466, 7, 83, 2, 2, 7466, 7467, 7, 87, 2, 2, 7467, 7468, 5, 24, 13, 2, 7468,
	7469, 7, 7, 2, 2, 7469, 7470, 5, 1074, 538, 2, 7470, 7471, 7, 8, 2, 2,
	7471, 7472, 7, 13, 2, 2, 7472, 7473, 5, 1184, 593, 2, 7473, 7474, 7, 109,
	2, 2, 7474, 1171, 3, 2, 2, 2, 7475, 7476, 7, 83, 2, 2, 7476, 7477, 7, 87,
	2, 2, 7477, 7478, 5, 26, 14, 2, 7478, 7479, 7, 7, 2, 2, 7479, 7480, 5,
	1074, 538, 2, 7480, 7481, 7, 8, 2, 2, 7481, 7482, 7, 13, 2, 2, 7482, 7483,
	5, 1184, 593, 2, 7483, 7484, 7, 109, 2, 2, 7484, 1173, 3, 2, 2, 2, 7485,
	7486, 7, 83, 2, 2, 7486, 7487, 7, 87, 2, 2, 7487, 7488, 5, 20, 11, 2, 7488,
	7489, 7, 7, 2, 2, 7489, 7490, 5, 1074, 538, 2, 7490, 7491, 7, 8, 2, 2,
	7491, 7492, 7, 13, 2, 2, 7492, 7493, 5, 1184, 593, 2, 7493, 7494, 7, 109,
	2, 2, 7494, 7505, 3, 2, 2, 2, 7495, 7496, 7, 83, 2, 2, 7496, 7497, 7, 87,
	2, 2, 7497, 7498, 7, 7, 2, 2, 7498, 7499, 5, 1074, 538, 2, 7499, 7500,
	7, 8, 2, 2, 7500, 7501, 7, 13, 2, 2, 7501, 7502, 5, 1184, 593, 2, 7502,
	7503, 7, 109, 2, 2, 7503, 7505, 3, 2, 2, 2, 7504, 7485, 3, 2, 2, 2, 7504,
	7495, 3, 2, 2, 2, 7505, 1175, 3, 2, 2, 2, 7506, 7507, 7, 83, 2, 2, 7507,
	7508, 7, 87, 2, 2, 7508, 7509, 5, 22, 12, 2, 7509, 7510, 7, 7, 2, 2, 7510,
	7511, 5, 1074, 538, 2, 7511, 7512, 7, 8, 2, 2, 7512, 7513, 7, 13, 2, 2,
	7513, 7514, 5, 1184, 593, 2, 7514, 7515, 7, 109, 2, 2, 7515, 7526, 3, 2,
	2, 2, 7516, 7517, 7, 83, 2, 2, 7517, 7518, 7, 87, 2, 2, 7518, 7519, 7,
	7, 2, 2, 7519, 7520, 5, 1074, 538, 2, 7520, 7521, 7, 8, 2, 2, 7521, 7522,
	7, 13, 2, 2, 7522, 7523, 5, 1184, 593, 2, 7523, 7524, 7, 109, 2, 2, 7524,
	7526, 3, 2, 2, 2, 7525, 7506, 3, 2, 2, 2, 7525, 7516, 3, 2, 2, 2, 7526,
	1177, 3, 2, 2, 2, 7527, 7528, 7, 83, 2, 2, 7528, 7529, 7, 87, 2, 2, 7529,
	7530, 5, 24, 13, 2, 7530, 7531, 7, 7, 2, 2, 7531, 7532, 5, 1074, 538, 2,
	7532, 7533, 7, 8, 2, 2, 7533, 7534, 7, 13, 2, 2, 7534, 7535, 5, 1184, 593,
	2, 7535, 7536, 7, 109, 2, 2, 7536, 7547, 3, 2, 2, 2, 7537, 7538, 7, 83,
	2, 2, 7538, 7539, 7, 87, 2, 2, 7539, 7540, 7, 7, 2, 2, 7540, 7541, 5, 1074,
	538, 2, 7541, 7542, 7, 8, 2, 2, 7542, 7543, 7, 13, 2, 2, 7543, 7544, 5,
	1184, 593, 2, 7544, 7545, 7, 109, 2, 2, 7545, 7547, 3, 2, 2, 2, 7546, 7527,
	3, 2, 2, 2, 7546, 7537, 3, 2, 2, 2, 7547, 1179, 3, 2, 2, 2, 7548, 7549,
	7, 83, 2, 2, 7549, 7550, 7, 87, 2, 2, 7550, 7551, 5, 26, 14, 2, 7551, 7552,
	7, 7, 2, 2, 7552, 7553, 5, 1074, 538, 2, 7553, 7554, 7, 8, 2, 2, 7554,
	7555, 7, 13, 2, 2, 7555, 7556, 5, 1184, 593, 2, 7556, 7557, 7, 109, 2,
	2, 7557, 7568, 3, 2, 2, 2, 7558, 7559, 7, 83, 2, 2, 7559, 7560, 7, 87,
	2, 2, 7560, 7561, 7, 7, 2, 2, 7561, 7562, 5, 1074, 538, 2, 7562, 7563,
	7, 8, 2, 2, 7563, 7564, 7, 13, 2, 2, 7564, 7565, 5, 1184, 593, 2, 7565,
	7566, 7, 109, 2, 2, 7566, 7568, 3, 2, 2, 2, 7567, 7548, 3, 2, 2, 2, 7567,
	7558, 3, 2, 2, 2, 7568, 1181, 3, 2, 2, 2, 7569, 7570, 7, 83, 2, 2, 7570,
	7572, 7, 87, 2, 2, 7571, 7573, 5, 22, 12, 2, 7572, 7571, 3, 2, 2, 2, 7572,
	7573, 3, 2, 2, 2, 7573, 7574, 3, 2, 2, 2, 7574, 7575, 7, 7, 2, 2, 7575,
	7576, 5, 1074, 538, 2, 7576, 7577, 7, 8, 2, 2, 7577, 7578, 7, 13, 2, 2,
	7578, 7579, 5, 1184, 593, 2, 7579, 7580, 7, 109, 2, 2, 7580, 1183, 3, 2,
	2, 2, 7581, 7582, 5, 1106, 554, 2, 7582, 1185, 3, 2, 2, 2, 7583, 7590,
	7, 4, 2, 2, 7584, 7586, 7, 4, 2, 2, 7585, 7587, 7, 87, 2, 2, 7586, 7585,
	3, 2, 2, 2, 7586, 7587, 3, 2, 2, 2, 7587, 7588, 3, 2, 2, 2, 7588, 7590,
	5, 460, 231, 2, 7589, 7583, 3, 2, 2, 2, 7589, 7584, 3, 2, 2, 2, 7590, 1187,
	3, 2, 2, 2, 7591, 7598, 7, 4, 2, 2, 7592, 7594, 7, 4, 2, 2, 7593, 7595,
	7, 87, 2, 2, 7594, 7593, 3, 2, 2, 2, 7594, 7595, 3, 2, 2, 2, 7595, 7596,
	3, 2, 2, 2, 7596, 7598, 5, 462, 232, 2, 7597, 7591, 3, 2, 2, 2, 7597, 7592,
	3, 2, 2, 2, 7598, 1189, 3, 2, 2, 2, 7599, 7606, 7, 4, 2, 2, 7600, 7602,
	7, 4, 2, 2, 7601, 7603, 7, 87, 2, 2, 7602, 7601, 3, 2, 2, 2, 7602, 7603,
	3, 2, 2, 2, 7603, 7604, 3, 2, 2, 2, 7604, 7606, 5, 468, 235, 2, 7605, 7599,
	3, 2, 2, 2, 7605, 7600, 3, 2, 2, 2, 7606, 1191, 3, 2, 2, 2, 7607, 7614,
	7, 4, 2, 2, 7608, 7610, 7, 4, 2, 2, 7609, 7611, 7, 87, 2, 2, 7610, 7609,
	3, 2, 2, 2, 7610, 7611, 3, 2, 2, 2, 7611, 7612, 3, 2, 2, 2, 7612, 7614,
	5, 470, 236, 2, 7613, 7607, 3, 2, 2, 2, 7613, 7608, 3, 2, 2, 2, 7614, 1193,
	3, 2, 2, 2, 7615, 7616, 7, 88, 2, 2, 7616, 7617, 7, 87, 2, 2, 7617, 7618,
	5, 104, 53, 2, 7618, 7619, 7, 7, 2, 2, 7619, 7620, 5, 1070, 536, 2, 7620,
	7621, 7, 8, 2, 2, 7621, 7622, 7, 13, 2, 2, 7622, 7623, 5, 1220, 611, 2,
	7623, 7624, 7, 109, 2, 2, 7624, 1195, 3, 2, 2, 2, 7625, 7626, 7, 88, 2,
	2, 7626, 7627, 7, 87, 2, 2, 7627, 7628, 5, 106, 54, 2, 7628, 7629, 7, 7,
	2, 2, 7629, 7630, 5, 1070, 536, 2, 7630, 7631, 7, 8, 2, 2, 7631, 7632,
	7, 13, 2, 2, 7632, 7633, 5, 1220, 611, 2, 7633, 7634, 7, 109, 2, 2, 7634,
	1197, 3, 2, 2, 2, 7635, 7636, 7, 88, 2, 2, 7636, 7637, 7, 87, 2, 2, 7637,
	7638, 5, 108, 55, 2, 7638, 7639, 7, 7, 2, 2, 7639, 7640, 5, 1070, 536,
	2, 7640, 7641, 7, 8, 2, 2, 7641, 7642, 7, 13, 2, 2, 7642, 7643, 5, 1220,
	611, 2, 7643, 7644, 7, 109, 2, 2, 7644, 1199, 3, 2, 2, 2, 7645, 7646, 7,
	88, 2, 2, 7646, 7647, 7, 87, 2, 2, 7647, 7648, 5, 110, 56, 2, 7648, 7649,
	7, 7, 2, 2, 7649, 7650, 5, 1070, 536, 2, 7650, 7651, 7, 8, 2, 2, 7651,
	7652, 7, 13, 2, 2, 7652, 7653, 5, 1220, 611, 2, 7653, 7654, 7, 109, 2,
	2, 7654, 1201, 3, 2, 2, 2, 7655, 7656, 7, 88, 2, 2, 7656, 7657, 7, 83,
	2, 2, 7657, 7658, 7, 87, 2, 2, 7658, 7659, 5, 20, 11, 2, 7659, 7660, 7,
	7, 2, 2, 7660, 7661, 5, 1078, 540, 2, 7661, 7662, 7, 8, 2, 2, 7662, 7663,
	7, 13, 2, 2, 7663, 7664, 5, 1220, 611, 2, 7664, 7665, 7, 109, 2, 2, 7665,
	1203, 3, 2, 2, 2, 7666, 7667, 7, 88, 2, 2, 7667, 7668, 7, 83, 2, 2, 7668,
	7669, 7, 87, 2, 2, 7669, 7670, 5, 22, 12, 2, 7670, 7671, 7, 7, 2, 2, 7671,
	7672, 5, 1078, 540, 2, 7672, 7673, 7, 8, 2, 2, 7673, 7674, 7, 13, 2, 2,
	7674, 7675, 5, 1220, 611, 2, 7675, 7676, 7, 109, 2, 2, 7676, 1205, 3, 2,
	2, 2, 7677, 7678, 7, 88, 2, 2, 7678, 7679, 7, 83, 2, 2, 7679, 7680, 7,
	87, 2, 2, 7680, 7681, 5, 24, 13, 2, 7681, 7682, 7, 7, 2, 2, 7682, 7683,
	5, 1078, 540, 2, 7683, 7684, 7, 8, 2, 2, 7684, 7685, 7, 13, 2, 2, 7685,
	7686, 5, 1220, 611, 2, 7686, 7687, 7, 109, 2, 2, 7687, 1207, 3, 2, 2, 2,
	7688, 7689, 7, 88, 2, 2, 7689, 7690, 7, 83, 2, 2, 7690, 7691, 7, 87, 2,
	2, 7691, 7692, 5, 26, 14, 2, 7692, 7693, 7, 7, 2, 2, 7693, 7694, 5, 1078,
	540, 2, 7694, 7695, 7, 8, 2, 2, 7695, 7696, 7, 13, 2, 2, 7696, 7697, 5,
	1220, 611, 2, 7697, 7698, 7, 109, 2, 2, 7698, 1209, 3, 2, 2, 2, 7699, 7700,
	7, 88, 2, 2, 7700, 7701, 7, 83, 2, 2, 7701, 7702, 7, 87, 2, 2, 7702, 7703,
	5, 20, 11, 2, 7703, 7704, 7, 7, 2, 2, 7704, 7705, 5, 1078, 540, 2, 7705,
	7706, 7, 8, 2, 2, 7706, 7707, 7, 13, 2, 2, 7707, 7708, 5, 1220, 611, 2,
	7708, 7709, 7, 109, 2, 2, 7709, 7721, 3, 2, 2, 2, 7710, 7711, 7, 88, 2,
	2, 7711, 7712, 7, 83, 2, 2, 7712, 7713, 7, 87, 2, 2, 7713, 7714, 7, 7,
	2, 2, 7714, 7715, 5, 1078, 540, 2, 7715, 7716, 7, 8, 2, 2, 7716, 7717,
	7, 13, 2, 2, 7717, 7718, 5, 1220, 611, 2, 7718, 7719, 7, 109, 2, 2, 7719,
	7721, 3, 2, 2, 2, 7720, 7699, 3, 2, 2, 2, 7720, 7710, 3, 2, 2, 2, 7721,
	1211, 3, 2, 2, 2, 7722, 7723, 7, 88, 2, 2, 7723, 7724, 7, 83, 2, 2, 7724,
	7725, 7, 87, 2, 2, 7725, 7726, 5, 22, 12, 2, 7726, 7727, 7, 7, 2, 2, 7727,
	7728, 5, 1078, 540, 2, 7728, 7729, 7, 8, 2, 2, 7729, 7730, 7, 13, 2, 2,
	7730, 7731, 5, 1220, 611, 2, 7731, 7732, 7, 109, 2, 2, 7732, 7744, 3, 2,
	2, 2, 7733, 7734, 7, 88, 2, 2, 7734, 7735, 7, 83, 2, 2, 7735, 7736, 7,
	87, 2, 2, 7736, 7737, 7, 7, 2, 2, 7737, 7738, 5, 1078, 540, 2, 7738, 7739,
	7, 8, 2, 2, 7739, 7740, 7, 13, 2, 2, 7740, 7741, 5, 1220, 611, 2, 7741,
	7742, 7, 109, 2, 2, 7742, 7744, 3, 2, 2, 2, 7743, 7722, 3, 2, 2, 2, 7743,
	7733, 3, 2, 2, 2, 7744, 1213, 3, 2, 2, 2, 7745, 7746, 7, 88, 2, 2, 7746,
	7747, 7, 83, 2, 2, 7747, 7748, 7, 87, 2, 2, 7748, 7749, 5, 24, 13, 2, 7749,
	7750, 7, 7, 2, 2, 7750, 7751, 5, 1078, 540, 2, 7751, 7752, 7, 8, 2, 2,
	7752, 7753, 7, 13, 2, 2, 7753, 7754, 5, 1220, 611, 2, 7754, 7755, 7, 109,
	2, 2, 7755, 7767, 3, 2, 2, 2, 7756, 7757, 7, 88, 2, 2, 7757, 7758, 7, 83,
	2, 2, 7758, 7759, 7, 87, 2, 2, 7759, 7760, 7, 7, 2, 2, 7760, 7761, 5, 1078,
	540, 2, 7761, 7762, 7, 8, 2, 2, 7762, 7763, 7, 13, 2, 2, 7763, 7764, 5,
	1220, 611, 2, 7764, 7765, 7, 109, 2, 2, 7765, 7767, 3, 2, 2, 2, 7766, 7745,
	3, 2, 2, 2, 7766, 7756, 3, 2, 2, 2, 7767, 1215, 3, 2, 2, 2, 7768, 7769,
	7, 88, 2, 2, 7769, 7770, 7, 83, 2, 2, 7770, 7771, 7, 87, 2, 2, 7771, 7772,
	5, 26, 14, 2, 7772, 7773, 7, 7, 2, 2, 7773, 7774, 5, 1078, 540, 2, 7774,
	7775, 7, 8, 2, 2, 7775, 7776, 7, 13, 2, 2, 7776, 7777, 5, 1220, 611, 2,
	7777, 7778, 7, 109, 2, 2, 7778, 7790, 3, 2, 2, 2, 7779, 7780, 7, 88, 2,
	2, 7780, 7781, 7, 83, 2, 2, 7781, 7782, 7, 87, 2, 2, 7782, 7783, 7, 7,
	2, 2, 7783, 7784, 5, 1078, 540, 2, 7784, 7785, 7, 8, 2, 2, 7785, 7786,
	7, 13, 2, 2, 7786, 7787, 5, 1220, 611, 2, 7787, 7788, 7, 109, 2, 2, 7788,
	7790, 3, 2, 2, 2, 7789, 7768, 3, 2, 2, 2, 7789, 7779, 3, 2, 2, 2, 7790,
	1217, 3, 2, 2, 2, 7791, 7792, 7, 88, 2, 2, 7792, 7793, 7, 83, 2, 2, 7793,
	7795, 7, 87, 2, 2, 7794, 7796, 5, 26, 14, 2, 7795, 7794, 3, 2, 2, 2, 7795,
	7796, 3, 2, 2, 2, 7796, 7797, 3, 2, 2, 2, 7797, 7798, 7, 7, 2, 2, 7798,
	7799, 5, 1078, 540, 2, 7799, 7800, 7, 8, 2, 2, 7800, 7801, 7, 13, 2, 2,
	7801, 7802, 5, 1220, 611, 2, 7802, 7803, 7, 109, 2, 2, 7803, 1219, 3, 2,
	2, 2, 7804, 7805, 5, 1110, 556, 2, 7805, 1221, 3, 2, 2, 2, 7806, 7807,
	7, 89, 2, 2, 7807, 7808, 5, 20, 11, 2, 7808, 7809, 5, 1246, 624, 2, 7809,
	1223, 3, 2, 2, 2, 7810, 7811, 7, 89, 2, 2, 7811, 7812, 5, 22, 12, 2, 7812,
	7813, 5, 1248, 625, 2, 7813, 1225, 3, 2, 2, 2, 7814, 7815, 7, 89, 2, 2,
	7815, 7816, 5, 24, 13, 2, 7816, 7817, 5, 1250, 626, 2, 7817, 1227, 3, 2,
	2, 2, 7818, 7819, 7, 89, 2, 2, 7819, 7820, 5, 26, 14, 2, 7820, 7821, 5,
	1252, 627, 2, 7821, 1229, 3, 2, 2, 2, 7822, 7823, 7, 89, 2, 2, 7823, 7824,
	5, 20, 11, 2, 7824, 7825, 5, 1246, 624, 2, 7825, 7829, 3, 2, 2, 2, 7826,
	7827, 7, 89, 2, 2, 7827, 7829, 5, 1246, 624, 2, 7828, 7822, 3, 2, 2, 2,
	7828, 7826, 3, 2, 2, 2, 7829, 1231, 3, 2, 2, 2, 7830, 7831, 7, 89, 2, 2,
	7831, 7832, 5, 22, 12, 2, 7832, 7833, 5, 1248, 625, 2, 7833, 7837, 3, 2,
	2, 2, 7834, 7835, 7, 89, 2, 2, 7835, 7837, 5, 1248, 625, 2, 7836, 7830,
	3, 2, 2, 2, 7836, 7834, 3, 2, 2, 2, 7837, 1233, 3, 2, 2, 2, 7838, 7839,
	7, 89, 2, 2, 7839, 7840, 5, 24, 13, 2, 7840, 7841, 5, 1250, 626, 2, 7841,
	7845, 3, 2, 2, 2, 7842, 7843, 7, 89, 2, 2, 7843, 7845, 5, 1250, 626, 2,
	7844, 7838, 3, 2, 2, 2, 7844, 7842, 3, 2, 2, 2, 7845, 1235, 3, 2, 2, 2,
	7846, 7847, 7, 89, 2, 2, 7847, 7848, 5, 26, 14, 2, 7848, 7849, 5, 1252,
	627, 2, 7849, 7853, 3, 2, 2, 2, 7850, 7851, 7, 89, 2, 2, 7851, 7853, 5,
	1252, 627, 2, 7852, 7846, 3, 2, 2, 2, 7852, 7850, 3, 2, 2, 2, 7853, 1237,
	3, 2, 2, 2, 7854, 7856, 7, 89, 2, 2, 7855, 7857, 5, 20, 11, 2, 7856, 7855,
	3, 2, 2, 2, 7856, 7857, 3, 2, 2, 2, 7857, 7858, 3, 2, 2, 2, 7858, 7859,
	5, 1246, 624, 2, 7859, 1239, 3, 2, 2, 2, 7860, 7862, 7, 89, 2, 2, 7861,
	7863, 5, 22, 12, 2, 7862, 7861, 3, 2, 2, 2, 7862, 7863, 3, 2, 2, 2, 7863,
	7864, 3, 2, 2, 2, 7864, 7865, 5, 1248, 625, 2, 7865, 1241, 3, 2, 2, 2,
	7866, 7868, 7, 89, 2, 2, 7867, 7869, 5, 24, 13, 2, 7868, 7867, 3, 2, 2,
	2, 7868, 7869, 3, 2, 2, 2, 7869, 7870, 3, 2, 2, 2, 7870, 7871, 5, 1250,
	626, 2, 7871, 1243, 3, 2, 2, 2, 7872, 7874, 7, 89, 2, 2, 7873, 7875, 5,
	26, 14, 2, 7874, 7873, 3, 2, 2, 2, 7874, 7875, 3, 2, 2, 2, 7875, 7876,
	3, 2, 2, 2, 7876, 7877, 5, 1252, 627, 2, 7877, 1245, 3, 2, 2, 2, 7878,
	7880, 5, 1254, 628, 2, 7879, 7878, 3, 2, 2, 2, 7879, 7880, 3, 2, 2, 2,
	7880, 7881, 3, 2, 2, 2, 7881, 7883, 7, 13, 2, 2, 7882, 7884, 5, 1262, 632,
	2, 7883, 7882, 3, 2, 2, 2, 7883, 7884, 3, 2, 2, 2, 7884, 7885, 3, 2, 2,
	2, 7885, 7886, 7, 109, 2, 2, 7886, 1247, 3, 2, 2, 2, 7887, 7889, 5, 1256,
	629, 2, 7888, 7887, 3, 2, 2, 2, 7888, 7889, 3, 2, 2, 2, 7889, 7890, 3,
	2, 2, 2, 7890, 7892, 7, 13, 2, 2, 7891, 7893, 5, 1264, 633, 2, 7892, 7891,
	3, 2, 2, 2, 7892, 7893, 3, 2, 2, 2, 7893, 7894, 3, 2, 2, 2, 7894, 7895,
	7, 109, 2, 2, 7895, 1249, 3, 2, 2, 2, 7896, 7898, 5, 1258, 630, 2, 7897,
	7896, 3, 2, 2, 2, 7897, 7898, 3, 2, 2, 2, 7898, 7899, 3, 2, 2, 2, 7899,
	7901, 7, 13, 2, 2, 7900, 7902, 5, 1266, 634, 2, 7901, 7900, 3, 2, 2, 2,
	7901, 7902, 3, 2, 2, 2, 7902, 7903, 3, 2, 2, 2, 7903, 7904, 7, 109, 2,
	2, 7904, 1251, 3, 2, 2, 2, 7905, 7907, 5, 1260, 631, 2, 7906, 7905, 3,
	2, 2, 2, 7906, 7907, 3, 2, 2, 2, 7907, 7908, 3, 2, 2, 2, 7908, 7910, 7,
	13, 2, 2, 7909, 7911, 5, 1268, 635, 2, 7910, 7909, 3, 2, 2, 2, 7910, 7911,
	3, 2, 2, 2, 7911, 7912, 3, 2, 2, 2, 7912, 7913, 7, 109, 2, 2, 7913, 1253,
	3, 2, 2, 2, 7914, 7915, 7, 90, 2, 2, 7915, 7916, 5, 270, 136, 2, 7916,
	1255, 3, 2, 2, 2, 7917, 7918, 7, 90, 2, 2, 7918, 7919, 5, 272, 137, 2,
	7919, 1257, 3, 2, 2, 2, 7920, 7921, 7, 90, 2, 2, 7921, 7922, 5, 274, 138,
	2, 7922, 1259, 3, 2, 2, 2, 7923, 7924, 7, 90, 2, 2, 7924, 7925, 5, 276,
	139, 2, 7925, 1261, 3, 2, 2, 2, 7926, 7928, 5, 1270, 636, 2, 7927, 7926,
	3, 2, 2, 2, 7928, 7929, 3, 2, 2, 2, 7929, 7927, 3, 2, 2, 2, 7929, 7930,
	3, 2, 2, 2, 7930, 1263, 3, 2, 2, 2, 7931, 7933, 5, 1272, 637, 2, 7932,
	7931, 3, 2, 2, 2, 7933, 7934, 3, 2, 2, 2, 7934, 7932, 3, 2, 2, 2, 7934,
	7935, 3, 2, 2, 2, 7935, 1265, 3, 2, 2, 2, 7936, 7938, 5, 1274, 638, 2,
	7937, 7936, 3, 2, 2, 2, 7938, 7939, 3, 2, 2, 2, 7939, 7937, 3, 2, 2, 2,
	7939, 7940, 3, 2, 2, 2, 7940, 1267, 3, 2, 2, 2, 7941, 7943, 5, 1276, 639,
	2, 7942, 7941, 3, 2, 2, 2, 7943, 7944, 3, 2, 2, 2, 7944, 7942, 3, 2, 2,
	2, 7944, 7945, 3, 2, 2, 2, 7945, 1269, 3, 2, 2, 2, 7946, 7948, 7, 91, 2,
	2, 7947, 7946, 3, 2, 2, 2, 7947, 7948, 3, 2, 2, 2, 7948, 7949, 3, 2, 2,
	2, 7949, 7952, 5, 1148, 575, 2, 7950, 7952, 7, 61, 2, 2, 7951, 7947, 3,
	2, 2, 2, 7951, 7950, 3, 2, 2, 2, 7952, 1271, 3, 2, 2, 2, 7953, 7955, 7,
	91, 2, 2, 7954, 7953, 3, 2, 2, 2, 7954, 7955, 3, 2, 2, 2, 7955, 7956, 3,
	2, 2, 2, 7956, 7959, 5, 1150, 576, 2, 7957, 7959, 7, 61, 2, 2, 7958, 7954,
	3, 2, 2, 2, 7958, 7957, 3, 2, 2, 2, 7959, 1273, 3, 2, 2, 2, 7960, 7962,
	7, 91, 2, 2, 7961, 7960, 3, 2, 2, 2, 7961, 7962, 3, 2, 2, 2, 7962, 7963,
	3, 2, 2, 2, 7963, 7966, 5, 1152, 577, 2, 7964, 7966, 7, 61, 2, 2, 7965,
	7961, 3, 2, 2, 2, 7965, 7964, 3, 2, 2, 2, 7966, 1275, 3, 2, 2, 2, 7967,
	7969, 7, 91, 2, 2, 7968, 7967, 3, 2, 2, 2, 7968, 7969, 3, 2, 2, 2, 7969,
	7970, 3, 2, 2, 2, 7970, 7973, 5, 1154, 578, 2, 7971, 7973, 7, 61, 2, 2,
	7972, 7968, 3, 2, 2, 2, 7972, 7971, 3, 2, 2, 2, 7973, 1277, 3, 2, 2, 2,
	7974, 7975, 7, 88, 2, 2, 7975, 7976, 7, 83, 2, 2, 7976, 7977, 5, 20, 11,
	2, 7977, 7978, 7, 7, 2, 2, 7978, 7979, 5, 1076, 539, 2, 7979, 7980, 7,
	8, 2, 2, 7980, 7981, 7, 13, 2, 2, 7981, 7982, 5, 1304, 653, 2, 7982, 7983,
	7, 109, 2, 2, 7983, 1279, 3, 2, 2, 2, 7984, 7985, 7, 88, 2, 2, 7985, 7986,
	7, 83, 2, 2, 7986, 7987, 5, 22, 12, 2, 7987, 7988, 7, 7, 2, 2, 7988, 7989,
	5, 1076, 539, 2, 7989, 7990, 7, 8, 2, 2, 7990, 7991, 7, 13, 2, 2, 7991,
	7992, 5, 1304, 653, 2, 7992, 7993, 7, 109, 2, 2, 7993, 1281, 3, 2, 2, 2,
	7994, 7995, 7, 88, 2, 2, 7995, 7996, 7, 83, 2, 2, 7996, 7997, 5, 24, 13,
	2, 7997, 7998, 7, 7, 2, 2, 7998, 7999, 5, 1076, 539, 2, 7999, 8000, 7,
	8, 2, 2, 8000, 8001, 7, 13, 2, 2, 8001, 8002, 5, 1304, 653, 2, 8002, 8003,
	7, 109, 2, 2, 8003, 1283, 3, 2, 2, 2, 8004, 8005, 7, 88, 2, 2, 8005, 8006,
	7, 83, 2, 2, 8006, 8007, 5, 26, 14, 2, 8007, 8008, 7, 7, 2, 2, 8008, 8009,
	5, 1076, 539, 2, 8009, 8010, 7, 8, 2, 2, 8010, 8011, 7, 13, 2, 2, 8011,
	8012, 5, 1304, 653, 2, 8012, 8013, 7, 109, 2, 2, 8013, 1285, 3, 2, 2, 2,
	8014, 8015, 7, 88, 2, 2, 8015, 8016, 7, 83, 2, 2, 8016, 8017, 5, 20, 11,
	2, 8017, 8018, 7, 7, 2, 2, 8018, 8019, 5, 1076, 539, 2, 8019, 8020, 7,
	8, 2, 2, 8020, 8021, 7, 13, 2, 2, 8021, 8022, 5, 1304, 653, 2, 8022, 8023,
	7, 109, 2, 2, 8023, 8034, 3, 2, 2, 2, 8024, 8025, 7, 88, 2, 2, 8025, 8026,
	7, 83, 2, 2, 8026, 8027, 7, 7, 2, 2, 8027, 8028, 5, 1076, 539, 2, 8028,
	8029, 7, 8, 2, 2, 8029, 8030, 7, 13, 2, 2, 8030, 8031, 5, 1304, 653, 2,
	8031, 8032, 7, 109, 2, 2, 8032, 8034, 3, 2, 2, 2, 8033, 8014, 3, 2, 2,
	2, 8033, 8024, 3, 2, 2, 2, 8034, 1287, 3, 2, 2, 2, 8035, 8036, 7, 88, 2,
	2, 8036, 8037, 7, 83, 2, 2, 8037, 8038, 5, 22, 12, 2, 8038, 8039, 7, 7,
	2, 2, 8039, 8040, 5, 1076, 539, 2, 8040, 8041, 7, 8, 2, 2, 8041, 8042,
	7, 13, 2, 2, 8042, 8043, 5, 1304, 653, 2, 8043, 8044, 7, 109, 2, 2, 8044,
	8055, 3, 2, 2, 2, 8045, 8046, 7, 88, 2, 2, 8046, 8047, 7, 83, 2, 2, 8047,
	8048, 7, 7, 2, 2, 8048, 8049, 5, 1076, 539, 2, 8049, 8050, 7, 8, 2, 2,
	8050, 8051, 7, 13, 2, 2, 8051, 8052, 5, 1304, 653, 2, 8052, 8053, 7, 109,
	2, 2, 8053, 8055, 3, 2, 2, 2, 8054, 8035, 3, 2, 2, 2, 8054, 8045, 3, 2,
	2, 2, 8055, 1289, 3, 2, 2, 2, 8056, 8057, 7, 88, 2, 2, 8057, 8058, 7, 83,
	2, 2, 8058, 8059, 5, 24, 13, 2, 8059, 8060, 7, 7, 2, 2, 8060, 8061, 5,
	1076, 539, 2, 8061, 8062, 7, 8, 2, 2, 8062, 8063, 7, 13, 2, 2, 8063, 8064,
	5, 1304, 653, 2, 8064, 8065, 7, 109, 2, 2, 8065, 8076, 3, 2, 2, 2, 8066,
	8067, 7, 88, 2, 2, 8067, 8068, 7, 83, 2, 2, 8068, 8069, 7, 7, 2, 2, 8069,
	8070, 5, 1076, 539, 2, 8070, 8071, 7, 8, 2, 2, 8071, 8072, 7, 13, 2, 2,
	8072, 8073, 5, 1304, 653, 2, 8073, 8074, 7, 109, 2, 2, 8074, 8076, 3, 2,
	2, 2, 8075, 8056, 3, 2, 2, 2, 8075, 8066, 3, 2, 2, 2, 8076, 1291, 3, 2,
	2, 2, 8077, 8078, 7, 88, 2, 2, 8078, 8079, 7, 83, 2, 2, 8079, 8080, 5,
	26, 14, 2, 8080, 8081, 7, 7, 2, 2, 8081, 8082, 5, 1076, 539, 2, 8082, 8083,
	7, 8, 2, 2, 8083, 8084, 7, 13, 2, 2, 8084, 8085, 5, 1304, 653, 2, 8085,
	8086, 7, 109, 2, 2, 8086, 8097, 3, 2, 2, 2, 8087, 8088, 7, 88, 2, 2, 8088,
	8089, 7, 83, 2, 2, 8089, 8090, 7, 7, 2, 2, 8090, 8091, 5, 1076, 539, 2,
	8091, 8092, 7, 8, 2, 2, 8092, 8093, 7, 13, 2, 2, 8093, 8094, 5, 1304, 653,
	2, 8094, 8095, 7, 109, 2, 2, 8095, 8097, 3, 2, 2, 2, 8096, 8077, 3, 2,
	2, 2, 8096, 8087, 3, 2, 2, 2, 8097, 1293, 3, 2, 2, 2, 8098, 8099, 7, 88,
	2, 2, 8099, 8101, 7, 83, 2, 2, 8100, 8102, 5, 24, 13, 2, 8101, 8100, 3,
	2, 2, 2, 8101, 8102, 3, 2, 2, 2, 8102, 8103, 3, 2, 2, 2, 8103, 8104, 7,
	7, 2, 2, 8104, 8105, 5, 1076, 539, 2, 8105, 8106, 7, 8, 2, 2, 8106, 8107,
	7, 13, 2, 2, 8107, 8108, 5, 1304, 653, 2, 8108, 8109, 7, 109, 2, 2, 8109,
	1295, 3, 2, 2, 2, 8110, 8111, 7, 88, 2, 2, 8111, 8112, 5, 104, 53, 2, 8112,
	8113, 7, 7, 2, 2, 8113, 8114, 5, 1068, 535, 2, 8114, 8115, 7, 8, 2, 2,
	8115, 8116, 7, 13, 2, 2, 8116, 8117, 5, 1304, 653, 2, 8117, 8118, 7, 109,
	2, 2, 8118, 1297, 3, 2, 2, 2, 8119, 8120, 7, 88, 2, 2, 8120, 8121, 5, 106,
	54, 2, 8121, 8122, 7, 7, 2, 2, 8122, 8123, 5, 1068, 535, 2, 8123, 8124,
	7, 8, 2, 2, 8124, 8125, 7, 13, 2, 2, 8125, 8126, 5, 1304, 653, 2, 8126,
	8127, 7, 109, 2, 2, 8127, 1299, 3, 2, 2, 2, 8128, 8129, 7, 88, 2, 2, 8129,
	8130, 5, 108, 55, 2, 8130, 8131, 7, 7, 2, 2, 8131, 8132, 5, 1068, 535,
	2, 8132, 8133, 7, 8, 2, 2, 8133, 8134, 7, 13, 2, 2, 8134, 8135, 5, 1304,
	653, 2, 8135, 8136, 7, 109, 2, 2, 8136, 1301, 3, 2, 2, 2, 8137, 8138, 7,
	88, 2, 2, 8138, 8139, 5, 110, 56, 2, 8139, 8140, 7, 7, 2, 2, 8140, 8141,
	5, 1068, 535, 2, 8141, 8142, 7, 8, 2, 2, 8142, 8143, 7, 13, 2, 2, 8143,
	8144, 5, 1304, 653, 2, 8144, 8145, 7, 109, 2, 2, 8145, 1303, 3, 2, 2, 2,
	8146, 8147, 5, 1108, 555, 2, 8147, 1305, 3, 2, 2, 2, 8148, 8149, 7, 5,
	2, 2, 8149, 8150, 5, 290, 146, 2, 8150, 1307, 3, 2, 2, 2, 8151, 8152, 7,
	5, 2, 2, 8152, 8153, 5, 292, 147, 2, 8153, 1309, 3, 2, 2, 2, 8154, 8155,
	7, 88, 2, 2, 8155, 8156, 5, 1326, 664, 2, 8156, 8157, 7, 84, 2, 2, 8157,
	8158, 5, 1376, 689, 2, 8158, 8164, 3, 2, 2, 2, 8159, 8160, 5, 1330, 666,
	2, 8160, 8161, 7, 84, 2, 2, 8161, 8162, 5, 1376, 689, 2, 8162, 8164, 3,
	2, 2, 2, 8163, 8154, 3, 2, 2, 2, 8163, 8159, 3, 2, 2, 2, 8164, 1311, 3,
	2, 2, 2, 8165, 8166, 7, 88, 2, 2, 8166, 8167, 5, 1326, 664, 2, 8167, 8168,
	7, 84, 2, 2, 8168, 8169, 5, 1378, 690, 2, 8169, 8175, 3, 2, 2, 2, 8170,
	8171, 5, 1330, 666, 2, 8171, 8172, 7, 84, 2, 2, 8172, 8173, 5, 1378, 690,
	2, 8173, 8175, 3, 2, 2, 2, 8174, 8165, 3, 2, 2, 2, 8174, 8170, 3, 2, 2,
	2, 8175, 1313, 3, 2, 2, 2, 8176, 8177, 7, 88, 2, 2, 8177, 8178, 5, 1328,
	665, 2, 8178, 8179, 7, 84, 2, 2, 8179, 8180, 5, 1376, 689, 2, 8180, 8186,
	3, 2, 2, 2, 8181, 8182, 5, 1332, 667, 2, 8182, 8183, 7, 84, 2, 2, 8183,
	8184, 5, 1376, 689, 2, 8184, 8186, 3, 2, 2, 2, 8185, 8176, 3, 2, 2, 2,
	8185, 8181, 3, 2, 2, 2, 8186, 1315, 3, 2, 2, 2, 8187, 8188, 7, 88, 2, 2,
	8188, 8189, 5, 1328, 665, 2, 8189, 8190, 7, 84, 2, 2, 8190, 8191, 5, 1378,
	690, 2, 8191, 8197, 3, 2, 2, 2, 8192, 8193, 5, 1332, 667, 2, 8193, 8194,
	7, 84, 2, 2, 8194, 8195, 5, 1378, 690, 2, 8195, 8197, 3, 2, 2, 2, 8196,
	8187, 3, 2, 2, 2, 8196, 8192, 3, 2, 2, 2, 8197, 1317, 3, 2, 2, 2, 8198,
	8199, 7, 88, 2, 2, 8199, 8200, 5, 1326, 664, 2, 8200, 8201, 7, 84, 2, 2,
	8201, 8202, 5, 1376, 689, 2, 8202, 8208, 3, 2, 2, 2, 8203, 8204, 5, 1334,
	668, 2, 8204, 8205, 7, 84, 2, 2, 8205, 8206, 5, 1376, 689, 2, 8206, 8208,
	3, 2, 2, 2, 8207, 8198, 3, 2, 2, 2, 8207, 8203, 3, 2, 2, 2, 8208, 1319,
	3, 2, 2, 2, 8209, 8210, 7, 88, 2, 2, 8210, 8211, 5, 1326, 664, 2, 8211,
	8212, 7, 84, 2, 2, 8212, 8213, 5, 1378, 690, 2, 8213, 8219, 3, 2, 2, 2,
	8214, 8215, 5, 1334, 668, 2, 8215, 8216, 7, 84, 2, 2, 8216, 8217, 5, 1378,
	690, 2, 8217, 8219, 3, 2, 2, 2, 8218, 8209, 3, 2, 2, 2, 8218, 8214, 3,
	2, 2, 2, 8219, 1321, 3, 2, 2, 2, 8220, 8221, 7, 88, 2, 2, 8221, 8222, 5,
	1328, 665, 2, 8222, 8223, 7, 84, 2, 2, 8223, 8224, 5, 1376, 689, 2, 8224,
	8230, 3, 2, 2, 2, 8225, 8226, 5, 1336, 669, 2, 8226, 8227, 7, 84, 2, 2,
	8227, 8228, 5, 1376, 689, 2, 8228, 8230, 3, 2, 2, 2, 8229, 8220, 3, 2,
	2, 2, 8229, 8225, 3, 2, 2, 2, 8230, 1323, 3, 2, 2, 2, 8231, 8232, 7, 88,
	2, 2, 8232, 8233, 5, 1328, 665, 2, 8233, 8234, 7, 84, 2, 2, 8234, 8235,
	5, 1378, 690, 2, 8235, 8241, 3, 2, 2, 2, 8236, 8237, 5, 1336, 669, 2, 8237,
	8238, 7, 84, 2, 2, 8238, 8239, 5, 1378, 690, 2, 8239, 8241, 3, 2, 2, 2,
	8240, 8231, 3, 2, 2, 2, 8240, 8236, 3, 2, 2, 2, 8241, 1325, 3, 2, 2, 2,
	8242, 8243, 5, 24, 13, 2, 8243, 1327, 3, 2, 2, 2, 8244, 8245, 5, 26, 14,
	2, 8245, 1329, 3, 2, 2, 2, 8246, 8247, 5, 210, 106, 2, 8247, 8248, 5, 254,
	128, 2, 8248, 1331, 3, 2, 2, 2, 8249, 8250, 5, 212, 107, 2, 8250, 8251,
	5, 256, 129, 2, 8251, 1333, 3, 2, 2, 2, 8252, 8253, 5, 214, 108, 2, 8253,
	8254, 5, 258, 130, 2, 8254, 1335, 3, 2, 2, 2, 8255, 8256, 5, 216, 109,
	2, 8256, 8257, 5, 260, 131, 2, 8257, 1337, 3, 2, 2, 2, 8258, 8260, 5, 1340,
	671, 2, 8259, 8258, 3, 2, 2, 2, 8259, 8260, 3, 2, 2, 2, 8260, 1339, 3,
	2, 2, 2, 8261, 8262, 5, 576, 289, 2, 8262, 1341, 3, 2, 2, 2, 8263, 8265,
	5, 1344, 673, 2, 8264, 8263, 3, 2, 2, 2, 8264, 8265, 3, 2, 2, 2, 8265,
	1343, 3, 2, 2, 2, 8266, 8268, 5, 1346, 674, 2, 8267, 8266, 3, 2, 2, 2,
	8268, 8269, 3, 2, 2, 2, 8269, 8267, 3, 2, 2, 2, 8269, 8270, 3, 2, 2, 2,
	8270, 1345, 3, 2, 2, 2, 8271, 8275, 5, 1348, 675, 2, 8272, 8275, 5, 1368,
	685, 2, 8273, 8275, 5, 592, 297, 2, 8274, 8271, 3, 2, 2, 2, 8274, 8272,
	3, 2, 2, 2, 8274, 8273, 3, 2, 2, 2, 8275, 1347, 3, 2, 2, 2, 8276, 8277,
	7, 92, 2, 2, 8277, 8278, 5, 1350, 676, 2, 8278, 8279, 5, 1358, 680, 2,
	8279, 8280, 7, 61, 2, 2, 8280, 8286, 3, 2, 2, 2, 8281, 8282, 7, 92, 2,
	2, 8282, 8283, 5, 1364, 683, 2, 8283, 8284, 7, 61, 2, 2, 8284, 8286, 3,
	2, 2, 2, 8285, 8276, 3, 2, 2, 2, 8285, 8281, 3, 2, 2, 2, 8286, 1349, 3,
	2, 2, 2, 8287, 8299, 5, 1352, 677, 2, 8288, 8299, 5, 1354, 678, 2, 8289,
	8299, 5, 1356, 679, 2, 8290, 8291, 5, 1352, 677, 2, 8291, 8292, 7, 10,
	2, 2, 8292, 8293, 5, 1354, 678, 2, 8293, 8299, 3, 2, 2, 2, 8294, 8295,
	5, 1352, 677, 2, 8295, 8296, 7, 10, 2, 2, 8296, 8297, 5, 1356, 679, 2,
	8297, 8299, 3, 2, 2, 2, 8298, 8287, 3, 2, 2, 2, 8298, 8288, 3, 2, 2, 2,
	8298, 8289, 3, 2, 2, 2, 8298, 8290, 3, 2, 2, 2, 8298, 8294, 3, 2, 2, 2,
	8299, 1351, 3, 2, 2, 2, 8300, 8301, 5, 1366, 684, 2, 8301, 1353, 3, 2,
	2, 2, 8302, 8303, 7, 87, 2, 2, 8303, 8304, 7, 93, 2, 2, 8304, 8305, 5,
	1366, 684, 2, 8305, 1355, 3, 2, 2, 2, 8306, 8307, 7, 13, 2, 2, 8307, 8316,
	7, 109, 2, 2, 8308, 8309, 7, 13, 2, 2, 8309, 8311, 5, 1360, 681, 2, 8310,
	8312, 7, 10, 2, 2, 8311, 8310, 3, 2, 2, 2, 8311, 8312, 3, 2, 2, 2, 8312,
	8313, 3, 2, 2, 2, 8313, 8314, 7, 109, 2, 2, 8314, 8316, 3, 2, 2, 2, 8315,
	8306, 3, 2, 2, 2, 8315, 8308, 3, 2, 2, 2, 8316, 1357, 3, 2, 2, 2, 8317,
	8318, 7, 94, 2, 2, 8318, 8319, 5, 1364, 683, 2, 8319, 1359, 3, 2, 2, 2,
	8320, 8321, 8, 681, 1, 2, 8321, 8322, 5, 1362, 682, 2, 8322, 8328, 3, 2,
	2, 2, 8323, 8324, 12, 3, 2, 2, 8324, 8325, 7, 10, 2, 2, 8325, 8327, 5,
	1362, 682, 2, 8326, 8323, 3, 2, 2, 2, 8327, 8330, 3, 2, 2, 2, 8328, 8326,
	3, 2, 2, 2, 8328, 8329, 3, 2, 2, 2, 8329, 1361, 3, 2, 2, 2, 8330, 8328,
	3, 2, 2, 2, 8331, 8336, 5, 1366, 684, 2, 8332, 8333, 7, 103, 2, 2, 8333,
	8334, 7, 93, 2, 2, 8334, 8336, 5, 1366, 684, 2, 8335, 8331, 3, 2, 2, 2,
	8335, 8332, 3, 2, 2, 2, 8336, 1363, 3, 2, 2, 2, 8337, 8338, 7, 117, 2,
	2, 8338, 1365, 3, 2, 2, 2, 8339, 8340, 5, 20, 11, 2, 8340, 1367, 3, 2,
	2, 2, 8341, 8342, 7, 95, 2, 2, 8342, 8343, 7, 87, 2, 2, 8343, 8344, 5,
	1358, 680, 2, 8344, 8345, 7, 61, 2, 2, 8345, 8370, 3, 2, 2, 2, 8346, 8347,
	7, 95, 2, 2, 8347, 8349, 5, 1370, 686, 2, 8348, 8350, 5, 1358, 680, 2,
	8349, 8348, 3, 2, 2, 2, 8349, 8350, 3, 2, 2, 2, 8350, 8351, 3, 2, 2, 2,
	8351, 8352, 7, 61, 2, 2, 8352, 8370, 3, 2, 2, 2, 8353, 8354, 7, 95, 2,
	2, 8354, 8370, 5, 658, 330, 2, 8355, 8356, 7, 95, 2, 2, 8356, 8370, 5,
	504, 253, 2, 8357, 8358, 7, 95, 2, 2, 8358, 8359, 7, 77, 2, 2, 8359, 8370,
	5, 520, 261, 2, 8360, 8361, 7, 95, 2, 2, 8361, 8362, 7, 77, 2, 2, 8362,
	8370, 5, 1230, 616, 2, 8363, 8364, 7, 95, 2, 2, 8364, 8365, 7, 77, 2, 2,
	8365, 8366, 6, 685, 246, 2, 8366, 8367, 5, 458, 230, 2, 8367, 8368, 7,
	61, 2, 2, 8368, 8370, 3, 2, 2, 2, 8369, 8341, 3, 2, 2, 2, 8369, 8346, 3,
	2, 2, 2, 8369, 8353, 3, 2, 2, 2, 8369, 8355, 3, 2, 2, 2, 8369, 8357, 3,
	2, 2, 2, 8369, 8360, 3, 2, 2, 2, 8369, 8363, 3, 2, 2, 2, 8370, 1369, 3,
	2, 2, 2, 8371, 8372, 7, 13, 2, 2, 8372, 8381, 7, 109, 2, 2, 8373, 8374,
	7, 13, 2, 2, 8374, 8376, 5, 1372, 687, 2, 8375, 8377, 7, 10, 2, 2, 8376,
	8375, 3, 2, 2, 2, 8376, 8377, 3, 2, 2, 2, 8377, 8378, 3, 2, 2, 2, 8378,
	8379, 7, 109, 2, 2, 8379, 8381, 3, 2, 2, 2, 8380, 8371, 3, 2, 2, 2, 8380,
	8373, 3, 2, 2, 2, 8381, 1371, 3, 2, 2, 2, 8382, 8383, 8, 687, 1, 2, 8383,
	8384, 5, 1374, 688, 2, 8384, 8390, 3, 2, 2, 2, 8385, 8386, 12, 3, 2, 2,
	8386, 8387, 7, 10, 2, 2, 8387, 8389, 5, 1374, 688, 2, 8388, 8385, 3, 2,
	2, 2, 8389, 8392, 3, 2, 2, 2, 8390, 8388, 3, 2, 2, 2, 8390, 8391, 3, 2,
	2, 2, 8391, 1373, 3, 2, 2, 2, 8392, 8390, 3, 2, 2, 2, 8393, 8398, 7, 103,
	2, 2, 8394, 8395, 7, 103, 2, 2, 8395, 8396, 7, 93, 2, 2, 8396, 8398, 7,
	103, 2, 2, 8397, 8393, 3, 2, 2, 2, 8397, 8394, 3, 2, 2, 2, 8398, 1375,
	3, 2, 2, 2, 8399, 8400, 6, 689, 248, 2, 8400, 8401, 5, 464, 233, 2, 8401,
	8402, 7, 13, 2, 2, 8402, 8403, 5, 1304, 653, 2, 8403, 8404, 7, 109, 2,
	2, 8404, 1377, 3, 2, 2, 2, 8405, 8406, 6, 690, 249, 2, 8406, 8407, 5, 466,
	234, 2, 8407, 8408, 7, 13, 2, 2, 8408, 8409, 5, 1304, 653, 2, 8409, 8410,
	7, 109, 2, 2, 8410, 1379, 3, 2, 2, 2, 704, 1388, 1396, 1406, 1446, 1461,
	1476, 1491, 1527, 1563, 1599, 1635, 1641, 1652, 1656, 1660, 1671, 1675,
	1679, 1690, 1694, 1698, 1709, 1713, 1717, 1721, 1724, 1729, 1735, 1738,
	1740, 1745, 1749, 1752, 1757, 1763, 1766, 1768, 1773, 1777, 1780, 1785,
	1791, 1794, 1796, 1801, 1805, 1808, 1813, 1819, 1822, 1824, 1834, 1860,
	1873, 1886, 1899, 1904, 1910, 1916, 1922, 1934, 1945, 1956, 1967, 1971,
	1975, 1979, 1983, 2041, 2045, 2049, 2053, 2057, 2061, 2065, 2069, 2106,
	2114, 2122, 2130, 2138, 2146, 2154, 2162, 2171, 2177, 2183, 2189, 2195,
	2201, 2207, 2213, 2223, 2235, 2237, 2248, 2260, 2262, 2273, 2285, 2287,
	2298, 2310, 2312, 2323, 2333, 2343, 2353, 2364, 2369, 2374, 2379, 2384,
	2398, 2400, 2406, 2420, 2422, 2428, 2442, 2444, 2450, 2464, 2466, 2485,
	2489, 2495, 2499, 2505, 2509, 2515, 2519, 2523, 2530, 2535, 2540, 2547,
	2552, 2557, 2564, 2569, 2574, 2581, 2586, 2591, 2595, 2599, 2603, 2616,
	2629, 2642, 2655, 2672, 2689, 2707, 2725, 2732, 2739, 2746, 2753, 2763,
	2774, 2785, 2796, 2808, 2810, 2822, 2824, 2836, 2838, 2850, 2852, 2867,
	2869, 2884, 2886, 2901, 2903, 2918, 2920, 2941, 2943, 2952, 2969, 2971,
	2992, 2994, 3003, 3020, 3022, 3043, 3045, 3054, 3071, 3073, 3094, 3096,
	3105, 3122, 3124, 3142, 3144, 3162, 3164, 3182, 3184, 3202, 3204, 3222,
	3224, 3242, 3244, 3262, 3264, 3282, 3284, 3295, 3306, 3317, 3328, 3339,
	3350, 3361, 3372, 3383, 3394, 3405, 3416, 3427, 3438, 3449, 3460, 3471,
	3482, 3493, 3504, 3515, 3526, 3537, 3548, 3559, 3570, 3581, 3592, 3603,
	3614, 3625, 3636, 3647, 3658, 3669, 3680, 3691, 3702, 3713, 3724, 3734,
	3743, 3752, 3761, 3770, 3779, 3788, 3797, 3812, 3825, 3839, 3853, 3866,
	3879, 3893, 3907, 3917, 3928, 3939, 3950, 3961, 3972, 3983, 3994, 4010,
	4025, 4040, 4055, 4071, 4087, 4103, 4119, 4124, 4129, 4134, 4139, 4145,
	4151, 4157, 4163, 4169, 4175, 4181, 4187, 4191, 4195, 4199, 4203, 4207,
	4211, 4215, 4219, 4239, 4245, 4251, 4257, 4263, 4269, 4275, 4281, 4288,
	4293, 4298, 4303, 4308, 4313, 4318, 4323, 4327, 4331, 4335, 4339, 4343,
	4347, 4351, 4355, 4399, 4410, 4421, 4432, 4443, 4454, 4465, 4476, 4481,
	4486, 4490, 4495, 4499, 4504, 4508, 4513, 4517, 4522, 4526, 4531, 4535,
	4540, 4544, 4549, 4575, 4586, 4597, 4608, 4619, 4630, 4641, 4652, 4657,
	4662, 4666, 4671, 4675, 4680, 4684, 4689, 4693, 4698, 4702, 4707, 4711,
	4716, 4720, 4725, 4729, 4733, 4737, 4741, 4757, 4761, 4777, 4781, 4797,
	4801, 4817, 4821, 4825, 4828, 4839, 4842, 4846, 4850, 4853, 4864, 4867,
	4871, 4875, 4878, 4889, 4892, 4896, 4900, 4903, 4914, 4917, 4921, 4943,
	4954, 4965, 4976, 4987, 4998, 5009, 5020, 5024, 5029, 5034, 5039, 5048,
	5055, 5062, 5069, 5074, 5076, 5081, 5083, 5088, 5090, 5095, 5097, 5101,
	5105, 5109, 5113, 5119, 5125, 5131, 5137, 5171, 5187, 5203, 5219, 5235,
	5251, 5267, 5283, 5303, 5307, 5311, 5321, 5325, 5334, 5338, 5395, 5415,
	5419, 5423, 5433, 5437, 5446, 5450, 5507, 5527, 5531, 5535, 5545, 5549,
	5558, 5562, 5619, 5639, 5643, 5647, 5657, 5661, 5670, 5674, 5731, 5751,
	5755, 5759, 5769, 5773, 5782, 5786, 5843, 5863, 5867, 5871, 5881, 5885,
	5894, 5898, 5955, 5975, 5979, 5983, 5993, 5997, 6006, 6010, 6067, 6087,
	6091, 6095, 6105, 6109, 6118, 6122, 6179, 6195, 6199, 6203, 6207, 6211,
	6217, 6223, 6229, 6235, 6241, 6247, 6253, 6259, 6265, 6271, 6277, 6381,
	6389, 6396, 6401, 6407, 6415, 6422, 6427, 6433, 6441, 6448, 6453, 6459,
	6467, 6474, 6479, 6485, 6493, 6500, 6505, 6511, 6519, 6526, 6531, 6537,
	6545, 6552, 6557, 6563, 6571, 6578, 6583, 6589, 6595, 6601, 6607, 6613,
	6619, 6625, 6631, 6636, 6641, 6646, 6651, 6656, 6661, 6666, 6671, 6707,
	6711, 6715, 6719, 6723, 6727, 6731, 6735, 6766, 6781, 6796, 6811, 6826,
	6841, 6856, 6871, 6947, 6951, 6955, 6959, 7017, 7036, 7055, 7074, 7078,
	7105, 7117, 7129, 7141, 7151, 7162, 7173, 7184, 7212, 7215, 7218, 7221,
	7257, 7261, 7265, 7269, 7277, 7285, 7315, 7345, 7375, 7405, 7504, 7525,
	7546, 7567, 7572, 7586, 7589, 7594, 7597, 7602, 7605, 7610, 7613, 7720,
	7743, 7766, 7789, 7795, 7828, 7836, 7844, 7852, 7856, 7862, 7868, 7874,
	7879, 7883, 7888, 7892, 7897, 7901, 7906, 7910, 7929, 7934, 7939, 7944,
	7947, 7951, 7954, 7958, 7961, 7965, 7968, 7972, 8033, 8054, 8075, 8096,
	8101, 8163, 8174, 8185, 8196, 8207, 8218, 8229, 8240, 8259, 8264, 8269,
	8274, 8285, 8298, 8311, 8315, 8328, 8335, 8349, 8369, 8376, 8380, 8390,
	8397,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'/'", "'yield'", "'await'", "'this'", "'('", "')'", "'...'", "','",
	"'['", "']'", "'{'", "':'", "'='", "'.'", "'new'", "'super'", "'target'",
	"'++'", "'--'", "'delete'", "'void'", "'typeof'", "'+'", "'-'", "'~'",
	"'!'", "'**'", "'<<'", "'>>'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'instanceof'",
	"'in'", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'",
	"'||'", "'?'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='",
	"'>>>='", "'&='", "'^='", "'|='", "'**='", "';'", "'let'", "'const'", "'var'",
	"'if'", "'else'", "'do'", "'while'", "'for'", "'of'", "'continue'", "'break'",
	"'return'", "'with'", "'switch'", "'case'", "'default'", "'throw'", "'try'",
	"'catch'", "'finally'", "'debugger'", "'function'", "'=>'", "'get'", "'set'",
	"'*'", "'async'", "'class'", "'extends'", "'static'", "'import'", "'as'",
	"'from'", "'export'", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"'}'", "'null'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "WhiteSpace", "LineTerminator", "LineTerminatorSequence",
	"Comment", "MultiLineComment", "SingleLineComment", "CommonToken", "IdentifierName",
	"ReservedWord", "Keyword", "FutureReservedWord", "Punctuator", "DivPunctuator",
	"RightBracePunctuator", "NullLiteral", "BooleanLiteral", "NumericLiteral",
	"DecimalLiteral", "BinaryIntegerLiteral", "OctalIntegerLiteral", "HexIntegerLiteral",
	"StringLiteral", "RegularExpressionBody", "RegularExpressionChars", "RegularExpressionFirstChar",
	"RegularExpressionChar", "RegularExpressionBackslashSequence", "RegularExpressionNonTerminator",
	"RegularExpressionClass", "RegularExpressionClassChars", "RegularExpressionClassChar",
	"RegularExpressionFlags", "Template", "NoSubstitutionTemplate", "TemplateHead",
	"TemplateSubstitutionTail", "TemplateMiddle", "TemplateTail", "TemplateCharacters",
	"TemplateCharacter", "NotEscapeSequence", "NotCodePoint", "CodePoint",
	"Identifier", "MultiplicativeOperator",
}

var ruleNames = []string{
	"inputElementDiv", "inputElementRegExp", "inputElementRegExpOrTemplateTail",
	"inputElementTemplateTail", "regularExpressionLiteral", "identifierReference",
	"identifierReference_Yield", "identifierReference_Await", "identifierReference_Yield_Await",
	"bindingIdentifier", "bindingIdentifier_Yield", "bindingIdentifier_Await",
	"bindingIdentifier_Yield_Await", "labelIdentifier", "labelIdentifier_Yield",
	"labelIdentifier_Await", "labelIdentifier_Yield_Await", "primaryExpression",
	"primaryExpression_Yield", "primaryExpression_Await", "primaryExpression_Yield_Await",
	"coverParenthesizedExpressionAndArrowParameterList", "coverParenthesizedExpressionAndArrowParameterList_Yield",
	"coverParenthesizedExpressionAndArrowParameterList_Await", "coverParenthesizedExpressionAndArrowParameterList_Yield_Await",
	"literal", "arrayLiteral", "arrayLiteral_Yield", "arrayLiteral_Await",
	"arrayLiteral_Yield_Await", "elementList", "elementList_Yield", "elementList_Await",
	"elementList_Yield_Await", "elision", "spreadElement", "spreadElement_Yield",
	"spreadElement_Await", "spreadElement_Yield_Await", "objectLiteral", "objectLiteral_Yield",
	"objectLiteral_Await", "objectLiteral_Yield_Await", "propertyDefinitionList",
	"propertyDefinitionList_Yield", "propertyDefinitionList_Await", "propertyDefinitionList_Yield_Await",
	"propertyDefinition", "propertyDefinition_Yield", "propertyDefinition_Await",
	"propertyDefinition_Yield_Await", "propertyName", "propertyName_Yield",
	"propertyName_Await", "propertyName_Yield_Await", "literalPropertyName",
	"computedPropertyName", "computedPropertyName_Yield", "computedPropertyName_Await",
	"computedPropertyName_Yield_Await", "coverInitializedName", "coverInitializedName_Yield",
	"coverInitializedName_Await", "coverInitializedName_Yield_Await", "initializer",
	"initializer_In", "initializer_Yield", "initializer_In_Yield", "initializer_Await",
	"initializer_In_Await", "initializer_Yield_Await", "initializer_In_Yield_Await",
	"templateLiteral", "templateLiteral_Yield", "templateLiteral_Await", "templateLiteral_Yield_Await",
	"templateLiteral_Tagged", "templateLiteral_Yield_Tagged", "templateLiteral_Await_Tagged",
	"templateLiteral_Yield_Await_Tagged", "substitutionTemplate", "substitutionTemplate_Yield",
	"substitutionTemplate_Await", "substitutionTemplate_Yield_Await", "substitutionTemplate_Tagged",
	"substitutionTemplate_Yield_Tagged", "substitutionTemplate_Await_Tagged",
	"substitutionTemplate_Yield_Await_Tagged", "templateSpans", "templateSpans_Yield",
	"templateSpans_Await", "templateSpans_Yield_Await", "templateSpans_Tagged",
	"templateSpans_Yield_Tagged", "templateSpans_Await_Tagged", "templateSpans_Yield_Await_Tagged",
	"templateMiddleList", "templateMiddleList_Yield", "templateMiddleList_Await",
	"templateMiddleList_Yield_Await", "templateMiddleList_Tagged", "templateMiddleList_Yield_Tagged",
	"templateMiddleList_Await_Tagged", "templateMiddleList_Yield_Await_Tagged",
	"memberExpression", "memberExpression_Yield", "memberExpression_Await",
	"memberExpression_Yield_Await", "superProperty", "superProperty_Yield",
	"superProperty_Await", "superProperty_Yield_Await", "metaProperty", "newTarget",
	"theNewExpression", "theNewExpression_Yield", "theNewExpression_Await",
	"theNewExpression_Yield_Await", "callExpression", "callExpression_Yield",
	"callExpression_Await", "callExpression_Yield_Await", "superCall", "superCall_Yield",
	"superCall_Await", "superCall_Yield_Await", "arguments", "arguments_Yield",
	"arguments_Await", "arguments_Yield_Await", "argumentList", "argumentList_Yield",
	"argumentList_Await", "argumentList_Yield_Await", "leftHandSideExpression",
	"leftHandSideExpression_Yield", "leftHandSideExpression_Await", "leftHandSideExpression_Yield_Await",
	"updateExpression", "updateExpression_Yield", "updateExpression_Await",
	"updateExpression_Yield_Await", "unaryExpression", "unaryExpression_Yield",
	"unaryExpression_Await", "unaryExpression_Yield_Await", "exponentationExpression",
	"exponentationExpression_Yield", "exponentationExpression_Await", "exponentationExpression_Yield_Await",
	"multiplicativeExpression", "multiplicativeExpression_Yield", "multiplicativeExpression_Await",
	"multiplicativeExpression_Yield_Await", "additiveExpression", "additiveExpression_Yield",
	"additiveExpression_Await", "additiveExpression_Yield_Await", "shiftExpression",
	"shiftExpression_Yield", "shiftExpression_Await", "shiftExpression_Yield_Await",
	"relationalExpression", "relationalExpression_In", "relationalExpression_Yield",
	"relationalExpression_In_Yield", "relationalExpression_Await", "relationalExpression_In_Await",
	"relationalExpression_Yield_Await", "relationalExpression_In_Yield_Await",
	"equalityExpression", "equalityExpression_In", "equalityExpression_Yield",
	"equalityExpression_In_Yield", "equalityExpression_Await", "equalityExpression_In_Await",
	"equalityExpression_Yield_Await", "equalityExpression_In_Yield_Await",
	"bitwiseANDExpression", "bitwiseANDExpression_In", "bitwiseANDExpression_Yield",
	"bitwiseANDExpression_In_Yield", "bitwiseANDExpression_Await", "bitwiseANDExpression_In_Await",
	"bitwiseANDExpression_Yield_Await", "bitwiseANDExpression_In_Yield_Await",
	"bitwiseXORExpression", "bitwiseXORExpression_In", "bitwiseXORExpression_Yield",
	"bitwiseXORExpression_In_Yield", "bitwiseXORExpression_Await", "bitwiseXORExpression_In_Await",
	"bitwiseXORExpression_Yield_Await", "bitwiseXORExpression_In_Yield_Await",
	"bitwiseORExpression", "bitwiseORExpression_In", "bitwiseORExpression_Yield",
	"bitwiseORExpression_In_Yield", "bitwiseORExpression_Await", "bitwiseORExpression_In_Await",
	"bitwiseORExpression_Yield_Await", "bitwiseORExpression_In_Yield_Await",
	"logicalANDExpression", "logicalANDExpression_In", "logicalANDExpression_Yield",
	"logicalANDExpression_In_Yield", "logicalANDExpression_Await", "logicalANDExpression_In_Await",
	"logicalANDExpression_Yield_Await", "logicalANDExpression_In_Yield_Await",
	"logicalORExpression", "logicalORExpression_In", "logicalORExpression_Yield",
	"logicalORExpression_In_Yield", "logicalORExpression_Await", "logicalORExpression_In_Await",
	"logicalORExpression_Yield_Await", "logicalORExpression_In_Yield_Await",
	"conditionalExpression", "conditionalExpression_In", "conditionalExpression_Yield",
	"conditionalExpression_In_Yield", "conditionalExpression_Await", "conditionalExpression_In_Await",
	"conditionalExpression_Yield_Await", "conditionalExpression_In_Yield_Await",
	"assignmentOperator", "assignmentExpression", "assignmentExpression_In",
	"assignmentExpression_Yield", "assignmentExpression_In_Yield", "assignmentExpression_Await",
	"assignmentExpression_In_Await", "assignmentExpression_Yield_Await", "assignmentExpression_In_Yield_Await",
	"expression", "expression_In", "expression_Yield", "expression_In_Yield",
	"expression_Await", "expression_In_Await", "expression_Yield_Await", "expression_In_Yield_Await",
	"statement", "statement_Yield", "statement_Await", "statement_Yield_Await",
	"statement_Return", "statement_Yield_Return", "statement_Await_Return",
	"statement_Yield_Await_Return", "declaration", "declaration_Yield", "declaration_Await",
	"declaration_Yield_Await", "hoistableDeclaration", "hoistableDeclaration_Yield",
	"hoistableDeclaration_Await", "hoistableDeclaration_Yield_Await", "hoistableDeclaration_Default",
	"hoistableDeclaration_Yield_Default", "hoistableDeclaration_Await_Default",
	"hoistableDeclaration_Yield_Await_Default", "breakableStatement", "breakableStatement_Yield",
	"breakableStatement_Await", "breakableStatement_Yield_Await", "breakableStatement_Return",
	"breakableStatement_Yield_Return", "breakableStatement_Await_Return", "breakableStatement_Yield_Await_Return",
	"blockStatement", "blockStatement_Yield", "blockStatement_Await", "blockStatement_Yield_Await",
	"blockStatement_Return", "blockStatement_Yield_Return", "blockStatement_Await_Return",
	"blockStatement_Yield_Await_Return", "block", "block_Yield", "block_Await",
	"block_Yield_Await", "block_Return", "block_Yield_Return", "block_Await_Return",
	"block_Yield_Await_Return", "statementList", "statementList_Yield", "statementList_Await",
	"statementList_Yield_Await", "statementList_Return", "statementList_Yield_Return",
	"statementList_Await_Return", "statementList_Yield_Await_Return", "statementListItem",
	"statementListItem_Yield", "statementListItem_Await", "statementListItem_Yield_Await",
	"statementListItem_Return", "statementListItem_Yield_Return", "statementListItem_Await_Return",
	"statementListItem_Yield_Await_Return", "lexicalDeclaration", "lexicalDeclaration_In",
	"lexicalDeclaration_Yield", "lexicalDeclaration_In_Yield", "lexicalDeclaration_Await",
	"lexicalDeclaration_In_Await", "lexicalDeclaration_Yield_Await", "lexicalDeclaration_In_Yield_Await",
	"letOrConst", "bindingList", "bindingList_In", "bindingList_Yield", "bindingList_In_Yield",
	"bindingList_Await", "bindingList_In_Await", "bindingList_Yield_Await",
	"bindingList_In_Yield_Await", "lexicalBinding", "lexicalBinding_In", "lexicalBinding_Yield",
	"lexicalBinding_In_Yield", "lexicalBinding_Await", "lexicalBinding_In_Await",
	"lexicalBinding_Yield_Await", "lexicalBinding_In_Yield_Await", "variableStatement",
	"variableStatement_Yield", "variableStatement_Await", "variableStatement_Yield_Await",
	"variableDeclarationList", "variableDeclarationList_In", "variableDeclarationList_Yield",
	"variableDeclarationList_In_Yield", "variableDeclarationList_Await", "variableDeclarationList_In_Await",
	"variableDeclarationList_Yield_Await", "variableDeclarationList_In_Yield_Await",
	"variableDeclaration", "variableDeclaration_In", "variableDeclaration_Yield",
	"variableDeclaration_In_Yield", "variableDeclaration_Await", "variableDeclaration_In_Await",
	"variableDeclaration_Yield_Await", "variableDeclaration_In_Yield_Await",
	"bindingPattern", "bindingPattern_Yield", "bindingPattern_Await", "bindingPattern_Yield_Await",
	"objectBindingPattern", "objectBindingPattern_Yield", "objectBindingPattern_Await",
	"objectBindingPattern_Yield_Await", "arrayBindingPattern", "arrayBindingPattern_Yield",
	"arrayBindingPattern_Await", "arrayBindingPattern_Yield_Await", "bindingRestProperty",
	"bindingRestProperty_Yield", "bindingRestProperty_Await", "bindingRestProperty_Yield_Await",
	"bindingPropertyList", "bindingPropertyList_Yield", "bindingPropertyList_Await",
	"bindingPropertyList_Yield_Await", "bindingElementList", "bindingElementList_Yield",
	"bindingElementList_Await", "bindingElementList_Yield_Await", "bindingElisionElement",
	"bindingElisionElement_Yield", "bindingElisionElement_Await", "bindingElisionElement_Yield_Await",
	"bindingProperty", "bindingProperty_Yield", "bindingProperty_Await", "bindingProperty_Yield_Await",
	"bindingElement", "bindingElement_Yield", "bindingElement_Await", "bindingElement_Yield_Await",
	"singleNameBinding", "singleNameBinding_Yield", "singleNameBinding_Await",
	"singleNameBinding_Yield_Await", "bindingRestElement", "bindingRestElement_Yield",
	"bindingRestElement_Await", "bindingRestElement_Yield_Await", "theEmptyStatement",
	"expressionStatement", "expressionStatement_Yield", "expressionStatement_Await",
	"expressionStatement_Yield_Await", "ifStatement", "ifStatement_Yield",
	"ifStatement_Await", "ifStatement_Yield_Await", "ifStatement_Return", "ifStatement_Yield_Return",
	"ifStatement_Await_Return", "ifStatement_Yield_Await_Return", "iterationStatement",
	"iterationStatement_Yield", "iterationStatement_Await", "iterationStatement_Yield_Await",
	"iterationStatement_Return", "iterationStatement_Yield_Return", "iterationStatement_Await_Return",
	"iterationStatement_Yield_Await_Return", "forDeclaration", "forDeclaration_Yield",
	"forDeclaration_Await", "forDeclaration_Yield_Await", "forBinding", "forBinding_Yield",
	"forBinding_Await", "forBinding_Yield_Await", "continueStatement", "continueStatement_Yield",
	"continueStatement_Await", "continueStatement_Yield_Await", "breakStatement",
	"breakStatement_Yield", "breakStatement_Await", "breakStatement_Yield_Await",
	"returnStatement", "returnStatement_Yield", "returnStatement_Await", "returnStatement_Yield_Await",
	"withStatement", "withStatement_Yield", "withStatement_Await", "withStatement_Yield_Await",
	"withStatement_Return", "withStatement_Yield_Return", "withStatement_Await_Return",
	"withStatement_Yield_Await_Return", "switchStatement", "switchStatement_Yield",
	"switchStatement_Await", "switchStatement_Yield_Await", "switchStatement_Return",
	"switchStatement_Yield_Return", "switchStatement_Await_Return", "switchStatement_Yield_Await_Return",
	"caseBlock", "caseBlock_Yield", "caseBlock_Await", "caseBlock_Yield_Await",
	"caseBlock_Return", "caseBlock_Yield_Return", "caseBlock_Await_Return",
	"caseBlock_Yield_Await_Return", "caseClause", "caseClause_Yield", "caseClause_Await",
	"caseClause_Yield_Await", "caseClause_Return", "caseClause_Yield_Return",
	"caseClause_Await_Return", "caseClause_Yield_Await_Return", "defaultClause",
	"defaultClause_Yield", "defaultClause_Await", "defaultClause_Yield_Await",
	"defaultClause_Return", "defaultClause_Yield_Return", "defaultClause_Await_Return",
	"defaultClause_Yield_Await_Return", "labelledStatement", "labelledStatement_Yield",
	"labelledStatement_Await", "labelledStatement_Yield_Await", "labelledStatement_Return",
	"labelledStatement_Yield_Return", "labelledStatement_Await_Return", "labelledStatement_Yield_Await_Return",
	"labelledItem", "labelledItem_Yield", "labelledItem_Await", "labelledItem_Yield_Await",
	"labelledItem_Return", "labelledItem_Yield_Return", "labelledItem_Await_Return",
	"labelledItem_Yield_Await_Return", "throwStatement", "throwStatement_Yield",
	"throwStatement_Await", "throwStatement_Yield_Await", "tryStatement", "tryStatement_Yield",
	"tryStatement_Await", "tryStatement_Yield_Await", "tryStatement_Return",
	"tryStatement_Yield_Return", "tryStatement_Await_Return", "tryStatement_Yield_Await_Return",
	"catch_", "catch_Yield", "catch_Await", "catch_Yield_Await", "catch_Return",
	"catch_Yield_Return", "catch_Await_Return", "catch_Yield_Await_Return",
	"finally_", "finally_Yield", "finally_Await", "finally_Yield_Await", "finally_Return",
	"finally_Yield_Return", "finally_Await_Return", "finally_Yield_Await_Return",
	"catchParameter", "catchParameter_Yield", "catchParameter_Await", "catchParameter_Yield_Await",
	"debuggerStatement", "functionDeclaration", "functionDeclaration_Yield",
	"functionDeclaration_Await", "functionDeclaration_Yield_Await", "functionDeclaration_Default",
	"functionDeclaration_Yield_Default", "functionDeclaration_Await_Default",
	"functionDeclaration_Yield_Await_Default", "functionExpression", "uniqueFormalParameters",
	"uniqueFormalParameters_Yield", "uniqueFormalParameters_Await", "uniqueFormalParameters_Yield_Await",
	"formalParameters", "formalParameters_Yield", "formalParameters_Await",
	"formalParameters_Yield_Await", "formalParameterList", "formalParameterList_Yield",
	"formalParameterList_Await", "formalParameterList_Yield_Await", "functionRestParameter",
	"functionRestParameter_Yield", "functionRestParameter_Await", "functionRestParameter_Yield_Await",
	"formalParameter", "formalParameter_Yield", "formalParameter_Await", "formalParameter_Yield_Await",
	"functionBody", "functionBody_Yield", "functionBody_Await", "functionBody_Yield_Await",
	"functionStatementList", "functionStatementList_Yield", "functionStatementList_Await",
	"functionStatementList_Yield_Await", "arrowFunction", "arrowFunction_In",
	"arrowFunction_Yield", "arrowFunction_In_Yield", "arrowFunction_Await",
	"arrowFunction_In_Await", "arrowFunction_Yield_Await", "arrowFunction_In_Yield_Await",
	"arrowParameters", "arrowParameters_Yield", "arrowParameters_Await", "arrowParameters_Yield_Await",
	"conciseBody", "conciseBody_In", "methodDefinition", "methodDefinition_Yield",
	"methodDefinition_Await", "methodDefinition_Yield_Await", "propertySetParameterList",
	"generatorMethod", "generatorMethod_Yield", "generatorMethod_Await", "generatorMethod_Yield_Await",
	"generatorDeclaration", "generatorDeclaration_Yield", "generatorDeclaration_Await",
	"generatorDeclaration_Yield_Await", "generatorDeclaration_Default", "generatorDeclaration_Yield_Default",
	"generatorDeclaration_Await_Default", "generatorDeclaration_Yield_Await_Default",
	"generatorExpression", "generatorBody", "yieldExpression", "yieldExpression_In",
	"yieldExpression_Await", "yieldExpression_In_Await", "asyncGeneratorMethod",
	"asyncGeneratorMethod_Yield", "asyncGeneratorMethod_Await", "asyncGeneratorMethod_Yield_Await",
	"asyncGeneratorDeclaration", "asyncGeneratorDeclaration_Yield", "asyncGeneratorDeclaration_Await",
	"asyncGeneratorDeclaration_Yield_Await", "asyncGeneratorDeclaration_Default",
	"asyncGeneratorDeclaration_Yield_Default", "asyncGeneratorDeclaration_Await_Default",
	"asyncGeneratorDeclaration_Yield_Await_Default", "asyncGeneratorExpression",
	"asyncGeneratorBody", "classDeclaration", "classDeclaration_Yield", "classDeclaration_Await",
	"classDeclaration_Yield_Await", "classDeclaration_Default", "classDeclaration_Yield_Default",
	"classDeclaration_Await_Default", "classDeclaration_Yield_Await_Default",
	"classExpression", "classExpression_Yield", "classExpression_Await", "classExpression_Yield_Await",
	"classTail", "classTail_Yield", "classTail_Await", "classTail_Yield_Await",
	"classHeritage", "classHeritage_Yield", "classHeritage_Await", "classHeritage_Yield_Await",
	"classBody", "classBody_Yield", "classBody_Await", "classBody_Yield_Await",
	"classElement", "classElement_Yield", "classElement_Await", "classElement_Yield_Await",
	"asyncFunctionDeclaration", "asyncFunctionDeclaration_Yield", "asyncFunctionDeclaration_Await",
	"asyncFunctionDeclaration_Yield_Await", "asyncFunctionDeclaration_Default",
	"asyncFunctionDeclaration_Yield_Default", "asyncFunctionDeclaration_Await_Default",
	"asyncFunctionDeclaration_Yield_Await_Default", "asyncFunctionExpression",
	"asyncMethod", "asyncMethod_Yield", "asyncMethod_Await", "asyncMethod_Yield_Await",
	"asyncFunctionBody", "awaitExpression", "awaitExpression_Yield", "asyncArrowFunction",
	"asyncArrowFunction_In", "asyncArrowFunction_Yield", "asyncArrowFunction_In_Yield",
	"asyncArrowFunction_Await", "asyncArrowFunction_In_Await", "asyncArrowFunction_Yield_Await",
	"asyncArrowFunction_In_Yield_Await", "asyncArrowBindingIdentifier", "asyncArrowBindingIdentifier_Yield",
	"coverCallExpressionAndAsyncArrowHead", "coverCallExpressionAndAsyncArrowHead_Yield",
	"coverCallExpressionAndAsyncArrowHead_Await", "coverCallExpressionAndAsyncArrowHead_Yield_Await",
	"script", "scriptBody", "module", "moduleBody", "moduleItem", "importDeclaration",
	"importClause", "importedDefaultBinding", "nameSpaceImport", "namedImports",
	"fromClause", "importsList", "importSpecifier", "moduleSpecifier", "importedBinding",
	"exportDeclaration", "exportClause", "exportsList", "exportSpecifier",
	"asyncConciseBody", "asyncConciseBody_In",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type ECMAScriptParser struct {
	*antlr.BaseParser
}

func NewECMAScriptParser(input antlr.TokenStream) *ECMAScriptParser {
	this := new(ECMAScriptParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "ECMAScript.g4"

	return this
}

// ECMAScriptParser tokens.
const (
	ECMAScriptParserEOF                                = antlr.TokenEOF
	ECMAScriptParserT__0                               = 1
	ECMAScriptParserT__1                               = 2
	ECMAScriptParserT__2                               = 3
	ECMAScriptParserT__3                               = 4
	ECMAScriptParserT__4                               = 5
	ECMAScriptParserT__5                               = 6
	ECMAScriptParserT__6                               = 7
	ECMAScriptParserT__7                               = 8
	ECMAScriptParserT__8                               = 9
	ECMAScriptParserT__9                               = 10
	ECMAScriptParserT__10                              = 11
	ECMAScriptParserT__11                              = 12
	ECMAScriptParserT__12                              = 13
	ECMAScriptParserT__13                              = 14
	ECMAScriptParserT__14                              = 15
	ECMAScriptParserT__15                              = 16
	ECMAScriptParserT__16                              = 17
	ECMAScriptParserT__17                              = 18
	ECMAScriptParserT__18                              = 19
	ECMAScriptParserT__19                              = 20
	ECMAScriptParserT__20                              = 21
	ECMAScriptParserT__21                              = 22
	ECMAScriptParserT__22                              = 23
	ECMAScriptParserT__23                              = 24
	ECMAScriptParserT__24                              = 25
	ECMAScriptParserT__25                              = 26
	ECMAScriptParserT__26                              = 27
	ECMAScriptParserT__27                              = 28
	ECMAScriptParserT__28                              = 29
	ECMAScriptParserT__29                              = 30
	ECMAScriptParserT__30                              = 31
	ECMAScriptParserT__31                              = 32
	ECMAScriptParserT__32                              = 33
	ECMAScriptParserT__33                              = 34
	ECMAScriptParserT__34                              = 35
	ECMAScriptParserT__35                              = 36
	ECMAScriptParserT__36                              = 37
	ECMAScriptParserT__37                              = 38
	ECMAScriptParserT__38                              = 39
	ECMAScriptParserT__39                              = 40
	ECMAScriptParserT__40                              = 41
	ECMAScriptParserT__41                              = 42
	ECMAScriptParserT__42                              = 43
	ECMAScriptParserT__43                              = 44
	ECMAScriptParserT__44                              = 45
	ECMAScriptParserT__45                              = 46
	ECMAScriptParserT__46                              = 47
	ECMAScriptParserT__47                              = 48
	ECMAScriptParserT__48                              = 49
	ECMAScriptParserT__49                              = 50
	ECMAScriptParserT__50                              = 51
	ECMAScriptParserT__51                              = 52
	ECMAScriptParserT__52                              = 53
	ECMAScriptParserT__53                              = 54
	ECMAScriptParserT__54                              = 55
	ECMAScriptParserT__55                              = 56
	ECMAScriptParserT__56                              = 57
	ECMAScriptParserT__57                              = 58
	ECMAScriptParserT__58                              = 59
	ECMAScriptParserT__59                              = 60
	ECMAScriptParserT__60                              = 61
	ECMAScriptParserT__61                              = 62
	ECMAScriptParserT__62                              = 63
	ECMAScriptParserT__63                              = 64
	ECMAScriptParserT__64                              = 65
	ECMAScriptParserT__65                              = 66
	ECMAScriptParserT__66                              = 67
	ECMAScriptParserT__67                              = 68
	ECMAScriptParserT__68                              = 69
	ECMAScriptParserT__69                              = 70
	ECMAScriptParserT__70                              = 71
	ECMAScriptParserT__71                              = 72
	ECMAScriptParserT__72                              = 73
	ECMAScriptParserT__73                              = 74
	ECMAScriptParserT__74                              = 75
	ECMAScriptParserT__75                              = 76
	ECMAScriptParserT__76                              = 77
	ECMAScriptParserT__77                              = 78
	ECMAScriptParserT__78                              = 79
	ECMAScriptParserT__79                              = 80
	ECMAScriptParserT__80                              = 81
	ECMAScriptParserT__81                              = 82
	ECMAScriptParserT__82                              = 83
	ECMAScriptParserT__83                              = 84
	ECMAScriptParserT__84                              = 85
	ECMAScriptParserT__85                              = 86
	ECMAScriptParserT__86                              = 87
	ECMAScriptParserT__87                              = 88
	ECMAScriptParserT__88                              = 89
	ECMAScriptParserT__89                              = 90
	ECMAScriptParserT__90                              = 91
	ECMAScriptParserT__91                              = 92
	ECMAScriptParserT__92                              = 93
	ECMAScriptParserWhiteSpace                         = 94
	ECMAScriptParserLineTerminator                     = 95
	ECMAScriptParserLineTerminatorSequence             = 96
	ECMAScriptParserComment                            = 97
	ECMAScriptParserMultiLineComment                   = 98
	ECMAScriptParserSingleLineComment                  = 99
	ECMAScriptParserCommonToken                        = 100
	ECMAScriptParserIdentifierName                     = 101
	ECMAScriptParserReservedWord                       = 102
	ECMAScriptParserKeyword                            = 103
	ECMAScriptParserFutureReservedWord                 = 104
	ECMAScriptParserPunctuator                         = 105
	ECMAScriptParserDivPunctuator                      = 106
	ECMAScriptParserRightBracePunctuator               = 107
	ECMAScriptParserNullLiteral                        = 108
	ECMAScriptParserBooleanLiteral                     = 109
	ECMAScriptParserNumericLiteral                     = 110
	ECMAScriptParserDecimalLiteral                     = 111
	ECMAScriptParserBinaryIntegerLiteral               = 112
	ECMAScriptParserOctalIntegerLiteral                = 113
	ECMAScriptParserHexIntegerLiteral                  = 114
	ECMAScriptParserStringLiteral                      = 115
	ECMAScriptParserRegularExpressionBody              = 116
	ECMAScriptParserRegularExpressionChars             = 117
	ECMAScriptParserRegularExpressionFirstChar         = 118
	ECMAScriptParserRegularExpressionChar              = 119
	ECMAScriptParserRegularExpressionBackslashSequence = 120
	ECMAScriptParserRegularExpressionNonTerminator     = 121
	ECMAScriptParserRegularExpressionClass             = 122
	ECMAScriptParserRegularExpressionClassChars        = 123
	ECMAScriptParserRegularExpressionClassChar         = 124
	ECMAScriptParserRegularExpressionFlags             = 125
	ECMAScriptParserTemplate                           = 126
	ECMAScriptParserNoSubstitutionTemplate             = 127
	ECMAScriptParserTemplateHead                       = 128
	ECMAScriptParserTemplateSubstitutionTail           = 129
	ECMAScriptParserTemplateMiddle                     = 130
	ECMAScriptParserTemplateTail                       = 131
	ECMAScriptParserTemplateCharacters                 = 132
	ECMAScriptParserTemplateCharacter                  = 133
	ECMAScriptParserNotEscapeSequence                  = 134
	ECMAScriptParserNotCodePoint                       = 135
	ECMAScriptParserCodePoint                          = 136
	ECMAScriptParserIdentifier                         = 137
	ECMAScriptParserMultiplicativeOperator             = 138
)

// ECMAScriptParser rules.
const (
	ECMAScriptParserRULE_inputElementDiv                                               = 0
	ECMAScriptParserRULE_inputElementRegExp                                            = 1
	ECMAScriptParserRULE_inputElementRegExpOrTemplateTail                              = 2
	ECMAScriptParserRULE_inputElementTemplateTail                                      = 3
	ECMAScriptParserRULE_regularExpressionLiteral                                      = 4
	ECMAScriptParserRULE_identifierReference                                           = 5
	ECMAScriptParserRULE_identifierReference_Yield                                     = 6
	ECMAScriptParserRULE_identifierReference_Await                                     = 7
	ECMAScriptParserRULE_identifierReference_Yield_Await                               = 8
	ECMAScriptParserRULE_bindingIdentifier                                             = 9
	ECMAScriptParserRULE_bindingIdentifier_Yield                                       = 10
	ECMAScriptParserRULE_bindingIdentifier_Await                                       = 11
	ECMAScriptParserRULE_bindingIdentifier_Yield_Await                                 = 12
	ECMAScriptParserRULE_labelIdentifier                                               = 13
	ECMAScriptParserRULE_labelIdentifier_Yield                                         = 14
	ECMAScriptParserRULE_labelIdentifier_Await                                         = 15
	ECMAScriptParserRULE_labelIdentifier_Yield_Await                                   = 16
	ECMAScriptParserRULE_primaryExpression                                             = 17
	ECMAScriptParserRULE_primaryExpression_Yield                                       = 18
	ECMAScriptParserRULE_primaryExpression_Await                                       = 19
	ECMAScriptParserRULE_primaryExpression_Yield_Await                                 = 20
	ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList             = 21
	ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Yield       = 22
	ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Await       = 23
	ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Yield_Await = 24
	ECMAScriptParserRULE_literal                                                       = 25
	ECMAScriptParserRULE_arrayLiteral                                                  = 26
	ECMAScriptParserRULE_arrayLiteral_Yield                                            = 27
	ECMAScriptParserRULE_arrayLiteral_Await                                            = 28
	ECMAScriptParserRULE_arrayLiteral_Yield_Await                                      = 29
	ECMAScriptParserRULE_elementList                                                   = 30
	ECMAScriptParserRULE_elementList_Yield                                             = 31
	ECMAScriptParserRULE_elementList_Await                                             = 32
	ECMAScriptParserRULE_elementList_Yield_Await                                       = 33
	ECMAScriptParserRULE_elision                                                       = 34
	ECMAScriptParserRULE_spreadElement                                                 = 35
	ECMAScriptParserRULE_spreadElement_Yield                                           = 36
	ECMAScriptParserRULE_spreadElement_Await                                           = 37
	ECMAScriptParserRULE_spreadElement_Yield_Await                                     = 38
	ECMAScriptParserRULE_objectLiteral                                                 = 39
	ECMAScriptParserRULE_objectLiteral_Yield                                           = 40
	ECMAScriptParserRULE_objectLiteral_Await                                           = 41
	ECMAScriptParserRULE_objectLiteral_Yield_Await                                     = 42
	ECMAScriptParserRULE_propertyDefinitionList                                        = 43
	ECMAScriptParserRULE_propertyDefinitionList_Yield                                  = 44
	ECMAScriptParserRULE_propertyDefinitionList_Await                                  = 45
	ECMAScriptParserRULE_propertyDefinitionList_Yield_Await                            = 46
	ECMAScriptParserRULE_propertyDefinition                                            = 47
	ECMAScriptParserRULE_propertyDefinition_Yield                                      = 48
	ECMAScriptParserRULE_propertyDefinition_Await                                      = 49
	ECMAScriptParserRULE_propertyDefinition_Yield_Await                                = 50
	ECMAScriptParserRULE_propertyName                                                  = 51
	ECMAScriptParserRULE_propertyName_Yield                                            = 52
	ECMAScriptParserRULE_propertyName_Await                                            = 53
	ECMAScriptParserRULE_propertyName_Yield_Await                                      = 54
	ECMAScriptParserRULE_literalPropertyName                                           = 55
	ECMAScriptParserRULE_computedPropertyName                                          = 56
	ECMAScriptParserRULE_computedPropertyName_Yield                                    = 57
	ECMAScriptParserRULE_computedPropertyName_Await                                    = 58
	ECMAScriptParserRULE_computedPropertyName_Yield_Await                              = 59
	ECMAScriptParserRULE_coverInitializedName                                          = 60
	ECMAScriptParserRULE_coverInitializedName_Yield                                    = 61
	ECMAScriptParserRULE_coverInitializedName_Await                                    = 62
	ECMAScriptParserRULE_coverInitializedName_Yield_Await                              = 63
	ECMAScriptParserRULE_initializer                                                   = 64
	ECMAScriptParserRULE_initializer_In                                                = 65
	ECMAScriptParserRULE_initializer_Yield                                             = 66
	ECMAScriptParserRULE_initializer_In_Yield                                          = 67
	ECMAScriptParserRULE_initializer_Await                                             = 68
	ECMAScriptParserRULE_initializer_In_Await                                          = 69
	ECMAScriptParserRULE_initializer_Yield_Await                                       = 70
	ECMAScriptParserRULE_initializer_In_Yield_Await                                    = 71
	ECMAScriptParserRULE_templateLiteral                                               = 72
	ECMAScriptParserRULE_templateLiteral_Yield                                         = 73
	ECMAScriptParserRULE_templateLiteral_Await                                         = 74
	ECMAScriptParserRULE_templateLiteral_Yield_Await                                   = 75
	ECMAScriptParserRULE_templateLiteral_Tagged                                        = 76
	ECMAScriptParserRULE_templateLiteral_Yield_Tagged                                  = 77
	ECMAScriptParserRULE_templateLiteral_Await_Tagged                                  = 78
	ECMAScriptParserRULE_templateLiteral_Yield_Await_Tagged                            = 79
	ECMAScriptParserRULE_substitutionTemplate                                          = 80
	ECMAScriptParserRULE_substitutionTemplate_Yield                                    = 81
	ECMAScriptParserRULE_substitutionTemplate_Await                                    = 82
	ECMAScriptParserRULE_substitutionTemplate_Yield_Await                              = 83
	ECMAScriptParserRULE_substitutionTemplate_Tagged                                   = 84
	ECMAScriptParserRULE_substitutionTemplate_Yield_Tagged                             = 85
	ECMAScriptParserRULE_substitutionTemplate_Await_Tagged                             = 86
	ECMAScriptParserRULE_substitutionTemplate_Yield_Await_Tagged                       = 87
	ECMAScriptParserRULE_templateSpans                                                 = 88
	ECMAScriptParserRULE_templateSpans_Yield                                           = 89
	ECMAScriptParserRULE_templateSpans_Await                                           = 90
	ECMAScriptParserRULE_templateSpans_Yield_Await                                     = 91
	ECMAScriptParserRULE_templateSpans_Tagged                                          = 92
	ECMAScriptParserRULE_templateSpans_Yield_Tagged                                    = 93
	ECMAScriptParserRULE_templateSpans_Await_Tagged                                    = 94
	ECMAScriptParserRULE_templateSpans_Yield_Await_Tagged                              = 95
	ECMAScriptParserRULE_templateMiddleList                                            = 96
	ECMAScriptParserRULE_templateMiddleList_Yield                                      = 97
	ECMAScriptParserRULE_templateMiddleList_Await                                      = 98
	ECMAScriptParserRULE_templateMiddleList_Yield_Await                                = 99
	ECMAScriptParserRULE_templateMiddleList_Tagged                                     = 100
	ECMAScriptParserRULE_templateMiddleList_Yield_Tagged                               = 101
	ECMAScriptParserRULE_templateMiddleList_Await_Tagged                               = 102
	ECMAScriptParserRULE_templateMiddleList_Yield_Await_Tagged                         = 103
	ECMAScriptParserRULE_memberExpression                                              = 104
	ECMAScriptParserRULE_memberExpression_Yield                                        = 105
	ECMAScriptParserRULE_memberExpression_Await                                        = 106
	ECMAScriptParserRULE_memberExpression_Yield_Await                                  = 107
	ECMAScriptParserRULE_superProperty                                                 = 108
	ECMAScriptParserRULE_superProperty_Yield                                           = 109
	ECMAScriptParserRULE_superProperty_Await                                           = 110
	ECMAScriptParserRULE_superProperty_Yield_Await                                     = 111
	ECMAScriptParserRULE_metaProperty                                                  = 112
	ECMAScriptParserRULE_newTarget                                                     = 113
	ECMAScriptParserRULE_theNewExpression                                              = 114
	ECMAScriptParserRULE_theNewExpression_Yield                                        = 115
	ECMAScriptParserRULE_theNewExpression_Await                                        = 116
	ECMAScriptParserRULE_theNewExpression_Yield_Await                                  = 117
	ECMAScriptParserRULE_callExpression                                                = 118
	ECMAScriptParserRULE_callExpression_Yield                                          = 119
	ECMAScriptParserRULE_callExpression_Await                                          = 120
	ECMAScriptParserRULE_callExpression_Yield_Await                                    = 121
	ECMAScriptParserRULE_superCall                                                     = 122
	ECMAScriptParserRULE_superCall_Yield                                               = 123
	ECMAScriptParserRULE_superCall_Await                                               = 124
	ECMAScriptParserRULE_superCall_Yield_Await                                         = 125
	ECMAScriptParserRULE_arguments                                                     = 126
	ECMAScriptParserRULE_arguments_Yield                                               = 127
	ECMAScriptParserRULE_arguments_Await                                               = 128
	ECMAScriptParserRULE_arguments_Yield_Await                                         = 129
	ECMAScriptParserRULE_argumentList                                                  = 130
	ECMAScriptParserRULE_argumentList_Yield                                            = 131
	ECMAScriptParserRULE_argumentList_Await                                            = 132
	ECMAScriptParserRULE_argumentList_Yield_Await                                      = 133
	ECMAScriptParserRULE_leftHandSideExpression                                        = 134
	ECMAScriptParserRULE_leftHandSideExpression_Yield                                  = 135
	ECMAScriptParserRULE_leftHandSideExpression_Await                                  = 136
	ECMAScriptParserRULE_leftHandSideExpression_Yield_Await                            = 137
	ECMAScriptParserRULE_updateExpression                                              = 138
	ECMAScriptParserRULE_updateExpression_Yield                                        = 139
	ECMAScriptParserRULE_updateExpression_Await                                        = 140
	ECMAScriptParserRULE_updateExpression_Yield_Await                                  = 141
	ECMAScriptParserRULE_unaryExpression                                               = 142
	ECMAScriptParserRULE_unaryExpression_Yield                                         = 143
	ECMAScriptParserRULE_unaryExpression_Await                                         = 144
	ECMAScriptParserRULE_unaryExpression_Yield_Await                                   = 145
	ECMAScriptParserRULE_exponentationExpression                                       = 146
	ECMAScriptParserRULE_exponentationExpression_Yield                                 = 147
	ECMAScriptParserRULE_exponentationExpression_Await                                 = 148
	ECMAScriptParserRULE_exponentationExpression_Yield_Await                           = 149
	ECMAScriptParserRULE_multiplicativeExpression                                      = 150
	ECMAScriptParserRULE_multiplicativeExpression_Yield                                = 151
	ECMAScriptParserRULE_multiplicativeExpression_Await                                = 152
	ECMAScriptParserRULE_multiplicativeExpression_Yield_Await                          = 153
	ECMAScriptParserRULE_additiveExpression                                            = 154
	ECMAScriptParserRULE_additiveExpression_Yield                                      = 155
	ECMAScriptParserRULE_additiveExpression_Await                                      = 156
	ECMAScriptParserRULE_additiveExpression_Yield_Await                                = 157
	ECMAScriptParserRULE_shiftExpression                                               = 158
	ECMAScriptParserRULE_shiftExpression_Yield                                         = 159
	ECMAScriptParserRULE_shiftExpression_Await                                         = 160
	ECMAScriptParserRULE_shiftExpression_Yield_Await                                   = 161
	ECMAScriptParserRULE_relationalExpression                                          = 162
	ECMAScriptParserRULE_relationalExpression_In                                       = 163
	ECMAScriptParserRULE_relationalExpression_Yield                                    = 164
	ECMAScriptParserRULE_relationalExpression_In_Yield                                 = 165
	ECMAScriptParserRULE_relationalExpression_Await                                    = 166
	ECMAScriptParserRULE_relationalExpression_In_Await                                 = 167
	ECMAScriptParserRULE_relationalExpression_Yield_Await                              = 168
	ECMAScriptParserRULE_relationalExpression_In_Yield_Await                           = 169
	ECMAScriptParserRULE_equalityExpression                                            = 170
	ECMAScriptParserRULE_equalityExpression_In                                         = 171
	ECMAScriptParserRULE_equalityExpression_Yield                                      = 172
	ECMAScriptParserRULE_equalityExpression_In_Yield                                   = 173
	ECMAScriptParserRULE_equalityExpression_Await                                      = 174
	ECMAScriptParserRULE_equalityExpression_In_Await                                   = 175
	ECMAScriptParserRULE_equalityExpression_Yield_Await                                = 176
	ECMAScriptParserRULE_equalityExpression_In_Yield_Await                             = 177
	ECMAScriptParserRULE_bitwiseANDExpression                                          = 178
	ECMAScriptParserRULE_bitwiseANDExpression_In                                       = 179
	ECMAScriptParserRULE_bitwiseANDExpression_Yield                                    = 180
	ECMAScriptParserRULE_bitwiseANDExpression_In_Yield                                 = 181
	ECMAScriptParserRULE_bitwiseANDExpression_Await                                    = 182
	ECMAScriptParserRULE_bitwiseANDExpression_In_Await                                 = 183
	ECMAScriptParserRULE_bitwiseANDExpression_Yield_Await                              = 184
	ECMAScriptParserRULE_bitwiseANDExpression_In_Yield_Await                           = 185
	ECMAScriptParserRULE_bitwiseXORExpression                                          = 186
	ECMAScriptParserRULE_bitwiseXORExpression_In                                       = 187
	ECMAScriptParserRULE_bitwiseXORExpression_Yield                                    = 188
	ECMAScriptParserRULE_bitwiseXORExpression_In_Yield                                 = 189
	ECMAScriptParserRULE_bitwiseXORExpression_Await                                    = 190
	ECMAScriptParserRULE_bitwiseXORExpression_In_Await                                 = 191
	ECMAScriptParserRULE_bitwiseXORExpression_Yield_Await                              = 192
	ECMAScriptParserRULE_bitwiseXORExpression_In_Yield_Await                           = 193
	ECMAScriptParserRULE_bitwiseORExpression                                           = 194
	ECMAScriptParserRULE_bitwiseORExpression_In                                        = 195
	ECMAScriptParserRULE_bitwiseORExpression_Yield                                     = 196
	ECMAScriptParserRULE_bitwiseORExpression_In_Yield                                  = 197
	ECMAScriptParserRULE_bitwiseORExpression_Await                                     = 198
	ECMAScriptParserRULE_bitwiseORExpression_In_Await                                  = 199
	ECMAScriptParserRULE_bitwiseORExpression_Yield_Await                               = 200
	ECMAScriptParserRULE_bitwiseORExpression_In_Yield_Await                            = 201
	ECMAScriptParserRULE_logicalANDExpression                                          = 202
	ECMAScriptParserRULE_logicalANDExpression_In                                       = 203
	ECMAScriptParserRULE_logicalANDExpression_Yield                                    = 204
	ECMAScriptParserRULE_logicalANDExpression_In_Yield                                 = 205
	ECMAScriptParserRULE_logicalANDExpression_Await                                    = 206
	ECMAScriptParserRULE_logicalANDExpression_In_Await                                 = 207
	ECMAScriptParserRULE_logicalANDExpression_Yield_Await                              = 208
	ECMAScriptParserRULE_logicalANDExpression_In_Yield_Await                           = 209
	ECMAScriptParserRULE_logicalORExpression                                           = 210
	ECMAScriptParserRULE_logicalORExpression_In                                        = 211
	ECMAScriptParserRULE_logicalORExpression_Yield                                     = 212
	ECMAScriptParserRULE_logicalORExpression_In_Yield                                  = 213
	ECMAScriptParserRULE_logicalORExpression_Await                                     = 214
	ECMAScriptParserRULE_logicalORExpression_In_Await                                  = 215
	ECMAScriptParserRULE_logicalORExpression_Yield_Await                               = 216
	ECMAScriptParserRULE_logicalORExpression_In_Yield_Await                            = 217
	ECMAScriptParserRULE_conditionalExpression                                         = 218
	ECMAScriptParserRULE_conditionalExpression_In                                      = 219
	ECMAScriptParserRULE_conditionalExpression_Yield                                   = 220
	ECMAScriptParserRULE_conditionalExpression_In_Yield                                = 221
	ECMAScriptParserRULE_conditionalExpression_Await                                   = 222
	ECMAScriptParserRULE_conditionalExpression_In_Await                                = 223
	ECMAScriptParserRULE_conditionalExpression_Yield_Await                             = 224
	ECMAScriptParserRULE_conditionalExpression_In_Yield_Await                          = 225
	ECMAScriptParserRULE_assignmentOperator                                            = 226
	ECMAScriptParserRULE_assignmentExpression                                          = 227
	ECMAScriptParserRULE_assignmentExpression_In                                       = 228
	ECMAScriptParserRULE_assignmentExpression_Yield                                    = 229
	ECMAScriptParserRULE_assignmentExpression_In_Yield                                 = 230
	ECMAScriptParserRULE_assignmentExpression_Await                                    = 231
	ECMAScriptParserRULE_assignmentExpression_In_Await                                 = 232
	ECMAScriptParserRULE_assignmentExpression_Yield_Await                              = 233
	ECMAScriptParserRULE_assignmentExpression_In_Yield_Await                           = 234
	ECMAScriptParserRULE_expression                                                    = 235
	ECMAScriptParserRULE_expression_In                                                 = 236
	ECMAScriptParserRULE_expression_Yield                                              = 237
	ECMAScriptParserRULE_expression_In_Yield                                           = 238
	ECMAScriptParserRULE_expression_Await                                              = 239
	ECMAScriptParserRULE_expression_In_Await                                           = 240
	ECMAScriptParserRULE_expression_Yield_Await                                        = 241
	ECMAScriptParserRULE_expression_In_Yield_Await                                     = 242
	ECMAScriptParserRULE_statement                                                     = 243
	ECMAScriptParserRULE_statement_Yield                                               = 244
	ECMAScriptParserRULE_statement_Await                                               = 245
	ECMAScriptParserRULE_statement_Yield_Await                                         = 246
	ECMAScriptParserRULE_statement_Return                                              = 247
	ECMAScriptParserRULE_statement_Yield_Return                                        = 248
	ECMAScriptParserRULE_statement_Await_Return                                        = 249
	ECMAScriptParserRULE_statement_Yield_Await_Return                                  = 250
	ECMAScriptParserRULE_declaration                                                   = 251
	ECMAScriptParserRULE_declaration_Yield                                             = 252
	ECMAScriptParserRULE_declaration_Await                                             = 253
	ECMAScriptParserRULE_declaration_Yield_Await                                       = 254
	ECMAScriptParserRULE_hoistableDeclaration                                          = 255
	ECMAScriptParserRULE_hoistableDeclaration_Yield                                    = 256
	ECMAScriptParserRULE_hoistableDeclaration_Await                                    = 257
	ECMAScriptParserRULE_hoistableDeclaration_Yield_Await                              = 258
	ECMAScriptParserRULE_hoistableDeclaration_Default                                  = 259
	ECMAScriptParserRULE_hoistableDeclaration_Yield_Default                            = 260
	ECMAScriptParserRULE_hoistableDeclaration_Await_Default                            = 261
	ECMAScriptParserRULE_hoistableDeclaration_Yield_Await_Default                      = 262
	ECMAScriptParserRULE_breakableStatement                                            = 263
	ECMAScriptParserRULE_breakableStatement_Yield                                      = 264
	ECMAScriptParserRULE_breakableStatement_Await                                      = 265
	ECMAScriptParserRULE_breakableStatement_Yield_Await                                = 266
	ECMAScriptParserRULE_breakableStatement_Return                                     = 267
	ECMAScriptParserRULE_breakableStatement_Yield_Return                               = 268
	ECMAScriptParserRULE_breakableStatement_Await_Return                               = 269
	ECMAScriptParserRULE_breakableStatement_Yield_Await_Return                         = 270
	ECMAScriptParserRULE_blockStatement                                                = 271
	ECMAScriptParserRULE_blockStatement_Yield                                          = 272
	ECMAScriptParserRULE_blockStatement_Await                                          = 273
	ECMAScriptParserRULE_blockStatement_Yield_Await                                    = 274
	ECMAScriptParserRULE_blockStatement_Return                                         = 275
	ECMAScriptParserRULE_blockStatement_Yield_Return                                   = 276
	ECMAScriptParserRULE_blockStatement_Await_Return                                   = 277
	ECMAScriptParserRULE_blockStatement_Yield_Await_Return                             = 278
	ECMAScriptParserRULE_block                                                         = 279
	ECMAScriptParserRULE_block_Yield                                                   = 280
	ECMAScriptParserRULE_block_Await                                                   = 281
	ECMAScriptParserRULE_block_Yield_Await                                             = 282
	ECMAScriptParserRULE_block_Return                                                  = 283
	ECMAScriptParserRULE_block_Yield_Return                                            = 284
	ECMAScriptParserRULE_block_Await_Return                                            = 285
	ECMAScriptParserRULE_block_Yield_Await_Return                                      = 286
	ECMAScriptParserRULE_statementList                                                 = 287
	ECMAScriptParserRULE_statementList_Yield                                           = 288
	ECMAScriptParserRULE_statementList_Await                                           = 289
	ECMAScriptParserRULE_statementList_Yield_Await                                     = 290
	ECMAScriptParserRULE_statementList_Return                                          = 291
	ECMAScriptParserRULE_statementList_Yield_Return                                    = 292
	ECMAScriptParserRULE_statementList_Await_Return                                    = 293
	ECMAScriptParserRULE_statementList_Yield_Await_Return                              = 294
	ECMAScriptParserRULE_statementListItem                                             = 295
	ECMAScriptParserRULE_statementListItem_Yield                                       = 296
	ECMAScriptParserRULE_statementListItem_Await                                       = 297
	ECMAScriptParserRULE_statementListItem_Yield_Await                                 = 298
	ECMAScriptParserRULE_statementListItem_Return                                      = 299
	ECMAScriptParserRULE_statementListItem_Yield_Return                                = 300
	ECMAScriptParserRULE_statementListItem_Await_Return                                = 301
	ECMAScriptParserRULE_statementListItem_Yield_Await_Return                          = 302
	ECMAScriptParserRULE_lexicalDeclaration                                            = 303
	ECMAScriptParserRULE_lexicalDeclaration_In                                         = 304
	ECMAScriptParserRULE_lexicalDeclaration_Yield                                      = 305
	ECMAScriptParserRULE_lexicalDeclaration_In_Yield                                   = 306
	ECMAScriptParserRULE_lexicalDeclaration_Await                                      = 307
	ECMAScriptParserRULE_lexicalDeclaration_In_Await                                   = 308
	ECMAScriptParserRULE_lexicalDeclaration_Yield_Await                                = 309
	ECMAScriptParserRULE_lexicalDeclaration_In_Yield_Await                             = 310
	ECMAScriptParserRULE_letOrConst                                                    = 311
	ECMAScriptParserRULE_bindingList                                                   = 312
	ECMAScriptParserRULE_bindingList_In                                                = 313
	ECMAScriptParserRULE_bindingList_Yield                                             = 314
	ECMAScriptParserRULE_bindingList_In_Yield                                          = 315
	ECMAScriptParserRULE_bindingList_Await                                             = 316
	ECMAScriptParserRULE_bindingList_In_Await                                          = 317
	ECMAScriptParserRULE_bindingList_Yield_Await                                       = 318
	ECMAScriptParserRULE_bindingList_In_Yield_Await                                    = 319
	ECMAScriptParserRULE_lexicalBinding                                                = 320
	ECMAScriptParserRULE_lexicalBinding_In                                             = 321
	ECMAScriptParserRULE_lexicalBinding_Yield                                          = 322
	ECMAScriptParserRULE_lexicalBinding_In_Yield                                       = 323
	ECMAScriptParserRULE_lexicalBinding_Await                                          = 324
	ECMAScriptParserRULE_lexicalBinding_In_Await                                       = 325
	ECMAScriptParserRULE_lexicalBinding_Yield_Await                                    = 326
	ECMAScriptParserRULE_lexicalBinding_In_Yield_Await                                 = 327
	ECMAScriptParserRULE_variableStatement                                             = 328
	ECMAScriptParserRULE_variableStatement_Yield                                       = 329
	ECMAScriptParserRULE_variableStatement_Await                                       = 330
	ECMAScriptParserRULE_variableStatement_Yield_Await                                 = 331
	ECMAScriptParserRULE_variableDeclarationList                                       = 332
	ECMAScriptParserRULE_variableDeclarationList_In                                    = 333
	ECMAScriptParserRULE_variableDeclarationList_Yield                                 = 334
	ECMAScriptParserRULE_variableDeclarationList_In_Yield                              = 335
	ECMAScriptParserRULE_variableDeclarationList_Await                                 = 336
	ECMAScriptParserRULE_variableDeclarationList_In_Await                              = 337
	ECMAScriptParserRULE_variableDeclarationList_Yield_Await                           = 338
	ECMAScriptParserRULE_variableDeclarationList_In_Yield_Await                        = 339
	ECMAScriptParserRULE_variableDeclaration                                           = 340
	ECMAScriptParserRULE_variableDeclaration_In                                        = 341
	ECMAScriptParserRULE_variableDeclaration_Yield                                     = 342
	ECMAScriptParserRULE_variableDeclaration_In_Yield                                  = 343
	ECMAScriptParserRULE_variableDeclaration_Await                                     = 344
	ECMAScriptParserRULE_variableDeclaration_In_Await                                  = 345
	ECMAScriptParserRULE_variableDeclaration_Yield_Await                               = 346
	ECMAScriptParserRULE_variableDeclaration_In_Yield_Await                            = 347
	ECMAScriptParserRULE_bindingPattern                                                = 348
	ECMAScriptParserRULE_bindingPattern_Yield                                          = 349
	ECMAScriptParserRULE_bindingPattern_Await                                          = 350
	ECMAScriptParserRULE_bindingPattern_Yield_Await                                    = 351
	ECMAScriptParserRULE_objectBindingPattern                                          = 352
	ECMAScriptParserRULE_objectBindingPattern_Yield                                    = 353
	ECMAScriptParserRULE_objectBindingPattern_Await                                    = 354
	ECMAScriptParserRULE_objectBindingPattern_Yield_Await                              = 355
	ECMAScriptParserRULE_arrayBindingPattern                                           = 356
	ECMAScriptParserRULE_arrayBindingPattern_Yield                                     = 357
	ECMAScriptParserRULE_arrayBindingPattern_Await                                     = 358
	ECMAScriptParserRULE_arrayBindingPattern_Yield_Await                               = 359
	ECMAScriptParserRULE_bindingRestProperty                                           = 360
	ECMAScriptParserRULE_bindingRestProperty_Yield                                     = 361
	ECMAScriptParserRULE_bindingRestProperty_Await                                     = 362
	ECMAScriptParserRULE_bindingRestProperty_Yield_Await                               = 363
	ECMAScriptParserRULE_bindingPropertyList                                           = 364
	ECMAScriptParserRULE_bindingPropertyList_Yield                                     = 365
	ECMAScriptParserRULE_bindingPropertyList_Await                                     = 366
	ECMAScriptParserRULE_bindingPropertyList_Yield_Await                               = 367
	ECMAScriptParserRULE_bindingElementList                                            = 368
	ECMAScriptParserRULE_bindingElementList_Yield                                      = 369
	ECMAScriptParserRULE_bindingElementList_Await                                      = 370
	ECMAScriptParserRULE_bindingElementList_Yield_Await                                = 371
	ECMAScriptParserRULE_bindingElisionElement                                         = 372
	ECMAScriptParserRULE_bindingElisionElement_Yield                                   = 373
	ECMAScriptParserRULE_bindingElisionElement_Await                                   = 374
	ECMAScriptParserRULE_bindingElisionElement_Yield_Await                             = 375
	ECMAScriptParserRULE_bindingProperty                                               = 376
	ECMAScriptParserRULE_bindingProperty_Yield                                         = 377
	ECMAScriptParserRULE_bindingProperty_Await                                         = 378
	ECMAScriptParserRULE_bindingProperty_Yield_Await                                   = 379
	ECMAScriptParserRULE_bindingElement                                                = 380
	ECMAScriptParserRULE_bindingElement_Yield                                          = 381
	ECMAScriptParserRULE_bindingElement_Await                                          = 382
	ECMAScriptParserRULE_bindingElement_Yield_Await                                    = 383
	ECMAScriptParserRULE_singleNameBinding                                             = 384
	ECMAScriptParserRULE_singleNameBinding_Yield                                       = 385
	ECMAScriptParserRULE_singleNameBinding_Await                                       = 386
	ECMAScriptParserRULE_singleNameBinding_Yield_Await                                 = 387
	ECMAScriptParserRULE_bindingRestElement                                            = 388
	ECMAScriptParserRULE_bindingRestElement_Yield                                      = 389
	ECMAScriptParserRULE_bindingRestElement_Await                                      = 390
	ECMAScriptParserRULE_bindingRestElement_Yield_Await                                = 391
	ECMAScriptParserRULE_theEmptyStatement                                             = 392
	ECMAScriptParserRULE_expressionStatement                                           = 393
	ECMAScriptParserRULE_expressionStatement_Yield                                     = 394
	ECMAScriptParserRULE_expressionStatement_Await                                     = 395
	ECMAScriptParserRULE_expressionStatement_Yield_Await                               = 396
	ECMAScriptParserRULE_ifStatement                                                   = 397
	ECMAScriptParserRULE_ifStatement_Yield                                             = 398
	ECMAScriptParserRULE_ifStatement_Await                                             = 399
	ECMAScriptParserRULE_ifStatement_Yield_Await                                       = 400
	ECMAScriptParserRULE_ifStatement_Return                                            = 401
	ECMAScriptParserRULE_ifStatement_Yield_Return                                      = 402
	ECMAScriptParserRULE_ifStatement_Await_Return                                      = 403
	ECMAScriptParserRULE_ifStatement_Yield_Await_Return                                = 404
	ECMAScriptParserRULE_iterationStatement                                            = 405
	ECMAScriptParserRULE_iterationStatement_Yield                                      = 406
	ECMAScriptParserRULE_iterationStatement_Await                                      = 407
	ECMAScriptParserRULE_iterationStatement_Yield_Await                                = 408
	ECMAScriptParserRULE_iterationStatement_Return                                     = 409
	ECMAScriptParserRULE_iterationStatement_Yield_Return                               = 410
	ECMAScriptParserRULE_iterationStatement_Await_Return                               = 411
	ECMAScriptParserRULE_iterationStatement_Yield_Await_Return                         = 412
	ECMAScriptParserRULE_forDeclaration                                                = 413
	ECMAScriptParserRULE_forDeclaration_Yield                                          = 414
	ECMAScriptParserRULE_forDeclaration_Await                                          = 415
	ECMAScriptParserRULE_forDeclaration_Yield_Await                                    = 416
	ECMAScriptParserRULE_forBinding                                                    = 417
	ECMAScriptParserRULE_forBinding_Yield                                              = 418
	ECMAScriptParserRULE_forBinding_Await                                              = 419
	ECMAScriptParserRULE_forBinding_Yield_Await                                        = 420
	ECMAScriptParserRULE_continueStatement                                             = 421
	ECMAScriptParserRULE_continueStatement_Yield                                       = 422
	ECMAScriptParserRULE_continueStatement_Await                                       = 423
	ECMAScriptParserRULE_continueStatement_Yield_Await                                 = 424
	ECMAScriptParserRULE_breakStatement                                                = 425
	ECMAScriptParserRULE_breakStatement_Yield                                          = 426
	ECMAScriptParserRULE_breakStatement_Await                                          = 427
	ECMAScriptParserRULE_breakStatement_Yield_Await                                    = 428
	ECMAScriptParserRULE_returnStatement                                               = 429
	ECMAScriptParserRULE_returnStatement_Yield                                         = 430
	ECMAScriptParserRULE_returnStatement_Await                                         = 431
	ECMAScriptParserRULE_returnStatement_Yield_Await                                   = 432
	ECMAScriptParserRULE_withStatement                                                 = 433
	ECMAScriptParserRULE_withStatement_Yield                                           = 434
	ECMAScriptParserRULE_withStatement_Await                                           = 435
	ECMAScriptParserRULE_withStatement_Yield_Await                                     = 436
	ECMAScriptParserRULE_withStatement_Return                                          = 437
	ECMAScriptParserRULE_withStatement_Yield_Return                                    = 438
	ECMAScriptParserRULE_withStatement_Await_Return                                    = 439
	ECMAScriptParserRULE_withStatement_Yield_Await_Return                              = 440
	ECMAScriptParserRULE_switchStatement                                               = 441
	ECMAScriptParserRULE_switchStatement_Yield                                         = 442
	ECMAScriptParserRULE_switchStatement_Await                                         = 443
	ECMAScriptParserRULE_switchStatement_Yield_Await                                   = 444
	ECMAScriptParserRULE_switchStatement_Return                                        = 445
	ECMAScriptParserRULE_switchStatement_Yield_Return                                  = 446
	ECMAScriptParserRULE_switchStatement_Await_Return                                  = 447
	ECMAScriptParserRULE_switchStatement_Yield_Await_Return                            = 448
	ECMAScriptParserRULE_caseBlock                                                     = 449
	ECMAScriptParserRULE_caseBlock_Yield                                               = 450
	ECMAScriptParserRULE_caseBlock_Await                                               = 451
	ECMAScriptParserRULE_caseBlock_Yield_Await                                         = 452
	ECMAScriptParserRULE_caseBlock_Return                                              = 453
	ECMAScriptParserRULE_caseBlock_Yield_Return                                        = 454
	ECMAScriptParserRULE_caseBlock_Await_Return                                        = 455
	ECMAScriptParserRULE_caseBlock_Yield_Await_Return                                  = 456
	ECMAScriptParserRULE_caseClause                                                    = 457
	ECMAScriptParserRULE_caseClause_Yield                                              = 458
	ECMAScriptParserRULE_caseClause_Await                                              = 459
	ECMAScriptParserRULE_caseClause_Yield_Await                                        = 460
	ECMAScriptParserRULE_caseClause_Return                                             = 461
	ECMAScriptParserRULE_caseClause_Yield_Return                                       = 462
	ECMAScriptParserRULE_caseClause_Await_Return                                       = 463
	ECMAScriptParserRULE_caseClause_Yield_Await_Return                                 = 464
	ECMAScriptParserRULE_defaultClause                                                 = 465
	ECMAScriptParserRULE_defaultClause_Yield                                           = 466
	ECMAScriptParserRULE_defaultClause_Await                                           = 467
	ECMAScriptParserRULE_defaultClause_Yield_Await                                     = 468
	ECMAScriptParserRULE_defaultClause_Return                                          = 469
	ECMAScriptParserRULE_defaultClause_Yield_Return                                    = 470
	ECMAScriptParserRULE_defaultClause_Await_Return                                    = 471
	ECMAScriptParserRULE_defaultClause_Yield_Await_Return                              = 472
	ECMAScriptParserRULE_labelledStatement                                             = 473
	ECMAScriptParserRULE_labelledStatement_Yield                                       = 474
	ECMAScriptParserRULE_labelledStatement_Await                                       = 475
	ECMAScriptParserRULE_labelledStatement_Yield_Await                                 = 476
	ECMAScriptParserRULE_labelledStatement_Return                                      = 477
	ECMAScriptParserRULE_labelledStatement_Yield_Return                                = 478
	ECMAScriptParserRULE_labelledStatement_Await_Return                                = 479
	ECMAScriptParserRULE_labelledStatement_Yield_Await_Return                          = 480
	ECMAScriptParserRULE_labelledItem                                                  = 481
	ECMAScriptParserRULE_labelledItem_Yield                                            = 482
	ECMAScriptParserRULE_labelledItem_Await                                            = 483
	ECMAScriptParserRULE_labelledItem_Yield_Await                                      = 484
	ECMAScriptParserRULE_labelledItem_Return                                           = 485
	ECMAScriptParserRULE_labelledItem_Yield_Return                                     = 486
	ECMAScriptParserRULE_labelledItem_Await_Return                                     = 487
	ECMAScriptParserRULE_labelledItem_Yield_Await_Return                               = 488
	ECMAScriptParserRULE_throwStatement                                                = 489
	ECMAScriptParserRULE_throwStatement_Yield                                          = 490
	ECMAScriptParserRULE_throwStatement_Await                                          = 491
	ECMAScriptParserRULE_throwStatement_Yield_Await                                    = 492
	ECMAScriptParserRULE_tryStatement                                                  = 493
	ECMAScriptParserRULE_tryStatement_Yield                                            = 494
	ECMAScriptParserRULE_tryStatement_Await                                            = 495
	ECMAScriptParserRULE_tryStatement_Yield_Await                                      = 496
	ECMAScriptParserRULE_tryStatement_Return                                           = 497
	ECMAScriptParserRULE_tryStatement_Yield_Return                                     = 498
	ECMAScriptParserRULE_tryStatement_Await_Return                                     = 499
	ECMAScriptParserRULE_tryStatement_Yield_Await_Return                               = 500
	ECMAScriptParserRULE_catch_                                                        = 501
	ECMAScriptParserRULE_catch_Yield                                                   = 502
	ECMAScriptParserRULE_catch_Await                                                   = 503
	ECMAScriptParserRULE_catch_Yield_Await                                             = 504
	ECMAScriptParserRULE_catch_Return                                                  = 505
	ECMAScriptParserRULE_catch_Yield_Return                                            = 506
	ECMAScriptParserRULE_catch_Await_Return                                            = 507
	ECMAScriptParserRULE_catch_Yield_Await_Return                                      = 508
	ECMAScriptParserRULE_finally_                                                      = 509
	ECMAScriptParserRULE_finally_Yield                                                 = 510
	ECMAScriptParserRULE_finally_Await                                                 = 511
	ECMAScriptParserRULE_finally_Yield_Await                                           = 512
	ECMAScriptParserRULE_finally_Return                                                = 513
	ECMAScriptParserRULE_finally_Yield_Return                                          = 514
	ECMAScriptParserRULE_finally_Await_Return                                          = 515
	ECMAScriptParserRULE_finally_Yield_Await_Return                                    = 516
	ECMAScriptParserRULE_catchParameter                                                = 517
	ECMAScriptParserRULE_catchParameter_Yield                                          = 518
	ECMAScriptParserRULE_catchParameter_Await                                          = 519
	ECMAScriptParserRULE_catchParameter_Yield_Await                                    = 520
	ECMAScriptParserRULE_debuggerStatement                                             = 521
	ECMAScriptParserRULE_functionDeclaration                                           = 522
	ECMAScriptParserRULE_functionDeclaration_Yield                                     = 523
	ECMAScriptParserRULE_functionDeclaration_Await                                     = 524
	ECMAScriptParserRULE_functionDeclaration_Yield_Await                               = 525
	ECMAScriptParserRULE_functionDeclaration_Default                                   = 526
	ECMAScriptParserRULE_functionDeclaration_Yield_Default                             = 527
	ECMAScriptParserRULE_functionDeclaration_Await_Default                             = 528
	ECMAScriptParserRULE_functionDeclaration_Yield_Await_Default                       = 529
	ECMAScriptParserRULE_functionExpression                                            = 530
	ECMAScriptParserRULE_uniqueFormalParameters                                        = 531
	ECMAScriptParserRULE_uniqueFormalParameters_Yield                                  = 532
	ECMAScriptParserRULE_uniqueFormalParameters_Await                                  = 533
	ECMAScriptParserRULE_uniqueFormalParameters_Yield_Await                            = 534
	ECMAScriptParserRULE_formalParameters                                              = 535
	ECMAScriptParserRULE_formalParameters_Yield                                        = 536
	ECMAScriptParserRULE_formalParameters_Await                                        = 537
	ECMAScriptParserRULE_formalParameters_Yield_Await                                  = 538
	ECMAScriptParserRULE_formalParameterList                                           = 539
	ECMAScriptParserRULE_formalParameterList_Yield                                     = 540
	ECMAScriptParserRULE_formalParameterList_Await                                     = 541
	ECMAScriptParserRULE_formalParameterList_Yield_Await                               = 542
	ECMAScriptParserRULE_functionRestParameter                                         = 543
	ECMAScriptParserRULE_functionRestParameter_Yield                                   = 544
	ECMAScriptParserRULE_functionRestParameter_Await                                   = 545
	ECMAScriptParserRULE_functionRestParameter_Yield_Await                             = 546
	ECMAScriptParserRULE_formalParameter                                               = 547
	ECMAScriptParserRULE_formalParameter_Yield                                         = 548
	ECMAScriptParserRULE_formalParameter_Await                                         = 549
	ECMAScriptParserRULE_formalParameter_Yield_Await                                   = 550
	ECMAScriptParserRULE_functionBody                                                  = 551
	ECMAScriptParserRULE_functionBody_Yield                                            = 552
	ECMAScriptParserRULE_functionBody_Await                                            = 553
	ECMAScriptParserRULE_functionBody_Yield_Await                                      = 554
	ECMAScriptParserRULE_functionStatementList                                         = 555
	ECMAScriptParserRULE_functionStatementList_Yield                                   = 556
	ECMAScriptParserRULE_functionStatementList_Await                                   = 557
	ECMAScriptParserRULE_functionStatementList_Yield_Await                             = 558
	ECMAScriptParserRULE_arrowFunction                                                 = 559
	ECMAScriptParserRULE_arrowFunction_In                                              = 560
	ECMAScriptParserRULE_arrowFunction_Yield                                           = 561
	ECMAScriptParserRULE_arrowFunction_In_Yield                                        = 562
	ECMAScriptParserRULE_arrowFunction_Await                                           = 563
	ECMAScriptParserRULE_arrowFunction_In_Await                                        = 564
	ECMAScriptParserRULE_arrowFunction_Yield_Await                                     = 565
	ECMAScriptParserRULE_arrowFunction_In_Yield_Await                                  = 566
	ECMAScriptParserRULE_arrowParameters                                               = 567
	ECMAScriptParserRULE_arrowParameters_Yield                                         = 568
	ECMAScriptParserRULE_arrowParameters_Await                                         = 569
	ECMAScriptParserRULE_arrowParameters_Yield_Await                                   = 570
	ECMAScriptParserRULE_conciseBody                                                   = 571
	ECMAScriptParserRULE_conciseBody_In                                                = 572
	ECMAScriptParserRULE_methodDefinition                                              = 573
	ECMAScriptParserRULE_methodDefinition_Yield                                        = 574
	ECMAScriptParserRULE_methodDefinition_Await                                        = 575
	ECMAScriptParserRULE_methodDefinition_Yield_Await                                  = 576
	ECMAScriptParserRULE_propertySetParameterList                                      = 577
	ECMAScriptParserRULE_generatorMethod                                               = 578
	ECMAScriptParserRULE_generatorMethod_Yield                                         = 579
	ECMAScriptParserRULE_generatorMethod_Await                                         = 580
	ECMAScriptParserRULE_generatorMethod_Yield_Await                                   = 581
	ECMAScriptParserRULE_generatorDeclaration                                          = 582
	ECMAScriptParserRULE_generatorDeclaration_Yield                                    = 583
	ECMAScriptParserRULE_generatorDeclaration_Await                                    = 584
	ECMAScriptParserRULE_generatorDeclaration_Yield_Await                              = 585
	ECMAScriptParserRULE_generatorDeclaration_Default                                  = 586
	ECMAScriptParserRULE_generatorDeclaration_Yield_Default                            = 587
	ECMAScriptParserRULE_generatorDeclaration_Await_Default                            = 588
	ECMAScriptParserRULE_generatorDeclaration_Yield_Await_Default                      = 589
	ECMAScriptParserRULE_generatorExpression                                           = 590
	ECMAScriptParserRULE_generatorBody                                                 = 591
	ECMAScriptParserRULE_yieldExpression                                               = 592
	ECMAScriptParserRULE_yieldExpression_In                                            = 593
	ECMAScriptParserRULE_yieldExpression_Await                                         = 594
	ECMAScriptParserRULE_yieldExpression_In_Await                                      = 595
	ECMAScriptParserRULE_asyncGeneratorMethod                                          = 596
	ECMAScriptParserRULE_asyncGeneratorMethod_Yield                                    = 597
	ECMAScriptParserRULE_asyncGeneratorMethod_Await                                    = 598
	ECMAScriptParserRULE_asyncGeneratorMethod_Yield_Await                              = 599
	ECMAScriptParserRULE_asyncGeneratorDeclaration                                     = 600
	ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield                               = 601
	ECMAScriptParserRULE_asyncGeneratorDeclaration_Await                               = 602
	ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Await                         = 603
	ECMAScriptParserRULE_asyncGeneratorDeclaration_Default                             = 604
	ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Default                       = 605
	ECMAScriptParserRULE_asyncGeneratorDeclaration_Await_Default                       = 606
	ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Await_Default                 = 607
	ECMAScriptParserRULE_asyncGeneratorExpression                                      = 608
	ECMAScriptParserRULE_asyncGeneratorBody                                            = 609
	ECMAScriptParserRULE_classDeclaration                                              = 610
	ECMAScriptParserRULE_classDeclaration_Yield                                        = 611
	ECMAScriptParserRULE_classDeclaration_Await                                        = 612
	ECMAScriptParserRULE_classDeclaration_Yield_Await                                  = 613
	ECMAScriptParserRULE_classDeclaration_Default                                      = 614
	ECMAScriptParserRULE_classDeclaration_Yield_Default                                = 615
	ECMAScriptParserRULE_classDeclaration_Await_Default                                = 616
	ECMAScriptParserRULE_classDeclaration_Yield_Await_Default                          = 617
	ECMAScriptParserRULE_classExpression                                               = 618
	ECMAScriptParserRULE_classExpression_Yield                                         = 619
	ECMAScriptParserRULE_classExpression_Await                                         = 620
	ECMAScriptParserRULE_classExpression_Yield_Await                                   = 621
	ECMAScriptParserRULE_classTail                                                     = 622
	ECMAScriptParserRULE_classTail_Yield                                               = 623
	ECMAScriptParserRULE_classTail_Await                                               = 624
	ECMAScriptParserRULE_classTail_Yield_Await                                         = 625
	ECMAScriptParserRULE_classHeritage                                                 = 626
	ECMAScriptParserRULE_classHeritage_Yield                                           = 627
	ECMAScriptParserRULE_classHeritage_Await                                           = 628
	ECMAScriptParserRULE_classHeritage_Yield_Await                                     = 629
	ECMAScriptParserRULE_classBody                                                     = 630
	ECMAScriptParserRULE_classBody_Yield                                               = 631
	ECMAScriptParserRULE_classBody_Await                                               = 632
	ECMAScriptParserRULE_classBody_Yield_Await                                         = 633
	ECMAScriptParserRULE_classElement                                                  = 634
	ECMAScriptParserRULE_classElement_Yield                                            = 635
	ECMAScriptParserRULE_classElement_Await                                            = 636
	ECMAScriptParserRULE_classElement_Yield_Await                                      = 637
	ECMAScriptParserRULE_asyncFunctionDeclaration                                      = 638
	ECMAScriptParserRULE_asyncFunctionDeclaration_Yield                                = 639
	ECMAScriptParserRULE_asyncFunctionDeclaration_Await                                = 640
	ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Await                          = 641
	ECMAScriptParserRULE_asyncFunctionDeclaration_Default                              = 642
	ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Default                        = 643
	ECMAScriptParserRULE_asyncFunctionDeclaration_Await_Default                        = 644
	ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Await_Default                  = 645
	ECMAScriptParserRULE_asyncFunctionExpression                                       = 646
	ECMAScriptParserRULE_asyncMethod                                                   = 647
	ECMAScriptParserRULE_asyncMethod_Yield                                             = 648
	ECMAScriptParserRULE_asyncMethod_Await                                             = 649
	ECMAScriptParserRULE_asyncMethod_Yield_Await                                       = 650
	ECMAScriptParserRULE_asyncFunctionBody                                             = 651
	ECMAScriptParserRULE_awaitExpression                                               = 652
	ECMAScriptParserRULE_awaitExpression_Yield                                         = 653
	ECMAScriptParserRULE_asyncArrowFunction                                            = 654
	ECMAScriptParserRULE_asyncArrowFunction_In                                         = 655
	ECMAScriptParserRULE_asyncArrowFunction_Yield                                      = 656
	ECMAScriptParserRULE_asyncArrowFunction_In_Yield                                   = 657
	ECMAScriptParserRULE_asyncArrowFunction_Await                                      = 658
	ECMAScriptParserRULE_asyncArrowFunction_In_Await                                   = 659
	ECMAScriptParserRULE_asyncArrowFunction_Yield_Await                                = 660
	ECMAScriptParserRULE_asyncArrowFunction_In_Yield_Await                             = 661
	ECMAScriptParserRULE_asyncArrowBindingIdentifier                                   = 662
	ECMAScriptParserRULE_asyncArrowBindingIdentifier_Yield                             = 663
	ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead                          = 664
	ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Yield                    = 665
	ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Await                    = 666
	ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Yield_Await              = 667
	ECMAScriptParserRULE_script                                                        = 668
	ECMAScriptParserRULE_scriptBody                                                    = 669
	ECMAScriptParserRULE_module                                                        = 670
	ECMAScriptParserRULE_moduleBody                                                    = 671
	ECMAScriptParserRULE_moduleItem                                                    = 672
	ECMAScriptParserRULE_importDeclaration                                             = 673
	ECMAScriptParserRULE_importClause                                                  = 674
	ECMAScriptParserRULE_importedDefaultBinding                                        = 675
	ECMAScriptParserRULE_nameSpaceImport                                               = 676
	ECMAScriptParserRULE_namedImports                                                  = 677
	ECMAScriptParserRULE_fromClause                                                    = 678
	ECMAScriptParserRULE_importsList                                                   = 679
	ECMAScriptParserRULE_importSpecifier                                               = 680
	ECMAScriptParserRULE_moduleSpecifier                                               = 681
	ECMAScriptParserRULE_importedBinding                                               = 682
	ECMAScriptParserRULE_exportDeclaration                                             = 683
	ECMAScriptParserRULE_exportClause                                                  = 684
	ECMAScriptParserRULE_exportsList                                                   = 685
	ECMAScriptParserRULE_exportSpecifier                                               = 686
	ECMAScriptParserRULE_asyncConciseBody                                              = 687
	ECMAScriptParserRULE_asyncConciseBody_In                                           = 688
)

// IInputElementDivContext is an interface to support dynamic dispatch.
type IInputElementDivContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInputElementDivContext differentiates from other interfaces.
	IsInputElementDivContext()
}

type InputElementDivContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInputElementDivContext() *InputElementDivContext {
	var p = new(InputElementDivContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_inputElementDiv
	return p
}

func (*InputElementDivContext) IsInputElementDivContext() {}

func NewInputElementDivContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InputElementDivContext {
	var p = new(InputElementDivContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_inputElementDiv

	return p
}

func (s *InputElementDivContext) GetParser() antlr.Parser { return s.parser }

func (s *InputElementDivContext) WhiteSpace() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserWhiteSpace, 0)
}

func (s *InputElementDivContext) LineTerminator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserLineTerminator, 0)
}

func (s *InputElementDivContext) Comment() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserComment, 0)
}

func (s *InputElementDivContext) CommonToken() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserCommonToken, 0)
}

func (s *InputElementDivContext) DivPunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserDivPunctuator, 0)
}

func (s *InputElementDivContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *InputElementDivContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InputElementDivContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InputElementDivContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInputElementDiv(s)
	}
}

func (s *InputElementDivContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInputElementDiv(s)
	}
}

func (s *InputElementDivContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInputElementDiv(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) InputElementDiv() (localctx IInputElementDivContext) {
	localctx = NewInputElementDivContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, ECMAScriptParserRULE_inputElementDiv)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1378)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-94)&-(0x1f+1)) == 0 && ((1<<uint((_la-94)))&((1<<(ECMAScriptParserWhiteSpace-94))|(1<<(ECMAScriptParserLineTerminator-94))|(1<<(ECMAScriptParserComment-94))|(1<<(ECMAScriptParserCommonToken-94))|(1<<(ECMAScriptParserDivPunctuator-94))|(1<<(ECMAScriptParserRightBracePunctuator-94)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IInputElementRegExpContext is an interface to support dynamic dispatch.
type IInputElementRegExpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInputElementRegExpContext differentiates from other interfaces.
	IsInputElementRegExpContext()
}

type InputElementRegExpContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInputElementRegExpContext() *InputElementRegExpContext {
	var p = new(InputElementRegExpContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_inputElementRegExp
	return p
}

func (*InputElementRegExpContext) IsInputElementRegExpContext() {}

func NewInputElementRegExpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InputElementRegExpContext {
	var p = new(InputElementRegExpContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_inputElementRegExp

	return p
}

func (s *InputElementRegExpContext) GetParser() antlr.Parser { return s.parser }

func (s *InputElementRegExpContext) WhiteSpace() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserWhiteSpace, 0)
}

func (s *InputElementRegExpContext) LineTerminator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserLineTerminator, 0)
}

func (s *InputElementRegExpContext) Comment() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserComment, 0)
}

func (s *InputElementRegExpContext) CommonToken() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserCommonToken, 0)
}

func (s *InputElementRegExpContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *InputElementRegExpContext) RegularExpressionLiteral() IRegularExpressionLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRegularExpressionLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRegularExpressionLiteralContext)
}

func (s *InputElementRegExpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InputElementRegExpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InputElementRegExpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInputElementRegExp(s)
	}
}

func (s *InputElementRegExpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInputElementRegExp(s)
	}
}

func (s *InputElementRegExpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInputElementRegExp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) InputElementRegExp() (localctx IInputElementRegExpContext) {
	localctx = NewInputElementRegExpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, ECMAScriptParserRULE_inputElementRegExp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1386)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserWhiteSpace:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1380)
			p.Match(ECMAScriptParserWhiteSpace)
		}

	case ECMAScriptParserLineTerminator:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1381)
			p.Match(ECMAScriptParserLineTerminator)
		}

	case ECMAScriptParserComment:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1382)
			p.Match(ECMAScriptParserComment)
		}

	case ECMAScriptParserCommonToken:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1383)
			p.Match(ECMAScriptParserCommonToken)
		}

	case ECMAScriptParserRightBracePunctuator:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1384)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case ECMAScriptParserT__0:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1385)
			p.RegularExpressionLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInputElementRegExpOrTemplateTailContext is an interface to support dynamic dispatch.
type IInputElementRegExpOrTemplateTailContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInputElementRegExpOrTemplateTailContext differentiates from other interfaces.
	IsInputElementRegExpOrTemplateTailContext()
}

type InputElementRegExpOrTemplateTailContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInputElementRegExpOrTemplateTailContext() *InputElementRegExpOrTemplateTailContext {
	var p = new(InputElementRegExpOrTemplateTailContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_inputElementRegExpOrTemplateTail
	return p
}

func (*InputElementRegExpOrTemplateTailContext) IsInputElementRegExpOrTemplateTailContext() {}

func NewInputElementRegExpOrTemplateTailContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InputElementRegExpOrTemplateTailContext {
	var p = new(InputElementRegExpOrTemplateTailContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_inputElementRegExpOrTemplateTail

	return p
}

func (s *InputElementRegExpOrTemplateTailContext) GetParser() antlr.Parser { return s.parser }

func (s *InputElementRegExpOrTemplateTailContext) WhiteSpace() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserWhiteSpace, 0)
}

func (s *InputElementRegExpOrTemplateTailContext) LineTerminator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserLineTerminator, 0)
}

func (s *InputElementRegExpOrTemplateTailContext) Comment() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserComment, 0)
}

func (s *InputElementRegExpOrTemplateTailContext) CommonToken() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserCommonToken, 0)
}

func (s *InputElementRegExpOrTemplateTailContext) RegularExpressionLiteral() IRegularExpressionLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRegularExpressionLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRegularExpressionLiteralContext)
}

func (s *InputElementRegExpOrTemplateTailContext) TemplateSubstitutionTail() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateSubstitutionTail, 0)
}

func (s *InputElementRegExpOrTemplateTailContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InputElementRegExpOrTemplateTailContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InputElementRegExpOrTemplateTailContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInputElementRegExpOrTemplateTail(s)
	}
}

func (s *InputElementRegExpOrTemplateTailContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInputElementRegExpOrTemplateTail(s)
	}
}

func (s *InputElementRegExpOrTemplateTailContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInputElementRegExpOrTemplateTail(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) InputElementRegExpOrTemplateTail() (localctx IInputElementRegExpOrTemplateTailContext) {
	localctx = NewInputElementRegExpOrTemplateTailContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, ECMAScriptParserRULE_inputElementRegExpOrTemplateTail)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1394)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserWhiteSpace:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1388)
			p.Match(ECMAScriptParserWhiteSpace)
		}

	case ECMAScriptParserLineTerminator:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1389)
			p.Match(ECMAScriptParserLineTerminator)
		}

	case ECMAScriptParserComment:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1390)
			p.Match(ECMAScriptParserComment)
		}

	case ECMAScriptParserCommonToken:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1391)
			p.Match(ECMAScriptParserCommonToken)
		}

	case ECMAScriptParserT__0:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1392)
			p.RegularExpressionLiteral()
		}

	case ECMAScriptParserTemplateSubstitutionTail:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1393)
			p.Match(ECMAScriptParserTemplateSubstitutionTail)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInputElementTemplateTailContext is an interface to support dynamic dispatch.
type IInputElementTemplateTailContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInputElementTemplateTailContext differentiates from other interfaces.
	IsInputElementTemplateTailContext()
}

type InputElementTemplateTailContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInputElementTemplateTailContext() *InputElementTemplateTailContext {
	var p = new(InputElementTemplateTailContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_inputElementTemplateTail
	return p
}

func (*InputElementTemplateTailContext) IsInputElementTemplateTailContext() {}

func NewInputElementTemplateTailContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InputElementTemplateTailContext {
	var p = new(InputElementTemplateTailContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_inputElementTemplateTail

	return p
}

func (s *InputElementTemplateTailContext) GetParser() antlr.Parser { return s.parser }

func (s *InputElementTemplateTailContext) WhiteSpace() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserWhiteSpace, 0)
}

func (s *InputElementTemplateTailContext) LineTerminator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserLineTerminator, 0)
}

func (s *InputElementTemplateTailContext) Comment() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserComment, 0)
}

func (s *InputElementTemplateTailContext) CommonToken() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserCommonToken, 0)
}

func (s *InputElementTemplateTailContext) DivPunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserDivPunctuator, 0)
}

func (s *InputElementTemplateTailContext) TemplateSubstitutionTail() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateSubstitutionTail, 0)
}

func (s *InputElementTemplateTailContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InputElementTemplateTailContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InputElementTemplateTailContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInputElementTemplateTail(s)
	}
}

func (s *InputElementTemplateTailContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInputElementTemplateTail(s)
	}
}

func (s *InputElementTemplateTailContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInputElementTemplateTail(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) InputElementTemplateTail() (localctx IInputElementTemplateTailContext) {
	localctx = NewInputElementTemplateTailContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, ECMAScriptParserRULE_inputElementTemplateTail)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1396)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-94)&-(0x1f+1)) == 0 && ((1<<uint((_la-94)))&((1<<(ECMAScriptParserWhiteSpace-94))|(1<<(ECMAScriptParserLineTerminator-94))|(1<<(ECMAScriptParserComment-94))|(1<<(ECMAScriptParserCommonToken-94))|(1<<(ECMAScriptParserDivPunctuator-94)))) != 0) || _la == ECMAScriptParserTemplateSubstitutionTail) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IRegularExpressionLiteralContext is an interface to support dynamic dispatch.
type IRegularExpressionLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRegularExpressionLiteralContext differentiates from other interfaces.
	IsRegularExpressionLiteralContext()
}

type RegularExpressionLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRegularExpressionLiteralContext() *RegularExpressionLiteralContext {
	var p = new(RegularExpressionLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_regularExpressionLiteral
	return p
}

func (*RegularExpressionLiteralContext) IsRegularExpressionLiteralContext() {}

func NewRegularExpressionLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RegularExpressionLiteralContext {
	var p = new(RegularExpressionLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_regularExpressionLiteral

	return p
}

func (s *RegularExpressionLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *RegularExpressionLiteralContext) RegularExpressionBody() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRegularExpressionBody, 0)
}

func (s *RegularExpressionLiteralContext) AllRegularExpressionFlags() []antlr.TerminalNode {
	return s.GetTokens(ECMAScriptParserRegularExpressionFlags)
}

func (s *RegularExpressionLiteralContext) RegularExpressionFlags(i int) antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRegularExpressionFlags, i)
}

func (s *RegularExpressionLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RegularExpressionLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RegularExpressionLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterRegularExpressionLiteral(s)
	}
}

func (s *RegularExpressionLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitRegularExpressionLiteral(s)
	}
}

func (s *RegularExpressionLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitRegularExpressionLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) RegularExpressionLiteral() (localctx IRegularExpressionLiteralContext) {
	localctx = NewRegularExpressionLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, ECMAScriptParserRULE_regularExpressionLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1398)
		p.Match(ECMAScriptParserT__0)
	}
	{
		p.SetState(1399)
		p.Match(ECMAScriptParserRegularExpressionBody)
	}
	{
		p.SetState(1400)
		p.Match(ECMAScriptParserT__0)
	}
	p.SetState(1404)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1401)
				p.Match(ECMAScriptParserRegularExpressionFlags)
			}

		}
		p.SetState(1406)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext())
	}

	return localctx
}

// IIdentifierReferenceContext is an interface to support dynamic dispatch.
type IIdentifierReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierReferenceContext differentiates from other interfaces.
	IsIdentifierReferenceContext()
}

type IdentifierReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierReferenceContext() *IdentifierReferenceContext {
	var p = new(IdentifierReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_identifierReference
	return p
}

func (*IdentifierReferenceContext) IsIdentifierReferenceContext() {}

func NewIdentifierReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierReferenceContext {
	var p = new(IdentifierReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_identifierReference

	return p
}

func (s *IdentifierReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierReferenceContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *IdentifierReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIdentifierReference(s)
	}
}

func (s *IdentifierReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIdentifierReference(s)
	}
}

func (s *IdentifierReferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIdentifierReference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IdentifierReference() (localctx IIdentifierReferenceContext) {
	localctx = NewIdentifierReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, ECMAScriptParserRULE_identifierReference)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1407)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierReference_YieldContext is an interface to support dynamic dispatch.
type IIdentifierReference_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierReference_YieldContext differentiates from other interfaces.
	IsIdentifierReference_YieldContext()
}

type IdentifierReference_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierReference_YieldContext() *IdentifierReference_YieldContext {
	var p = new(IdentifierReference_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_identifierReference_Yield
	return p
}

func (*IdentifierReference_YieldContext) IsIdentifierReference_YieldContext() {}

func NewIdentifierReference_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierReference_YieldContext {
	var p = new(IdentifierReference_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_identifierReference_Yield

	return p
}

func (s *IdentifierReference_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierReference_YieldContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *IdentifierReference_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierReference_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierReference_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIdentifierReference_Yield(s)
	}
}

func (s *IdentifierReference_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIdentifierReference_Yield(s)
	}
}

func (s *IdentifierReference_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIdentifierReference_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IdentifierReference_Yield() (localctx IIdentifierReference_YieldContext) {
	localctx = NewIdentifierReference_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, ECMAScriptParserRULE_identifierReference_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1409)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierReference_AwaitContext is an interface to support dynamic dispatch.
type IIdentifierReference_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierReference_AwaitContext differentiates from other interfaces.
	IsIdentifierReference_AwaitContext()
}

type IdentifierReference_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierReference_AwaitContext() *IdentifierReference_AwaitContext {
	var p = new(IdentifierReference_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_identifierReference_Await
	return p
}

func (*IdentifierReference_AwaitContext) IsIdentifierReference_AwaitContext() {}

func NewIdentifierReference_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierReference_AwaitContext {
	var p = new(IdentifierReference_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_identifierReference_Await

	return p
}

func (s *IdentifierReference_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierReference_AwaitContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *IdentifierReference_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierReference_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierReference_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIdentifierReference_Await(s)
	}
}

func (s *IdentifierReference_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIdentifierReference_Await(s)
	}
}

func (s *IdentifierReference_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIdentifierReference_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IdentifierReference_Await() (localctx IIdentifierReference_AwaitContext) {
	localctx = NewIdentifierReference_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, ECMAScriptParserRULE_identifierReference_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1411)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ECMAScriptParserT__1 || _la == ECMAScriptParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierReference_Yield_AwaitContext is an interface to support dynamic dispatch.
type IIdentifierReference_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierReference_Yield_AwaitContext differentiates from other interfaces.
	IsIdentifierReference_Yield_AwaitContext()
}

type IdentifierReference_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierReference_Yield_AwaitContext() *IdentifierReference_Yield_AwaitContext {
	var p = new(IdentifierReference_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_identifierReference_Yield_Await
	return p
}

func (*IdentifierReference_Yield_AwaitContext) IsIdentifierReference_Yield_AwaitContext() {}

func NewIdentifierReference_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierReference_Yield_AwaitContext {
	var p = new(IdentifierReference_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_identifierReference_Yield_Await

	return p
}

func (s *IdentifierReference_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierReference_Yield_AwaitContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *IdentifierReference_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierReference_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierReference_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIdentifierReference_Yield_Await(s)
	}
}

func (s *IdentifierReference_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIdentifierReference_Yield_Await(s)
	}
}

func (s *IdentifierReference_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIdentifierReference_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IdentifierReference_Yield_Await() (localctx IIdentifierReference_Yield_AwaitContext) {
	localctx = NewIdentifierReference_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, ECMAScriptParserRULE_identifierReference_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1413)
		p.Match(ECMAScriptParserIdentifier)
	}

	return localctx
}

// IBindingIdentifierContext is an interface to support dynamic dispatch.
type IBindingIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingIdentifierContext differentiates from other interfaces.
	IsBindingIdentifierContext()
}

type BindingIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingIdentifierContext() *BindingIdentifierContext {
	var p = new(BindingIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingIdentifier
	return p
}

func (*BindingIdentifierContext) IsBindingIdentifierContext() {}

func NewBindingIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingIdentifierContext {
	var p = new(BindingIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingIdentifier

	return p
}

func (s *BindingIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingIdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *BindingIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingIdentifier(s)
	}
}

func (s *BindingIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingIdentifier(s)
	}
}

func (s *BindingIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingIdentifier() (localctx IBindingIdentifierContext) {
	localctx = NewBindingIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, ECMAScriptParserRULE_bindingIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1415)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBindingIdentifier_YieldContext is an interface to support dynamic dispatch.
type IBindingIdentifier_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingIdentifier_YieldContext differentiates from other interfaces.
	IsBindingIdentifier_YieldContext()
}

type BindingIdentifier_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingIdentifier_YieldContext() *BindingIdentifier_YieldContext {
	var p = new(BindingIdentifier_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingIdentifier_Yield
	return p
}

func (*BindingIdentifier_YieldContext) IsBindingIdentifier_YieldContext() {}

func NewBindingIdentifier_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingIdentifier_YieldContext {
	var p = new(BindingIdentifier_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingIdentifier_Yield

	return p
}

func (s *BindingIdentifier_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingIdentifier_YieldContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *BindingIdentifier_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingIdentifier_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingIdentifier_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingIdentifier_Yield(s)
	}
}

func (s *BindingIdentifier_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingIdentifier_Yield(s)
	}
}

func (s *BindingIdentifier_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingIdentifier_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingIdentifier_Yield() (localctx IBindingIdentifier_YieldContext) {
	localctx = NewBindingIdentifier_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, ECMAScriptParserRULE_bindingIdentifier_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1417)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBindingIdentifier_AwaitContext is an interface to support dynamic dispatch.
type IBindingIdentifier_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingIdentifier_AwaitContext differentiates from other interfaces.
	IsBindingIdentifier_AwaitContext()
}

type BindingIdentifier_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingIdentifier_AwaitContext() *BindingIdentifier_AwaitContext {
	var p = new(BindingIdentifier_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingIdentifier_Await
	return p
}

func (*BindingIdentifier_AwaitContext) IsBindingIdentifier_AwaitContext() {}

func NewBindingIdentifier_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingIdentifier_AwaitContext {
	var p = new(BindingIdentifier_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingIdentifier_Await

	return p
}

func (s *BindingIdentifier_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingIdentifier_AwaitContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *BindingIdentifier_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingIdentifier_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingIdentifier_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingIdentifier_Await(s)
	}
}

func (s *BindingIdentifier_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingIdentifier_Await(s)
	}
}

func (s *BindingIdentifier_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingIdentifier_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingIdentifier_Await() (localctx IBindingIdentifier_AwaitContext) {
	localctx = NewBindingIdentifier_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, ECMAScriptParserRULE_bindingIdentifier_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1419)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBindingIdentifier_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBindingIdentifier_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingIdentifier_Yield_AwaitContext differentiates from other interfaces.
	IsBindingIdentifier_Yield_AwaitContext()
}

type BindingIdentifier_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingIdentifier_Yield_AwaitContext() *BindingIdentifier_Yield_AwaitContext {
	var p = new(BindingIdentifier_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingIdentifier_Yield_Await
	return p
}

func (*BindingIdentifier_Yield_AwaitContext) IsBindingIdentifier_Yield_AwaitContext() {}

func NewBindingIdentifier_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingIdentifier_Yield_AwaitContext {
	var p = new(BindingIdentifier_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingIdentifier_Yield_Await

	return p
}

func (s *BindingIdentifier_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingIdentifier_Yield_AwaitContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *BindingIdentifier_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingIdentifier_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingIdentifier_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingIdentifier_Yield_Await(s)
	}
}

func (s *BindingIdentifier_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingIdentifier_Yield_Await(s)
	}
}

func (s *BindingIdentifier_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingIdentifier_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingIdentifier_Yield_Await() (localctx IBindingIdentifier_Yield_AwaitContext) {
	localctx = NewBindingIdentifier_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, ECMAScriptParserRULE_bindingIdentifier_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1421)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILabelIdentifierContext is an interface to support dynamic dispatch.
type ILabelIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelIdentifierContext differentiates from other interfaces.
	IsLabelIdentifierContext()
}

type LabelIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelIdentifierContext() *LabelIdentifierContext {
	var p = new(LabelIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelIdentifier
	return p
}

func (*LabelIdentifierContext) IsLabelIdentifierContext() {}

func NewLabelIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelIdentifierContext {
	var p = new(LabelIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelIdentifier

	return p
}

func (s *LabelIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelIdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *LabelIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelIdentifier(s)
	}
}

func (s *LabelIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelIdentifier(s)
	}
}

func (s *LabelIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelIdentifier() (localctx ILabelIdentifierContext) {
	localctx = NewLabelIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, ECMAScriptParserRULE_labelIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1423)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILabelIdentifier_YieldContext is an interface to support dynamic dispatch.
type ILabelIdentifier_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelIdentifier_YieldContext differentiates from other interfaces.
	IsLabelIdentifier_YieldContext()
}

type LabelIdentifier_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelIdentifier_YieldContext() *LabelIdentifier_YieldContext {
	var p = new(LabelIdentifier_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelIdentifier_Yield
	return p
}

func (*LabelIdentifier_YieldContext) IsLabelIdentifier_YieldContext() {}

func NewLabelIdentifier_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelIdentifier_YieldContext {
	var p = new(LabelIdentifier_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelIdentifier_Yield

	return p
}

func (s *LabelIdentifier_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelIdentifier_YieldContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *LabelIdentifier_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelIdentifier_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelIdentifier_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelIdentifier_Yield(s)
	}
}

func (s *LabelIdentifier_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelIdentifier_Yield(s)
	}
}

func (s *LabelIdentifier_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelIdentifier_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelIdentifier_Yield() (localctx ILabelIdentifier_YieldContext) {
	localctx = NewLabelIdentifier_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, ECMAScriptParserRULE_labelIdentifier_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1425)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILabelIdentifier_AwaitContext is an interface to support dynamic dispatch.
type ILabelIdentifier_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelIdentifier_AwaitContext differentiates from other interfaces.
	IsLabelIdentifier_AwaitContext()
}

type LabelIdentifier_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelIdentifier_AwaitContext() *LabelIdentifier_AwaitContext {
	var p = new(LabelIdentifier_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelIdentifier_Await
	return p
}

func (*LabelIdentifier_AwaitContext) IsLabelIdentifier_AwaitContext() {}

func NewLabelIdentifier_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelIdentifier_AwaitContext {
	var p = new(LabelIdentifier_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelIdentifier_Await

	return p
}

func (s *LabelIdentifier_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelIdentifier_AwaitContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *LabelIdentifier_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelIdentifier_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelIdentifier_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelIdentifier_Await(s)
	}
}

func (s *LabelIdentifier_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelIdentifier_Await(s)
	}
}

func (s *LabelIdentifier_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelIdentifier_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelIdentifier_Await() (localctx ILabelIdentifier_AwaitContext) {
	localctx = NewLabelIdentifier_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, ECMAScriptParserRULE_labelIdentifier_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1427)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ECMAScriptParserT__1 || _la == ECMAScriptParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILabelIdentifier_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILabelIdentifier_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelIdentifier_Yield_AwaitContext differentiates from other interfaces.
	IsLabelIdentifier_Yield_AwaitContext()
}

type LabelIdentifier_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelIdentifier_Yield_AwaitContext() *LabelIdentifier_Yield_AwaitContext {
	var p = new(LabelIdentifier_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelIdentifier_Yield_Await
	return p
}

func (*LabelIdentifier_Yield_AwaitContext) IsLabelIdentifier_Yield_AwaitContext() {}

func NewLabelIdentifier_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelIdentifier_Yield_AwaitContext {
	var p = new(LabelIdentifier_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelIdentifier_Yield_Await

	return p
}

func (s *LabelIdentifier_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelIdentifier_Yield_AwaitContext) Identifier() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifier, 0)
}

func (s *LabelIdentifier_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelIdentifier_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelIdentifier_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelIdentifier_Yield_Await(s)
	}
}

func (s *LabelIdentifier_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelIdentifier_Yield_Await(s)
	}
}

func (s *LabelIdentifier_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelIdentifier_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelIdentifier_Yield_Await() (localctx ILabelIdentifier_Yield_AwaitContext) {
	localctx = NewLabelIdentifier_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, ECMAScriptParserRULE_labelIdentifier_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1429)
		p.Match(ECMAScriptParserIdentifier)
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) IdentifierReference() IIdentifierReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReferenceContext)
}

func (s *PrimaryExpressionContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryExpressionContext) ArrayLiteral() IArrayLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralContext)
}

func (s *PrimaryExpressionContext) ObjectLiteral() IObjectLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *PrimaryExpressionContext) FunctionExpression() IFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionExpressionContext)
}

func (s *PrimaryExpressionContext) ClassExpression() IClassExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassExpressionContext)
}

func (s *PrimaryExpressionContext) GeneratorExpression() IGeneratorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorExpressionContext)
}

func (s *PrimaryExpressionContext) AsyncFunctionExpression() IAsyncFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionExpressionContext)
}

func (s *PrimaryExpressionContext) AsyncGeneratorExpression() IAsyncGeneratorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorExpressionContext)
}

func (s *PrimaryExpressionContext) RegularExpressionLiteral() IRegularExpressionLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRegularExpressionLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRegularExpressionLiteralContext)
}

func (s *PrimaryExpressionContext) TemplateLiteral() ITemplateLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteralContext)
}

func (s *PrimaryExpressionContext) CoverParenthesizedExpressionAndArrowParameterList() ICoverParenthesizedExpressionAndArrowParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverParenthesizedExpressionAndArrowParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverParenthesizedExpressionAndArrowParameterListContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPrimaryExpression(s)
	}
}

func (s *PrimaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPrimaryExpression(s)
	}
}

func (s *PrimaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPrimaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, ECMAScriptParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1444)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1431)
			p.Match(ECMAScriptParserT__3)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1432)
			p.IdentifierReference()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1433)
			p.Literal()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1434)
			p.ArrayLiteral()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1435)
			p.ObjectLiteral()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1436)
			p.FunctionExpression()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1437)
			p.ClassExpression()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1438)
			p.GeneratorExpression()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1439)
			p.AsyncFunctionExpression()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1440)
			p.AsyncGeneratorExpression()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1441)
			p.RegularExpressionLiteral()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1442)
			p.TemplateLiteral()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1443)
			p.CoverParenthesizedExpressionAndArrowParameterList()
		}

	}

	return localctx
}

// IPrimaryExpression_YieldContext is an interface to support dynamic dispatch.
type IPrimaryExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpression_YieldContext differentiates from other interfaces.
	IsPrimaryExpression_YieldContext()
}

type PrimaryExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpression_YieldContext() *PrimaryExpression_YieldContext {
	var p = new(PrimaryExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_primaryExpression_Yield
	return p
}

func (*PrimaryExpression_YieldContext) IsPrimaryExpression_YieldContext() {}

func NewPrimaryExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpression_YieldContext {
	var p = new(PrimaryExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_primaryExpression_Yield

	return p
}

func (s *PrimaryExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpression_YieldContext) IdentifierReference_Yield() IIdentifierReference_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReference_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReference_YieldContext)
}

func (s *PrimaryExpression_YieldContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryExpression_YieldContext) ArrayLiteral_Yield() IArrayLiteral_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteral_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteral_YieldContext)
}

func (s *PrimaryExpression_YieldContext) ObjectLiteral_Yield() IObjectLiteral_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteral_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteral_YieldContext)
}

func (s *PrimaryExpression_YieldContext) FunctionExpression() IFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionExpressionContext)
}

func (s *PrimaryExpression_YieldContext) ClassExpression_Yield() IClassExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassExpression_YieldContext)
}

func (s *PrimaryExpression_YieldContext) GeneratorExpression() IGeneratorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorExpressionContext)
}

func (s *PrimaryExpression_YieldContext) AsyncFunctionExpression() IAsyncFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionExpressionContext)
}

func (s *PrimaryExpression_YieldContext) AsyncGeneratorExpression() IAsyncGeneratorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorExpressionContext)
}

func (s *PrimaryExpression_YieldContext) RegularExpressionLiteral() IRegularExpressionLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRegularExpressionLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRegularExpressionLiteralContext)
}

func (s *PrimaryExpression_YieldContext) TemplateLiteral_Yield() ITemplateLiteral_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteral_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteral_YieldContext)
}

func (s *PrimaryExpression_YieldContext) CoverParenthesizedExpressionAndArrowParameterList_Yield() ICoverParenthesizedExpressionAndArrowParameterList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverParenthesizedExpressionAndArrowParameterList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverParenthesizedExpressionAndArrowParameterList_YieldContext)
}

func (s *PrimaryExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPrimaryExpression_Yield(s)
	}
}

func (s *PrimaryExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPrimaryExpression_Yield(s)
	}
}

func (s *PrimaryExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPrimaryExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PrimaryExpression_Yield() (localctx IPrimaryExpression_YieldContext) {
	localctx = NewPrimaryExpression_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, ECMAScriptParserRULE_primaryExpression_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1459)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1446)
			p.Match(ECMAScriptParserT__3)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1447)
			p.IdentifierReference_Yield()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1448)
			p.Literal()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1449)
			p.ArrayLiteral_Yield()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1450)
			p.ObjectLiteral_Yield()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1451)
			p.FunctionExpression()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1452)
			p.ClassExpression_Yield()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1453)
			p.GeneratorExpression()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1454)
			p.AsyncFunctionExpression()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1455)
			p.AsyncGeneratorExpression()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1456)
			p.RegularExpressionLiteral()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1457)
			p.TemplateLiteral_Yield()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1458)
			p.CoverParenthesizedExpressionAndArrowParameterList_Yield()
		}

	}

	return localctx
}

// IPrimaryExpression_AwaitContext is an interface to support dynamic dispatch.
type IPrimaryExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpression_AwaitContext differentiates from other interfaces.
	IsPrimaryExpression_AwaitContext()
}

type PrimaryExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpression_AwaitContext() *PrimaryExpression_AwaitContext {
	var p = new(PrimaryExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_primaryExpression_Await
	return p
}

func (*PrimaryExpression_AwaitContext) IsPrimaryExpression_AwaitContext() {}

func NewPrimaryExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpression_AwaitContext {
	var p = new(PrimaryExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_primaryExpression_Await

	return p
}

func (s *PrimaryExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpression_AwaitContext) IdentifierReference_Await() IIdentifierReference_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReference_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReference_AwaitContext)
}

func (s *PrimaryExpression_AwaitContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryExpression_AwaitContext) ArrayLiteral_Await() IArrayLiteral_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteral_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteral_AwaitContext)
}

func (s *PrimaryExpression_AwaitContext) ObjectLiteral_Await() IObjectLiteral_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteral_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteral_AwaitContext)
}

func (s *PrimaryExpression_AwaitContext) FunctionExpression() IFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionExpressionContext)
}

func (s *PrimaryExpression_AwaitContext) ClassExpression_Await() IClassExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassExpression_AwaitContext)
}

func (s *PrimaryExpression_AwaitContext) GeneratorExpression() IGeneratorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorExpressionContext)
}

func (s *PrimaryExpression_AwaitContext) AsyncFunctionExpression() IAsyncFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionExpressionContext)
}

func (s *PrimaryExpression_AwaitContext) AsyncGeneratorExpression() IAsyncGeneratorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorExpressionContext)
}

func (s *PrimaryExpression_AwaitContext) RegularExpressionLiteral() IRegularExpressionLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRegularExpressionLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRegularExpressionLiteralContext)
}

func (s *PrimaryExpression_AwaitContext) TemplateLiteral_Await() ITemplateLiteral_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteral_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteral_AwaitContext)
}

func (s *PrimaryExpression_AwaitContext) CoverParenthesizedExpressionAndArrowParameterList_Await() ICoverParenthesizedExpressionAndArrowParameterList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverParenthesizedExpressionAndArrowParameterList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverParenthesizedExpressionAndArrowParameterList_AwaitContext)
}

func (s *PrimaryExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPrimaryExpression_Await(s)
	}
}

func (s *PrimaryExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPrimaryExpression_Await(s)
	}
}

func (s *PrimaryExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPrimaryExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PrimaryExpression_Await() (localctx IPrimaryExpression_AwaitContext) {
	localctx = NewPrimaryExpression_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, ECMAScriptParserRULE_primaryExpression_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1474)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1461)
			p.Match(ECMAScriptParserT__3)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1462)
			p.IdentifierReference_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1463)
			p.Literal()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1464)
			p.ArrayLiteral_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1465)
			p.ObjectLiteral_Await()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1466)
			p.FunctionExpression()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1467)
			p.ClassExpression_Await()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1468)
			p.GeneratorExpression()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1469)
			p.AsyncFunctionExpression()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1470)
			p.AsyncGeneratorExpression()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1471)
			p.RegularExpressionLiteral()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1472)
			p.TemplateLiteral_Await()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1473)
			p.CoverParenthesizedExpressionAndArrowParameterList_Await()
		}

	}

	return localctx
}

// IPrimaryExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IPrimaryExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpression_Yield_AwaitContext differentiates from other interfaces.
	IsPrimaryExpression_Yield_AwaitContext()
}

type PrimaryExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpression_Yield_AwaitContext() *PrimaryExpression_Yield_AwaitContext {
	var p = new(PrimaryExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_primaryExpression_Yield_Await
	return p
}

func (*PrimaryExpression_Yield_AwaitContext) IsPrimaryExpression_Yield_AwaitContext() {}

func NewPrimaryExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpression_Yield_AwaitContext {
	var p = new(PrimaryExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_primaryExpression_Yield_Await

	return p
}

func (s *PrimaryExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpression_Yield_AwaitContext) IdentifierReference_Yield_Await() IIdentifierReference_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReference_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReference_Yield_AwaitContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) ArrayLiteral_Yield_Await() IArrayLiteral_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteral_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteral_Yield_AwaitContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) ObjectLiteral_Yield_Await() IObjectLiteral_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteral_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteral_Yield_AwaitContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) FunctionExpression() IFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionExpressionContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) ClassExpression_Yield_Await() IClassExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassExpression_Yield_AwaitContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) GeneratorExpression() IGeneratorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorExpressionContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) AsyncFunctionExpression() IAsyncFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionExpressionContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) AsyncGeneratorExpression() IAsyncGeneratorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorExpressionContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) RegularExpressionLiteral() IRegularExpressionLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRegularExpressionLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRegularExpressionLiteralContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) TemplateLiteral_Yield_Await() ITemplateLiteral_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteral_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteral_Yield_AwaitContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) CoverParenthesizedExpressionAndArrowParameterList_Yield_Await() ICoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext)
}

func (s *PrimaryExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPrimaryExpression_Yield_Await(s)
	}
}

func (s *PrimaryExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPrimaryExpression_Yield_Await(s)
	}
}

func (s *PrimaryExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPrimaryExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PrimaryExpression_Yield_Await() (localctx IPrimaryExpression_Yield_AwaitContext) {
	localctx = NewPrimaryExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, ECMAScriptParserRULE_primaryExpression_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1489)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1476)
			p.Match(ECMAScriptParserT__3)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1477)
			p.IdentifierReference_Yield_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1478)
			p.Literal()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1479)
			p.ArrayLiteral_Yield_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1480)
			p.ObjectLiteral_Yield_Await()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1481)
			p.FunctionExpression()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1482)
			p.ClassExpression_Yield_Await()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1483)
			p.GeneratorExpression()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1484)
			p.AsyncFunctionExpression()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1485)
			p.AsyncGeneratorExpression()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1486)
			p.RegularExpressionLiteral()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1487)
			p.TemplateLiteral_Yield_Await()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1488)
			p.CoverParenthesizedExpressionAndArrowParameterList_Yield_Await()
		}

	}

	return localctx
}

// ICoverParenthesizedExpressionAndArrowParameterListContext is an interface to support dynamic dispatch.
type ICoverParenthesizedExpressionAndArrowParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverParenthesizedExpressionAndArrowParameterListContext differentiates from other interfaces.
	IsCoverParenthesizedExpressionAndArrowParameterListContext()
}

type CoverParenthesizedExpressionAndArrowParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverParenthesizedExpressionAndArrowParameterListContext() *CoverParenthesizedExpressionAndArrowParameterListContext {
	var p = new(CoverParenthesizedExpressionAndArrowParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList
	return p
}

func (*CoverParenthesizedExpressionAndArrowParameterListContext) IsCoverParenthesizedExpressionAndArrowParameterListContext() {
}

func NewCoverParenthesizedExpressionAndArrowParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverParenthesizedExpressionAndArrowParameterListContext {
	var p = new(CoverParenthesizedExpressionAndArrowParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList

	return p
}

func (s *CoverParenthesizedExpressionAndArrowParameterListContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *CoverParenthesizedExpressionAndArrowParameterListContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterListContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterListContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverParenthesizedExpressionAndArrowParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverParenthesizedExpressionAndArrowParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverParenthesizedExpressionAndArrowParameterList(s)
	}
}

func (s *CoverParenthesizedExpressionAndArrowParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverParenthesizedExpressionAndArrowParameterList(s)
	}
}

func (s *CoverParenthesizedExpressionAndArrowParameterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverParenthesizedExpressionAndArrowParameterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverParenthesizedExpressionAndArrowParameterList() (localctx ICoverParenthesizedExpressionAndArrowParameterListContext) {
	localctx = NewCoverParenthesizedExpressionAndArrowParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1525)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1491)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1492)
			p.expression_In(0)
		}
		{
			p.SetState(1493)
			p.Match(ECMAScriptParserT__5)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1495)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1496)
			p.expression_In(0)
		}
		{
			p.SetState(1497)
			p.Match(ECMAScriptParserT__5)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1499)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1500)
			p.Match(ECMAScriptParserT__5)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1501)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1502)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1503)
			p.BindingIdentifier()
		}
		{
			p.SetState(1504)
			p.Match(ECMAScriptParserT__5)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1506)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1507)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1508)
			p.BindingIdentifier()
		}
		{
			p.SetState(1509)
			p.Match(ECMAScriptParserT__5)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1511)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1512)
			p.expression_In(0)
		}
		{
			p.SetState(1513)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1514)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1515)
			p.BindingIdentifier()
		}
		{
			p.SetState(1516)
			p.Match(ECMAScriptParserT__5)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1518)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1519)
			p.expression_In(0)
		}
		{
			p.SetState(1520)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1521)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1522)
			p.BindingPattern()
		}
		{
			p.SetState(1523)
			p.Match(ECMAScriptParserT__5)
		}

	}

	return localctx
}

// ICoverParenthesizedExpressionAndArrowParameterList_YieldContext is an interface to support dynamic dispatch.
type ICoverParenthesizedExpressionAndArrowParameterList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverParenthesizedExpressionAndArrowParameterList_YieldContext differentiates from other interfaces.
	IsCoverParenthesizedExpressionAndArrowParameterList_YieldContext()
}

type CoverParenthesizedExpressionAndArrowParameterList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverParenthesizedExpressionAndArrowParameterList_YieldContext() *CoverParenthesizedExpressionAndArrowParameterList_YieldContext {
	var p = new(CoverParenthesizedExpressionAndArrowParameterList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Yield
	return p
}

func (*CoverParenthesizedExpressionAndArrowParameterList_YieldContext) IsCoverParenthesizedExpressionAndArrowParameterList_YieldContext() {
}

func NewCoverParenthesizedExpressionAndArrowParameterList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverParenthesizedExpressionAndArrowParameterList_YieldContext {
	var p = new(CoverParenthesizedExpressionAndArrowParameterList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Yield

	return p
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_YieldContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_YieldContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_YieldContext) BindingPattern_Yield() IBindingPattern_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_YieldContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverParenthesizedExpressionAndArrowParameterList_Yield(s)
	}
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverParenthesizedExpressionAndArrowParameterList_Yield(s)
	}
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverParenthesizedExpressionAndArrowParameterList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverParenthesizedExpressionAndArrowParameterList_Yield() (localctx ICoverParenthesizedExpressionAndArrowParameterList_YieldContext) {
	localctx = NewCoverParenthesizedExpressionAndArrowParameterList_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1561)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1527)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1528)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(1529)
			p.Match(ECMAScriptParserT__5)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1531)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1532)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(1533)
			p.Match(ECMAScriptParserT__5)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1535)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1536)
			p.Match(ECMAScriptParserT__5)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1537)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1538)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1539)
			p.BindingIdentifier()
		}
		{
			p.SetState(1540)
			p.Match(ECMAScriptParserT__5)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1542)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1543)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1544)
			p.BindingIdentifier()
		}
		{
			p.SetState(1545)
			p.Match(ECMAScriptParserT__5)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1547)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1548)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(1549)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1550)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1551)
			p.BindingIdentifier_Yield()
		}
		{
			p.SetState(1552)
			p.Match(ECMAScriptParserT__5)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1554)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1555)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(1556)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1557)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1558)
			p.BindingPattern_Yield()
		}
		{
			p.SetState(1559)
			p.Match(ECMAScriptParserT__5)
		}

	}

	return localctx
}

// ICoverParenthesizedExpressionAndArrowParameterList_AwaitContext is an interface to support dynamic dispatch.
type ICoverParenthesizedExpressionAndArrowParameterList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverParenthesizedExpressionAndArrowParameterList_AwaitContext differentiates from other interfaces.
	IsCoverParenthesizedExpressionAndArrowParameterList_AwaitContext()
}

type CoverParenthesizedExpressionAndArrowParameterList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverParenthesizedExpressionAndArrowParameterList_AwaitContext() *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext {
	var p = new(CoverParenthesizedExpressionAndArrowParameterList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Await
	return p
}

func (*CoverParenthesizedExpressionAndArrowParameterList_AwaitContext) IsCoverParenthesizedExpressionAndArrowParameterList_AwaitContext() {
}

func NewCoverParenthesizedExpressionAndArrowParameterList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext {
	var p = new(CoverParenthesizedExpressionAndArrowParameterList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Await

	return p
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext) BindingPattern_Await() IBindingPattern_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_AwaitContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverParenthesizedExpressionAndArrowParameterList_Await(s)
	}
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverParenthesizedExpressionAndArrowParameterList_Await(s)
	}
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverParenthesizedExpressionAndArrowParameterList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverParenthesizedExpressionAndArrowParameterList_Await() (localctx ICoverParenthesizedExpressionAndArrowParameterList_AwaitContext) {
	localctx = NewCoverParenthesizedExpressionAndArrowParameterList_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1597)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1563)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1564)
			p.expression_In_Await(0)
		}
		{
			p.SetState(1565)
			p.Match(ECMAScriptParserT__5)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1567)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1568)
			p.expression_In_Await(0)
		}
		{
			p.SetState(1569)
			p.Match(ECMAScriptParserT__5)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1571)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1572)
			p.Match(ECMAScriptParserT__5)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1573)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1574)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1575)
			p.BindingIdentifier()
		}
		{
			p.SetState(1576)
			p.Match(ECMAScriptParserT__5)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1578)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1579)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1580)
			p.BindingIdentifier()
		}
		{
			p.SetState(1581)
			p.Match(ECMAScriptParserT__5)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1583)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1584)
			p.expression_In_Await(0)
		}
		{
			p.SetState(1585)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1586)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1587)
			p.BindingIdentifier_Await()
		}
		{
			p.SetState(1588)
			p.Match(ECMAScriptParserT__5)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1590)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1591)
			p.expression_In_Await(0)
		}
		{
			p.SetState(1592)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1593)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1594)
			p.BindingPattern_Await()
		}
		{
			p.SetState(1595)
			p.Match(ECMAScriptParserT__5)
		}

	}

	return localctx
}

// ICoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext is an interface to support dynamic dispatch.
type ICoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext differentiates from other interfaces.
	IsCoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext()
}

type CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext() *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext {
	var p = new(CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Yield_Await
	return p
}

func (*CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) IsCoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext() {
}

func NewCoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext {
	var p = new(CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Yield_Await

	return p
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) BindingPattern_Yield_Await() IBindingPattern_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_Yield_AwaitContext)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverParenthesizedExpressionAndArrowParameterList_Yield_Await(s)
	}
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverParenthesizedExpressionAndArrowParameterList_Yield_Await(s)
	}
}

func (s *CoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverParenthesizedExpressionAndArrowParameterList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverParenthesizedExpressionAndArrowParameterList_Yield_Await() (localctx ICoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext) {
	localctx = NewCoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, ECMAScriptParserRULE_coverParenthesizedExpressionAndArrowParameterList_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1633)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1599)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1600)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(1601)
			p.Match(ECMAScriptParserT__5)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1603)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1604)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(1605)
			p.Match(ECMAScriptParserT__5)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1607)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1608)
			p.Match(ECMAScriptParserT__5)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1609)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1610)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1611)
			p.BindingIdentifier()
		}
		{
			p.SetState(1612)
			p.Match(ECMAScriptParserT__5)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1614)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1615)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1616)
			p.BindingIdentifier()
		}
		{
			p.SetState(1617)
			p.Match(ECMAScriptParserT__5)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1619)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1620)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(1621)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1622)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1623)
			p.BindingIdentifier_Yield_Await()
		}
		{
			p.SetState(1624)
			p.Match(ECMAScriptParserT__5)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1626)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(1627)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(1628)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1629)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1630)
			p.BindingPattern_Yield_Await()
		}
		{
			p.SetState(1631)
			p.Match(ECMAScriptParserT__5)
		}

	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) NullLiteral() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserNullLiteral, 0)
}

func (s *LiteralContext) BooleanLiteral() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserBooleanLiteral, 0)
}

func (s *LiteralContext) NumericLiteral() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserNumericLiteral, 0)
}

func (s *LiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserStringLiteral, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, ECMAScriptParserRULE_literal)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1635)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IArrayLiteralContext is an interface to support dynamic dispatch.
type IArrayLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteralContext differentiates from other interfaces.
	IsArrayLiteralContext()
}

type ArrayLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralContext() *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrayLiteral
	return p
}

func (*ArrayLiteralContext) IsArrayLiteralContext() {}

func NewArrayLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrayLiteral

	return p
}

func (s *ArrayLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ArrayLiteralContext) ElementList() IElementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementListContext)
}

func (s *ArrayLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrayLiteral(s)
	}
}

func (s *ArrayLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrayLiteral(s)
	}
}

func (s *ArrayLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrayLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrayLiteral() (localctx IArrayLiteralContext) {
	localctx = NewArrayLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, ECMAScriptParserRULE_arrayLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1654)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1637)
			p.Match(ECMAScriptParserT__8)
		}
		p.SetState(1639)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1638)
				p.elision(0)
			}

		}
		{
			p.SetState(1641)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1642)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(1643)
			p.elementList(0)
		}
		{
			p.SetState(1644)
			p.Match(ECMAScriptParserT__9)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1646)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(1647)
			p.elementList(0)
		}
		{
			p.SetState(1648)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(1650)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1649)
				p.elision(0)
			}

		}
		{
			p.SetState(1652)
			p.Match(ECMAScriptParserT__9)
		}

	}

	return localctx
}

// IArrayLiteral_YieldContext is an interface to support dynamic dispatch.
type IArrayLiteral_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteral_YieldContext differentiates from other interfaces.
	IsArrayLiteral_YieldContext()
}

type ArrayLiteral_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteral_YieldContext() *ArrayLiteral_YieldContext {
	var p = new(ArrayLiteral_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrayLiteral_Yield
	return p
}

func (*ArrayLiteral_YieldContext) IsArrayLiteral_YieldContext() {}

func NewArrayLiteral_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteral_YieldContext {
	var p = new(ArrayLiteral_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrayLiteral_Yield

	return p
}

func (s *ArrayLiteral_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteral_YieldContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ArrayLiteral_YieldContext) ElementList_Yield() IElementList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementList_YieldContext)
}

func (s *ArrayLiteral_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteral_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteral_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrayLiteral_Yield(s)
	}
}

func (s *ArrayLiteral_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrayLiteral_Yield(s)
	}
}

func (s *ArrayLiteral_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrayLiteral_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrayLiteral_Yield() (localctx IArrayLiteral_YieldContext) {
	localctx = NewArrayLiteral_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, ECMAScriptParserRULE_arrayLiteral_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1673)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1656)
			p.Match(ECMAScriptParserT__8)
		}
		p.SetState(1658)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1657)
				p.elision(0)
			}

		}
		{
			p.SetState(1660)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1661)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(1662)
			p.elementList_Yield(0)
		}
		{
			p.SetState(1663)
			p.Match(ECMAScriptParserT__9)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1665)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(1666)
			p.elementList_Yield(0)
		}
		{
			p.SetState(1667)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(1669)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1668)
				p.elision(0)
			}

		}
		{
			p.SetState(1671)
			p.Match(ECMAScriptParserT__9)
		}

	}

	return localctx
}

// IArrayLiteral_AwaitContext is an interface to support dynamic dispatch.
type IArrayLiteral_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteral_AwaitContext differentiates from other interfaces.
	IsArrayLiteral_AwaitContext()
}

type ArrayLiteral_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteral_AwaitContext() *ArrayLiteral_AwaitContext {
	var p = new(ArrayLiteral_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrayLiteral_Await
	return p
}

func (*ArrayLiteral_AwaitContext) IsArrayLiteral_AwaitContext() {}

func NewArrayLiteral_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteral_AwaitContext {
	var p = new(ArrayLiteral_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrayLiteral_Await

	return p
}

func (s *ArrayLiteral_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteral_AwaitContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ArrayLiteral_AwaitContext) ElementList_Await() IElementList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementList_AwaitContext)
}

func (s *ArrayLiteral_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteral_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteral_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrayLiteral_Await(s)
	}
}

func (s *ArrayLiteral_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrayLiteral_Await(s)
	}
}

func (s *ArrayLiteral_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrayLiteral_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrayLiteral_Await() (localctx IArrayLiteral_AwaitContext) {
	localctx = NewArrayLiteral_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, ECMAScriptParserRULE_arrayLiteral_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1692)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1675)
			p.Match(ECMAScriptParserT__8)
		}
		p.SetState(1677)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1676)
				p.elision(0)
			}

		}
		{
			p.SetState(1679)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1680)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(1681)
			p.elementList_Await(0)
		}
		{
			p.SetState(1682)
			p.Match(ECMAScriptParserT__9)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1684)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(1685)
			p.elementList_Await(0)
		}
		{
			p.SetState(1686)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(1688)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1687)
				p.elision(0)
			}

		}
		{
			p.SetState(1690)
			p.Match(ECMAScriptParserT__9)
		}

	}

	return localctx
}

// IArrayLiteral_Yield_AwaitContext is an interface to support dynamic dispatch.
type IArrayLiteral_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteral_Yield_AwaitContext differentiates from other interfaces.
	IsArrayLiteral_Yield_AwaitContext()
}

type ArrayLiteral_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteral_Yield_AwaitContext() *ArrayLiteral_Yield_AwaitContext {
	var p = new(ArrayLiteral_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrayLiteral_Yield_Await
	return p
}

func (*ArrayLiteral_Yield_AwaitContext) IsArrayLiteral_Yield_AwaitContext() {}

func NewArrayLiteral_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteral_Yield_AwaitContext {
	var p = new(ArrayLiteral_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrayLiteral_Yield_Await

	return p
}

func (s *ArrayLiteral_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteral_Yield_AwaitContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ArrayLiteral_Yield_AwaitContext) ElementList_Yield_Await() IElementList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementList_Yield_AwaitContext)
}

func (s *ArrayLiteral_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteral_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteral_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrayLiteral_Yield_Await(s)
	}
}

func (s *ArrayLiteral_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrayLiteral_Yield_Await(s)
	}
}

func (s *ArrayLiteral_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrayLiteral_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrayLiteral_Yield_Await() (localctx IArrayLiteral_Yield_AwaitContext) {
	localctx = NewArrayLiteral_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, ECMAScriptParserRULE_arrayLiteral_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1711)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1694)
			p.Match(ECMAScriptParserT__8)
		}
		p.SetState(1696)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1695)
				p.elision(0)
			}

		}
		{
			p.SetState(1698)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1699)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(1700)
			p.elementList_Yield_Await(0)
		}
		{
			p.SetState(1701)
			p.Match(ECMAScriptParserT__9)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1703)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(1704)
			p.elementList_Yield_Await(0)
		}
		{
			p.SetState(1705)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(1707)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1706)
				p.elision(0)
			}

		}
		{
			p.SetState(1709)
			p.Match(ECMAScriptParserT__9)
		}

	}

	return localctx
}

// IElementListContext is an interface to support dynamic dispatch.
type IElementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementListContext differentiates from other interfaces.
	IsElementListContext()
}

type ElementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementListContext() *ElementListContext {
	var p = new(ElementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_elementList
	return p
}

func (*ElementListContext) IsElementListContext() {}

func NewElementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementListContext {
	var p = new(ElementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_elementList

	return p
}

func (s *ElementListContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementListContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *ElementListContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ElementListContext) SpreadElement() ISpreadElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpreadElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpreadElementContext)
}

func (s *ElementListContext) ElementList() IElementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementListContext)
}

func (s *ElementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterElementList(s)
	}
}

func (s *ElementListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitElementList(s)
	}
}

func (s *ElementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitElementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ElementList() (localctx IElementListContext) {
	return p.elementList(0)
}

func (p *ECMAScriptParser) elementList(_p int) (localctx IElementListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewElementListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IElementListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 60
	p.EnterRecursionRule(localctx, 60, ECMAScriptParserRULE_elementList, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1722)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1715)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1714)
				p.elision(0)
			}

		}
		{
			p.SetState(1717)
			p.AssignmentExpression_In()
		}

	case 2:
		p.SetState(1719)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1718)
				p.elision(0)
			}

		}
		{
			p.SetState(1721)
			p.SpreadElement()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1738)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1736)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) {
			case 1:
				localctx = NewElementListContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_elementList)
				p.SetState(1724)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1725)
					p.Match(ECMAScriptParserT__7)
				}
				p.SetState(1727)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == ECMAScriptParserT__7 {
					{
						p.SetState(1726)
						p.elision(0)
					}

				}
				{
					p.SetState(1729)
					p.AssignmentExpression_In()
				}

			case 2:
				localctx = NewElementListContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_elementList)
				p.SetState(1730)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1731)
					p.Match(ECMAScriptParserT__7)
				}
				p.SetState(1733)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == ECMAScriptParserT__7 {
					{
						p.SetState(1732)
						p.elision(0)
					}

				}
				{
					p.SetState(1735)
					p.SpreadElement()
				}

			}

		}
		p.SetState(1740)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())
	}

	return localctx
}

// IElementList_YieldContext is an interface to support dynamic dispatch.
type IElementList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementList_YieldContext differentiates from other interfaces.
	IsElementList_YieldContext()
}

type ElementList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementList_YieldContext() *ElementList_YieldContext {
	var p = new(ElementList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_elementList_Yield
	return p
}

func (*ElementList_YieldContext) IsElementList_YieldContext() {}

func NewElementList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementList_YieldContext {
	var p = new(ElementList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_elementList_Yield

	return p
}

func (s *ElementList_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementList_YieldContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *ElementList_YieldContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ElementList_YieldContext) SpreadElement_Yield() ISpreadElement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpreadElement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpreadElement_YieldContext)
}

func (s *ElementList_YieldContext) ElementList_Yield() IElementList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementList_YieldContext)
}

func (s *ElementList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterElementList_Yield(s)
	}
}

func (s *ElementList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitElementList_Yield(s)
	}
}

func (s *ElementList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitElementList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ElementList_Yield() (localctx IElementList_YieldContext) {
	return p.elementList_Yield(0)
}

func (p *ECMAScriptParser) elementList_Yield(_p int) (localctx IElementList_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewElementList_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IElementList_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 62
	p.EnterRecursionRule(localctx, 62, ECMAScriptParserRULE_elementList_Yield, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1750)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1743)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1742)
				p.elision(0)
			}

		}
		{
			p.SetState(1745)
			p.AssignmentExpression_In_Yield()
		}

	case 2:
		p.SetState(1747)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1746)
				p.elision(0)
			}

		}
		{
			p.SetState(1749)
			p.SpreadElement_Yield()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1766)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1764)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
			case 1:
				localctx = NewElementList_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_elementList_Yield)
				p.SetState(1752)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1753)
					p.Match(ECMAScriptParserT__7)
				}
				p.SetState(1755)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == ECMAScriptParserT__7 {
					{
						p.SetState(1754)
						p.elision(0)
					}

				}
				{
					p.SetState(1757)
					p.AssignmentExpression_In_Yield()
				}

			case 2:
				localctx = NewElementList_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_elementList_Yield)
				p.SetState(1758)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1759)
					p.Match(ECMAScriptParserT__7)
				}
				p.SetState(1761)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == ECMAScriptParserT__7 {
					{
						p.SetState(1760)
						p.elision(0)
					}

				}
				{
					p.SetState(1763)
					p.SpreadElement_Yield()
				}

			}

		}
		p.SetState(1768)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())
	}

	return localctx
}

// IElementList_AwaitContext is an interface to support dynamic dispatch.
type IElementList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementList_AwaitContext differentiates from other interfaces.
	IsElementList_AwaitContext()
}

type ElementList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementList_AwaitContext() *ElementList_AwaitContext {
	var p = new(ElementList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_elementList_Await
	return p
}

func (*ElementList_AwaitContext) IsElementList_AwaitContext() {}

func NewElementList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementList_AwaitContext {
	var p = new(ElementList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_elementList_Await

	return p
}

func (s *ElementList_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementList_AwaitContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *ElementList_AwaitContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ElementList_AwaitContext) SpreadElement_Await() ISpreadElement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpreadElement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpreadElement_AwaitContext)
}

func (s *ElementList_AwaitContext) ElementList_Await() IElementList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementList_AwaitContext)
}

func (s *ElementList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterElementList_Await(s)
	}
}

func (s *ElementList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitElementList_Await(s)
	}
}

func (s *ElementList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitElementList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ElementList_Await() (localctx IElementList_AwaitContext) {
	return p.elementList_Await(0)
}

func (p *ECMAScriptParser) elementList_Await(_p int) (localctx IElementList_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewElementList_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IElementList_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 64
	p.EnterRecursionRule(localctx, 64, ECMAScriptParserRULE_elementList_Await, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1778)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1771)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1770)
				p.elision(0)
			}

		}
		{
			p.SetState(1773)
			p.AssignmentExpression_In_Await()
		}

	case 2:
		p.SetState(1775)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1774)
				p.elision(0)
			}

		}
		{
			p.SetState(1777)
			p.SpreadElement_Await()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1794)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1792)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) {
			case 1:
				localctx = NewElementList_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_elementList_Await)
				p.SetState(1780)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1781)
					p.Match(ECMAScriptParserT__7)
				}
				p.SetState(1783)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == ECMAScriptParserT__7 {
					{
						p.SetState(1782)
						p.elision(0)
					}

				}
				{
					p.SetState(1785)
					p.AssignmentExpression_In_Await()
				}

			case 2:
				localctx = NewElementList_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_elementList_Await)
				p.SetState(1786)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1787)
					p.Match(ECMAScriptParserT__7)
				}
				p.SetState(1789)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == ECMAScriptParserT__7 {
					{
						p.SetState(1788)
						p.elision(0)
					}

				}
				{
					p.SetState(1791)
					p.SpreadElement_Await()
				}

			}

		}
		p.SetState(1796)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext())
	}

	return localctx
}

// IElementList_Yield_AwaitContext is an interface to support dynamic dispatch.
type IElementList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementList_Yield_AwaitContext differentiates from other interfaces.
	IsElementList_Yield_AwaitContext()
}

type ElementList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementList_Yield_AwaitContext() *ElementList_Yield_AwaitContext {
	var p = new(ElementList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_elementList_Yield_Await
	return p
}

func (*ElementList_Yield_AwaitContext) IsElementList_Yield_AwaitContext() {}

func NewElementList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementList_Yield_AwaitContext {
	var p = new(ElementList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_elementList_Yield_Await

	return p
}

func (s *ElementList_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementList_Yield_AwaitContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *ElementList_Yield_AwaitContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ElementList_Yield_AwaitContext) SpreadElement_Yield_Await() ISpreadElement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpreadElement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpreadElement_Yield_AwaitContext)
}

func (s *ElementList_Yield_AwaitContext) ElementList_Yield_Await() IElementList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementList_Yield_AwaitContext)
}

func (s *ElementList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterElementList_Yield_Await(s)
	}
}

func (s *ElementList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitElementList_Yield_Await(s)
	}
}

func (s *ElementList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitElementList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ElementList_Yield_Await() (localctx IElementList_Yield_AwaitContext) {
	return p.elementList_Yield_Await(0)
}

func (p *ECMAScriptParser) elementList_Yield_Await(_p int) (localctx IElementList_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewElementList_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IElementList_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 66
	p.EnterRecursionRule(localctx, 66, ECMAScriptParserRULE_elementList_Yield_Await, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1806)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1799)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1798)
				p.elision(0)
			}

		}
		{
			p.SetState(1801)
			p.AssignmentExpression_In_Yield_Await()
		}

	case 2:
		p.SetState(1803)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(1802)
				p.elision(0)
			}

		}
		{
			p.SetState(1805)
			p.SpreadElement_Yield_Await()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1822)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1820)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext()) {
			case 1:
				localctx = NewElementList_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_elementList_Yield_Await)
				p.SetState(1808)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1809)
					p.Match(ECMAScriptParserT__7)
				}
				p.SetState(1811)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == ECMAScriptParserT__7 {
					{
						p.SetState(1810)
						p.elision(0)
					}

				}
				{
					p.SetState(1813)
					p.AssignmentExpression_In_Yield_Await()
				}

			case 2:
				localctx = NewElementList_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_elementList_Yield_Await)
				p.SetState(1814)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1815)
					p.Match(ECMAScriptParserT__7)
				}
				p.SetState(1817)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == ECMAScriptParserT__7 {
					{
						p.SetState(1816)
						p.elision(0)
					}

				}
				{
					p.SetState(1819)
					p.SpreadElement_Yield_Await()
				}

			}

		}
		p.SetState(1824)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext())
	}

	return localctx
}

// IElisionContext is an interface to support dynamic dispatch.
type IElisionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElisionContext differentiates from other interfaces.
	IsElisionContext()
}

type ElisionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElisionContext() *ElisionContext {
	var p = new(ElisionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_elision
	return p
}

func (*ElisionContext) IsElisionContext() {}

func NewElisionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElisionContext {
	var p = new(ElisionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_elision

	return p
}

func (s *ElisionContext) GetParser() antlr.Parser { return s.parser }

func (s *ElisionContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ElisionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElisionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElisionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterElision(s)
	}
}

func (s *ElisionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitElision(s)
	}
}

func (s *ElisionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitElision(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Elision() (localctx IElisionContext) {
	return p.elision(0)
}

func (p *ECMAScriptParser) elision(_p int) (localctx IElisionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewElisionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IElisionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 68
	p.EnterRecursionRule(localctx, 68, ECMAScriptParserRULE_elision, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1826)
		p.Match(ECMAScriptParserT__7)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1832)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewElisionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_elision)
			p.SetState(1828)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1829)
				p.Match(ECMAScriptParserT__7)
			}

		}
		p.SetState(1834)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())
	}

	return localctx
}

// ISpreadElementContext is an interface to support dynamic dispatch.
type ISpreadElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpreadElementContext differentiates from other interfaces.
	IsSpreadElementContext()
}

type SpreadElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpreadElementContext() *SpreadElementContext {
	var p = new(SpreadElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_spreadElement
	return p
}

func (*SpreadElementContext) IsSpreadElementContext() {}

func NewSpreadElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SpreadElementContext {
	var p = new(SpreadElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_spreadElement

	return p
}

func (s *SpreadElementContext) GetParser() antlr.Parser { return s.parser }

func (s *SpreadElementContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *SpreadElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpreadElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SpreadElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSpreadElement(s)
	}
}

func (s *SpreadElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSpreadElement(s)
	}
}

func (s *SpreadElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSpreadElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SpreadElement() (localctx ISpreadElementContext) {
	localctx = NewSpreadElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, ECMAScriptParserRULE_spreadElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1835)
		p.Match(ECMAScriptParserT__6)
	}
	{
		p.SetState(1836)
		p.AssignmentExpression_In()
	}

	return localctx
}

// ISpreadElement_YieldContext is an interface to support dynamic dispatch.
type ISpreadElement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpreadElement_YieldContext differentiates from other interfaces.
	IsSpreadElement_YieldContext()
}

type SpreadElement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpreadElement_YieldContext() *SpreadElement_YieldContext {
	var p = new(SpreadElement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_spreadElement_Yield
	return p
}

func (*SpreadElement_YieldContext) IsSpreadElement_YieldContext() {}

func NewSpreadElement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SpreadElement_YieldContext {
	var p = new(SpreadElement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_spreadElement_Yield

	return p
}

func (s *SpreadElement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *SpreadElement_YieldContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *SpreadElement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpreadElement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SpreadElement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSpreadElement_Yield(s)
	}
}

func (s *SpreadElement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSpreadElement_Yield(s)
	}
}

func (s *SpreadElement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSpreadElement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SpreadElement_Yield() (localctx ISpreadElement_YieldContext) {
	localctx = NewSpreadElement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, ECMAScriptParserRULE_spreadElement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1838)
		p.Match(ECMAScriptParserT__6)
	}
	{
		p.SetState(1839)
		p.AssignmentExpression_In_Yield()
	}

	return localctx
}

// ISpreadElement_AwaitContext is an interface to support dynamic dispatch.
type ISpreadElement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpreadElement_AwaitContext differentiates from other interfaces.
	IsSpreadElement_AwaitContext()
}

type SpreadElement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpreadElement_AwaitContext() *SpreadElement_AwaitContext {
	var p = new(SpreadElement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_spreadElement_Await
	return p
}

func (*SpreadElement_AwaitContext) IsSpreadElement_AwaitContext() {}

func NewSpreadElement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SpreadElement_AwaitContext {
	var p = new(SpreadElement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_spreadElement_Await

	return p
}

func (s *SpreadElement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SpreadElement_AwaitContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *SpreadElement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpreadElement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SpreadElement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSpreadElement_Await(s)
	}
}

func (s *SpreadElement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSpreadElement_Await(s)
	}
}

func (s *SpreadElement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSpreadElement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SpreadElement_Await() (localctx ISpreadElement_AwaitContext) {
	localctx = NewSpreadElement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, ECMAScriptParserRULE_spreadElement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1841)
		p.Match(ECMAScriptParserT__6)
	}
	{
		p.SetState(1842)
		p.AssignmentExpression_In_Await()
	}

	return localctx
}

// ISpreadElement_Yield_AwaitContext is an interface to support dynamic dispatch.
type ISpreadElement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpreadElement_Yield_AwaitContext differentiates from other interfaces.
	IsSpreadElement_Yield_AwaitContext()
}

type SpreadElement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpreadElement_Yield_AwaitContext() *SpreadElement_Yield_AwaitContext {
	var p = new(SpreadElement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_spreadElement_Yield_Await
	return p
}

func (*SpreadElement_Yield_AwaitContext) IsSpreadElement_Yield_AwaitContext() {}

func NewSpreadElement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SpreadElement_Yield_AwaitContext {
	var p = new(SpreadElement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_spreadElement_Yield_Await

	return p
}

func (s *SpreadElement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SpreadElement_Yield_AwaitContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *SpreadElement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpreadElement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SpreadElement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSpreadElement_Yield_Await(s)
	}
}

func (s *SpreadElement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSpreadElement_Yield_Await(s)
	}
}

func (s *SpreadElement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSpreadElement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SpreadElement_Yield_Await() (localctx ISpreadElement_Yield_AwaitContext) {
	localctx = NewSpreadElement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, ECMAScriptParserRULE_spreadElement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1844)
		p.Match(ECMAScriptParserT__6)
	}
	{
		p.SetState(1845)
		p.AssignmentExpression_In_Yield_Await()
	}

	return localctx
}

// IObjectLiteralContext is an interface to support dynamic dispatch.
type IObjectLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralContext differentiates from other interfaces.
	IsObjectLiteralContext()
}

type ObjectLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralContext() *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_objectLiteral
	return p
}

func (*ObjectLiteralContext) IsObjectLiteralContext() {}

func NewObjectLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_objectLiteral

	return p
}

func (s *ObjectLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ObjectLiteralContext) PropertyDefinitionList() IPropertyDefinitionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyDefinitionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyDefinitionListContext)
}

func (s *ObjectLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterObjectLiteral(s)
	}
}

func (s *ObjectLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitObjectLiteral(s)
	}
}

func (s *ObjectLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitObjectLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ObjectLiteral() (localctx IObjectLiteralContext) {
	localctx = NewObjectLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, ECMAScriptParserRULE_objectLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1858)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1847)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1848)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1849)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1850)
			p.PropertyDefinitionList()
		}
		{
			p.SetState(1851)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1853)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1854)
			p.PropertyDefinitionList()
		}
		{
			p.SetState(1855)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1856)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IObjectLiteral_YieldContext is an interface to support dynamic dispatch.
type IObjectLiteral_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteral_YieldContext differentiates from other interfaces.
	IsObjectLiteral_YieldContext()
}

type ObjectLiteral_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteral_YieldContext() *ObjectLiteral_YieldContext {
	var p = new(ObjectLiteral_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_objectLiteral_Yield
	return p
}

func (*ObjectLiteral_YieldContext) IsObjectLiteral_YieldContext() {}

func NewObjectLiteral_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteral_YieldContext {
	var p = new(ObjectLiteral_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_objectLiteral_Yield

	return p
}

func (s *ObjectLiteral_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteral_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ObjectLiteral_YieldContext) PropertyDefinitionList_Yield() IPropertyDefinitionList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyDefinitionList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyDefinitionList_YieldContext)
}

func (s *ObjectLiteral_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteral_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteral_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterObjectLiteral_Yield(s)
	}
}

func (s *ObjectLiteral_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitObjectLiteral_Yield(s)
	}
}

func (s *ObjectLiteral_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitObjectLiteral_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ObjectLiteral_Yield() (localctx IObjectLiteral_YieldContext) {
	localctx = NewObjectLiteral_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, ECMAScriptParserRULE_objectLiteral_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1871)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1860)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1861)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1862)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1863)
			p.PropertyDefinitionList_Yield()
		}
		{
			p.SetState(1864)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1866)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1867)
			p.PropertyDefinitionList_Yield()
		}
		{
			p.SetState(1868)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1869)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IObjectLiteral_AwaitContext is an interface to support dynamic dispatch.
type IObjectLiteral_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteral_AwaitContext differentiates from other interfaces.
	IsObjectLiteral_AwaitContext()
}

type ObjectLiteral_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteral_AwaitContext() *ObjectLiteral_AwaitContext {
	var p = new(ObjectLiteral_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_objectLiteral_Await
	return p
}

func (*ObjectLiteral_AwaitContext) IsObjectLiteral_AwaitContext() {}

func NewObjectLiteral_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteral_AwaitContext {
	var p = new(ObjectLiteral_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_objectLiteral_Await

	return p
}

func (s *ObjectLiteral_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteral_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ObjectLiteral_AwaitContext) PropertyDefinitionList_Await() IPropertyDefinitionList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyDefinitionList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyDefinitionList_AwaitContext)
}

func (s *ObjectLiteral_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteral_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteral_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterObjectLiteral_Await(s)
	}
}

func (s *ObjectLiteral_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitObjectLiteral_Await(s)
	}
}

func (s *ObjectLiteral_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitObjectLiteral_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ObjectLiteral_Await() (localctx IObjectLiteral_AwaitContext) {
	localctx = NewObjectLiteral_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, ECMAScriptParserRULE_objectLiteral_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1884)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1873)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1874)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1875)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1876)
			p.PropertyDefinitionList_Await()
		}
		{
			p.SetState(1877)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1879)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1880)
			p.PropertyDefinitionList_Await()
		}
		{
			p.SetState(1881)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1882)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IObjectLiteral_Yield_AwaitContext is an interface to support dynamic dispatch.
type IObjectLiteral_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteral_Yield_AwaitContext differentiates from other interfaces.
	IsObjectLiteral_Yield_AwaitContext()
}

type ObjectLiteral_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteral_Yield_AwaitContext() *ObjectLiteral_Yield_AwaitContext {
	var p = new(ObjectLiteral_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_objectLiteral_Yield_Await
	return p
}

func (*ObjectLiteral_Yield_AwaitContext) IsObjectLiteral_Yield_AwaitContext() {}

func NewObjectLiteral_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteral_Yield_AwaitContext {
	var p = new(ObjectLiteral_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_objectLiteral_Yield_Await

	return p
}

func (s *ObjectLiteral_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteral_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ObjectLiteral_Yield_AwaitContext) PropertyDefinitionList_Yield_Await() IPropertyDefinitionList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyDefinitionList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyDefinitionList_Yield_AwaitContext)
}

func (s *ObjectLiteral_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteral_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteral_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterObjectLiteral_Yield_Await(s)
	}
}

func (s *ObjectLiteral_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitObjectLiteral_Yield_Await(s)
	}
}

func (s *ObjectLiteral_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitObjectLiteral_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ObjectLiteral_Yield_Await() (localctx IObjectLiteral_Yield_AwaitContext) {
	localctx = NewObjectLiteral_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, ECMAScriptParserRULE_objectLiteral_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1897)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1886)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1887)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1888)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1889)
			p.PropertyDefinitionList_Yield_Await()
		}
		{
			p.SetState(1890)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1892)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(1893)
			p.PropertyDefinitionList_Yield_Await()
		}
		{
			p.SetState(1894)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(1895)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IPropertyDefinitionListContext is an interface to support dynamic dispatch.
type IPropertyDefinitionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyDefinitionListContext differentiates from other interfaces.
	IsPropertyDefinitionListContext()
}

type PropertyDefinitionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyDefinitionListContext() *PropertyDefinitionListContext {
	var p = new(PropertyDefinitionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinitionList
	return p
}

func (*PropertyDefinitionListContext) IsPropertyDefinitionListContext() {}

func NewPropertyDefinitionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyDefinitionListContext {
	var p = new(PropertyDefinitionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinitionList

	return p
}

func (s *PropertyDefinitionListContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyDefinitionListContext) AllPropertyDefinition() []IPropertyDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPropertyDefinitionContext)(nil)).Elem())
	var tst = make([]IPropertyDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPropertyDefinitionContext)
		}
	}

	return tst
}

func (s *PropertyDefinitionListContext) PropertyDefinition(i int) IPropertyDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPropertyDefinitionContext)
}

func (s *PropertyDefinitionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyDefinitionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyDefinitionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyDefinitionList(s)
	}
}

func (s *PropertyDefinitionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyDefinitionList(s)
	}
}

func (s *PropertyDefinitionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyDefinitionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyDefinitionList() (localctx IPropertyDefinitionListContext) {
	localctx = NewPropertyDefinitionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, ECMAScriptParserRULE_propertyDefinitionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1902)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__6)|(1<<ECMAScriptParserT__8))) != 0) || (((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(ECMAScriptParserT__82-83))|(1<<(ECMAScriptParserT__83-83))|(1<<(ECMAScriptParserT__84-83))|(1<<(ECMAScriptParserT__85-83))|(1<<(ECMAScriptParserIdentifierName-83))|(1<<(ECMAScriptParserNumericLiteral-83)))) != 0) || _la == ECMAScriptParserStringLiteral || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(1899)
			p.PropertyDefinition()
		}

		p.SetState(1904)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPropertyDefinitionList_YieldContext is an interface to support dynamic dispatch.
type IPropertyDefinitionList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyDefinitionList_YieldContext differentiates from other interfaces.
	IsPropertyDefinitionList_YieldContext()
}

type PropertyDefinitionList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyDefinitionList_YieldContext() *PropertyDefinitionList_YieldContext {
	var p = new(PropertyDefinitionList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinitionList_Yield
	return p
}

func (*PropertyDefinitionList_YieldContext) IsPropertyDefinitionList_YieldContext() {}

func NewPropertyDefinitionList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyDefinitionList_YieldContext {
	var p = new(PropertyDefinitionList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinitionList_Yield

	return p
}

func (s *PropertyDefinitionList_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyDefinitionList_YieldContext) AllPropertyDefinition_Yield() []IPropertyDefinition_YieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPropertyDefinition_YieldContext)(nil)).Elem())
	var tst = make([]IPropertyDefinition_YieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPropertyDefinition_YieldContext)
		}
	}

	return tst
}

func (s *PropertyDefinitionList_YieldContext) PropertyDefinition_Yield(i int) IPropertyDefinition_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyDefinition_YieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPropertyDefinition_YieldContext)
}

func (s *PropertyDefinitionList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyDefinitionList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyDefinitionList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyDefinitionList_Yield(s)
	}
}

func (s *PropertyDefinitionList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyDefinitionList_Yield(s)
	}
}

func (s *PropertyDefinitionList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyDefinitionList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyDefinitionList_Yield() (localctx IPropertyDefinitionList_YieldContext) {
	localctx = NewPropertyDefinitionList_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, ECMAScriptParserRULE_propertyDefinitionList_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1908)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__6)|(1<<ECMAScriptParserT__8))) != 0) || (((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(ECMAScriptParserT__82-83))|(1<<(ECMAScriptParserT__83-83))|(1<<(ECMAScriptParserT__84-83))|(1<<(ECMAScriptParserT__85-83))|(1<<(ECMAScriptParserIdentifierName-83))|(1<<(ECMAScriptParserNumericLiteral-83)))) != 0) || _la == ECMAScriptParserStringLiteral || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(1905)
			p.PropertyDefinition_Yield()
		}

		p.SetState(1910)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPropertyDefinitionList_AwaitContext is an interface to support dynamic dispatch.
type IPropertyDefinitionList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyDefinitionList_AwaitContext differentiates from other interfaces.
	IsPropertyDefinitionList_AwaitContext()
}

type PropertyDefinitionList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyDefinitionList_AwaitContext() *PropertyDefinitionList_AwaitContext {
	var p = new(PropertyDefinitionList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinitionList_Await
	return p
}

func (*PropertyDefinitionList_AwaitContext) IsPropertyDefinitionList_AwaitContext() {}

func NewPropertyDefinitionList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyDefinitionList_AwaitContext {
	var p = new(PropertyDefinitionList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinitionList_Await

	return p
}

func (s *PropertyDefinitionList_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyDefinitionList_AwaitContext) AllPropertyDefinition_Await() []IPropertyDefinition_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPropertyDefinition_AwaitContext)(nil)).Elem())
	var tst = make([]IPropertyDefinition_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPropertyDefinition_AwaitContext)
		}
	}

	return tst
}

func (s *PropertyDefinitionList_AwaitContext) PropertyDefinition_Await(i int) IPropertyDefinition_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyDefinition_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPropertyDefinition_AwaitContext)
}

func (s *PropertyDefinitionList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyDefinitionList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyDefinitionList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyDefinitionList_Await(s)
	}
}

func (s *PropertyDefinitionList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyDefinitionList_Await(s)
	}
}

func (s *PropertyDefinitionList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyDefinitionList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyDefinitionList_Await() (localctx IPropertyDefinitionList_AwaitContext) {
	localctx = NewPropertyDefinitionList_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, ECMAScriptParserRULE_propertyDefinitionList_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1914)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__6)|(1<<ECMAScriptParserT__8))) != 0) || (((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(ECMAScriptParserT__82-83))|(1<<(ECMAScriptParserT__83-83))|(1<<(ECMAScriptParserT__84-83))|(1<<(ECMAScriptParserT__85-83))|(1<<(ECMAScriptParserIdentifierName-83))|(1<<(ECMAScriptParserNumericLiteral-83)))) != 0) || _la == ECMAScriptParserStringLiteral || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(1911)
			p.PropertyDefinition_Await()
		}

		p.SetState(1916)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPropertyDefinitionList_Yield_AwaitContext is an interface to support dynamic dispatch.
type IPropertyDefinitionList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyDefinitionList_Yield_AwaitContext differentiates from other interfaces.
	IsPropertyDefinitionList_Yield_AwaitContext()
}

type PropertyDefinitionList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyDefinitionList_Yield_AwaitContext() *PropertyDefinitionList_Yield_AwaitContext {
	var p = new(PropertyDefinitionList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinitionList_Yield_Await
	return p
}

func (*PropertyDefinitionList_Yield_AwaitContext) IsPropertyDefinitionList_Yield_AwaitContext() {}

func NewPropertyDefinitionList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyDefinitionList_Yield_AwaitContext {
	var p = new(PropertyDefinitionList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinitionList_Yield_Await

	return p
}

func (s *PropertyDefinitionList_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyDefinitionList_Yield_AwaitContext) AllPropertyDefinition_Yield_Await() []IPropertyDefinition_Yield_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPropertyDefinition_Yield_AwaitContext)(nil)).Elem())
	var tst = make([]IPropertyDefinition_Yield_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPropertyDefinition_Yield_AwaitContext)
		}
	}

	return tst
}

func (s *PropertyDefinitionList_Yield_AwaitContext) PropertyDefinition_Yield_Await(i int) IPropertyDefinition_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyDefinition_Yield_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPropertyDefinition_Yield_AwaitContext)
}

func (s *PropertyDefinitionList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyDefinitionList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyDefinitionList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyDefinitionList_Yield_Await(s)
	}
}

func (s *PropertyDefinitionList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyDefinitionList_Yield_Await(s)
	}
}

func (s *PropertyDefinitionList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyDefinitionList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyDefinitionList_Yield_Await() (localctx IPropertyDefinitionList_Yield_AwaitContext) {
	localctx = NewPropertyDefinitionList_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, ECMAScriptParserRULE_propertyDefinitionList_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1920)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == ECMAScriptParserT__6 || _la == ECMAScriptParserT__8 || (((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(ECMAScriptParserT__82-83))|(1<<(ECMAScriptParserT__83-83))|(1<<(ECMAScriptParserT__84-83))|(1<<(ECMAScriptParserT__85-83))|(1<<(ECMAScriptParserIdentifierName-83))|(1<<(ECMAScriptParserNumericLiteral-83)))) != 0) || _la == ECMAScriptParserStringLiteral || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(1917)
			p.PropertyDefinition_Yield_Await()
		}

		p.SetState(1922)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPropertyDefinitionContext is an interface to support dynamic dispatch.
type IPropertyDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyDefinitionContext differentiates from other interfaces.
	IsPropertyDefinitionContext()
}

type PropertyDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyDefinitionContext() *PropertyDefinitionContext {
	var p = new(PropertyDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinition
	return p
}

func (*PropertyDefinitionContext) IsPropertyDefinitionContext() {}

func NewPropertyDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyDefinitionContext {
	var p = new(PropertyDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinition

	return p
}

func (s *PropertyDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyDefinitionContext) IdentifierReference() IIdentifierReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReferenceContext)
}

func (s *PropertyDefinitionContext) CoverInitializedName() ICoverInitializedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverInitializedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverInitializedNameContext)
}

func (s *PropertyDefinitionContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *PropertyDefinitionContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *PropertyDefinitionContext) MethodDefinition() IMethodDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethodDefinitionContext)
}

func (s *PropertyDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyDefinition(s)
	}
}

func (s *PropertyDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyDefinition(s)
	}
}

func (s *PropertyDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyDefinition() (localctx IPropertyDefinitionContext) {
	localctx = NewPropertyDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, ECMAScriptParserRULE_propertyDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1932)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1923)
			p.IdentifierReference()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1924)
			p.CoverInitializedName()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1925)
			p.PropertyName()
		}
		{
			p.SetState(1926)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(1927)
			p.AssignmentExpression_In()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1929)
			p.MethodDefinition()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1930)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1931)
			p.AssignmentExpression_In()
		}

	}

	return localctx
}

// IPropertyDefinition_YieldContext is an interface to support dynamic dispatch.
type IPropertyDefinition_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyDefinition_YieldContext differentiates from other interfaces.
	IsPropertyDefinition_YieldContext()
}

type PropertyDefinition_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyDefinition_YieldContext() *PropertyDefinition_YieldContext {
	var p = new(PropertyDefinition_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinition_Yield
	return p
}

func (*PropertyDefinition_YieldContext) IsPropertyDefinition_YieldContext() {}

func NewPropertyDefinition_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyDefinition_YieldContext {
	var p = new(PropertyDefinition_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinition_Yield

	return p
}

func (s *PropertyDefinition_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyDefinition_YieldContext) IdentifierReference_Yield() IIdentifierReference_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReference_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReference_YieldContext)
}

func (s *PropertyDefinition_YieldContext) CoverInitializedName_Yield() ICoverInitializedName_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverInitializedName_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverInitializedName_YieldContext)
}

func (s *PropertyDefinition_YieldContext) PropertyName_Yield() IPropertyName_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_YieldContext)
}

func (s *PropertyDefinition_YieldContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *PropertyDefinition_YieldContext) MethodDefinition_Yield() IMethodDefinition_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodDefinition_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethodDefinition_YieldContext)
}

func (s *PropertyDefinition_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyDefinition_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyDefinition_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyDefinition_Yield(s)
	}
}

func (s *PropertyDefinition_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyDefinition_Yield(s)
	}
}

func (s *PropertyDefinition_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyDefinition_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyDefinition_Yield() (localctx IPropertyDefinition_YieldContext) {
	localctx = NewPropertyDefinition_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, ECMAScriptParserRULE_propertyDefinition_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1943)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1934)
			p.IdentifierReference_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1935)
			p.CoverInitializedName_Yield()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1936)
			p.PropertyName_Yield()
		}
		{
			p.SetState(1937)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(1938)
			p.AssignmentExpression_In_Yield()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1940)
			p.MethodDefinition_Yield()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1941)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1942)
			p.AssignmentExpression_In_Yield()
		}

	}

	return localctx
}

// IPropertyDefinition_AwaitContext is an interface to support dynamic dispatch.
type IPropertyDefinition_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyDefinition_AwaitContext differentiates from other interfaces.
	IsPropertyDefinition_AwaitContext()
}

type PropertyDefinition_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyDefinition_AwaitContext() *PropertyDefinition_AwaitContext {
	var p = new(PropertyDefinition_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinition_Await
	return p
}

func (*PropertyDefinition_AwaitContext) IsPropertyDefinition_AwaitContext() {}

func NewPropertyDefinition_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyDefinition_AwaitContext {
	var p = new(PropertyDefinition_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinition_Await

	return p
}

func (s *PropertyDefinition_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyDefinition_AwaitContext) IdentifierReference_Await() IIdentifierReference_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReference_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReference_AwaitContext)
}

func (s *PropertyDefinition_AwaitContext) CoverInitializedName_Await() ICoverInitializedName_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverInitializedName_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverInitializedName_AwaitContext)
}

func (s *PropertyDefinition_AwaitContext) PropertyName_Await() IPropertyName_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_AwaitContext)
}

func (s *PropertyDefinition_AwaitContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *PropertyDefinition_AwaitContext) MethodDefinition_Await() IMethodDefinition_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodDefinition_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethodDefinition_AwaitContext)
}

func (s *PropertyDefinition_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyDefinition_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyDefinition_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyDefinition_Await(s)
	}
}

func (s *PropertyDefinition_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyDefinition_Await(s)
	}
}

func (s *PropertyDefinition_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyDefinition_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyDefinition_Await() (localctx IPropertyDefinition_AwaitContext) {
	localctx = NewPropertyDefinition_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, ECMAScriptParserRULE_propertyDefinition_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1954)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1945)
			p.IdentifierReference_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1946)
			p.CoverInitializedName_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1947)
			p.PropertyName_Await()
		}
		{
			p.SetState(1948)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(1949)
			p.AssignmentExpression_In_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1951)
			p.MethodDefinition_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1952)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1953)
			p.AssignmentExpression_In_Await()
		}

	}

	return localctx
}

// IPropertyDefinition_Yield_AwaitContext is an interface to support dynamic dispatch.
type IPropertyDefinition_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyDefinition_Yield_AwaitContext differentiates from other interfaces.
	IsPropertyDefinition_Yield_AwaitContext()
}

type PropertyDefinition_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyDefinition_Yield_AwaitContext() *PropertyDefinition_Yield_AwaitContext {
	var p = new(PropertyDefinition_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinition_Yield_Await
	return p
}

func (*PropertyDefinition_Yield_AwaitContext) IsPropertyDefinition_Yield_AwaitContext() {}

func NewPropertyDefinition_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyDefinition_Yield_AwaitContext {
	var p = new(PropertyDefinition_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyDefinition_Yield_Await

	return p
}

func (s *PropertyDefinition_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyDefinition_Yield_AwaitContext) IdentifierReference_Yield_Await() IIdentifierReference_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReference_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReference_Yield_AwaitContext)
}

func (s *PropertyDefinition_Yield_AwaitContext) CoverInitializedName_Yield_Await() ICoverInitializedName_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverInitializedName_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverInitializedName_Yield_AwaitContext)
}

func (s *PropertyDefinition_Yield_AwaitContext) PropertyName_Yield_Await() IPropertyName_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_Yield_AwaitContext)
}

func (s *PropertyDefinition_Yield_AwaitContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *PropertyDefinition_Yield_AwaitContext) MethodDefinition_Yield_Await() IMethodDefinition_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodDefinition_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethodDefinition_Yield_AwaitContext)
}

func (s *PropertyDefinition_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyDefinition_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyDefinition_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyDefinition_Yield_Await(s)
	}
}

func (s *PropertyDefinition_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyDefinition_Yield_Await(s)
	}
}

func (s *PropertyDefinition_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyDefinition_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyDefinition_Yield_Await() (localctx IPropertyDefinition_Yield_AwaitContext) {
	localctx = NewPropertyDefinition_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, ECMAScriptParserRULE_propertyDefinition_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1965)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1956)
			p.IdentifierReference_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1957)
			p.CoverInitializedName_Yield_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1958)
			p.PropertyName_Yield_Await()
		}
		{
			p.SetState(1959)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(1960)
			p.AssignmentExpression_In_Yield_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1962)
			p.MethodDefinition_Yield_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1963)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(1964)
			p.AssignmentExpression_In_Yield_Await()
		}

	}

	return localctx
}

// IPropertyNameContext is an interface to support dynamic dispatch.
type IPropertyNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyNameContext differentiates from other interfaces.
	IsPropertyNameContext()
}

type PropertyNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyNameContext() *PropertyNameContext {
	var p = new(PropertyNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyName
	return p
}

func (*PropertyNameContext) IsPropertyNameContext() {}

func NewPropertyNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyNameContext {
	var p = new(PropertyNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyName

	return p
}

func (s *PropertyNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyNameContext) LiteralPropertyName() ILiteralPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralPropertyNameContext)
}

func (s *PropertyNameContext) ComputedPropertyName() IComputedPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComputedPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComputedPropertyNameContext)
}

func (s *PropertyNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyName(s)
	}
}

func (s *PropertyNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyName(s)
	}
}

func (s *PropertyNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyName() (localctx IPropertyNameContext) {
	localctx = NewPropertyNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, ECMAScriptParserRULE_propertyName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1969)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1967)
			p.LiteralPropertyName()
		}

	case ECMAScriptParserT__8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1968)
			p.ComputedPropertyName()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPropertyName_YieldContext is an interface to support dynamic dispatch.
type IPropertyName_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyName_YieldContext differentiates from other interfaces.
	IsPropertyName_YieldContext()
}

type PropertyName_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyName_YieldContext() *PropertyName_YieldContext {
	var p = new(PropertyName_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyName_Yield
	return p
}

func (*PropertyName_YieldContext) IsPropertyName_YieldContext() {}

func NewPropertyName_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyName_YieldContext {
	var p = new(PropertyName_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyName_Yield

	return p
}

func (s *PropertyName_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyName_YieldContext) LiteralPropertyName() ILiteralPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralPropertyNameContext)
}

func (s *PropertyName_YieldContext) ComputedPropertyName_Yield() IComputedPropertyName_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComputedPropertyName_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComputedPropertyName_YieldContext)
}

func (s *PropertyName_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyName_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyName_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyName_Yield(s)
	}
}

func (s *PropertyName_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyName_Yield(s)
	}
}

func (s *PropertyName_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyName_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyName_Yield() (localctx IPropertyName_YieldContext) {
	localctx = NewPropertyName_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, ECMAScriptParserRULE_propertyName_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1973)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1971)
			p.LiteralPropertyName()
		}

	case ECMAScriptParserT__8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1972)
			p.ComputedPropertyName_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPropertyName_AwaitContext is an interface to support dynamic dispatch.
type IPropertyName_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyName_AwaitContext differentiates from other interfaces.
	IsPropertyName_AwaitContext()
}

type PropertyName_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyName_AwaitContext() *PropertyName_AwaitContext {
	var p = new(PropertyName_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyName_Await
	return p
}

func (*PropertyName_AwaitContext) IsPropertyName_AwaitContext() {}

func NewPropertyName_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyName_AwaitContext {
	var p = new(PropertyName_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyName_Await

	return p
}

func (s *PropertyName_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyName_AwaitContext) LiteralPropertyName() ILiteralPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralPropertyNameContext)
}

func (s *PropertyName_AwaitContext) ComputedPropertyName_Await() IComputedPropertyName_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComputedPropertyName_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComputedPropertyName_AwaitContext)
}

func (s *PropertyName_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyName_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyName_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyName_Await(s)
	}
}

func (s *PropertyName_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyName_Await(s)
	}
}

func (s *PropertyName_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyName_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyName_Await() (localctx IPropertyName_AwaitContext) {
	localctx = NewPropertyName_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, ECMAScriptParserRULE_propertyName_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1977)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1975)
			p.LiteralPropertyName()
		}

	case ECMAScriptParserT__8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1976)
			p.ComputedPropertyName_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPropertyName_Yield_AwaitContext is an interface to support dynamic dispatch.
type IPropertyName_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyName_Yield_AwaitContext differentiates from other interfaces.
	IsPropertyName_Yield_AwaitContext()
}

type PropertyName_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyName_Yield_AwaitContext() *PropertyName_Yield_AwaitContext {
	var p = new(PropertyName_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertyName_Yield_Await
	return p
}

func (*PropertyName_Yield_AwaitContext) IsPropertyName_Yield_AwaitContext() {}

func NewPropertyName_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyName_Yield_AwaitContext {
	var p = new(PropertyName_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertyName_Yield_Await

	return p
}

func (s *PropertyName_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyName_Yield_AwaitContext) LiteralPropertyName() ILiteralPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralPropertyNameContext)
}

func (s *PropertyName_Yield_AwaitContext) ComputedPropertyName_Yield_Await() IComputedPropertyName_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComputedPropertyName_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComputedPropertyName_Yield_AwaitContext)
}

func (s *PropertyName_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyName_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyName_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertyName_Yield_Await(s)
	}
}

func (s *PropertyName_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertyName_Yield_Await(s)
	}
}

func (s *PropertyName_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertyName_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertyName_Yield_Await() (localctx IPropertyName_Yield_AwaitContext) {
	localctx = NewPropertyName_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, ECMAScriptParserRULE_propertyName_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1981)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1979)
			p.LiteralPropertyName()
		}

	case ECMAScriptParserT__8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1980)
			p.ComputedPropertyName_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILiteralPropertyNameContext is an interface to support dynamic dispatch.
type ILiteralPropertyNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralPropertyNameContext differentiates from other interfaces.
	IsLiteralPropertyNameContext()
}

type LiteralPropertyNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralPropertyNameContext() *LiteralPropertyNameContext {
	var p = new(LiteralPropertyNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_literalPropertyName
	return p
}

func (*LiteralPropertyNameContext) IsLiteralPropertyNameContext() {}

func NewLiteralPropertyNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralPropertyNameContext {
	var p = new(LiteralPropertyNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_literalPropertyName

	return p
}

func (s *LiteralPropertyNameContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralPropertyNameContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *LiteralPropertyNameContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserStringLiteral, 0)
}

func (s *LiteralPropertyNameContext) NumericLiteral() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserNumericLiteral, 0)
}

func (s *LiteralPropertyNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralPropertyNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralPropertyNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLiteralPropertyName(s)
	}
}

func (s *LiteralPropertyNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLiteralPropertyName(s)
	}
}

func (s *LiteralPropertyNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLiteralPropertyName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LiteralPropertyName() (localctx ILiteralPropertyNameContext) {
	localctx = NewLiteralPropertyNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, ECMAScriptParserRULE_literalPropertyName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1983)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(ECMAScriptParserIdentifierName-101))|(1<<(ECMAScriptParserNumericLiteral-101))|(1<<(ECMAScriptParserStringLiteral-101)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IComputedPropertyNameContext is an interface to support dynamic dispatch.
type IComputedPropertyNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComputedPropertyNameContext differentiates from other interfaces.
	IsComputedPropertyNameContext()
}

type ComputedPropertyNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComputedPropertyNameContext() *ComputedPropertyNameContext {
	var p = new(ComputedPropertyNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_computedPropertyName
	return p
}

func (*ComputedPropertyNameContext) IsComputedPropertyNameContext() {}

func NewComputedPropertyNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComputedPropertyNameContext {
	var p = new(ComputedPropertyNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_computedPropertyName

	return p
}

func (s *ComputedPropertyNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ComputedPropertyNameContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *ComputedPropertyNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComputedPropertyNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComputedPropertyNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterComputedPropertyName(s)
	}
}

func (s *ComputedPropertyNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitComputedPropertyName(s)
	}
}

func (s *ComputedPropertyNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitComputedPropertyName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ComputedPropertyName() (localctx IComputedPropertyNameContext) {
	localctx = NewComputedPropertyNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, ECMAScriptParserRULE_computedPropertyName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1985)
		p.Match(ECMAScriptParserT__8)
	}
	{
		p.SetState(1986)
		p.AssignmentExpression_In()
	}
	{
		p.SetState(1987)
		p.Match(ECMAScriptParserT__9)
	}

	return localctx
}

// IComputedPropertyName_YieldContext is an interface to support dynamic dispatch.
type IComputedPropertyName_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComputedPropertyName_YieldContext differentiates from other interfaces.
	IsComputedPropertyName_YieldContext()
}

type ComputedPropertyName_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComputedPropertyName_YieldContext() *ComputedPropertyName_YieldContext {
	var p = new(ComputedPropertyName_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_computedPropertyName_Yield
	return p
}

func (*ComputedPropertyName_YieldContext) IsComputedPropertyName_YieldContext() {}

func NewComputedPropertyName_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComputedPropertyName_YieldContext {
	var p = new(ComputedPropertyName_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_computedPropertyName_Yield

	return p
}

func (s *ComputedPropertyName_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ComputedPropertyName_YieldContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *ComputedPropertyName_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComputedPropertyName_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComputedPropertyName_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterComputedPropertyName_Yield(s)
	}
}

func (s *ComputedPropertyName_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitComputedPropertyName_Yield(s)
	}
}

func (s *ComputedPropertyName_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitComputedPropertyName_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ComputedPropertyName_Yield() (localctx IComputedPropertyName_YieldContext) {
	localctx = NewComputedPropertyName_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, ECMAScriptParserRULE_computedPropertyName_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1989)
		p.Match(ECMAScriptParserT__8)
	}
	{
		p.SetState(1990)
		p.AssignmentExpression_In_Yield()
	}
	{
		p.SetState(1991)
		p.Match(ECMAScriptParserT__9)
	}

	return localctx
}

// IComputedPropertyName_AwaitContext is an interface to support dynamic dispatch.
type IComputedPropertyName_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComputedPropertyName_AwaitContext differentiates from other interfaces.
	IsComputedPropertyName_AwaitContext()
}

type ComputedPropertyName_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComputedPropertyName_AwaitContext() *ComputedPropertyName_AwaitContext {
	var p = new(ComputedPropertyName_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_computedPropertyName_Await
	return p
}

func (*ComputedPropertyName_AwaitContext) IsComputedPropertyName_AwaitContext() {}

func NewComputedPropertyName_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComputedPropertyName_AwaitContext {
	var p = new(ComputedPropertyName_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_computedPropertyName_Await

	return p
}

func (s *ComputedPropertyName_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ComputedPropertyName_AwaitContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *ComputedPropertyName_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComputedPropertyName_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComputedPropertyName_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterComputedPropertyName_Await(s)
	}
}

func (s *ComputedPropertyName_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitComputedPropertyName_Await(s)
	}
}

func (s *ComputedPropertyName_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitComputedPropertyName_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ComputedPropertyName_Await() (localctx IComputedPropertyName_AwaitContext) {
	localctx = NewComputedPropertyName_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, ECMAScriptParserRULE_computedPropertyName_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1993)
		p.Match(ECMAScriptParserT__8)
	}
	{
		p.SetState(1994)
		p.AssignmentExpression_In_Await()
	}
	{
		p.SetState(1995)
		p.Match(ECMAScriptParserT__9)
	}

	return localctx
}

// IComputedPropertyName_Yield_AwaitContext is an interface to support dynamic dispatch.
type IComputedPropertyName_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComputedPropertyName_Yield_AwaitContext differentiates from other interfaces.
	IsComputedPropertyName_Yield_AwaitContext()
}

type ComputedPropertyName_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComputedPropertyName_Yield_AwaitContext() *ComputedPropertyName_Yield_AwaitContext {
	var p = new(ComputedPropertyName_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_computedPropertyName_Yield_Await
	return p
}

func (*ComputedPropertyName_Yield_AwaitContext) IsComputedPropertyName_Yield_AwaitContext() {}

func NewComputedPropertyName_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComputedPropertyName_Yield_AwaitContext {
	var p = new(ComputedPropertyName_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_computedPropertyName_Yield_Await

	return p
}

func (s *ComputedPropertyName_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ComputedPropertyName_Yield_AwaitContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *ComputedPropertyName_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComputedPropertyName_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComputedPropertyName_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterComputedPropertyName_Yield_Await(s)
	}
}

func (s *ComputedPropertyName_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitComputedPropertyName_Yield_Await(s)
	}
}

func (s *ComputedPropertyName_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitComputedPropertyName_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ComputedPropertyName_Yield_Await() (localctx IComputedPropertyName_Yield_AwaitContext) {
	localctx = NewComputedPropertyName_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, ECMAScriptParserRULE_computedPropertyName_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1997)
		p.Match(ECMAScriptParserT__8)
	}
	{
		p.SetState(1998)
		p.AssignmentExpression_In_Yield_Await()
	}
	{
		p.SetState(1999)
		p.Match(ECMAScriptParserT__9)
	}

	return localctx
}

// ICoverInitializedNameContext is an interface to support dynamic dispatch.
type ICoverInitializedNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverInitializedNameContext differentiates from other interfaces.
	IsCoverInitializedNameContext()
}

type CoverInitializedNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverInitializedNameContext() *CoverInitializedNameContext {
	var p = new(CoverInitializedNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverInitializedName
	return p
}

func (*CoverInitializedNameContext) IsCoverInitializedNameContext() {}

func NewCoverInitializedNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverInitializedNameContext {
	var p = new(CoverInitializedNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverInitializedName

	return p
}

func (s *CoverInitializedNameContext) GetParser() antlr.Parser { return s.parser }

func (s *CoverInitializedNameContext) IdentifierReference() IIdentifierReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReferenceContext)
}

func (s *CoverInitializedNameContext) Initializer_In() IInitializer_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_InContext)
}

func (s *CoverInitializedNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverInitializedNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverInitializedNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverInitializedName(s)
	}
}

func (s *CoverInitializedNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverInitializedName(s)
	}
}

func (s *CoverInitializedNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverInitializedName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverInitializedName() (localctx ICoverInitializedNameContext) {
	localctx = NewCoverInitializedNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, ECMAScriptParserRULE_coverInitializedName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2001)
		p.IdentifierReference()
	}
	{
		p.SetState(2002)
		p.Initializer_In()
	}

	return localctx
}

// ICoverInitializedName_YieldContext is an interface to support dynamic dispatch.
type ICoverInitializedName_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverInitializedName_YieldContext differentiates from other interfaces.
	IsCoverInitializedName_YieldContext()
}

type CoverInitializedName_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverInitializedName_YieldContext() *CoverInitializedName_YieldContext {
	var p = new(CoverInitializedName_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverInitializedName_Yield
	return p
}

func (*CoverInitializedName_YieldContext) IsCoverInitializedName_YieldContext() {}

func NewCoverInitializedName_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverInitializedName_YieldContext {
	var p = new(CoverInitializedName_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverInitializedName_Yield

	return p
}

func (s *CoverInitializedName_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *CoverInitializedName_YieldContext) IdentifierReference_Yield() IIdentifierReference_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReference_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReference_YieldContext)
}

func (s *CoverInitializedName_YieldContext) Initializer_In_Yield() IInitializer_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_YieldContext)
}

func (s *CoverInitializedName_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverInitializedName_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverInitializedName_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverInitializedName_Yield(s)
	}
}

func (s *CoverInitializedName_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverInitializedName_Yield(s)
	}
}

func (s *CoverInitializedName_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverInitializedName_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverInitializedName_Yield() (localctx ICoverInitializedName_YieldContext) {
	localctx = NewCoverInitializedName_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, ECMAScriptParserRULE_coverInitializedName_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2004)
		p.IdentifierReference_Yield()
	}
	{
		p.SetState(2005)
		p.Initializer_In_Yield()
	}

	return localctx
}

// ICoverInitializedName_AwaitContext is an interface to support dynamic dispatch.
type ICoverInitializedName_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverInitializedName_AwaitContext differentiates from other interfaces.
	IsCoverInitializedName_AwaitContext()
}

type CoverInitializedName_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverInitializedName_AwaitContext() *CoverInitializedName_AwaitContext {
	var p = new(CoverInitializedName_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverInitializedName_Await
	return p
}

func (*CoverInitializedName_AwaitContext) IsCoverInitializedName_AwaitContext() {}

func NewCoverInitializedName_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverInitializedName_AwaitContext {
	var p = new(CoverInitializedName_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverInitializedName_Await

	return p
}

func (s *CoverInitializedName_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CoverInitializedName_AwaitContext) IdentifierReference_Await() IIdentifierReference_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReference_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReference_AwaitContext)
}

func (s *CoverInitializedName_AwaitContext) Initializer_In_Await() IInitializer_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_AwaitContext)
}

func (s *CoverInitializedName_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverInitializedName_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverInitializedName_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverInitializedName_Await(s)
	}
}

func (s *CoverInitializedName_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverInitializedName_Await(s)
	}
}

func (s *CoverInitializedName_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverInitializedName_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverInitializedName_Await() (localctx ICoverInitializedName_AwaitContext) {
	localctx = NewCoverInitializedName_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, ECMAScriptParserRULE_coverInitializedName_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2007)
		p.IdentifierReference_Await()
	}
	{
		p.SetState(2008)
		p.Initializer_In_Await()
	}

	return localctx
}

// ICoverInitializedName_Yield_AwaitContext is an interface to support dynamic dispatch.
type ICoverInitializedName_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverInitializedName_Yield_AwaitContext differentiates from other interfaces.
	IsCoverInitializedName_Yield_AwaitContext()
}

type CoverInitializedName_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverInitializedName_Yield_AwaitContext() *CoverInitializedName_Yield_AwaitContext {
	var p = new(CoverInitializedName_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverInitializedName_Yield_Await
	return p
}

func (*CoverInitializedName_Yield_AwaitContext) IsCoverInitializedName_Yield_AwaitContext() {}

func NewCoverInitializedName_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverInitializedName_Yield_AwaitContext {
	var p = new(CoverInitializedName_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverInitializedName_Yield_Await

	return p
}

func (s *CoverInitializedName_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CoverInitializedName_Yield_AwaitContext) IdentifierReference_Yield_Await() IIdentifierReference_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierReference_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierReference_Yield_AwaitContext)
}

func (s *CoverInitializedName_Yield_AwaitContext) Initializer_In_Yield_Await() IInitializer_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_Yield_AwaitContext)
}

func (s *CoverInitializedName_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverInitializedName_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverInitializedName_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverInitializedName_Yield_Await(s)
	}
}

func (s *CoverInitializedName_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverInitializedName_Yield_Await(s)
	}
}

func (s *CoverInitializedName_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverInitializedName_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverInitializedName_Yield_Await() (localctx ICoverInitializedName_Yield_AwaitContext) {
	localctx = NewCoverInitializedName_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, ECMAScriptParserRULE_coverInitializedName_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2010)
		p.IdentifierReference_Yield_Await()
	}
	{
		p.SetState(2011)
		p.Initializer_In_Yield_Await()
	}

	return localctx
}

// IInitializerContext is an interface to support dynamic dispatch.
type IInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerContext differentiates from other interfaces.
	IsInitializerContext()
}

type InitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerContext() *InitializerContext {
	var p = new(InitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_initializer
	return p
}

func (*InitializerContext) IsInitializerContext() {}

func NewInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerContext {
	var p = new(InitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_initializer

	return p
}

func (s *InitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *InitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInitializer(s)
	}
}

func (s *InitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInitializer(s)
	}
}

func (s *InitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Initializer() (localctx IInitializerContext) {
	localctx = NewInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, ECMAScriptParserRULE_initializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2013)
		p.Match(ECMAScriptParserT__12)
	}
	{
		p.SetState(2014)
		p.AssignmentExpression()
	}

	return localctx
}

// IInitializer_InContext is an interface to support dynamic dispatch.
type IInitializer_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializer_InContext differentiates from other interfaces.
	IsInitializer_InContext()
}

type Initializer_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializer_InContext() *Initializer_InContext {
	var p = new(Initializer_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_initializer_In
	return p
}

func (*Initializer_InContext) IsInitializer_InContext() {}

func NewInitializer_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Initializer_InContext {
	var p = new(Initializer_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_initializer_In

	return p
}

func (s *Initializer_InContext) GetParser() antlr.Parser { return s.parser }

func (s *Initializer_InContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *Initializer_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initializer_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Initializer_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInitializer_In(s)
	}
}

func (s *Initializer_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInitializer_In(s)
	}
}

func (s *Initializer_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInitializer_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Initializer_In() (localctx IInitializer_InContext) {
	localctx = NewInitializer_InContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, ECMAScriptParserRULE_initializer_In)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2016)
		p.Match(ECMAScriptParserT__12)
	}
	{
		p.SetState(2017)
		p.AssignmentExpression_In()
	}

	return localctx
}

// IInitializer_YieldContext is an interface to support dynamic dispatch.
type IInitializer_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializer_YieldContext differentiates from other interfaces.
	IsInitializer_YieldContext()
}

type Initializer_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializer_YieldContext() *Initializer_YieldContext {
	var p = new(Initializer_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_initializer_Yield
	return p
}

func (*Initializer_YieldContext) IsInitializer_YieldContext() {}

func NewInitializer_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Initializer_YieldContext {
	var p = new(Initializer_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_initializer_Yield

	return p
}

func (s *Initializer_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Initializer_YieldContext) AssignmentExpression_Yield() IAssignmentExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_YieldContext)
}

func (s *Initializer_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initializer_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Initializer_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInitializer_Yield(s)
	}
}

func (s *Initializer_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInitializer_Yield(s)
	}
}

func (s *Initializer_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInitializer_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Initializer_Yield() (localctx IInitializer_YieldContext) {
	localctx = NewInitializer_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, ECMAScriptParserRULE_initializer_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2019)
		p.Match(ECMAScriptParserT__12)
	}
	{
		p.SetState(2020)
		p.AssignmentExpression_Yield()
	}

	return localctx
}

// IInitializer_In_YieldContext is an interface to support dynamic dispatch.
type IInitializer_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializer_In_YieldContext differentiates from other interfaces.
	IsInitializer_In_YieldContext()
}

type Initializer_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializer_In_YieldContext() *Initializer_In_YieldContext {
	var p = new(Initializer_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_initializer_In_Yield
	return p
}

func (*Initializer_In_YieldContext) IsInitializer_In_YieldContext() {}

func NewInitializer_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Initializer_In_YieldContext {
	var p = new(Initializer_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_initializer_In_Yield

	return p
}

func (s *Initializer_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Initializer_In_YieldContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *Initializer_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initializer_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Initializer_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInitializer_In_Yield(s)
	}
}

func (s *Initializer_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInitializer_In_Yield(s)
	}
}

func (s *Initializer_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInitializer_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Initializer_In_Yield() (localctx IInitializer_In_YieldContext) {
	localctx = NewInitializer_In_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, ECMAScriptParserRULE_initializer_In_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2022)
		p.Match(ECMAScriptParserT__12)
	}
	{
		p.SetState(2023)
		p.AssignmentExpression_In_Yield()
	}

	return localctx
}

// IInitializer_AwaitContext is an interface to support dynamic dispatch.
type IInitializer_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializer_AwaitContext differentiates from other interfaces.
	IsInitializer_AwaitContext()
}

type Initializer_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializer_AwaitContext() *Initializer_AwaitContext {
	var p = new(Initializer_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_initializer_Await
	return p
}

func (*Initializer_AwaitContext) IsInitializer_AwaitContext() {}

func NewInitializer_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Initializer_AwaitContext {
	var p = new(Initializer_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_initializer_Await

	return p
}

func (s *Initializer_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Initializer_AwaitContext) AssignmentExpression_Await() IAssignmentExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_AwaitContext)
}

func (s *Initializer_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initializer_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Initializer_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInitializer_Await(s)
	}
}

func (s *Initializer_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInitializer_Await(s)
	}
}

func (s *Initializer_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInitializer_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Initializer_Await() (localctx IInitializer_AwaitContext) {
	localctx = NewInitializer_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, ECMAScriptParserRULE_initializer_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2025)
		p.Match(ECMAScriptParserT__12)
	}
	{
		p.SetState(2026)
		p.AssignmentExpression_Await()
	}

	return localctx
}

// IInitializer_In_AwaitContext is an interface to support dynamic dispatch.
type IInitializer_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializer_In_AwaitContext differentiates from other interfaces.
	IsInitializer_In_AwaitContext()
}

type Initializer_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializer_In_AwaitContext() *Initializer_In_AwaitContext {
	var p = new(Initializer_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_initializer_In_Await
	return p
}

func (*Initializer_In_AwaitContext) IsInitializer_In_AwaitContext() {}

func NewInitializer_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Initializer_In_AwaitContext {
	var p = new(Initializer_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_initializer_In_Await

	return p
}

func (s *Initializer_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Initializer_In_AwaitContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *Initializer_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initializer_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Initializer_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInitializer_In_Await(s)
	}
}

func (s *Initializer_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInitializer_In_Await(s)
	}
}

func (s *Initializer_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInitializer_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Initializer_In_Await() (localctx IInitializer_In_AwaitContext) {
	localctx = NewInitializer_In_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, ECMAScriptParserRULE_initializer_In_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2028)
		p.Match(ECMAScriptParserT__12)
	}
	{
		p.SetState(2029)
		p.AssignmentExpression_In_Await()
	}

	return localctx
}

// IInitializer_Yield_AwaitContext is an interface to support dynamic dispatch.
type IInitializer_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializer_Yield_AwaitContext differentiates from other interfaces.
	IsInitializer_Yield_AwaitContext()
}

type Initializer_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializer_Yield_AwaitContext() *Initializer_Yield_AwaitContext {
	var p = new(Initializer_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_initializer_Yield_Await
	return p
}

func (*Initializer_Yield_AwaitContext) IsInitializer_Yield_AwaitContext() {}

func NewInitializer_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Initializer_Yield_AwaitContext {
	var p = new(Initializer_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_initializer_Yield_Await

	return p
}

func (s *Initializer_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Initializer_Yield_AwaitContext) AssignmentExpression_Yield_Await() IAssignmentExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_Yield_AwaitContext)
}

func (s *Initializer_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initializer_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Initializer_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInitializer_Yield_Await(s)
	}
}

func (s *Initializer_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInitializer_Yield_Await(s)
	}
}

func (s *Initializer_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInitializer_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Initializer_Yield_Await() (localctx IInitializer_Yield_AwaitContext) {
	localctx = NewInitializer_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, ECMAScriptParserRULE_initializer_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2031)
		p.Match(ECMAScriptParserT__12)
	}
	{
		p.SetState(2032)
		p.AssignmentExpression_Yield_Await()
	}

	return localctx
}

// IInitializer_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IInitializer_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializer_In_Yield_AwaitContext differentiates from other interfaces.
	IsInitializer_In_Yield_AwaitContext()
}

type Initializer_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializer_In_Yield_AwaitContext() *Initializer_In_Yield_AwaitContext {
	var p = new(Initializer_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_initializer_In_Yield_Await
	return p
}

func (*Initializer_In_Yield_AwaitContext) IsInitializer_In_Yield_AwaitContext() {}

func NewInitializer_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Initializer_In_Yield_AwaitContext {
	var p = new(Initializer_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_initializer_In_Yield_Await

	return p
}

func (s *Initializer_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Initializer_In_Yield_AwaitContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *Initializer_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initializer_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Initializer_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterInitializer_In_Yield_Await(s)
	}
}

func (s *Initializer_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitInitializer_In_Yield_Await(s)
	}
}

func (s *Initializer_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitInitializer_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Initializer_In_Yield_Await() (localctx IInitializer_In_Yield_AwaitContext) {
	localctx = NewInitializer_In_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, ECMAScriptParserRULE_initializer_In_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2034)
		p.Match(ECMAScriptParserT__12)
	}
	{
		p.SetState(2035)
		p.AssignmentExpression_In_Yield_Await()
	}

	return localctx
}

// ITemplateLiteralContext is an interface to support dynamic dispatch.
type ITemplateLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateLiteralContext differentiates from other interfaces.
	IsTemplateLiteralContext()
}

type TemplateLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateLiteralContext() *TemplateLiteralContext {
	var p = new(TemplateLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral
	return p
}

func (*TemplateLiteralContext) IsTemplateLiteralContext() {}

func NewTemplateLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateLiteralContext {
	var p = new(TemplateLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral

	return p
}

func (s *TemplateLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateLiteralContext) NoSubstitutionTemplate() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserNoSubstitutionTemplate, 0)
}

func (s *TemplateLiteralContext) SubstitutionTemplate() ISubstitutionTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubstitutionTemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubstitutionTemplateContext)
}

func (s *TemplateLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateLiteral(s)
	}
}

func (s *TemplateLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateLiteral(s)
	}
}

func (s *TemplateLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateLiteral() (localctx ITemplateLiteralContext) {
	localctx = NewTemplateLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, ECMAScriptParserRULE_templateLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2039)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserNoSubstitutionTemplate:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2037)
			p.Match(ECMAScriptParserNoSubstitutionTemplate)
		}

	case ECMAScriptParserTemplateHead:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2038)
			p.SubstitutionTemplate()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateLiteral_YieldContext is an interface to support dynamic dispatch.
type ITemplateLiteral_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateLiteral_YieldContext differentiates from other interfaces.
	IsTemplateLiteral_YieldContext()
}

type TemplateLiteral_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateLiteral_YieldContext() *TemplateLiteral_YieldContext {
	var p = new(TemplateLiteral_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Yield
	return p
}

func (*TemplateLiteral_YieldContext) IsTemplateLiteral_YieldContext() {}

func NewTemplateLiteral_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateLiteral_YieldContext {
	var p = new(TemplateLiteral_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Yield

	return p
}

func (s *TemplateLiteral_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateLiteral_YieldContext) NoSubstitutionTemplate() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserNoSubstitutionTemplate, 0)
}

func (s *TemplateLiteral_YieldContext) SubstitutionTemplate_Yield() ISubstitutionTemplate_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubstitutionTemplate_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubstitutionTemplate_YieldContext)
}

func (s *TemplateLiteral_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateLiteral_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateLiteral_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateLiteral_Yield(s)
	}
}

func (s *TemplateLiteral_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateLiteral_Yield(s)
	}
}

func (s *TemplateLiteral_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateLiteral_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateLiteral_Yield() (localctx ITemplateLiteral_YieldContext) {
	localctx = NewTemplateLiteral_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, ECMAScriptParserRULE_templateLiteral_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2043)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserNoSubstitutionTemplate:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2041)
			p.Match(ECMAScriptParserNoSubstitutionTemplate)
		}

	case ECMAScriptParserTemplateHead:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2042)
			p.SubstitutionTemplate_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateLiteral_AwaitContext is an interface to support dynamic dispatch.
type ITemplateLiteral_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateLiteral_AwaitContext differentiates from other interfaces.
	IsTemplateLiteral_AwaitContext()
}

type TemplateLiteral_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateLiteral_AwaitContext() *TemplateLiteral_AwaitContext {
	var p = new(TemplateLiteral_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Await
	return p
}

func (*TemplateLiteral_AwaitContext) IsTemplateLiteral_AwaitContext() {}

func NewTemplateLiteral_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateLiteral_AwaitContext {
	var p = new(TemplateLiteral_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Await

	return p
}

func (s *TemplateLiteral_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateLiteral_AwaitContext) NoSubstitutionTemplate() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserNoSubstitutionTemplate, 0)
}

func (s *TemplateLiteral_AwaitContext) SubstitutionTemplate_Await() ISubstitutionTemplate_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubstitutionTemplate_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubstitutionTemplate_AwaitContext)
}

func (s *TemplateLiteral_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateLiteral_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateLiteral_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateLiteral_Await(s)
	}
}

func (s *TemplateLiteral_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateLiteral_Await(s)
	}
}

func (s *TemplateLiteral_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateLiteral_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateLiteral_Await() (localctx ITemplateLiteral_AwaitContext) {
	localctx = NewTemplateLiteral_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, ECMAScriptParserRULE_templateLiteral_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2047)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserNoSubstitutionTemplate:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2045)
			p.Match(ECMAScriptParserNoSubstitutionTemplate)
		}

	case ECMAScriptParserTemplateHead:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2046)
			p.SubstitutionTemplate_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateLiteral_Yield_AwaitContext is an interface to support dynamic dispatch.
type ITemplateLiteral_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateLiteral_Yield_AwaitContext differentiates from other interfaces.
	IsTemplateLiteral_Yield_AwaitContext()
}

type TemplateLiteral_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateLiteral_Yield_AwaitContext() *TemplateLiteral_Yield_AwaitContext {
	var p = new(TemplateLiteral_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Yield_Await
	return p
}

func (*TemplateLiteral_Yield_AwaitContext) IsTemplateLiteral_Yield_AwaitContext() {}

func NewTemplateLiteral_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateLiteral_Yield_AwaitContext {
	var p = new(TemplateLiteral_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Yield_Await

	return p
}

func (s *TemplateLiteral_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateLiteral_Yield_AwaitContext) NoSubstitutionTemplate() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserNoSubstitutionTemplate, 0)
}

func (s *TemplateLiteral_Yield_AwaitContext) SubstitutionTemplate_Yield_Await() ISubstitutionTemplate_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubstitutionTemplate_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubstitutionTemplate_Yield_AwaitContext)
}

func (s *TemplateLiteral_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateLiteral_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateLiteral_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateLiteral_Yield_Await(s)
	}
}

func (s *TemplateLiteral_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateLiteral_Yield_Await(s)
	}
}

func (s *TemplateLiteral_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateLiteral_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateLiteral_Yield_Await() (localctx ITemplateLiteral_Yield_AwaitContext) {
	localctx = NewTemplateLiteral_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, ECMAScriptParserRULE_templateLiteral_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2051)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserNoSubstitutionTemplate:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2049)
			p.Match(ECMAScriptParserNoSubstitutionTemplate)
		}

	case ECMAScriptParserTemplateHead:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2050)
			p.SubstitutionTemplate_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateLiteral_TaggedContext is an interface to support dynamic dispatch.
type ITemplateLiteral_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateLiteral_TaggedContext differentiates from other interfaces.
	IsTemplateLiteral_TaggedContext()
}

type TemplateLiteral_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateLiteral_TaggedContext() *TemplateLiteral_TaggedContext {
	var p = new(TemplateLiteral_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Tagged
	return p
}

func (*TemplateLiteral_TaggedContext) IsTemplateLiteral_TaggedContext() {}

func NewTemplateLiteral_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateLiteral_TaggedContext {
	var p = new(TemplateLiteral_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Tagged

	return p
}

func (s *TemplateLiteral_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateLiteral_TaggedContext) NoSubstitutionTemplate() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserNoSubstitutionTemplate, 0)
}

func (s *TemplateLiteral_TaggedContext) SubstitutionTemplate_Tagged() ISubstitutionTemplate_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubstitutionTemplate_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubstitutionTemplate_TaggedContext)
}

func (s *TemplateLiteral_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateLiteral_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateLiteral_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateLiteral_Tagged(s)
	}
}

func (s *TemplateLiteral_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateLiteral_Tagged(s)
	}
}

func (s *TemplateLiteral_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateLiteral_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateLiteral_Tagged() (localctx ITemplateLiteral_TaggedContext) {
	localctx = NewTemplateLiteral_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, ECMAScriptParserRULE_templateLiteral_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2055)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserNoSubstitutionTemplate:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2053)
			p.Match(ECMAScriptParserNoSubstitutionTemplate)
		}

	case ECMAScriptParserTemplateHead:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2054)
			p.SubstitutionTemplate_Tagged()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateLiteral_Yield_TaggedContext is an interface to support dynamic dispatch.
type ITemplateLiteral_Yield_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateLiteral_Yield_TaggedContext differentiates from other interfaces.
	IsTemplateLiteral_Yield_TaggedContext()
}

type TemplateLiteral_Yield_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateLiteral_Yield_TaggedContext() *TemplateLiteral_Yield_TaggedContext {
	var p = new(TemplateLiteral_Yield_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Yield_Tagged
	return p
}

func (*TemplateLiteral_Yield_TaggedContext) IsTemplateLiteral_Yield_TaggedContext() {}

func NewTemplateLiteral_Yield_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateLiteral_Yield_TaggedContext {
	var p = new(TemplateLiteral_Yield_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Yield_Tagged

	return p
}

func (s *TemplateLiteral_Yield_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateLiteral_Yield_TaggedContext) NoSubstitutionTemplate() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserNoSubstitutionTemplate, 0)
}

func (s *TemplateLiteral_Yield_TaggedContext) SubstitutionTemplate_Yield_Tagged() ISubstitutionTemplate_Yield_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubstitutionTemplate_Yield_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubstitutionTemplate_Yield_TaggedContext)
}

func (s *TemplateLiteral_Yield_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateLiteral_Yield_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateLiteral_Yield_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateLiteral_Yield_Tagged(s)
	}
}

func (s *TemplateLiteral_Yield_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateLiteral_Yield_Tagged(s)
	}
}

func (s *TemplateLiteral_Yield_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateLiteral_Yield_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateLiteral_Yield_Tagged() (localctx ITemplateLiteral_Yield_TaggedContext) {
	localctx = NewTemplateLiteral_Yield_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, ECMAScriptParserRULE_templateLiteral_Yield_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2059)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserNoSubstitutionTemplate:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2057)
			p.Match(ECMAScriptParserNoSubstitutionTemplate)
		}

	case ECMAScriptParserTemplateHead:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2058)
			p.SubstitutionTemplate_Yield_Tagged()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateLiteral_Await_TaggedContext is an interface to support dynamic dispatch.
type ITemplateLiteral_Await_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateLiteral_Await_TaggedContext differentiates from other interfaces.
	IsTemplateLiteral_Await_TaggedContext()
}

type TemplateLiteral_Await_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateLiteral_Await_TaggedContext() *TemplateLiteral_Await_TaggedContext {
	var p = new(TemplateLiteral_Await_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Await_Tagged
	return p
}

func (*TemplateLiteral_Await_TaggedContext) IsTemplateLiteral_Await_TaggedContext() {}

func NewTemplateLiteral_Await_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateLiteral_Await_TaggedContext {
	var p = new(TemplateLiteral_Await_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Await_Tagged

	return p
}

func (s *TemplateLiteral_Await_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateLiteral_Await_TaggedContext) NoSubstitutionTemplate() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserNoSubstitutionTemplate, 0)
}

func (s *TemplateLiteral_Await_TaggedContext) SubstitutionTemplate_Await_Tagged() ISubstitutionTemplate_Await_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubstitutionTemplate_Await_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubstitutionTemplate_Await_TaggedContext)
}

func (s *TemplateLiteral_Await_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateLiteral_Await_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateLiteral_Await_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateLiteral_Await_Tagged(s)
	}
}

func (s *TemplateLiteral_Await_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateLiteral_Await_Tagged(s)
	}
}

func (s *TemplateLiteral_Await_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateLiteral_Await_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateLiteral_Await_Tagged() (localctx ITemplateLiteral_Await_TaggedContext) {
	localctx = NewTemplateLiteral_Await_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, ECMAScriptParserRULE_templateLiteral_Await_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2063)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserNoSubstitutionTemplate:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2061)
			p.Match(ECMAScriptParserNoSubstitutionTemplate)
		}

	case ECMAScriptParserTemplateHead:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2062)
			p.SubstitutionTemplate_Await_Tagged()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateLiteral_Yield_Await_TaggedContext is an interface to support dynamic dispatch.
type ITemplateLiteral_Yield_Await_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateLiteral_Yield_Await_TaggedContext differentiates from other interfaces.
	IsTemplateLiteral_Yield_Await_TaggedContext()
}

type TemplateLiteral_Yield_Await_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateLiteral_Yield_Await_TaggedContext() *TemplateLiteral_Yield_Await_TaggedContext {
	var p = new(TemplateLiteral_Yield_Await_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Yield_Await_Tagged
	return p
}

func (*TemplateLiteral_Yield_Await_TaggedContext) IsTemplateLiteral_Yield_Await_TaggedContext() {}

func NewTemplateLiteral_Yield_Await_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateLiteral_Yield_Await_TaggedContext {
	var p = new(TemplateLiteral_Yield_Await_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateLiteral_Yield_Await_Tagged

	return p
}

func (s *TemplateLiteral_Yield_Await_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateLiteral_Yield_Await_TaggedContext) NoSubstitutionTemplate() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserNoSubstitutionTemplate, 0)
}

func (s *TemplateLiteral_Yield_Await_TaggedContext) SubstitutionTemplate_Yield_Await_Tagged() ISubstitutionTemplate_Yield_Await_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubstitutionTemplate_Yield_Await_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubstitutionTemplate_Yield_Await_TaggedContext)
}

func (s *TemplateLiteral_Yield_Await_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateLiteral_Yield_Await_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateLiteral_Yield_Await_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateLiteral_Yield_Await_Tagged(s)
	}
}

func (s *TemplateLiteral_Yield_Await_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateLiteral_Yield_Await_Tagged(s)
	}
}

func (s *TemplateLiteral_Yield_Await_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateLiteral_Yield_Await_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateLiteral_Yield_Await_Tagged() (localctx ITemplateLiteral_Yield_Await_TaggedContext) {
	localctx = NewTemplateLiteral_Yield_Await_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, ECMAScriptParserRULE_templateLiteral_Yield_Await_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2067)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserNoSubstitutionTemplate:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2065)
			p.Match(ECMAScriptParserNoSubstitutionTemplate)
		}

	case ECMAScriptParserTemplateHead:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2066)
			p.SubstitutionTemplate_Yield_Await_Tagged()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISubstitutionTemplateContext is an interface to support dynamic dispatch.
type ISubstitutionTemplateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubstitutionTemplateContext differentiates from other interfaces.
	IsSubstitutionTemplateContext()
}

type SubstitutionTemplateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubstitutionTemplateContext() *SubstitutionTemplateContext {
	var p = new(SubstitutionTemplateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate
	return p
}

func (*SubstitutionTemplateContext) IsSubstitutionTemplateContext() {}

func NewSubstitutionTemplateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubstitutionTemplateContext {
	var p = new(SubstitutionTemplateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate

	return p
}

func (s *SubstitutionTemplateContext) GetParser() antlr.Parser { return s.parser }

func (s *SubstitutionTemplateContext) TemplateHead() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateHead, 0)
}

func (s *SubstitutionTemplateContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *SubstitutionTemplateContext) TemplateSpans() ITemplateSpansContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateSpansContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateSpansContext)
}

func (s *SubstitutionTemplateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstitutionTemplateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubstitutionTemplateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSubstitutionTemplate(s)
	}
}

func (s *SubstitutionTemplateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSubstitutionTemplate(s)
	}
}

func (s *SubstitutionTemplateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSubstitutionTemplate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SubstitutionTemplate() (localctx ISubstitutionTemplateContext) {
	localctx = NewSubstitutionTemplateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, ECMAScriptParserRULE_substitutionTemplate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2069)
		p.Match(ECMAScriptParserTemplateHead)
	}
	{
		p.SetState(2070)
		p.expression_In(0)
	}
	{
		p.SetState(2071)
		p.TemplateSpans()
	}

	return localctx
}

// ISubstitutionTemplate_YieldContext is an interface to support dynamic dispatch.
type ISubstitutionTemplate_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubstitutionTemplate_YieldContext differentiates from other interfaces.
	IsSubstitutionTemplate_YieldContext()
}

type SubstitutionTemplate_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubstitutionTemplate_YieldContext() *SubstitutionTemplate_YieldContext {
	var p = new(SubstitutionTemplate_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Yield
	return p
}

func (*SubstitutionTemplate_YieldContext) IsSubstitutionTemplate_YieldContext() {}

func NewSubstitutionTemplate_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubstitutionTemplate_YieldContext {
	var p = new(SubstitutionTemplate_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Yield

	return p
}

func (s *SubstitutionTemplate_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *SubstitutionTemplate_YieldContext) TemplateHead() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateHead, 0)
}

func (s *SubstitutionTemplate_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *SubstitutionTemplate_YieldContext) TemplateSpans_Yield() ITemplateSpans_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateSpans_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateSpans_YieldContext)
}

func (s *SubstitutionTemplate_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstitutionTemplate_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubstitutionTemplate_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSubstitutionTemplate_Yield(s)
	}
}

func (s *SubstitutionTemplate_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSubstitutionTemplate_Yield(s)
	}
}

func (s *SubstitutionTemplate_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSubstitutionTemplate_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SubstitutionTemplate_Yield() (localctx ISubstitutionTemplate_YieldContext) {
	localctx = NewSubstitutionTemplate_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, ECMAScriptParserRULE_substitutionTemplate_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2073)
		p.Match(ECMAScriptParserTemplateHead)
	}
	{
		p.SetState(2074)
		p.expression_In_Yield(0)
	}
	{
		p.SetState(2075)
		p.TemplateSpans_Yield()
	}

	return localctx
}

// ISubstitutionTemplate_AwaitContext is an interface to support dynamic dispatch.
type ISubstitutionTemplate_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubstitutionTemplate_AwaitContext differentiates from other interfaces.
	IsSubstitutionTemplate_AwaitContext()
}

type SubstitutionTemplate_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubstitutionTemplate_AwaitContext() *SubstitutionTemplate_AwaitContext {
	var p = new(SubstitutionTemplate_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Await
	return p
}

func (*SubstitutionTemplate_AwaitContext) IsSubstitutionTemplate_AwaitContext() {}

func NewSubstitutionTemplate_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubstitutionTemplate_AwaitContext {
	var p = new(SubstitutionTemplate_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Await

	return p
}

func (s *SubstitutionTemplate_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SubstitutionTemplate_AwaitContext) TemplateHead() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateHead, 0)
}

func (s *SubstitutionTemplate_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *SubstitutionTemplate_AwaitContext) TemplateSpans_Await() ITemplateSpans_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateSpans_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateSpans_AwaitContext)
}

func (s *SubstitutionTemplate_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstitutionTemplate_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubstitutionTemplate_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSubstitutionTemplate_Await(s)
	}
}

func (s *SubstitutionTemplate_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSubstitutionTemplate_Await(s)
	}
}

func (s *SubstitutionTemplate_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSubstitutionTemplate_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SubstitutionTemplate_Await() (localctx ISubstitutionTemplate_AwaitContext) {
	localctx = NewSubstitutionTemplate_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, ECMAScriptParserRULE_substitutionTemplate_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2077)
		p.Match(ECMAScriptParserTemplateHead)
	}
	{
		p.SetState(2078)
		p.expression_In_Await(0)
	}
	{
		p.SetState(2079)
		p.TemplateSpans_Await()
	}

	return localctx
}

// ISubstitutionTemplate_Yield_AwaitContext is an interface to support dynamic dispatch.
type ISubstitutionTemplate_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubstitutionTemplate_Yield_AwaitContext differentiates from other interfaces.
	IsSubstitutionTemplate_Yield_AwaitContext()
}

type SubstitutionTemplate_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubstitutionTemplate_Yield_AwaitContext() *SubstitutionTemplate_Yield_AwaitContext {
	var p = new(SubstitutionTemplate_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Yield_Await
	return p
}

func (*SubstitutionTemplate_Yield_AwaitContext) IsSubstitutionTemplate_Yield_AwaitContext() {}

func NewSubstitutionTemplate_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubstitutionTemplate_Yield_AwaitContext {
	var p = new(SubstitutionTemplate_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Yield_Await

	return p
}

func (s *SubstitutionTemplate_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SubstitutionTemplate_Yield_AwaitContext) TemplateHead() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateHead, 0)
}

func (s *SubstitutionTemplate_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *SubstitutionTemplate_Yield_AwaitContext) TemplateSpans_Yield_Await() ITemplateSpans_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateSpans_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateSpans_Yield_AwaitContext)
}

func (s *SubstitutionTemplate_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstitutionTemplate_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubstitutionTemplate_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSubstitutionTemplate_Yield_Await(s)
	}
}

func (s *SubstitutionTemplate_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSubstitutionTemplate_Yield_Await(s)
	}
}

func (s *SubstitutionTemplate_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSubstitutionTemplate_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SubstitutionTemplate_Yield_Await() (localctx ISubstitutionTemplate_Yield_AwaitContext) {
	localctx = NewSubstitutionTemplate_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, ECMAScriptParserRULE_substitutionTemplate_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2081)
		p.Match(ECMAScriptParserTemplateHead)
	}
	{
		p.SetState(2082)
		p.expression_In_Yield_Await(0)
	}
	{
		p.SetState(2083)
		p.TemplateSpans_Yield_Await()
	}

	return localctx
}

// ISubstitutionTemplate_TaggedContext is an interface to support dynamic dispatch.
type ISubstitutionTemplate_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubstitutionTemplate_TaggedContext differentiates from other interfaces.
	IsSubstitutionTemplate_TaggedContext()
}

type SubstitutionTemplate_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubstitutionTemplate_TaggedContext() *SubstitutionTemplate_TaggedContext {
	var p = new(SubstitutionTemplate_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Tagged
	return p
}

func (*SubstitutionTemplate_TaggedContext) IsSubstitutionTemplate_TaggedContext() {}

func NewSubstitutionTemplate_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubstitutionTemplate_TaggedContext {
	var p = new(SubstitutionTemplate_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Tagged

	return p
}

func (s *SubstitutionTemplate_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *SubstitutionTemplate_TaggedContext) TemplateHead() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateHead, 0)
}

func (s *SubstitutionTemplate_TaggedContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *SubstitutionTemplate_TaggedContext) TemplateSpans_Tagged() ITemplateSpans_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateSpans_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateSpans_TaggedContext)
}

func (s *SubstitutionTemplate_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstitutionTemplate_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubstitutionTemplate_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSubstitutionTemplate_Tagged(s)
	}
}

func (s *SubstitutionTemplate_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSubstitutionTemplate_Tagged(s)
	}
}

func (s *SubstitutionTemplate_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSubstitutionTemplate_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SubstitutionTemplate_Tagged() (localctx ISubstitutionTemplate_TaggedContext) {
	localctx = NewSubstitutionTemplate_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, ECMAScriptParserRULE_substitutionTemplate_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2085)
		p.Match(ECMAScriptParserTemplateHead)
	}
	{
		p.SetState(2086)
		p.expression_In(0)
	}
	{
		p.SetState(2087)
		p.TemplateSpans_Tagged()
	}

	return localctx
}

// ISubstitutionTemplate_Yield_TaggedContext is an interface to support dynamic dispatch.
type ISubstitutionTemplate_Yield_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubstitutionTemplate_Yield_TaggedContext differentiates from other interfaces.
	IsSubstitutionTemplate_Yield_TaggedContext()
}

type SubstitutionTemplate_Yield_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubstitutionTemplate_Yield_TaggedContext() *SubstitutionTemplate_Yield_TaggedContext {
	var p = new(SubstitutionTemplate_Yield_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Yield_Tagged
	return p
}

func (*SubstitutionTemplate_Yield_TaggedContext) IsSubstitutionTemplate_Yield_TaggedContext() {}

func NewSubstitutionTemplate_Yield_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubstitutionTemplate_Yield_TaggedContext {
	var p = new(SubstitutionTemplate_Yield_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Yield_Tagged

	return p
}

func (s *SubstitutionTemplate_Yield_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *SubstitutionTemplate_Yield_TaggedContext) TemplateHead() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateHead, 0)
}

func (s *SubstitutionTemplate_Yield_TaggedContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *SubstitutionTemplate_Yield_TaggedContext) TemplateSpans_Yield_Tagged() ITemplateSpans_Yield_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateSpans_Yield_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateSpans_Yield_TaggedContext)
}

func (s *SubstitutionTemplate_Yield_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstitutionTemplate_Yield_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubstitutionTemplate_Yield_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSubstitutionTemplate_Yield_Tagged(s)
	}
}

func (s *SubstitutionTemplate_Yield_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSubstitutionTemplate_Yield_Tagged(s)
	}
}

func (s *SubstitutionTemplate_Yield_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSubstitutionTemplate_Yield_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SubstitutionTemplate_Yield_Tagged() (localctx ISubstitutionTemplate_Yield_TaggedContext) {
	localctx = NewSubstitutionTemplate_Yield_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, ECMAScriptParserRULE_substitutionTemplate_Yield_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2089)
		p.Match(ECMAScriptParserTemplateHead)
	}
	{
		p.SetState(2090)
		p.expression_In_Yield(0)
	}
	{
		p.SetState(2091)
		p.TemplateSpans_Yield_Tagged()
	}

	return localctx
}

// ISubstitutionTemplate_Await_TaggedContext is an interface to support dynamic dispatch.
type ISubstitutionTemplate_Await_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubstitutionTemplate_Await_TaggedContext differentiates from other interfaces.
	IsSubstitutionTemplate_Await_TaggedContext()
}

type SubstitutionTemplate_Await_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubstitutionTemplate_Await_TaggedContext() *SubstitutionTemplate_Await_TaggedContext {
	var p = new(SubstitutionTemplate_Await_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Await_Tagged
	return p
}

func (*SubstitutionTemplate_Await_TaggedContext) IsSubstitutionTemplate_Await_TaggedContext() {}

func NewSubstitutionTemplate_Await_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubstitutionTemplate_Await_TaggedContext {
	var p = new(SubstitutionTemplate_Await_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Await_Tagged

	return p
}

func (s *SubstitutionTemplate_Await_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *SubstitutionTemplate_Await_TaggedContext) TemplateHead() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateHead, 0)
}

func (s *SubstitutionTemplate_Await_TaggedContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *SubstitutionTemplate_Await_TaggedContext) TemplateSpans_Await_Tagged() ITemplateSpans_Await_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateSpans_Await_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateSpans_Await_TaggedContext)
}

func (s *SubstitutionTemplate_Await_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstitutionTemplate_Await_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubstitutionTemplate_Await_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSubstitutionTemplate_Await_Tagged(s)
	}
}

func (s *SubstitutionTemplate_Await_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSubstitutionTemplate_Await_Tagged(s)
	}
}

func (s *SubstitutionTemplate_Await_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSubstitutionTemplate_Await_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SubstitutionTemplate_Await_Tagged() (localctx ISubstitutionTemplate_Await_TaggedContext) {
	localctx = NewSubstitutionTemplate_Await_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, ECMAScriptParserRULE_substitutionTemplate_Await_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2093)
		p.Match(ECMAScriptParserTemplateHead)
	}
	{
		p.SetState(2094)
		p.expression_In_Await(0)
	}
	{
		p.SetState(2095)
		p.TemplateSpans_Await_Tagged()
	}

	return localctx
}

// ISubstitutionTemplate_Yield_Await_TaggedContext is an interface to support dynamic dispatch.
type ISubstitutionTemplate_Yield_Await_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubstitutionTemplate_Yield_Await_TaggedContext differentiates from other interfaces.
	IsSubstitutionTemplate_Yield_Await_TaggedContext()
}

type SubstitutionTemplate_Yield_Await_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubstitutionTemplate_Yield_Await_TaggedContext() *SubstitutionTemplate_Yield_Await_TaggedContext {
	var p = new(SubstitutionTemplate_Yield_Await_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Yield_Await_Tagged
	return p
}

func (*SubstitutionTemplate_Yield_Await_TaggedContext) IsSubstitutionTemplate_Yield_Await_TaggedContext() {
}

func NewSubstitutionTemplate_Yield_Await_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubstitutionTemplate_Yield_Await_TaggedContext {
	var p = new(SubstitutionTemplate_Yield_Await_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_substitutionTemplate_Yield_Await_Tagged

	return p
}

func (s *SubstitutionTemplate_Yield_Await_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *SubstitutionTemplate_Yield_Await_TaggedContext) TemplateHead() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateHead, 0)
}

func (s *SubstitutionTemplate_Yield_Await_TaggedContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *SubstitutionTemplate_Yield_Await_TaggedContext) TemplateSpans_Yield_Await_Tagged() ITemplateSpans_Yield_Await_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateSpans_Yield_Await_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateSpans_Yield_Await_TaggedContext)
}

func (s *SubstitutionTemplate_Yield_Await_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstitutionTemplate_Yield_Await_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubstitutionTemplate_Yield_Await_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSubstitutionTemplate_Yield_Await_Tagged(s)
	}
}

func (s *SubstitutionTemplate_Yield_Await_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSubstitutionTemplate_Yield_Await_Tagged(s)
	}
}

func (s *SubstitutionTemplate_Yield_Await_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSubstitutionTemplate_Yield_Await_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SubstitutionTemplate_Yield_Await_Tagged() (localctx ISubstitutionTemplate_Yield_Await_TaggedContext) {
	localctx = NewSubstitutionTemplate_Yield_Await_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, ECMAScriptParserRULE_substitutionTemplate_Yield_Await_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2097)
		p.Match(ECMAScriptParserTemplateHead)
	}
	{
		p.SetState(2098)
		p.expression_In_Yield_Await(0)
	}
	{
		p.SetState(2099)
		p.TemplateSpans_Yield_Await_Tagged()
	}

	return localctx
}

// ITemplateSpansContext is an interface to support dynamic dispatch.
type ITemplateSpansContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSpansContext differentiates from other interfaces.
	IsTemplateSpansContext()
}

type TemplateSpansContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSpansContext() *TemplateSpansContext {
	var p = new(TemplateSpansContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateSpans
	return p
}

func (*TemplateSpansContext) IsTemplateSpansContext() {}

func NewTemplateSpansContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSpansContext {
	var p = new(TemplateSpansContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateSpans

	return p
}

func (s *TemplateSpansContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSpansContext) TemplateTail() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, 0)
}

func (s *TemplateSpansContext) AllTemplateMiddleList() []ITemplateMiddleListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateMiddleListContext)(nil)).Elem())
	var tst = make([]ITemplateMiddleListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateMiddleListContext)
		}
	}

	return tst
}

func (s *TemplateSpansContext) TemplateMiddleList(i int) ITemplateMiddleListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateMiddleListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateMiddleListContext)
}

func (s *TemplateSpansContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSpansContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSpansContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateSpans(s)
	}
}

func (s *TemplateSpansContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateSpans(s)
	}
}

func (s *TemplateSpansContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateSpans(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateSpans() (localctx ITemplateSpansContext) {
	localctx = NewTemplateSpansContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, ECMAScriptParserRULE_templateSpans)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2104)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2101)
				p.TemplateMiddleList()
			}

		}
		p.SetState(2106)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext())
	}
	{
		p.SetState(2107)
		p.Match(ECMAScriptParserTemplateTail)
	}

	return localctx
}

// ITemplateSpans_YieldContext is an interface to support dynamic dispatch.
type ITemplateSpans_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSpans_YieldContext differentiates from other interfaces.
	IsTemplateSpans_YieldContext()
}

type TemplateSpans_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSpans_YieldContext() *TemplateSpans_YieldContext {
	var p = new(TemplateSpans_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Yield
	return p
}

func (*TemplateSpans_YieldContext) IsTemplateSpans_YieldContext() {}

func NewTemplateSpans_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSpans_YieldContext {
	var p = new(TemplateSpans_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Yield

	return p
}

func (s *TemplateSpans_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSpans_YieldContext) TemplateTail() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, 0)
}

func (s *TemplateSpans_YieldContext) AllTemplateMiddleList_Yield() []ITemplateMiddleList_YieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateMiddleList_YieldContext)(nil)).Elem())
	var tst = make([]ITemplateMiddleList_YieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateMiddleList_YieldContext)
		}
	}

	return tst
}

func (s *TemplateSpans_YieldContext) TemplateMiddleList_Yield(i int) ITemplateMiddleList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateMiddleList_YieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateMiddleList_YieldContext)
}

func (s *TemplateSpans_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSpans_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSpans_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateSpans_Yield(s)
	}
}

func (s *TemplateSpans_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateSpans_Yield(s)
	}
}

func (s *TemplateSpans_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateSpans_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateSpans_Yield() (localctx ITemplateSpans_YieldContext) {
	localctx = NewTemplateSpans_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, ECMAScriptParserRULE_templateSpans_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2112)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2109)
				p.TemplateMiddleList_Yield()
			}

		}
		p.SetState(2114)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext())
	}
	{
		p.SetState(2115)
		p.Match(ECMAScriptParserTemplateTail)
	}

	return localctx
}

// ITemplateSpans_AwaitContext is an interface to support dynamic dispatch.
type ITemplateSpans_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSpans_AwaitContext differentiates from other interfaces.
	IsTemplateSpans_AwaitContext()
}

type TemplateSpans_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSpans_AwaitContext() *TemplateSpans_AwaitContext {
	var p = new(TemplateSpans_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Await
	return p
}

func (*TemplateSpans_AwaitContext) IsTemplateSpans_AwaitContext() {}

func NewTemplateSpans_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSpans_AwaitContext {
	var p = new(TemplateSpans_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Await

	return p
}

func (s *TemplateSpans_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSpans_AwaitContext) TemplateTail() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, 0)
}

func (s *TemplateSpans_AwaitContext) AllTemplateMiddleList_Await() []ITemplateMiddleList_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateMiddleList_AwaitContext)(nil)).Elem())
	var tst = make([]ITemplateMiddleList_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateMiddleList_AwaitContext)
		}
	}

	return tst
}

func (s *TemplateSpans_AwaitContext) TemplateMiddleList_Await(i int) ITemplateMiddleList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateMiddleList_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateMiddleList_AwaitContext)
}

func (s *TemplateSpans_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSpans_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSpans_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateSpans_Await(s)
	}
}

func (s *TemplateSpans_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateSpans_Await(s)
	}
}

func (s *TemplateSpans_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateSpans_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateSpans_Await() (localctx ITemplateSpans_AwaitContext) {
	localctx = NewTemplateSpans_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, ECMAScriptParserRULE_templateSpans_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2120)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2117)
				p.TemplateMiddleList_Await()
			}

		}
		p.SetState(2122)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())
	}
	{
		p.SetState(2123)
		p.Match(ECMAScriptParserTemplateTail)
	}

	return localctx
}

// ITemplateSpans_Yield_AwaitContext is an interface to support dynamic dispatch.
type ITemplateSpans_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSpans_Yield_AwaitContext differentiates from other interfaces.
	IsTemplateSpans_Yield_AwaitContext()
}

type TemplateSpans_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSpans_Yield_AwaitContext() *TemplateSpans_Yield_AwaitContext {
	var p = new(TemplateSpans_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Yield_Await
	return p
}

func (*TemplateSpans_Yield_AwaitContext) IsTemplateSpans_Yield_AwaitContext() {}

func NewTemplateSpans_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSpans_Yield_AwaitContext {
	var p = new(TemplateSpans_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Yield_Await

	return p
}

func (s *TemplateSpans_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSpans_Yield_AwaitContext) TemplateTail() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, 0)
}

func (s *TemplateSpans_Yield_AwaitContext) AllTemplateMiddleList_Yield_Await() []ITemplateMiddleList_Yield_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateMiddleList_Yield_AwaitContext)(nil)).Elem())
	var tst = make([]ITemplateMiddleList_Yield_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateMiddleList_Yield_AwaitContext)
		}
	}

	return tst
}

func (s *TemplateSpans_Yield_AwaitContext) TemplateMiddleList_Yield_Await(i int) ITemplateMiddleList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateMiddleList_Yield_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateMiddleList_Yield_AwaitContext)
}

func (s *TemplateSpans_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSpans_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSpans_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateSpans_Yield_Await(s)
	}
}

func (s *TemplateSpans_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateSpans_Yield_Await(s)
	}
}

func (s *TemplateSpans_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateSpans_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateSpans_Yield_Await() (localctx ITemplateSpans_Yield_AwaitContext) {
	localctx = NewTemplateSpans_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, ECMAScriptParserRULE_templateSpans_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2128)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2125)
				p.TemplateMiddleList_Yield_Await()
			}

		}
		p.SetState(2130)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())
	}
	{
		p.SetState(2131)
		p.Match(ECMAScriptParserTemplateTail)
	}

	return localctx
}

// ITemplateSpans_TaggedContext is an interface to support dynamic dispatch.
type ITemplateSpans_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSpans_TaggedContext differentiates from other interfaces.
	IsTemplateSpans_TaggedContext()
}

type TemplateSpans_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSpans_TaggedContext() *TemplateSpans_TaggedContext {
	var p = new(TemplateSpans_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Tagged
	return p
}

func (*TemplateSpans_TaggedContext) IsTemplateSpans_TaggedContext() {}

func NewTemplateSpans_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSpans_TaggedContext {
	var p = new(TemplateSpans_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Tagged

	return p
}

func (s *TemplateSpans_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSpans_TaggedContext) TemplateTail() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, 0)
}

func (s *TemplateSpans_TaggedContext) AllTemplateMiddleList_Tagged() []ITemplateMiddleList_TaggedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateMiddleList_TaggedContext)(nil)).Elem())
	var tst = make([]ITemplateMiddleList_TaggedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateMiddleList_TaggedContext)
		}
	}

	return tst
}

func (s *TemplateSpans_TaggedContext) TemplateMiddleList_Tagged(i int) ITemplateMiddleList_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateMiddleList_TaggedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateMiddleList_TaggedContext)
}

func (s *TemplateSpans_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSpans_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSpans_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateSpans_Tagged(s)
	}
}

func (s *TemplateSpans_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateSpans_Tagged(s)
	}
}

func (s *TemplateSpans_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateSpans_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateSpans_Tagged() (localctx ITemplateSpans_TaggedContext) {
	localctx = NewTemplateSpans_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, ECMAScriptParserRULE_templateSpans_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2136)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2133)
				p.TemplateMiddleList_Tagged()
			}

		}
		p.SetState(2138)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext())
	}
	{
		p.SetState(2139)
		p.Match(ECMAScriptParserTemplateTail)
	}

	return localctx
}

// ITemplateSpans_Yield_TaggedContext is an interface to support dynamic dispatch.
type ITemplateSpans_Yield_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSpans_Yield_TaggedContext differentiates from other interfaces.
	IsTemplateSpans_Yield_TaggedContext()
}

type TemplateSpans_Yield_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSpans_Yield_TaggedContext() *TemplateSpans_Yield_TaggedContext {
	var p = new(TemplateSpans_Yield_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Yield_Tagged
	return p
}

func (*TemplateSpans_Yield_TaggedContext) IsTemplateSpans_Yield_TaggedContext() {}

func NewTemplateSpans_Yield_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSpans_Yield_TaggedContext {
	var p = new(TemplateSpans_Yield_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Yield_Tagged

	return p
}

func (s *TemplateSpans_Yield_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSpans_Yield_TaggedContext) TemplateTail() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, 0)
}

func (s *TemplateSpans_Yield_TaggedContext) AllTemplateMiddleList_Yield_Tagged() []ITemplateMiddleList_Yield_TaggedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateMiddleList_Yield_TaggedContext)(nil)).Elem())
	var tst = make([]ITemplateMiddleList_Yield_TaggedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateMiddleList_Yield_TaggedContext)
		}
	}

	return tst
}

func (s *TemplateSpans_Yield_TaggedContext) TemplateMiddleList_Yield_Tagged(i int) ITemplateMiddleList_Yield_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateMiddleList_Yield_TaggedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateMiddleList_Yield_TaggedContext)
}

func (s *TemplateSpans_Yield_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSpans_Yield_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSpans_Yield_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateSpans_Yield_Tagged(s)
	}
}

func (s *TemplateSpans_Yield_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateSpans_Yield_Tagged(s)
	}
}

func (s *TemplateSpans_Yield_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateSpans_Yield_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateSpans_Yield_Tagged() (localctx ITemplateSpans_Yield_TaggedContext) {
	localctx = NewTemplateSpans_Yield_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, ECMAScriptParserRULE_templateSpans_Yield_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2144)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2141)
				p.TemplateMiddleList_Yield_Tagged()
			}

		}
		p.SetState(2146)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())
	}
	{
		p.SetState(2147)
		p.Match(ECMAScriptParserTemplateTail)
	}

	return localctx
}

// ITemplateSpans_Await_TaggedContext is an interface to support dynamic dispatch.
type ITemplateSpans_Await_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSpans_Await_TaggedContext differentiates from other interfaces.
	IsTemplateSpans_Await_TaggedContext()
}

type TemplateSpans_Await_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSpans_Await_TaggedContext() *TemplateSpans_Await_TaggedContext {
	var p = new(TemplateSpans_Await_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Await_Tagged
	return p
}

func (*TemplateSpans_Await_TaggedContext) IsTemplateSpans_Await_TaggedContext() {}

func NewTemplateSpans_Await_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSpans_Await_TaggedContext {
	var p = new(TemplateSpans_Await_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Await_Tagged

	return p
}

func (s *TemplateSpans_Await_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSpans_Await_TaggedContext) TemplateTail() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, 0)
}

func (s *TemplateSpans_Await_TaggedContext) AllTemplateMiddleList_Await_Tagged() []ITemplateMiddleList_Await_TaggedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateMiddleList_Await_TaggedContext)(nil)).Elem())
	var tst = make([]ITemplateMiddleList_Await_TaggedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateMiddleList_Await_TaggedContext)
		}
	}

	return tst
}

func (s *TemplateSpans_Await_TaggedContext) TemplateMiddleList_Await_Tagged(i int) ITemplateMiddleList_Await_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateMiddleList_Await_TaggedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateMiddleList_Await_TaggedContext)
}

func (s *TemplateSpans_Await_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSpans_Await_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSpans_Await_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateSpans_Await_Tagged(s)
	}
}

func (s *TemplateSpans_Await_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateSpans_Await_Tagged(s)
	}
}

func (s *TemplateSpans_Await_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateSpans_Await_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateSpans_Await_Tagged() (localctx ITemplateSpans_Await_TaggedContext) {
	localctx = NewTemplateSpans_Await_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, ECMAScriptParserRULE_templateSpans_Await_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2152)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2149)
				p.TemplateMiddleList_Await_Tagged()
			}

		}
		p.SetState(2154)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())
	}
	{
		p.SetState(2155)
		p.Match(ECMAScriptParserTemplateTail)
	}

	return localctx
}

// ITemplateSpans_Yield_Await_TaggedContext is an interface to support dynamic dispatch.
type ITemplateSpans_Yield_Await_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateSpans_Yield_Await_TaggedContext differentiates from other interfaces.
	IsTemplateSpans_Yield_Await_TaggedContext()
}

type TemplateSpans_Yield_Await_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateSpans_Yield_Await_TaggedContext() *TemplateSpans_Yield_Await_TaggedContext {
	var p = new(TemplateSpans_Yield_Await_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Yield_Await_Tagged
	return p
}

func (*TemplateSpans_Yield_Await_TaggedContext) IsTemplateSpans_Yield_Await_TaggedContext() {}

func NewTemplateSpans_Yield_Await_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateSpans_Yield_Await_TaggedContext {
	var p = new(TemplateSpans_Yield_Await_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateSpans_Yield_Await_Tagged

	return p
}

func (s *TemplateSpans_Yield_Await_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateSpans_Yield_Await_TaggedContext) TemplateTail() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, 0)
}

func (s *TemplateSpans_Yield_Await_TaggedContext) AllTemplateMiddleList_Yield_Await_Tagged() []ITemplateMiddleList_Yield_Await_TaggedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateMiddleList_Yield_Await_TaggedContext)(nil)).Elem())
	var tst = make([]ITemplateMiddleList_Yield_Await_TaggedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateMiddleList_Yield_Await_TaggedContext)
		}
	}

	return tst
}

func (s *TemplateSpans_Yield_Await_TaggedContext) TemplateMiddleList_Yield_Await_Tagged(i int) ITemplateMiddleList_Yield_Await_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateMiddleList_Yield_Await_TaggedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateMiddleList_Yield_Await_TaggedContext)
}

func (s *TemplateSpans_Yield_Await_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateSpans_Yield_Await_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateSpans_Yield_Await_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateSpans_Yield_Await_Tagged(s)
	}
}

func (s *TemplateSpans_Yield_Await_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateSpans_Yield_Await_Tagged(s)
	}
}

func (s *TemplateSpans_Yield_Await_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateSpans_Yield_Await_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateSpans_Yield_Await_Tagged() (localctx ITemplateSpans_Yield_Await_TaggedContext) {
	localctx = NewTemplateSpans_Yield_Await_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, ECMAScriptParserRULE_templateSpans_Yield_Await_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2160)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2157)
				p.TemplateMiddleList_Yield_Await_Tagged()
			}

		}
		p.SetState(2162)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())
	}
	{
		p.SetState(2163)
		p.Match(ECMAScriptParserTemplateTail)
	}

	return localctx
}

// ITemplateMiddleListContext is an interface to support dynamic dispatch.
type ITemplateMiddleListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateMiddleListContext differentiates from other interfaces.
	IsTemplateMiddleListContext()
}

type TemplateMiddleListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateMiddleListContext() *TemplateMiddleListContext {
	var p = new(TemplateMiddleListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList
	return p
}

func (*TemplateMiddleListContext) IsTemplateMiddleListContext() {}

func NewTemplateMiddleListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateMiddleListContext {
	var p = new(TemplateMiddleListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList

	return p
}

func (s *TemplateMiddleListContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateMiddleListContext) AllTemplateTail() []antlr.TerminalNode {
	return s.GetTokens(ECMAScriptParserTemplateTail)
}

func (s *TemplateMiddleListContext) TemplateTail(i int) antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, i)
}

func (s *TemplateMiddleListContext) AllExpression_In() []IExpression_InContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_InContext)(nil)).Elem())
	var tst = make([]IExpression_InContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_InContext)
		}
	}

	return tst
}

func (s *TemplateMiddleListContext) Expression_In(i int) IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *TemplateMiddleListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateMiddleListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateMiddleListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateMiddleList(s)
	}
}

func (s *TemplateMiddleListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateMiddleList(s)
	}
}

func (s *TemplateMiddleListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateMiddleList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateMiddleList() (localctx ITemplateMiddleListContext) {
	localctx = NewTemplateMiddleListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, ECMAScriptParserRULE_templateMiddleList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2167)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2165)
				p.Match(ECMAScriptParserTemplateTail)
			}
			{
				p.SetState(2166)
				p.expression_In(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2169)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())
	}

	return localctx
}

// ITemplateMiddleList_YieldContext is an interface to support dynamic dispatch.
type ITemplateMiddleList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateMiddleList_YieldContext differentiates from other interfaces.
	IsTemplateMiddleList_YieldContext()
}

type TemplateMiddleList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateMiddleList_YieldContext() *TemplateMiddleList_YieldContext {
	var p = new(TemplateMiddleList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Yield
	return p
}

func (*TemplateMiddleList_YieldContext) IsTemplateMiddleList_YieldContext() {}

func NewTemplateMiddleList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateMiddleList_YieldContext {
	var p = new(TemplateMiddleList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Yield

	return p
}

func (s *TemplateMiddleList_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateMiddleList_YieldContext) AllTemplateTail() []antlr.TerminalNode {
	return s.GetTokens(ECMAScriptParserTemplateTail)
}

func (s *TemplateMiddleList_YieldContext) TemplateTail(i int) antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, i)
}

func (s *TemplateMiddleList_YieldContext) AllExpression_In_Yield() []IExpression_In_YieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem())
	var tst = make([]IExpression_In_YieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_YieldContext)
		}
	}

	return tst
}

func (s *TemplateMiddleList_YieldContext) Expression_In_Yield(i int) IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *TemplateMiddleList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateMiddleList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateMiddleList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateMiddleList_Yield(s)
	}
}

func (s *TemplateMiddleList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateMiddleList_Yield(s)
	}
}

func (s *TemplateMiddleList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateMiddleList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateMiddleList_Yield() (localctx ITemplateMiddleList_YieldContext) {
	localctx = NewTemplateMiddleList_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, ECMAScriptParserRULE_templateMiddleList_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2173)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2171)
				p.Match(ECMAScriptParserTemplateTail)
			}
			{
				p.SetState(2172)
				p.expression_In_Yield(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2175)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext())
	}

	return localctx
}

// ITemplateMiddleList_AwaitContext is an interface to support dynamic dispatch.
type ITemplateMiddleList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateMiddleList_AwaitContext differentiates from other interfaces.
	IsTemplateMiddleList_AwaitContext()
}

type TemplateMiddleList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateMiddleList_AwaitContext() *TemplateMiddleList_AwaitContext {
	var p = new(TemplateMiddleList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Await
	return p
}

func (*TemplateMiddleList_AwaitContext) IsTemplateMiddleList_AwaitContext() {}

func NewTemplateMiddleList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateMiddleList_AwaitContext {
	var p = new(TemplateMiddleList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Await

	return p
}

func (s *TemplateMiddleList_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateMiddleList_AwaitContext) AllTemplateTail() []antlr.TerminalNode {
	return s.GetTokens(ECMAScriptParserTemplateTail)
}

func (s *TemplateMiddleList_AwaitContext) TemplateTail(i int) antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, i)
}

func (s *TemplateMiddleList_AwaitContext) AllExpression_In_Await() []IExpression_In_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem())
	var tst = make([]IExpression_In_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_AwaitContext)
		}
	}

	return tst
}

func (s *TemplateMiddleList_AwaitContext) Expression_In_Await(i int) IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *TemplateMiddleList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateMiddleList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateMiddleList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateMiddleList_Await(s)
	}
}

func (s *TemplateMiddleList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateMiddleList_Await(s)
	}
}

func (s *TemplateMiddleList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateMiddleList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateMiddleList_Await() (localctx ITemplateMiddleList_AwaitContext) {
	localctx = NewTemplateMiddleList_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, ECMAScriptParserRULE_templateMiddleList_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2179)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2177)
				p.Match(ECMAScriptParserTemplateTail)
			}
			{
				p.SetState(2178)
				p.expression_In_Await(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2181)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext())
	}

	return localctx
}

// ITemplateMiddleList_Yield_AwaitContext is an interface to support dynamic dispatch.
type ITemplateMiddleList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateMiddleList_Yield_AwaitContext differentiates from other interfaces.
	IsTemplateMiddleList_Yield_AwaitContext()
}

type TemplateMiddleList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateMiddleList_Yield_AwaitContext() *TemplateMiddleList_Yield_AwaitContext {
	var p = new(TemplateMiddleList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Yield_Await
	return p
}

func (*TemplateMiddleList_Yield_AwaitContext) IsTemplateMiddleList_Yield_AwaitContext() {}

func NewTemplateMiddleList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateMiddleList_Yield_AwaitContext {
	var p = new(TemplateMiddleList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Yield_Await

	return p
}

func (s *TemplateMiddleList_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateMiddleList_Yield_AwaitContext) AllTemplateTail() []antlr.TerminalNode {
	return s.GetTokens(ECMAScriptParserTemplateTail)
}

func (s *TemplateMiddleList_Yield_AwaitContext) TemplateTail(i int) antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, i)
}

func (s *TemplateMiddleList_Yield_AwaitContext) AllExpression_In_Yield_Await() []IExpression_In_Yield_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem())
	var tst = make([]IExpression_In_Yield_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_Yield_AwaitContext)
		}
	}

	return tst
}

func (s *TemplateMiddleList_Yield_AwaitContext) Expression_In_Yield_Await(i int) IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *TemplateMiddleList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateMiddleList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateMiddleList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateMiddleList_Yield_Await(s)
	}
}

func (s *TemplateMiddleList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateMiddleList_Yield_Await(s)
	}
}

func (s *TemplateMiddleList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateMiddleList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateMiddleList_Yield_Await() (localctx ITemplateMiddleList_Yield_AwaitContext) {
	localctx = NewTemplateMiddleList_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, ECMAScriptParserRULE_templateMiddleList_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2185)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2183)
				p.Match(ECMAScriptParserTemplateTail)
			}
			{
				p.SetState(2184)
				p.expression_In_Yield_Await(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2187)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())
	}

	return localctx
}

// ITemplateMiddleList_TaggedContext is an interface to support dynamic dispatch.
type ITemplateMiddleList_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateMiddleList_TaggedContext differentiates from other interfaces.
	IsTemplateMiddleList_TaggedContext()
}

type TemplateMiddleList_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateMiddleList_TaggedContext() *TemplateMiddleList_TaggedContext {
	var p = new(TemplateMiddleList_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Tagged
	return p
}

func (*TemplateMiddleList_TaggedContext) IsTemplateMiddleList_TaggedContext() {}

func NewTemplateMiddleList_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateMiddleList_TaggedContext {
	var p = new(TemplateMiddleList_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Tagged

	return p
}

func (s *TemplateMiddleList_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateMiddleList_TaggedContext) AllTemplateTail() []antlr.TerminalNode {
	return s.GetTokens(ECMAScriptParserTemplateTail)
}

func (s *TemplateMiddleList_TaggedContext) TemplateTail(i int) antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, i)
}

func (s *TemplateMiddleList_TaggedContext) AllExpression_In() []IExpression_InContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_InContext)(nil)).Elem())
	var tst = make([]IExpression_InContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_InContext)
		}
	}

	return tst
}

func (s *TemplateMiddleList_TaggedContext) Expression_In(i int) IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *TemplateMiddleList_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateMiddleList_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateMiddleList_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateMiddleList_Tagged(s)
	}
}

func (s *TemplateMiddleList_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateMiddleList_Tagged(s)
	}
}

func (s *TemplateMiddleList_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateMiddleList_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateMiddleList_Tagged() (localctx ITemplateMiddleList_TaggedContext) {
	localctx = NewTemplateMiddleList_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, ECMAScriptParserRULE_templateMiddleList_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2191)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2189)
				p.Match(ECMAScriptParserTemplateTail)
			}
			{
				p.SetState(2190)
				p.expression_In(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2193)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext())
	}

	return localctx
}

// ITemplateMiddleList_Yield_TaggedContext is an interface to support dynamic dispatch.
type ITemplateMiddleList_Yield_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateMiddleList_Yield_TaggedContext differentiates from other interfaces.
	IsTemplateMiddleList_Yield_TaggedContext()
}

type TemplateMiddleList_Yield_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateMiddleList_Yield_TaggedContext() *TemplateMiddleList_Yield_TaggedContext {
	var p = new(TemplateMiddleList_Yield_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Yield_Tagged
	return p
}

func (*TemplateMiddleList_Yield_TaggedContext) IsTemplateMiddleList_Yield_TaggedContext() {}

func NewTemplateMiddleList_Yield_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateMiddleList_Yield_TaggedContext {
	var p = new(TemplateMiddleList_Yield_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Yield_Tagged

	return p
}

func (s *TemplateMiddleList_Yield_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateMiddleList_Yield_TaggedContext) AllTemplateTail() []antlr.TerminalNode {
	return s.GetTokens(ECMAScriptParserTemplateTail)
}

func (s *TemplateMiddleList_Yield_TaggedContext) TemplateTail(i int) antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, i)
}

func (s *TemplateMiddleList_Yield_TaggedContext) AllExpression_In_Yield() []IExpression_In_YieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem())
	var tst = make([]IExpression_In_YieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_YieldContext)
		}
	}

	return tst
}

func (s *TemplateMiddleList_Yield_TaggedContext) Expression_In_Yield(i int) IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *TemplateMiddleList_Yield_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateMiddleList_Yield_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateMiddleList_Yield_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateMiddleList_Yield_Tagged(s)
	}
}

func (s *TemplateMiddleList_Yield_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateMiddleList_Yield_Tagged(s)
	}
}

func (s *TemplateMiddleList_Yield_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateMiddleList_Yield_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateMiddleList_Yield_Tagged() (localctx ITemplateMiddleList_Yield_TaggedContext) {
	localctx = NewTemplateMiddleList_Yield_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, ECMAScriptParserRULE_templateMiddleList_Yield_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2197)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2195)
				p.Match(ECMAScriptParserTemplateTail)
			}
			{
				p.SetState(2196)
				p.expression_In_Yield(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2199)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())
	}

	return localctx
}

// ITemplateMiddleList_Await_TaggedContext is an interface to support dynamic dispatch.
type ITemplateMiddleList_Await_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateMiddleList_Await_TaggedContext differentiates from other interfaces.
	IsTemplateMiddleList_Await_TaggedContext()
}

type TemplateMiddleList_Await_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateMiddleList_Await_TaggedContext() *TemplateMiddleList_Await_TaggedContext {
	var p = new(TemplateMiddleList_Await_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Await_Tagged
	return p
}

func (*TemplateMiddleList_Await_TaggedContext) IsTemplateMiddleList_Await_TaggedContext() {}

func NewTemplateMiddleList_Await_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateMiddleList_Await_TaggedContext {
	var p = new(TemplateMiddleList_Await_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Await_Tagged

	return p
}

func (s *TemplateMiddleList_Await_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateMiddleList_Await_TaggedContext) AllTemplateTail() []antlr.TerminalNode {
	return s.GetTokens(ECMAScriptParserTemplateTail)
}

func (s *TemplateMiddleList_Await_TaggedContext) TemplateTail(i int) antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, i)
}

func (s *TemplateMiddleList_Await_TaggedContext) AllExpression_In_Await() []IExpression_In_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem())
	var tst = make([]IExpression_In_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_AwaitContext)
		}
	}

	return tst
}

func (s *TemplateMiddleList_Await_TaggedContext) Expression_In_Await(i int) IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *TemplateMiddleList_Await_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateMiddleList_Await_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateMiddleList_Await_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateMiddleList_Await_Tagged(s)
	}
}

func (s *TemplateMiddleList_Await_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateMiddleList_Await_Tagged(s)
	}
}

func (s *TemplateMiddleList_Await_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateMiddleList_Await_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateMiddleList_Await_Tagged() (localctx ITemplateMiddleList_Await_TaggedContext) {
	localctx = NewTemplateMiddleList_Await_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, ECMAScriptParserRULE_templateMiddleList_Await_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2203)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2201)
				p.Match(ECMAScriptParserTemplateTail)
			}
			{
				p.SetState(2202)
				p.expression_In_Await(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2205)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext())
	}

	return localctx
}

// ITemplateMiddleList_Yield_Await_TaggedContext is an interface to support dynamic dispatch.
type ITemplateMiddleList_Yield_Await_TaggedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateMiddleList_Yield_Await_TaggedContext differentiates from other interfaces.
	IsTemplateMiddleList_Yield_Await_TaggedContext()
}

type TemplateMiddleList_Yield_Await_TaggedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateMiddleList_Yield_Await_TaggedContext() *TemplateMiddleList_Yield_Await_TaggedContext {
	var p = new(TemplateMiddleList_Yield_Await_TaggedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Yield_Await_Tagged
	return p
}

func (*TemplateMiddleList_Yield_Await_TaggedContext) IsTemplateMiddleList_Yield_Await_TaggedContext() {
}

func NewTemplateMiddleList_Yield_Await_TaggedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateMiddleList_Yield_Await_TaggedContext {
	var p = new(TemplateMiddleList_Yield_Await_TaggedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_templateMiddleList_Yield_Await_Tagged

	return p
}

func (s *TemplateMiddleList_Yield_Await_TaggedContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateMiddleList_Yield_Await_TaggedContext) AllTemplateTail() []antlr.TerminalNode {
	return s.GetTokens(ECMAScriptParserTemplateTail)
}

func (s *TemplateMiddleList_Yield_Await_TaggedContext) TemplateTail(i int) antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserTemplateTail, i)
}

func (s *TemplateMiddleList_Yield_Await_TaggedContext) AllExpression_In_Yield_Await() []IExpression_In_Yield_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem())
	var tst = make([]IExpression_In_Yield_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_Yield_AwaitContext)
		}
	}

	return tst
}

func (s *TemplateMiddleList_Yield_Await_TaggedContext) Expression_In_Yield_Await(i int) IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *TemplateMiddleList_Yield_Await_TaggedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateMiddleList_Yield_Await_TaggedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateMiddleList_Yield_Await_TaggedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTemplateMiddleList_Yield_Await_Tagged(s)
	}
}

func (s *TemplateMiddleList_Yield_Await_TaggedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTemplateMiddleList_Yield_Await_Tagged(s)
	}
}

func (s *TemplateMiddleList_Yield_Await_TaggedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTemplateMiddleList_Yield_Await_Tagged(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TemplateMiddleList_Yield_Await_Tagged() (localctx ITemplateMiddleList_Yield_Await_TaggedContext) {
	localctx = NewTemplateMiddleList_Yield_Await_TaggedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, ECMAScriptParserRULE_templateMiddleList_Yield_Await_Tagged)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2209)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2207)
				p.Match(ECMAScriptParserTemplateTail)
			}
			{
				p.SetState(2208)
				p.expression_In_Yield_Await(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2211)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext())
	}

	return localctx
}

// IMemberExpressionContext is an interface to support dynamic dispatch.
type IMemberExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberExpressionContext differentiates from other interfaces.
	IsMemberExpressionContext()
}

type MemberExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberExpressionContext() *MemberExpressionContext {
	var p = new(MemberExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_memberExpression
	return p
}

func (*MemberExpressionContext) IsMemberExpressionContext() {}

func NewMemberExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberExpressionContext {
	var p = new(MemberExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_memberExpression

	return p
}

func (s *MemberExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *MemberExpressionContext) SuperProperty() ISuperPropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuperPropertyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuperPropertyContext)
}

func (s *MemberExpressionContext) MetaProperty() IMetaPropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetaPropertyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetaPropertyContext)
}

func (s *MemberExpressionContext) MemberExpression() IMemberExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpressionContext)
}

func (s *MemberExpressionContext) Arguments() IArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *MemberExpressionContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *MemberExpressionContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *MemberExpressionContext) TemplateLiteral_Tagged() ITemplateLiteral_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteral_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteral_TaggedContext)
}

func (s *MemberExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMemberExpression(s)
	}
}

func (s *MemberExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMemberExpression(s)
	}
}

func (s *MemberExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMemberExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MemberExpression() (localctx IMemberExpressionContext) {
	return p.memberExpression(0)
}

func (p *ECMAScriptParser) memberExpression(_p int) (localctx IMemberExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMemberExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMemberExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 208
	p.EnterRecursionRule(localctx, 208, ECMAScriptParserRULE_memberExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2221)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2214)
			p.PrimaryExpression()
		}

	case 2:
		{
			p.SetState(2215)
			p.SuperProperty()
		}

	case 3:
		{
			p.SetState(2216)
			p.MetaProperty()
		}

	case 4:
		{
			p.SetState(2217)
			p.Match(ECMAScriptParserT__14)
		}
		{
			p.SetState(2218)
			p.memberExpression(0)
		}
		{
			p.SetState(2219)
			p.Arguments()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2235)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2233)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMemberExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression)
				p.SetState(2223)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(2224)
					p.Match(ECMAScriptParserT__8)
				}
				{
					p.SetState(2225)
					p.expression_In(0)
				}
				{
					p.SetState(2226)
					p.Match(ECMAScriptParserT__9)
				}

			case 2:
				localctx = NewMemberExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression)
				p.SetState(2228)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(2229)
					p.Match(ECMAScriptParserT__13)
				}
				{
					p.SetState(2230)
					p.Match(ECMAScriptParserIdentifierName)
				}

			case 3:
				localctx = NewMemberExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression)
				p.SetState(2231)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2232)
					p.TemplateLiteral_Tagged()
				}

			}

		}
		p.SetState(2237)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext())
	}

	return localctx
}

// IMemberExpression_YieldContext is an interface to support dynamic dispatch.
type IMemberExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberExpression_YieldContext differentiates from other interfaces.
	IsMemberExpression_YieldContext()
}

type MemberExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberExpression_YieldContext() *MemberExpression_YieldContext {
	var p = new(MemberExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_memberExpression_Yield
	return p
}

func (*MemberExpression_YieldContext) IsMemberExpression_YieldContext() {}

func NewMemberExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberExpression_YieldContext {
	var p = new(MemberExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_memberExpression_Yield

	return p
}

func (s *MemberExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberExpression_YieldContext) PrimaryExpression_Yield() IPrimaryExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpression_YieldContext)
}

func (s *MemberExpression_YieldContext) SuperProperty_Yield() ISuperProperty_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuperProperty_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuperProperty_YieldContext)
}

func (s *MemberExpression_YieldContext) MetaProperty() IMetaPropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetaPropertyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetaPropertyContext)
}

func (s *MemberExpression_YieldContext) MemberExpression_Yield() IMemberExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpression_YieldContext)
}

func (s *MemberExpression_YieldContext) Arguments_Yield() IArguments_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_YieldContext)
}

func (s *MemberExpression_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *MemberExpression_YieldContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *MemberExpression_YieldContext) TemplateLiteral_Yield_Tagged() ITemplateLiteral_Yield_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteral_Yield_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteral_Yield_TaggedContext)
}

func (s *MemberExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMemberExpression_Yield(s)
	}
}

func (s *MemberExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMemberExpression_Yield(s)
	}
}

func (s *MemberExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMemberExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MemberExpression_Yield() (localctx IMemberExpression_YieldContext) {
	return p.memberExpression_Yield(0)
}

func (p *ECMAScriptParser) memberExpression_Yield(_p int) (localctx IMemberExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMemberExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMemberExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 210
	p.EnterRecursionRule(localctx, 210, ECMAScriptParserRULE_memberExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2246)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2239)
			p.PrimaryExpression_Yield()
		}

	case 2:
		{
			p.SetState(2240)
			p.SuperProperty_Yield()
		}

	case 3:
		{
			p.SetState(2241)
			p.MetaProperty()
		}

	case 4:
		{
			p.SetState(2242)
			p.Match(ECMAScriptParserT__14)
		}
		{
			p.SetState(2243)
			p.memberExpression_Yield(0)
		}
		{
			p.SetState(2244)
			p.Arguments_Yield()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2260)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2258)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMemberExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression_Yield)
				p.SetState(2248)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(2249)
					p.Match(ECMAScriptParserT__8)
				}
				{
					p.SetState(2250)
					p.expression_In_Yield(0)
				}
				{
					p.SetState(2251)
					p.Match(ECMAScriptParserT__9)
				}

			case 2:
				localctx = NewMemberExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression_Yield)
				p.SetState(2253)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(2254)
					p.Match(ECMAScriptParserT__13)
				}
				{
					p.SetState(2255)
					p.Match(ECMAScriptParserIdentifierName)
				}

			case 3:
				localctx = NewMemberExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression_Yield)
				p.SetState(2256)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2257)
					p.TemplateLiteral_Yield_Tagged()
				}

			}

		}
		p.SetState(2262)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext())
	}

	return localctx
}

// IMemberExpression_AwaitContext is an interface to support dynamic dispatch.
type IMemberExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberExpression_AwaitContext differentiates from other interfaces.
	IsMemberExpression_AwaitContext()
}

type MemberExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberExpression_AwaitContext() *MemberExpression_AwaitContext {
	var p = new(MemberExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_memberExpression_Await
	return p
}

func (*MemberExpression_AwaitContext) IsMemberExpression_AwaitContext() {}

func NewMemberExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberExpression_AwaitContext {
	var p = new(MemberExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_memberExpression_Await

	return p
}

func (s *MemberExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberExpression_AwaitContext) PrimaryExpression_Await() IPrimaryExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpression_AwaitContext)
}

func (s *MemberExpression_AwaitContext) SuperProperty_Await() ISuperProperty_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuperProperty_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuperProperty_AwaitContext)
}

func (s *MemberExpression_AwaitContext) MetaProperty() IMetaPropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetaPropertyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetaPropertyContext)
}

func (s *MemberExpression_AwaitContext) MemberExpression_Await() IMemberExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpression_AwaitContext)
}

func (s *MemberExpression_AwaitContext) Arguments_Await() IArguments_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_AwaitContext)
}

func (s *MemberExpression_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *MemberExpression_AwaitContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *MemberExpression_AwaitContext) TemplateLiteral_Await_Tagged() ITemplateLiteral_Await_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteral_Await_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteral_Await_TaggedContext)
}

func (s *MemberExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMemberExpression_Await(s)
	}
}

func (s *MemberExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMemberExpression_Await(s)
	}
}

func (s *MemberExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMemberExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MemberExpression_Await() (localctx IMemberExpression_AwaitContext) {
	return p.memberExpression_Await(0)
}

func (p *ECMAScriptParser) memberExpression_Await(_p int) (localctx IMemberExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMemberExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMemberExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 212
	p.EnterRecursionRule(localctx, 212, ECMAScriptParserRULE_memberExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2271)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2264)
			p.PrimaryExpression_Await()
		}

	case 2:
		{
			p.SetState(2265)
			p.SuperProperty_Await()
		}

	case 3:
		{
			p.SetState(2266)
			p.MetaProperty()
		}

	case 4:
		{
			p.SetState(2267)
			p.Match(ECMAScriptParserT__14)
		}
		{
			p.SetState(2268)
			p.memberExpression_Await(0)
		}
		{
			p.SetState(2269)
			p.Arguments_Await()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2285)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2283)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMemberExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression_Await)
				p.SetState(2273)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(2274)
					p.Match(ECMAScriptParserT__8)
				}
				{
					p.SetState(2275)
					p.expression_In_Await(0)
				}
				{
					p.SetState(2276)
					p.Match(ECMAScriptParserT__9)
				}

			case 2:
				localctx = NewMemberExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression_Await)
				p.SetState(2278)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(2279)
					p.Match(ECMAScriptParserT__13)
				}
				{
					p.SetState(2280)
					p.Match(ECMAScriptParserIdentifierName)
				}

			case 3:
				localctx = NewMemberExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression_Await)
				p.SetState(2281)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2282)
					p.TemplateLiteral_Await_Tagged()
				}

			}

		}
		p.SetState(2287)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext())
	}

	return localctx
}

// IMemberExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IMemberExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberExpression_Yield_AwaitContext differentiates from other interfaces.
	IsMemberExpression_Yield_AwaitContext()
}

type MemberExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberExpression_Yield_AwaitContext() *MemberExpression_Yield_AwaitContext {
	var p = new(MemberExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_memberExpression_Yield_Await
	return p
}

func (*MemberExpression_Yield_AwaitContext) IsMemberExpression_Yield_AwaitContext() {}

func NewMemberExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberExpression_Yield_AwaitContext {
	var p = new(MemberExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_memberExpression_Yield_Await

	return p
}

func (s *MemberExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberExpression_Yield_AwaitContext) PrimaryExpression_Yield_Await() IPrimaryExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpression_Yield_AwaitContext)
}

func (s *MemberExpression_Yield_AwaitContext) SuperProperty_Yield_Await() ISuperProperty_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuperProperty_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuperProperty_Yield_AwaitContext)
}

func (s *MemberExpression_Yield_AwaitContext) MetaProperty() IMetaPropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetaPropertyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetaPropertyContext)
}

func (s *MemberExpression_Yield_AwaitContext) MemberExpression_Yield_Await() IMemberExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpression_Yield_AwaitContext)
}

func (s *MemberExpression_Yield_AwaitContext) Arguments_Yield_Await() IArguments_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_Yield_AwaitContext)
}

func (s *MemberExpression_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *MemberExpression_Yield_AwaitContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *MemberExpression_Yield_AwaitContext) TemplateLiteral_Yield_Await_Tagged() ITemplateLiteral_Yield_Await_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteral_Yield_Await_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteral_Yield_Await_TaggedContext)
}

func (s *MemberExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMemberExpression_Yield_Await(s)
	}
}

func (s *MemberExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMemberExpression_Yield_Await(s)
	}
}

func (s *MemberExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMemberExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MemberExpression_Yield_Await() (localctx IMemberExpression_Yield_AwaitContext) {
	return p.memberExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) memberExpression_Yield_Await(_p int) (localctx IMemberExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMemberExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMemberExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 214
	p.EnterRecursionRule(localctx, 214, ECMAScriptParserRULE_memberExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2296)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2289)
			p.PrimaryExpression_Yield_Await()
		}

	case 2:
		{
			p.SetState(2290)
			p.SuperProperty_Yield_Await()
		}

	case 3:
		{
			p.SetState(2291)
			p.MetaProperty()
		}

	case 4:
		{
			p.SetState(2292)
			p.Match(ECMAScriptParserT__14)
		}
		{
			p.SetState(2293)
			p.memberExpression_Yield_Await(0)
		}
		{
			p.SetState(2294)
			p.Arguments_Yield_Await()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2310)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2308)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMemberExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression_Yield_Await)
				p.SetState(2298)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(2299)
					p.Match(ECMAScriptParserT__8)
				}
				{
					p.SetState(2300)
					p.expression_In_Yield_Await(0)
				}
				{
					p.SetState(2301)
					p.Match(ECMAScriptParserT__9)
				}

			case 2:
				localctx = NewMemberExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression_Yield_Await)
				p.SetState(2303)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(2304)
					p.Match(ECMAScriptParserT__13)
				}
				{
					p.SetState(2305)
					p.Match(ECMAScriptParserIdentifierName)
				}

			case 3:
				localctx = NewMemberExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_memberExpression_Yield_Await)
				p.SetState(2306)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2307)
					p.TemplateLiteral_Yield_Await_Tagged()
				}

			}

		}
		p.SetState(2312)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext())
	}

	return localctx
}

// ISuperPropertyContext is an interface to support dynamic dispatch.
type ISuperPropertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuperPropertyContext differentiates from other interfaces.
	IsSuperPropertyContext()
}

type SuperPropertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperPropertyContext() *SuperPropertyContext {
	var p = new(SuperPropertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_superProperty
	return p
}

func (*SuperPropertyContext) IsSuperPropertyContext() {}

func NewSuperPropertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperPropertyContext {
	var p = new(SuperPropertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_superProperty

	return p
}

func (s *SuperPropertyContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperPropertyContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *SuperPropertyContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *SuperPropertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperPropertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperPropertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSuperProperty(s)
	}
}

func (s *SuperPropertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSuperProperty(s)
	}
}

func (s *SuperPropertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSuperProperty(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SuperProperty() (localctx ISuperPropertyContext) {
	localctx = NewSuperPropertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, ECMAScriptParserRULE_superProperty)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2321)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2313)
			p.Match(ECMAScriptParserT__15)
		}
		{
			p.SetState(2314)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(2315)
			p.expression_In(0)
		}
		{
			p.SetState(2316)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2318)
			p.Match(ECMAScriptParserT__15)
		}
		{
			p.SetState(2319)
			p.Match(ECMAScriptParserT__13)
		}
		{
			p.SetState(2320)
			p.Match(ECMAScriptParserIdentifierName)
		}

	}

	return localctx
}

// ISuperProperty_YieldContext is an interface to support dynamic dispatch.
type ISuperProperty_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuperProperty_YieldContext differentiates from other interfaces.
	IsSuperProperty_YieldContext()
}

type SuperProperty_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperProperty_YieldContext() *SuperProperty_YieldContext {
	var p = new(SuperProperty_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_superProperty_Yield
	return p
}

func (*SuperProperty_YieldContext) IsSuperProperty_YieldContext() {}

func NewSuperProperty_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperProperty_YieldContext {
	var p = new(SuperProperty_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_superProperty_Yield

	return p
}

func (s *SuperProperty_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperProperty_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *SuperProperty_YieldContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *SuperProperty_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperProperty_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperProperty_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSuperProperty_Yield(s)
	}
}

func (s *SuperProperty_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSuperProperty_Yield(s)
	}
}

func (s *SuperProperty_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSuperProperty_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SuperProperty_Yield() (localctx ISuperProperty_YieldContext) {
	localctx = NewSuperProperty_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, ECMAScriptParserRULE_superProperty_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2331)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2323)
			p.Match(ECMAScriptParserT__15)
		}
		{
			p.SetState(2324)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(2325)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(2326)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2328)
			p.Match(ECMAScriptParserT__15)
		}
		{
			p.SetState(2329)
			p.Match(ECMAScriptParserT__13)
		}
		{
			p.SetState(2330)
			p.Match(ECMAScriptParserIdentifierName)
		}

	}

	return localctx
}

// ISuperProperty_AwaitContext is an interface to support dynamic dispatch.
type ISuperProperty_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuperProperty_AwaitContext differentiates from other interfaces.
	IsSuperProperty_AwaitContext()
}

type SuperProperty_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperProperty_AwaitContext() *SuperProperty_AwaitContext {
	var p = new(SuperProperty_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_superProperty_Await
	return p
}

func (*SuperProperty_AwaitContext) IsSuperProperty_AwaitContext() {}

func NewSuperProperty_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperProperty_AwaitContext {
	var p = new(SuperProperty_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_superProperty_Await

	return p
}

func (s *SuperProperty_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperProperty_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *SuperProperty_AwaitContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *SuperProperty_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperProperty_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperProperty_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSuperProperty_Await(s)
	}
}

func (s *SuperProperty_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSuperProperty_Await(s)
	}
}

func (s *SuperProperty_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSuperProperty_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SuperProperty_Await() (localctx ISuperProperty_AwaitContext) {
	localctx = NewSuperProperty_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, ECMAScriptParserRULE_superProperty_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2341)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2333)
			p.Match(ECMAScriptParserT__15)
		}
		{
			p.SetState(2334)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(2335)
			p.expression_In_Await(0)
		}
		{
			p.SetState(2336)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2338)
			p.Match(ECMAScriptParserT__15)
		}
		{
			p.SetState(2339)
			p.Match(ECMAScriptParserT__13)
		}
		{
			p.SetState(2340)
			p.Match(ECMAScriptParserIdentifierName)
		}

	}

	return localctx
}

// ISuperProperty_Yield_AwaitContext is an interface to support dynamic dispatch.
type ISuperProperty_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuperProperty_Yield_AwaitContext differentiates from other interfaces.
	IsSuperProperty_Yield_AwaitContext()
}

type SuperProperty_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperProperty_Yield_AwaitContext() *SuperProperty_Yield_AwaitContext {
	var p = new(SuperProperty_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_superProperty_Yield_Await
	return p
}

func (*SuperProperty_Yield_AwaitContext) IsSuperProperty_Yield_AwaitContext() {}

func NewSuperProperty_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperProperty_Yield_AwaitContext {
	var p = new(SuperProperty_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_superProperty_Yield_Await

	return p
}

func (s *SuperProperty_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperProperty_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *SuperProperty_Yield_AwaitContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *SuperProperty_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperProperty_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperProperty_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSuperProperty_Yield_Await(s)
	}
}

func (s *SuperProperty_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSuperProperty_Yield_Await(s)
	}
}

func (s *SuperProperty_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSuperProperty_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SuperProperty_Yield_Await() (localctx ISuperProperty_Yield_AwaitContext) {
	localctx = NewSuperProperty_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, ECMAScriptParserRULE_superProperty_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2351)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2343)
			p.Match(ECMAScriptParserT__15)
		}
		{
			p.SetState(2344)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(2345)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(2346)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2348)
			p.Match(ECMAScriptParserT__15)
		}
		{
			p.SetState(2349)
			p.Match(ECMAScriptParserT__13)
		}
		{
			p.SetState(2350)
			p.Match(ECMAScriptParserIdentifierName)
		}

	}

	return localctx
}

// IMetaPropertyContext is an interface to support dynamic dispatch.
type IMetaPropertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMetaPropertyContext differentiates from other interfaces.
	IsMetaPropertyContext()
}

type MetaPropertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMetaPropertyContext() *MetaPropertyContext {
	var p = new(MetaPropertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_metaProperty
	return p
}

func (*MetaPropertyContext) IsMetaPropertyContext() {}

func NewMetaPropertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MetaPropertyContext {
	var p = new(MetaPropertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_metaProperty

	return p
}

func (s *MetaPropertyContext) GetParser() antlr.Parser { return s.parser }

func (s *MetaPropertyContext) NewTarget() INewTargetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewTargetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewTargetContext)
}

func (s *MetaPropertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetaPropertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MetaPropertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMetaProperty(s)
	}
}

func (s *MetaPropertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMetaProperty(s)
	}
}

func (s *MetaPropertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMetaProperty(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MetaProperty() (localctx IMetaPropertyContext) {
	localctx = NewMetaPropertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, ECMAScriptParserRULE_metaProperty)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2353)
		p.NewTarget()
	}

	return localctx
}

// INewTargetContext is an interface to support dynamic dispatch.
type INewTargetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewTargetContext differentiates from other interfaces.
	IsNewTargetContext()
}

type NewTargetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewTargetContext() *NewTargetContext {
	var p = new(NewTargetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_newTarget
	return p
}

func (*NewTargetContext) IsNewTargetContext() {}

func NewNewTargetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewTargetContext {
	var p = new(NewTargetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_newTarget

	return p
}

func (s *NewTargetContext) GetParser() antlr.Parser { return s.parser }
func (s *NewTargetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewTargetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewTargetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterNewTarget(s)
	}
}

func (s *NewTargetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitNewTarget(s)
	}
}

func (s *NewTargetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitNewTarget(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) NewTarget() (localctx INewTargetContext) {
	localctx = NewNewTargetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, ECMAScriptParserRULE_newTarget)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2355)
		p.Match(ECMAScriptParserT__14)
	}
	{
		p.SetState(2356)
		p.Match(ECMAScriptParserT__13)
	}
	{
		p.SetState(2357)
		p.Match(ECMAScriptParserT__16)
	}

	return localctx
}

// ITheNewExpressionContext is an interface to support dynamic dispatch.
type ITheNewExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTheNewExpressionContext differentiates from other interfaces.
	IsTheNewExpressionContext()
}

type TheNewExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheNewExpressionContext() *TheNewExpressionContext {
	var p = new(TheNewExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_theNewExpression
	return p
}

func (*TheNewExpressionContext) IsTheNewExpressionContext() {}

func NewTheNewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheNewExpressionContext {
	var p = new(TheNewExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_theNewExpression

	return p
}

func (s *TheNewExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TheNewExpressionContext) MemberExpression() IMemberExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpressionContext)
}

func (s *TheNewExpressionContext) TheNewExpression() ITheNewExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheNewExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheNewExpressionContext)
}

func (s *TheNewExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheNewExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TheNewExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTheNewExpression(s)
	}
}

func (s *TheNewExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTheNewExpression(s)
	}
}

func (s *TheNewExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTheNewExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TheNewExpression() (localctx ITheNewExpressionContext) {
	localctx = NewTheNewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, ECMAScriptParserRULE_theNewExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2362)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2359)
			p.memberExpression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2360)
			p.Match(ECMAScriptParserT__14)
		}
		{
			p.SetState(2361)
			p.TheNewExpression()
		}

	}

	return localctx
}

// ITheNewExpression_YieldContext is an interface to support dynamic dispatch.
type ITheNewExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTheNewExpression_YieldContext differentiates from other interfaces.
	IsTheNewExpression_YieldContext()
}

type TheNewExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheNewExpression_YieldContext() *TheNewExpression_YieldContext {
	var p = new(TheNewExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_theNewExpression_Yield
	return p
}

func (*TheNewExpression_YieldContext) IsTheNewExpression_YieldContext() {}

func NewTheNewExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheNewExpression_YieldContext {
	var p = new(TheNewExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_theNewExpression_Yield

	return p
}

func (s *TheNewExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *TheNewExpression_YieldContext) MemberExpression_Yield() IMemberExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpression_YieldContext)
}

func (s *TheNewExpression_YieldContext) TheNewExpression_Yield() ITheNewExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheNewExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheNewExpression_YieldContext)
}

func (s *TheNewExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheNewExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TheNewExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTheNewExpression_Yield(s)
	}
}

func (s *TheNewExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTheNewExpression_Yield(s)
	}
}

func (s *TheNewExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTheNewExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TheNewExpression_Yield() (localctx ITheNewExpression_YieldContext) {
	localctx = NewTheNewExpression_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, ECMAScriptParserRULE_theNewExpression_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2367)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2364)
			p.memberExpression_Yield(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2365)
			p.Match(ECMAScriptParserT__14)
		}
		{
			p.SetState(2366)
			p.TheNewExpression_Yield()
		}

	}

	return localctx
}

// ITheNewExpression_AwaitContext is an interface to support dynamic dispatch.
type ITheNewExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTheNewExpression_AwaitContext differentiates from other interfaces.
	IsTheNewExpression_AwaitContext()
}

type TheNewExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheNewExpression_AwaitContext() *TheNewExpression_AwaitContext {
	var p = new(TheNewExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_theNewExpression_Await
	return p
}

func (*TheNewExpression_AwaitContext) IsTheNewExpression_AwaitContext() {}

func NewTheNewExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheNewExpression_AwaitContext {
	var p = new(TheNewExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_theNewExpression_Await

	return p
}

func (s *TheNewExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *TheNewExpression_AwaitContext) MemberExpression_Await() IMemberExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpression_AwaitContext)
}

func (s *TheNewExpression_AwaitContext) TheNewExpression_Await() ITheNewExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheNewExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheNewExpression_AwaitContext)
}

func (s *TheNewExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheNewExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TheNewExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTheNewExpression_Await(s)
	}
}

func (s *TheNewExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTheNewExpression_Await(s)
	}
}

func (s *TheNewExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTheNewExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TheNewExpression_Await() (localctx ITheNewExpression_AwaitContext) {
	localctx = NewTheNewExpression_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, ECMAScriptParserRULE_theNewExpression_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2372)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2369)
			p.memberExpression_Await(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2370)
			p.Match(ECMAScriptParserT__14)
		}
		{
			p.SetState(2371)
			p.TheNewExpression_Await()
		}

	}

	return localctx
}

// ITheNewExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type ITheNewExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTheNewExpression_Yield_AwaitContext differentiates from other interfaces.
	IsTheNewExpression_Yield_AwaitContext()
}

type TheNewExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheNewExpression_Yield_AwaitContext() *TheNewExpression_Yield_AwaitContext {
	var p = new(TheNewExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_theNewExpression_Yield_Await
	return p
}

func (*TheNewExpression_Yield_AwaitContext) IsTheNewExpression_Yield_AwaitContext() {}

func NewTheNewExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheNewExpression_Yield_AwaitContext {
	var p = new(TheNewExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_theNewExpression_Yield_Await

	return p
}

func (s *TheNewExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *TheNewExpression_Yield_AwaitContext) MemberExpression_Yield_Await() IMemberExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpression_Yield_AwaitContext)
}

func (s *TheNewExpression_Yield_AwaitContext) TheNewExpression_Yield_Await() ITheNewExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheNewExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheNewExpression_Yield_AwaitContext)
}

func (s *TheNewExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheNewExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TheNewExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTheNewExpression_Yield_Await(s)
	}
}

func (s *TheNewExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTheNewExpression_Yield_Await(s)
	}
}

func (s *TheNewExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTheNewExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TheNewExpression_Yield_Await() (localctx ITheNewExpression_Yield_AwaitContext) {
	localctx = NewTheNewExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, ECMAScriptParserRULE_theNewExpression_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2377)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2374)
			p.memberExpression_Yield_Await(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2375)
			p.Match(ECMAScriptParserT__14)
		}
		{
			p.SetState(2376)
			p.TheNewExpression_Yield_Await()
		}

	}

	return localctx
}

// ICallExpressionContext is an interface to support dynamic dispatch.
type ICallExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallExpressionContext differentiates from other interfaces.
	IsCallExpressionContext()
}

type CallExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallExpressionContext() *CallExpressionContext {
	var p = new(CallExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_callExpression
	return p
}

func (*CallExpressionContext) IsCallExpressionContext() {}

func NewCallExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallExpressionContext {
	var p = new(CallExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_callExpression

	return p
}

func (s *CallExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CallExpressionContext) CoverCallExpressionAndAsyncArrowHead() ICoverCallExpressionAndAsyncArrowHeadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHeadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHeadContext)
}

func (s *CallExpressionContext) SuperCall() ISuperCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuperCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuperCallContext)
}

func (s *CallExpressionContext) CallExpression() ICallExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpressionContext)
}

func (s *CallExpressionContext) Arguments() IArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *CallExpressionContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *CallExpressionContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *CallExpressionContext) TemplateLiteral_Tagged() ITemplateLiteral_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteral_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteral_TaggedContext)
}

func (s *CallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCallExpression(s)
	}
}

func (s *CallExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCallExpression(s)
	}
}

func (s *CallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CallExpression() (localctx ICallExpressionContext) {
	return p.callExpression(0)
}

func (p *ECMAScriptParser) callExpression(_p int) (localctx ICallExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCallExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICallExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 236
	p.EnterRecursionRule(localctx, 236, ECMAScriptParserRULE_callExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2382)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2380)
			p.CoverCallExpressionAndAsyncArrowHead()
		}

	case 2:
		{
			p.SetState(2381)
			p.SuperCall()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2398)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2396)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) {
			case 1:
				localctx = NewCallExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression)
				p.SetState(2384)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2385)
					p.Arguments()
				}

			case 2:
				localctx = NewCallExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression)
				p.SetState(2386)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2387)
					p.Match(ECMAScriptParserT__8)
				}
				{
					p.SetState(2388)
					p.expression_In(0)
				}
				{
					p.SetState(2389)
					p.Match(ECMAScriptParserT__9)
				}

			case 3:
				localctx = NewCallExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression)
				p.SetState(2391)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2392)
					p.Match(ECMAScriptParserT__13)
				}
				{
					p.SetState(2393)
					p.Match(ECMAScriptParserIdentifierName)
				}

			case 4:
				localctx = NewCallExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression)
				p.SetState(2394)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2395)
					p.TemplateLiteral_Tagged()
				}

			}

		}
		p.SetState(2400)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext())
	}

	return localctx
}

// ICallExpression_YieldContext is an interface to support dynamic dispatch.
type ICallExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallExpression_YieldContext differentiates from other interfaces.
	IsCallExpression_YieldContext()
}

type CallExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallExpression_YieldContext() *CallExpression_YieldContext {
	var p = new(CallExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_callExpression_Yield
	return p
}

func (*CallExpression_YieldContext) IsCallExpression_YieldContext() {}

func NewCallExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallExpression_YieldContext {
	var p = new(CallExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_callExpression_Yield

	return p
}

func (s *CallExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *CallExpression_YieldContext) CoverCallExpressionAndAsyncArrowHead_Yield() ICoverCallExpressionAndAsyncArrowHead_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHead_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHead_YieldContext)
}

func (s *CallExpression_YieldContext) SuperCall_Yield() ISuperCall_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuperCall_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuperCall_YieldContext)
}

func (s *CallExpression_YieldContext) CallExpression_Yield() ICallExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpression_YieldContext)
}

func (s *CallExpression_YieldContext) Arguments_Yield() IArguments_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_YieldContext)
}

func (s *CallExpression_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *CallExpression_YieldContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *CallExpression_YieldContext) TemplateLiteral_Yield_Tagged() ITemplateLiteral_Yield_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteral_Yield_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteral_Yield_TaggedContext)
}

func (s *CallExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCallExpression_Yield(s)
	}
}

func (s *CallExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCallExpression_Yield(s)
	}
}

func (s *CallExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCallExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CallExpression_Yield() (localctx ICallExpression_YieldContext) {
	return p.callExpression_Yield(0)
}

func (p *ECMAScriptParser) callExpression_Yield(_p int) (localctx ICallExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCallExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICallExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 238
	p.EnterRecursionRule(localctx, 238, ECMAScriptParserRULE_callExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2404)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2402)
			p.CoverCallExpressionAndAsyncArrowHead_Yield()
		}

	case 2:
		{
			p.SetState(2403)
			p.SuperCall_Yield()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2420)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2418)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext()) {
			case 1:
				localctx = NewCallExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Yield)
				p.SetState(2406)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2407)
					p.Arguments_Yield()
				}

			case 2:
				localctx = NewCallExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Yield)
				p.SetState(2408)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2409)
					p.Match(ECMAScriptParserT__8)
				}
				{
					p.SetState(2410)
					p.expression_In_Yield(0)
				}
				{
					p.SetState(2411)
					p.Match(ECMAScriptParserT__9)
				}

			case 3:
				localctx = NewCallExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Yield)
				p.SetState(2413)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2414)
					p.Match(ECMAScriptParserT__13)
				}
				{
					p.SetState(2415)
					p.Match(ECMAScriptParserIdentifierName)
				}

			case 4:
				localctx = NewCallExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Yield)
				p.SetState(2416)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2417)
					p.TemplateLiteral_Yield_Tagged()
				}

			}

		}
		p.SetState(2422)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext())
	}

	return localctx
}

// ICallExpression_AwaitContext is an interface to support dynamic dispatch.
type ICallExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallExpression_AwaitContext differentiates from other interfaces.
	IsCallExpression_AwaitContext()
}

type CallExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallExpression_AwaitContext() *CallExpression_AwaitContext {
	var p = new(CallExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_callExpression_Await
	return p
}

func (*CallExpression_AwaitContext) IsCallExpression_AwaitContext() {}

func NewCallExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallExpression_AwaitContext {
	var p = new(CallExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_callExpression_Await

	return p
}

func (s *CallExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CallExpression_AwaitContext) CoverCallExpressionAndAsyncArrowHead_Await() ICoverCallExpressionAndAsyncArrowHead_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHead_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHead_AwaitContext)
}

func (s *CallExpression_AwaitContext) SuperCall_Await() ISuperCall_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuperCall_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuperCall_AwaitContext)
}

func (s *CallExpression_AwaitContext) CallExpression_Await() ICallExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpression_AwaitContext)
}

func (s *CallExpression_AwaitContext) Arguments_Await() IArguments_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_AwaitContext)
}

func (s *CallExpression_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *CallExpression_AwaitContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *CallExpression_AwaitContext) TemplateLiteral_Await_Tagged() ITemplateLiteral_Await_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteral_Await_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteral_Await_TaggedContext)
}

func (s *CallExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCallExpression_Await(s)
	}
}

func (s *CallExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCallExpression_Await(s)
	}
}

func (s *CallExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCallExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CallExpression_Await() (localctx ICallExpression_AwaitContext) {
	return p.callExpression_Await(0)
}

func (p *ECMAScriptParser) callExpression_Await(_p int) (localctx ICallExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCallExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICallExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 240
	p.EnterRecursionRule(localctx, 240, ECMAScriptParserRULE_callExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2426)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2424)
			p.CoverCallExpressionAndAsyncArrowHead_Await()
		}

	case 2:
		{
			p.SetState(2425)
			p.SuperCall_Await()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2442)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2440)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) {
			case 1:
				localctx = NewCallExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Await)
				p.SetState(2428)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2429)
					p.Arguments_Await()
				}

			case 2:
				localctx = NewCallExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Await)
				p.SetState(2430)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2431)
					p.Match(ECMAScriptParserT__8)
				}
				{
					p.SetState(2432)
					p.expression_In_Await(0)
				}
				{
					p.SetState(2433)
					p.Match(ECMAScriptParserT__9)
				}

			case 3:
				localctx = NewCallExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Await)
				p.SetState(2435)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2436)
					p.Match(ECMAScriptParserT__13)
				}
				{
					p.SetState(2437)
					p.Match(ECMAScriptParserIdentifierName)
				}

			case 4:
				localctx = NewCallExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Await)
				p.SetState(2438)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2439)
					p.TemplateLiteral_Await_Tagged()
				}

			}

		}
		p.SetState(2444)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext())
	}

	return localctx
}

// ICallExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type ICallExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallExpression_Yield_AwaitContext differentiates from other interfaces.
	IsCallExpression_Yield_AwaitContext()
}

type CallExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallExpression_Yield_AwaitContext() *CallExpression_Yield_AwaitContext {
	var p = new(CallExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_callExpression_Yield_Await
	return p
}

func (*CallExpression_Yield_AwaitContext) IsCallExpression_Yield_AwaitContext() {}

func NewCallExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallExpression_Yield_AwaitContext {
	var p = new(CallExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_callExpression_Yield_Await

	return p
}

func (s *CallExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CallExpression_Yield_AwaitContext) CoverCallExpressionAndAsyncArrowHead_Yield_Await() ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext)
}

func (s *CallExpression_Yield_AwaitContext) SuperCall_Yield_Await() ISuperCall_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuperCall_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuperCall_Yield_AwaitContext)
}

func (s *CallExpression_Yield_AwaitContext) CallExpression_Yield_Await() ICallExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpression_Yield_AwaitContext)
}

func (s *CallExpression_Yield_AwaitContext) Arguments_Yield_Await() IArguments_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_Yield_AwaitContext)
}

func (s *CallExpression_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *CallExpression_Yield_AwaitContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *CallExpression_Yield_AwaitContext) TemplateLiteral_Yield_Await_Tagged() ITemplateLiteral_Yield_Await_TaggedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateLiteral_Yield_Await_TaggedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateLiteral_Yield_Await_TaggedContext)
}

func (s *CallExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCallExpression_Yield_Await(s)
	}
}

func (s *CallExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCallExpression_Yield_Await(s)
	}
}

func (s *CallExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCallExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CallExpression_Yield_Await() (localctx ICallExpression_Yield_AwaitContext) {
	return p.callExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) callExpression_Yield_Await(_p int) (localctx ICallExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCallExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICallExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 242
	p.EnterRecursionRule(localctx, 242, ECMAScriptParserRULE_callExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2448)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2446)
			p.CoverCallExpressionAndAsyncArrowHead_Yield_Await()
		}

	case 2:
		{
			p.SetState(2447)
			p.SuperCall_Yield_Await()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2464)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2462)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) {
			case 1:
				localctx = NewCallExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Yield_Await)
				p.SetState(2450)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2451)
					p.Arguments_Yield_Await()
				}

			case 2:
				localctx = NewCallExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Yield_Await)
				p.SetState(2452)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2453)
					p.Match(ECMAScriptParserT__8)
				}
				{
					p.SetState(2454)
					p.expression_In_Yield_Await(0)
				}
				{
					p.SetState(2455)
					p.Match(ECMAScriptParserT__9)
				}

			case 3:
				localctx = NewCallExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Yield_Await)
				p.SetState(2457)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2458)
					p.Match(ECMAScriptParserT__13)
				}
				{
					p.SetState(2459)
					p.Match(ECMAScriptParserIdentifierName)
				}

			case 4:
				localctx = NewCallExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_callExpression_Yield_Await)
				p.SetState(2460)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2461)
					p.TemplateLiteral_Yield_Await_Tagged()
				}

			}

		}
		p.SetState(2466)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext())
	}

	return localctx
}

// ISuperCallContext is an interface to support dynamic dispatch.
type ISuperCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuperCallContext differentiates from other interfaces.
	IsSuperCallContext()
}

type SuperCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperCallContext() *SuperCallContext {
	var p = new(SuperCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_superCall
	return p
}

func (*SuperCallContext) IsSuperCallContext() {}

func NewSuperCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperCallContext {
	var p = new(SuperCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_superCall

	return p
}

func (s *SuperCallContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperCallContext) Arguments() IArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *SuperCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSuperCall(s)
	}
}

func (s *SuperCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSuperCall(s)
	}
}

func (s *SuperCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSuperCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SuperCall() (localctx ISuperCallContext) {
	localctx = NewSuperCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, ECMAScriptParserRULE_superCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2467)
		p.Match(ECMAScriptParserT__15)
	}
	{
		p.SetState(2468)
		p.Arguments()
	}

	return localctx
}

// ISuperCall_YieldContext is an interface to support dynamic dispatch.
type ISuperCall_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuperCall_YieldContext differentiates from other interfaces.
	IsSuperCall_YieldContext()
}

type SuperCall_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperCall_YieldContext() *SuperCall_YieldContext {
	var p = new(SuperCall_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_superCall_Yield
	return p
}

func (*SuperCall_YieldContext) IsSuperCall_YieldContext() {}

func NewSuperCall_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperCall_YieldContext {
	var p = new(SuperCall_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_superCall_Yield

	return p
}

func (s *SuperCall_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperCall_YieldContext) Arguments_Yield() IArguments_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_YieldContext)
}

func (s *SuperCall_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperCall_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperCall_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSuperCall_Yield(s)
	}
}

func (s *SuperCall_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSuperCall_Yield(s)
	}
}

func (s *SuperCall_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSuperCall_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SuperCall_Yield() (localctx ISuperCall_YieldContext) {
	localctx = NewSuperCall_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, ECMAScriptParserRULE_superCall_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2470)
		p.Match(ECMAScriptParserT__15)
	}
	{
		p.SetState(2471)
		p.Arguments_Yield()
	}

	return localctx
}

// ISuperCall_AwaitContext is an interface to support dynamic dispatch.
type ISuperCall_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuperCall_AwaitContext differentiates from other interfaces.
	IsSuperCall_AwaitContext()
}

type SuperCall_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperCall_AwaitContext() *SuperCall_AwaitContext {
	var p = new(SuperCall_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_superCall_Await
	return p
}

func (*SuperCall_AwaitContext) IsSuperCall_AwaitContext() {}

func NewSuperCall_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperCall_AwaitContext {
	var p = new(SuperCall_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_superCall_Await

	return p
}

func (s *SuperCall_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperCall_AwaitContext) Arguments_Await() IArguments_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_AwaitContext)
}

func (s *SuperCall_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperCall_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperCall_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSuperCall_Await(s)
	}
}

func (s *SuperCall_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSuperCall_Await(s)
	}
}

func (s *SuperCall_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSuperCall_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SuperCall_Await() (localctx ISuperCall_AwaitContext) {
	localctx = NewSuperCall_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, ECMAScriptParserRULE_superCall_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2473)
		p.Match(ECMAScriptParserT__15)
	}
	{
		p.SetState(2474)
		p.Arguments_Await()
	}

	return localctx
}

// ISuperCall_Yield_AwaitContext is an interface to support dynamic dispatch.
type ISuperCall_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuperCall_Yield_AwaitContext differentiates from other interfaces.
	IsSuperCall_Yield_AwaitContext()
}

type SuperCall_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperCall_Yield_AwaitContext() *SuperCall_Yield_AwaitContext {
	var p = new(SuperCall_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_superCall_Yield_Await
	return p
}

func (*SuperCall_Yield_AwaitContext) IsSuperCall_Yield_AwaitContext() {}

func NewSuperCall_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperCall_Yield_AwaitContext {
	var p = new(SuperCall_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_superCall_Yield_Await

	return p
}

func (s *SuperCall_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperCall_Yield_AwaitContext) Arguments_Yield_Await() IArguments_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_Yield_AwaitContext)
}

func (s *SuperCall_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperCall_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperCall_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSuperCall_Yield_Await(s)
	}
}

func (s *SuperCall_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSuperCall_Yield_Await(s)
	}
}

func (s *SuperCall_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSuperCall_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SuperCall_Yield_Await() (localctx ISuperCall_Yield_AwaitContext) {
	localctx = NewSuperCall_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, ECMAScriptParserRULE_superCall_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2476)
		p.Match(ECMAScriptParserT__15)
	}
	{
		p.SetState(2477)
		p.Arguments_Yield_Await()
	}

	return localctx
}

// IArgumentsContext is an interface to support dynamic dispatch.
type IArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentsContext differentiates from other interfaces.
	IsArgumentsContext()
}

type ArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentsContext() *ArgumentsContext {
	var p = new(ArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arguments
	return p
}

func (*ArgumentsContext) IsArgumentsContext() {}

func NewArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentsContext {
	var p = new(ArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arguments

	return p
}

func (s *ArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentsContext) ArgumentList() IArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentListContext)
}

func (s *ArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArguments(s)
	}
}

func (s *ArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArguments(s)
	}
}

func (s *ArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Arguments() (localctx IArgumentsContext) {
	localctx = NewArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, ECMAScriptParserRULE_arguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2487)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2479)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(2480)
			p.Match(ECMAScriptParserT__5)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2481)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(2483)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__6)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(2482)
				p.argumentList(0)
			}

		}
		{
			p.SetState(2485)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(2486)
			p.Match(ECMAScriptParserT__5)
		}

	}

	return localctx
}

// IArguments_YieldContext is an interface to support dynamic dispatch.
type IArguments_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArguments_YieldContext differentiates from other interfaces.
	IsArguments_YieldContext()
}

type Arguments_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArguments_YieldContext() *Arguments_YieldContext {
	var p = new(Arguments_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arguments_Yield
	return p
}

func (*Arguments_YieldContext) IsArguments_YieldContext() {}

func NewArguments_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arguments_YieldContext {
	var p = new(Arguments_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arguments_Yield

	return p
}

func (s *Arguments_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Arguments_YieldContext) ArgumentList_Yield() IArgumentList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentList_YieldContext)
}

func (s *Arguments_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arguments_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Arguments_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArguments_Yield(s)
	}
}

func (s *Arguments_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArguments_Yield(s)
	}
}

func (s *Arguments_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArguments_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Arguments_Yield() (localctx IArguments_YieldContext) {
	localctx = NewArguments_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, ECMAScriptParserRULE_arguments_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2497)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2489)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(2490)
			p.Match(ECMAScriptParserT__5)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2491)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(2493)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__6)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(2492)
				p.argumentList_Yield(0)
			}

		}
		{
			p.SetState(2495)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(2496)
			p.Match(ECMAScriptParserT__5)
		}

	}

	return localctx
}

// IArguments_AwaitContext is an interface to support dynamic dispatch.
type IArguments_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArguments_AwaitContext differentiates from other interfaces.
	IsArguments_AwaitContext()
}

type Arguments_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArguments_AwaitContext() *Arguments_AwaitContext {
	var p = new(Arguments_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arguments_Await
	return p
}

func (*Arguments_AwaitContext) IsArguments_AwaitContext() {}

func NewArguments_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arguments_AwaitContext {
	var p = new(Arguments_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arguments_Await

	return p
}

func (s *Arguments_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Arguments_AwaitContext) ArgumentList_Await() IArgumentList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentList_AwaitContext)
}

func (s *Arguments_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arguments_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Arguments_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArguments_Await(s)
	}
}

func (s *Arguments_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArguments_Await(s)
	}
}

func (s *Arguments_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArguments_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Arguments_Await() (localctx IArguments_AwaitContext) {
	localctx = NewArguments_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, ECMAScriptParserRULE_arguments_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2507)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2499)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(2500)
			p.Match(ECMAScriptParserT__5)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2501)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(2503)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__6)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(2502)
				p.argumentList_Await(0)
			}

		}
		{
			p.SetState(2505)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(2506)
			p.Match(ECMAScriptParserT__5)
		}

	}

	return localctx
}

// IArguments_Yield_AwaitContext is an interface to support dynamic dispatch.
type IArguments_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArguments_Yield_AwaitContext differentiates from other interfaces.
	IsArguments_Yield_AwaitContext()
}

type Arguments_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArguments_Yield_AwaitContext() *Arguments_Yield_AwaitContext {
	var p = new(Arguments_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arguments_Yield_Await
	return p
}

func (*Arguments_Yield_AwaitContext) IsArguments_Yield_AwaitContext() {}

func NewArguments_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arguments_Yield_AwaitContext {
	var p = new(Arguments_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arguments_Yield_Await

	return p
}

func (s *Arguments_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Arguments_Yield_AwaitContext) ArgumentList_Yield_Await() IArgumentList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentList_Yield_AwaitContext)
}

func (s *Arguments_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arguments_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Arguments_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArguments_Yield_Await(s)
	}
}

func (s *Arguments_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArguments_Yield_Await(s)
	}
}

func (s *Arguments_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArguments_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Arguments_Yield_Await() (localctx IArguments_Yield_AwaitContext) {
	localctx = NewArguments_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, ECMAScriptParserRULE_arguments_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2517)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2509)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(2510)
			p.Match(ECMAScriptParserT__5)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2511)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(2513)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__6)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(2512)
				p.argumentList_Yield_Await(0)
			}

		}
		{
			p.SetState(2515)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(2516)
			p.Match(ECMAScriptParserT__5)
		}

	}

	return localctx
}

// IArgumentListContext is an interface to support dynamic dispatch.
type IArgumentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentListContext differentiates from other interfaces.
	IsArgumentListContext()
}

type ArgumentListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentListContext() *ArgumentListContext {
	var p = new(ArgumentListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_argumentList
	return p
}

func (*ArgumentListContext) IsArgumentListContext() {}

func NewArgumentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentListContext {
	var p = new(ArgumentListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_argumentList

	return p
}

func (s *ArgumentListContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentListContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *ArgumentListContext) ArgumentList() IArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentListContext)
}

func (s *ArgumentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArgumentList(s)
	}
}

func (s *ArgumentListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArgumentList(s)
	}
}

func (s *ArgumentListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArgumentList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArgumentList() (localctx IArgumentListContext) {
	return p.argumentList(0)
}

func (p *ECMAScriptParser) argumentList(_p int) (localctx IArgumentListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewArgumentListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IArgumentListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 260
	p.EnterRecursionRule(localctx, 260, ECMAScriptParserRULE_argumentList, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2521)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__6 {
		{
			p.SetState(2520)
			p.Match(ECMAScriptParserT__6)
		}

	}
	{
		p.SetState(2523)
		p.AssignmentExpression_In()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2533)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewArgumentListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_argumentList)
			p.SetState(2525)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2526)
				p.Match(ECMAScriptParserT__7)
			}
			p.SetState(2528)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ECMAScriptParserT__6 {
				{
					p.SetState(2527)
					p.Match(ECMAScriptParserT__6)
				}

			}
			{
				p.SetState(2530)
				p.AssignmentExpression_In()
			}

		}
		p.SetState(2535)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext())
	}

	return localctx
}

// IArgumentList_YieldContext is an interface to support dynamic dispatch.
type IArgumentList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentList_YieldContext differentiates from other interfaces.
	IsArgumentList_YieldContext()
}

type ArgumentList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentList_YieldContext() *ArgumentList_YieldContext {
	var p = new(ArgumentList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_argumentList_Yield
	return p
}

func (*ArgumentList_YieldContext) IsArgumentList_YieldContext() {}

func NewArgumentList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentList_YieldContext {
	var p = new(ArgumentList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_argumentList_Yield

	return p
}

func (s *ArgumentList_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentList_YieldContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *ArgumentList_YieldContext) ArgumentList_Yield() IArgumentList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentList_YieldContext)
}

func (s *ArgumentList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArgumentList_Yield(s)
	}
}

func (s *ArgumentList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArgumentList_Yield(s)
	}
}

func (s *ArgumentList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArgumentList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArgumentList_Yield() (localctx IArgumentList_YieldContext) {
	return p.argumentList_Yield(0)
}

func (p *ECMAScriptParser) argumentList_Yield(_p int) (localctx IArgumentList_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewArgumentList_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IArgumentList_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 262
	p.EnterRecursionRule(localctx, 262, ECMAScriptParserRULE_argumentList_Yield, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2538)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__6 {
		{
			p.SetState(2537)
			p.Match(ECMAScriptParserT__6)
		}

	}
	{
		p.SetState(2540)
		p.AssignmentExpression_In_Yield()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2550)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewArgumentList_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_argumentList_Yield)
			p.SetState(2542)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2543)
				p.Match(ECMAScriptParserT__7)
			}
			p.SetState(2545)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ECMAScriptParserT__6 {
				{
					p.SetState(2544)
					p.Match(ECMAScriptParserT__6)
				}

			}
			{
				p.SetState(2547)
				p.AssignmentExpression_In_Yield()
			}

		}
		p.SetState(2552)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())
	}

	return localctx
}

// IArgumentList_AwaitContext is an interface to support dynamic dispatch.
type IArgumentList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentList_AwaitContext differentiates from other interfaces.
	IsArgumentList_AwaitContext()
}

type ArgumentList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentList_AwaitContext() *ArgumentList_AwaitContext {
	var p = new(ArgumentList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_argumentList_Await
	return p
}

func (*ArgumentList_AwaitContext) IsArgumentList_AwaitContext() {}

func NewArgumentList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentList_AwaitContext {
	var p = new(ArgumentList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_argumentList_Await

	return p
}

func (s *ArgumentList_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentList_AwaitContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *ArgumentList_AwaitContext) ArgumentList_Await() IArgumentList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentList_AwaitContext)
}

func (s *ArgumentList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArgumentList_Await(s)
	}
}

func (s *ArgumentList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArgumentList_Await(s)
	}
}

func (s *ArgumentList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArgumentList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArgumentList_Await() (localctx IArgumentList_AwaitContext) {
	return p.argumentList_Await(0)
}

func (p *ECMAScriptParser) argumentList_Await(_p int) (localctx IArgumentList_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewArgumentList_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IArgumentList_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 264
	p.EnterRecursionRule(localctx, 264, ECMAScriptParserRULE_argumentList_Await, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2555)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__6 {
		{
			p.SetState(2554)
			p.Match(ECMAScriptParserT__6)
		}

	}
	{
		p.SetState(2557)
		p.AssignmentExpression_In_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2567)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewArgumentList_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_argumentList_Await)
			p.SetState(2559)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2560)
				p.Match(ECMAScriptParserT__7)
			}
			p.SetState(2562)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ECMAScriptParserT__6 {
				{
					p.SetState(2561)
					p.Match(ECMAScriptParserT__6)
				}

			}
			{
				p.SetState(2564)
				p.AssignmentExpression_In_Await()
			}

		}
		p.SetState(2569)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext())
	}

	return localctx
}

// IArgumentList_Yield_AwaitContext is an interface to support dynamic dispatch.
type IArgumentList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentList_Yield_AwaitContext differentiates from other interfaces.
	IsArgumentList_Yield_AwaitContext()
}

type ArgumentList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentList_Yield_AwaitContext() *ArgumentList_Yield_AwaitContext {
	var p = new(ArgumentList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_argumentList_Yield_Await
	return p
}

func (*ArgumentList_Yield_AwaitContext) IsArgumentList_Yield_AwaitContext() {}

func NewArgumentList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentList_Yield_AwaitContext {
	var p = new(ArgumentList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_argumentList_Yield_Await

	return p
}

func (s *ArgumentList_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentList_Yield_AwaitContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *ArgumentList_Yield_AwaitContext) ArgumentList_Yield_Await() IArgumentList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentList_Yield_AwaitContext)
}

func (s *ArgumentList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArgumentList_Yield_Await(s)
	}
}

func (s *ArgumentList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArgumentList_Yield_Await(s)
	}
}

func (s *ArgumentList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArgumentList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArgumentList_Yield_Await() (localctx IArgumentList_Yield_AwaitContext) {
	return p.argumentList_Yield_Await(0)
}

func (p *ECMAScriptParser) argumentList_Yield_Await(_p int) (localctx IArgumentList_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewArgumentList_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IArgumentList_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 266
	p.EnterRecursionRule(localctx, 266, ECMAScriptParserRULE_argumentList_Yield_Await, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2572)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__6 {
		{
			p.SetState(2571)
			p.Match(ECMAScriptParserT__6)
		}

	}
	{
		p.SetState(2574)
		p.AssignmentExpression_In_Yield_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2584)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewArgumentList_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_argumentList_Yield_Await)
			p.SetState(2576)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2577)
				p.Match(ECMAScriptParserT__7)
			}
			p.SetState(2579)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == ECMAScriptParserT__6 {
				{
					p.SetState(2578)
					p.Match(ECMAScriptParserT__6)
				}

			}
			{
				p.SetState(2581)
				p.AssignmentExpression_In_Yield_Await()
			}

		}
		p.SetState(2586)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext())
	}

	return localctx
}

// ILeftHandSideExpressionContext is an interface to support dynamic dispatch.
type ILeftHandSideExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftHandSideExpressionContext differentiates from other interfaces.
	IsLeftHandSideExpressionContext()
}

type LeftHandSideExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftHandSideExpressionContext() *LeftHandSideExpressionContext {
	var p = new(LeftHandSideExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_leftHandSideExpression
	return p
}

func (*LeftHandSideExpressionContext) IsLeftHandSideExpressionContext() {}

func NewLeftHandSideExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftHandSideExpressionContext {
	var p = new(LeftHandSideExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_leftHandSideExpression

	return p
}

func (s *LeftHandSideExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftHandSideExpressionContext) TheNewExpression() ITheNewExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheNewExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheNewExpressionContext)
}

func (s *LeftHandSideExpressionContext) CallExpression() ICallExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpressionContext)
}

func (s *LeftHandSideExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftHandSideExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftHandSideExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLeftHandSideExpression(s)
	}
}

func (s *LeftHandSideExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLeftHandSideExpression(s)
	}
}

func (s *LeftHandSideExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLeftHandSideExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LeftHandSideExpression() (localctx ILeftHandSideExpressionContext) {
	localctx = NewLeftHandSideExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, ECMAScriptParserRULE_leftHandSideExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2589)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2587)
			p.TheNewExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2588)
			p.callExpression(0)
		}

	}

	return localctx
}

// ILeftHandSideExpression_YieldContext is an interface to support dynamic dispatch.
type ILeftHandSideExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftHandSideExpression_YieldContext differentiates from other interfaces.
	IsLeftHandSideExpression_YieldContext()
}

type LeftHandSideExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftHandSideExpression_YieldContext() *LeftHandSideExpression_YieldContext {
	var p = new(LeftHandSideExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_leftHandSideExpression_Yield
	return p
}

func (*LeftHandSideExpression_YieldContext) IsLeftHandSideExpression_YieldContext() {}

func NewLeftHandSideExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftHandSideExpression_YieldContext {
	var p = new(LeftHandSideExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_leftHandSideExpression_Yield

	return p
}

func (s *LeftHandSideExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftHandSideExpression_YieldContext) TheNewExpression_Yield() ITheNewExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheNewExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheNewExpression_YieldContext)
}

func (s *LeftHandSideExpression_YieldContext) CallExpression_Yield() ICallExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpression_YieldContext)
}

func (s *LeftHandSideExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftHandSideExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftHandSideExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLeftHandSideExpression_Yield(s)
	}
}

func (s *LeftHandSideExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLeftHandSideExpression_Yield(s)
	}
}

func (s *LeftHandSideExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLeftHandSideExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LeftHandSideExpression_Yield() (localctx ILeftHandSideExpression_YieldContext) {
	localctx = NewLeftHandSideExpression_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, ECMAScriptParserRULE_leftHandSideExpression_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2593)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2591)
			p.TheNewExpression_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2592)
			p.callExpression_Yield(0)
		}

	}

	return localctx
}

// ILeftHandSideExpression_AwaitContext is an interface to support dynamic dispatch.
type ILeftHandSideExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftHandSideExpression_AwaitContext differentiates from other interfaces.
	IsLeftHandSideExpression_AwaitContext()
}

type LeftHandSideExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftHandSideExpression_AwaitContext() *LeftHandSideExpression_AwaitContext {
	var p = new(LeftHandSideExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_leftHandSideExpression_Await
	return p
}

func (*LeftHandSideExpression_AwaitContext) IsLeftHandSideExpression_AwaitContext() {}

func NewLeftHandSideExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftHandSideExpression_AwaitContext {
	var p = new(LeftHandSideExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_leftHandSideExpression_Await

	return p
}

func (s *LeftHandSideExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftHandSideExpression_AwaitContext) TheNewExpression_Await() ITheNewExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheNewExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheNewExpression_AwaitContext)
}

func (s *LeftHandSideExpression_AwaitContext) CallExpression_Await() ICallExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpression_AwaitContext)
}

func (s *LeftHandSideExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftHandSideExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftHandSideExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLeftHandSideExpression_Await(s)
	}
}

func (s *LeftHandSideExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLeftHandSideExpression_Await(s)
	}
}

func (s *LeftHandSideExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLeftHandSideExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LeftHandSideExpression_Await() (localctx ILeftHandSideExpression_AwaitContext) {
	localctx = NewLeftHandSideExpression_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, ECMAScriptParserRULE_leftHandSideExpression_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2597)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2595)
			p.TheNewExpression_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2596)
			p.callExpression_Await(0)
		}

	}

	return localctx
}

// ILeftHandSideExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILeftHandSideExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeftHandSideExpression_Yield_AwaitContext differentiates from other interfaces.
	IsLeftHandSideExpression_Yield_AwaitContext()
}

type LeftHandSideExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeftHandSideExpression_Yield_AwaitContext() *LeftHandSideExpression_Yield_AwaitContext {
	var p = new(LeftHandSideExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_leftHandSideExpression_Yield_Await
	return p
}

func (*LeftHandSideExpression_Yield_AwaitContext) IsLeftHandSideExpression_Yield_AwaitContext() {}

func NewLeftHandSideExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeftHandSideExpression_Yield_AwaitContext {
	var p = new(LeftHandSideExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_leftHandSideExpression_Yield_Await

	return p
}

func (s *LeftHandSideExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LeftHandSideExpression_Yield_AwaitContext) TheNewExpression_Yield_Await() ITheNewExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheNewExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheNewExpression_Yield_AwaitContext)
}

func (s *LeftHandSideExpression_Yield_AwaitContext) CallExpression_Yield_Await() ICallExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpression_Yield_AwaitContext)
}

func (s *LeftHandSideExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeftHandSideExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeftHandSideExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLeftHandSideExpression_Yield_Await(s)
	}
}

func (s *LeftHandSideExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLeftHandSideExpression_Yield_Await(s)
	}
}

func (s *LeftHandSideExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLeftHandSideExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LeftHandSideExpression_Yield_Await() (localctx ILeftHandSideExpression_Yield_AwaitContext) {
	localctx = NewLeftHandSideExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, ECMAScriptParserRULE_leftHandSideExpression_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2601)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2599)
			p.TheNewExpression_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2600)
			p.callExpression_Yield_Await(0)
		}

	}

	return localctx
}

// IUpdateExpressionContext is an interface to support dynamic dispatch.
type IUpdateExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateExpressionContext differentiates from other interfaces.
	IsUpdateExpressionContext()
}

type UpdateExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateExpressionContext() *UpdateExpressionContext {
	var p = new(UpdateExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_updateExpression
	return p
}

func (*UpdateExpressionContext) IsUpdateExpressionContext() {}

func NewUpdateExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateExpressionContext {
	var p = new(UpdateExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_updateExpression

	return p
}

func (s *UpdateExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateExpressionContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *UpdateExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *UpdateExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUpdateExpression(s)
	}
}

func (s *UpdateExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUpdateExpression(s)
	}
}

func (s *UpdateExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUpdateExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UpdateExpression() (localctx IUpdateExpressionContext) {
	localctx = NewUpdateExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, ECMAScriptParserRULE_updateExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2614)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2603)
			p.LeftHandSideExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2604)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(2605)
			p.Match(ECMAScriptParserT__17)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2607)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(2608)
			p.Match(ECMAScriptParserT__18)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2610)
			p.Match(ECMAScriptParserT__17)
		}
		{
			p.SetState(2611)
			p.UnaryExpression()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2612)
			p.Match(ECMAScriptParserT__18)
		}
		{
			p.SetState(2613)
			p.UnaryExpression()
		}

	}

	return localctx
}

// IUpdateExpression_YieldContext is an interface to support dynamic dispatch.
type IUpdateExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateExpression_YieldContext differentiates from other interfaces.
	IsUpdateExpression_YieldContext()
}

type UpdateExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateExpression_YieldContext() *UpdateExpression_YieldContext {
	var p = new(UpdateExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_updateExpression_Yield
	return p
}

func (*UpdateExpression_YieldContext) IsUpdateExpression_YieldContext() {}

func NewUpdateExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateExpression_YieldContext {
	var p = new(UpdateExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_updateExpression_Yield

	return p
}

func (s *UpdateExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateExpression_YieldContext) LeftHandSideExpression_Yield() ILeftHandSideExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_YieldContext)
}

func (s *UpdateExpression_YieldContext) UnaryExpression_Yield() IUnaryExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpression_YieldContext)
}

func (s *UpdateExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUpdateExpression_Yield(s)
	}
}

func (s *UpdateExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUpdateExpression_Yield(s)
	}
}

func (s *UpdateExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUpdateExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UpdateExpression_Yield() (localctx IUpdateExpression_YieldContext) {
	localctx = NewUpdateExpression_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, ECMAScriptParserRULE_updateExpression_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2627)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2616)
			p.LeftHandSideExpression_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2617)
			p.LeftHandSideExpression_Yield()
		}
		{
			p.SetState(2618)
			p.Match(ECMAScriptParserT__17)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2620)
			p.LeftHandSideExpression_Yield()
		}
		{
			p.SetState(2621)
			p.Match(ECMAScriptParserT__18)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2623)
			p.Match(ECMAScriptParserT__17)
		}
		{
			p.SetState(2624)
			p.UnaryExpression_Yield()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2625)
			p.Match(ECMAScriptParserT__18)
		}
		{
			p.SetState(2626)
			p.UnaryExpression_Yield()
		}

	}

	return localctx
}

// IUpdateExpression_AwaitContext is an interface to support dynamic dispatch.
type IUpdateExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateExpression_AwaitContext differentiates from other interfaces.
	IsUpdateExpression_AwaitContext()
}

type UpdateExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateExpression_AwaitContext() *UpdateExpression_AwaitContext {
	var p = new(UpdateExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_updateExpression_Await
	return p
}

func (*UpdateExpression_AwaitContext) IsUpdateExpression_AwaitContext() {}

func NewUpdateExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateExpression_AwaitContext {
	var p = new(UpdateExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_updateExpression_Await

	return p
}

func (s *UpdateExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateExpression_AwaitContext) LeftHandSideExpression_Await() ILeftHandSideExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_AwaitContext)
}

func (s *UpdateExpression_AwaitContext) UnaryExpression_Await() IUnaryExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpression_AwaitContext)
}

func (s *UpdateExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUpdateExpression_Await(s)
	}
}

func (s *UpdateExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUpdateExpression_Await(s)
	}
}

func (s *UpdateExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUpdateExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UpdateExpression_Await() (localctx IUpdateExpression_AwaitContext) {
	localctx = NewUpdateExpression_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, ECMAScriptParserRULE_updateExpression_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2640)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2629)
			p.LeftHandSideExpression_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2630)
			p.LeftHandSideExpression_Await()
		}
		{
			p.SetState(2631)
			p.Match(ECMAScriptParserT__17)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2633)
			p.LeftHandSideExpression_Await()
		}
		{
			p.SetState(2634)
			p.Match(ECMAScriptParserT__18)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2636)
			p.Match(ECMAScriptParserT__17)
		}
		{
			p.SetState(2637)
			p.UnaryExpression_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2638)
			p.Match(ECMAScriptParserT__18)
		}
		{
			p.SetState(2639)
			p.UnaryExpression_Await()
		}

	}

	return localctx
}

// IUpdateExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IUpdateExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateExpression_Yield_AwaitContext differentiates from other interfaces.
	IsUpdateExpression_Yield_AwaitContext()
}

type UpdateExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateExpression_Yield_AwaitContext() *UpdateExpression_Yield_AwaitContext {
	var p = new(UpdateExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_updateExpression_Yield_Await
	return p
}

func (*UpdateExpression_Yield_AwaitContext) IsUpdateExpression_Yield_AwaitContext() {}

func NewUpdateExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateExpression_Yield_AwaitContext {
	var p = new(UpdateExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_updateExpression_Yield_Await

	return p
}

func (s *UpdateExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateExpression_Yield_AwaitContext) LeftHandSideExpression_Yield_Await() ILeftHandSideExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_Yield_AwaitContext)
}

func (s *UpdateExpression_Yield_AwaitContext) UnaryExpression_Yield_Await() IUnaryExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpression_Yield_AwaitContext)
}

func (s *UpdateExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUpdateExpression_Yield_Await(s)
	}
}

func (s *UpdateExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUpdateExpression_Yield_Await(s)
	}
}

func (s *UpdateExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUpdateExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UpdateExpression_Yield_Await() (localctx IUpdateExpression_Yield_AwaitContext) {
	localctx = NewUpdateExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, ECMAScriptParserRULE_updateExpression_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2653)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 151, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2642)
			p.LeftHandSideExpression_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2643)
			p.LeftHandSideExpression_Yield_Await()
		}
		{
			p.SetState(2644)
			p.Match(ECMAScriptParserT__17)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2646)
			p.LeftHandSideExpression_Yield_Await()
		}
		{
			p.SetState(2647)
			p.Match(ECMAScriptParserT__18)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2649)
			p.Match(ECMAScriptParserT__17)
		}
		{
			p.SetState(2650)
			p.UnaryExpression_Yield_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2651)
			p.Match(ECMAScriptParserT__18)
		}
		{
			p.SetState(2652)
			p.UnaryExpression_Yield_Await()
		}

	}

	return localctx
}

// IUnaryExpressionContext is an interface to support dynamic dispatch.
type IUnaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryExpressionContext differentiates from other interfaces.
	IsUnaryExpressionContext()
}

type UnaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryExpressionContext() *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_unaryExpression
	return p
}

func (*UnaryExpressionContext) IsUnaryExpressionContext() {}

func NewUnaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_unaryExpression

	return p
}

func (s *UnaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryExpressionContext) UpdateExpression() IUpdateExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateExpressionContext)
}

func (s *UnaryExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *UnaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUnaryExpression(s)
	}
}

func (s *UnaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUnaryExpression(s)
	}
}

func (s *UnaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUnaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UnaryExpression() (localctx IUnaryExpressionContext) {
	localctx = NewUnaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, ECMAScriptParserRULE_unaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2670)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__0, ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserT__3, ECMAScriptParserT__4, ECMAScriptParserT__8, ECMAScriptParserT__10, ECMAScriptParserT__14, ECMAScriptParserT__15, ECMAScriptParserT__17, ECMAScriptParserT__18, ECMAScriptParserT__80, ECMAScriptParserT__85, ECMAScriptParserT__86, ECMAScriptParserNullLiteral, ECMAScriptParserBooleanLiteral, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral, ECMAScriptParserNoSubstitutionTemplate, ECMAScriptParserTemplateHead, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2655)
			p.UpdateExpression()
		}

	case ECMAScriptParserT__19:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2656)
			p.Match(ECMAScriptParserT__19)
		}
		{
			p.SetState(2657)
			p.UnaryExpression()
		}

	case ECMAScriptParserT__20:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2658)
			p.Match(ECMAScriptParserT__20)
		}
		{
			p.SetState(2659)
			p.UnaryExpression()
		}

	case ECMAScriptParserT__21:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2660)
			p.Match(ECMAScriptParserT__21)
		}
		{
			p.SetState(2661)
			p.UnaryExpression()
		}

	case ECMAScriptParserT__22:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2662)
			p.Match(ECMAScriptParserT__22)
		}
		{
			p.SetState(2663)
			p.UnaryExpression()
		}

	case ECMAScriptParserT__23:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2664)
			p.Match(ECMAScriptParserT__23)
		}
		{
			p.SetState(2665)
			p.UnaryExpression()
		}

	case ECMAScriptParserT__24:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2666)
			p.Match(ECMAScriptParserT__24)
		}
		{
			p.SetState(2667)
			p.UnaryExpression()
		}

	case ECMAScriptParserT__25:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2668)
			p.Match(ECMAScriptParserT__25)
		}
		{
			p.SetState(2669)
			p.UnaryExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUnaryExpression_YieldContext is an interface to support dynamic dispatch.
type IUnaryExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryExpression_YieldContext differentiates from other interfaces.
	IsUnaryExpression_YieldContext()
}

type UnaryExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryExpression_YieldContext() *UnaryExpression_YieldContext {
	var p = new(UnaryExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_unaryExpression_Yield
	return p
}

func (*UnaryExpression_YieldContext) IsUnaryExpression_YieldContext() {}

func NewUnaryExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryExpression_YieldContext {
	var p = new(UnaryExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_unaryExpression_Yield

	return p
}

func (s *UnaryExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryExpression_YieldContext) UpdateExpression_Yield() IUpdateExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateExpression_YieldContext)
}

func (s *UnaryExpression_YieldContext) UnaryExpression_Yield() IUnaryExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpression_YieldContext)
}

func (s *UnaryExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUnaryExpression_Yield(s)
	}
}

func (s *UnaryExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUnaryExpression_Yield(s)
	}
}

func (s *UnaryExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUnaryExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UnaryExpression_Yield() (localctx IUnaryExpression_YieldContext) {
	localctx = NewUnaryExpression_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, ECMAScriptParserRULE_unaryExpression_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2687)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__0, ECMAScriptParserT__2, ECMAScriptParserT__3, ECMAScriptParserT__4, ECMAScriptParserT__8, ECMAScriptParserT__10, ECMAScriptParserT__14, ECMAScriptParserT__15, ECMAScriptParserT__17, ECMAScriptParserT__18, ECMAScriptParserT__80, ECMAScriptParserT__85, ECMAScriptParserT__86, ECMAScriptParserNullLiteral, ECMAScriptParserBooleanLiteral, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral, ECMAScriptParserNoSubstitutionTemplate, ECMAScriptParserTemplateHead, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2672)
			p.UpdateExpression_Yield()
		}

	case ECMAScriptParserT__19:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2673)
			p.Match(ECMAScriptParserT__19)
		}
		{
			p.SetState(2674)
			p.UnaryExpression_Yield()
		}

	case ECMAScriptParserT__20:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2675)
			p.Match(ECMAScriptParserT__20)
		}
		{
			p.SetState(2676)
			p.UnaryExpression_Yield()
		}

	case ECMAScriptParserT__21:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2677)
			p.Match(ECMAScriptParserT__21)
		}
		{
			p.SetState(2678)
			p.UnaryExpression_Yield()
		}

	case ECMAScriptParserT__22:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2679)
			p.Match(ECMAScriptParserT__22)
		}
		{
			p.SetState(2680)
			p.UnaryExpression_Yield()
		}

	case ECMAScriptParserT__23:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2681)
			p.Match(ECMAScriptParserT__23)
		}
		{
			p.SetState(2682)
			p.UnaryExpression_Yield()
		}

	case ECMAScriptParserT__24:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2683)
			p.Match(ECMAScriptParserT__24)
		}
		{
			p.SetState(2684)
			p.UnaryExpression_Yield()
		}

	case ECMAScriptParserT__25:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2685)
			p.Match(ECMAScriptParserT__25)
		}
		{
			p.SetState(2686)
			p.UnaryExpression_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUnaryExpression_AwaitContext is an interface to support dynamic dispatch.
type IUnaryExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryExpression_AwaitContext differentiates from other interfaces.
	IsUnaryExpression_AwaitContext()
}

type UnaryExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryExpression_AwaitContext() *UnaryExpression_AwaitContext {
	var p = new(UnaryExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_unaryExpression_Await
	return p
}

func (*UnaryExpression_AwaitContext) IsUnaryExpression_AwaitContext() {}

func NewUnaryExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryExpression_AwaitContext {
	var p = new(UnaryExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_unaryExpression_Await

	return p
}

func (s *UnaryExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryExpression_AwaitContext) UpdateExpression_Await() IUpdateExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateExpression_AwaitContext)
}

func (s *UnaryExpression_AwaitContext) UnaryExpression_Await() IUnaryExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpression_AwaitContext)
}

func (s *UnaryExpression_AwaitContext) AwaitExpression() IAwaitExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAwaitExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAwaitExpressionContext)
}

func (s *UnaryExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUnaryExpression_Await(s)
	}
}

func (s *UnaryExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUnaryExpression_Await(s)
	}
}

func (s *UnaryExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUnaryExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UnaryExpression_Await() (localctx IUnaryExpression_AwaitContext) {
	localctx = NewUnaryExpression_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, ECMAScriptParserRULE_unaryExpression_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2705)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__0, ECMAScriptParserT__1, ECMAScriptParserT__3, ECMAScriptParserT__4, ECMAScriptParserT__8, ECMAScriptParserT__10, ECMAScriptParserT__14, ECMAScriptParserT__15, ECMAScriptParserT__17, ECMAScriptParserT__18, ECMAScriptParserT__80, ECMAScriptParserT__85, ECMAScriptParserT__86, ECMAScriptParserNullLiteral, ECMAScriptParserBooleanLiteral, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral, ECMAScriptParserNoSubstitutionTemplate, ECMAScriptParserTemplateHead, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2689)
			p.UpdateExpression_Await()
		}

	case ECMAScriptParserT__19:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2690)
			p.Match(ECMAScriptParserT__19)
		}
		{
			p.SetState(2691)
			p.UnaryExpression_Await()
		}

	case ECMAScriptParserT__20:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2692)
			p.Match(ECMAScriptParserT__20)
		}
		{
			p.SetState(2693)
			p.UnaryExpression_Await()
		}

	case ECMAScriptParserT__21:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2694)
			p.Match(ECMAScriptParserT__21)
		}
		{
			p.SetState(2695)
			p.UnaryExpression_Await()
		}

	case ECMAScriptParserT__22:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2696)
			p.Match(ECMAScriptParserT__22)
		}
		{
			p.SetState(2697)
			p.UnaryExpression_Await()
		}

	case ECMAScriptParserT__23:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2698)
			p.Match(ECMAScriptParserT__23)
		}
		{
			p.SetState(2699)
			p.UnaryExpression_Await()
		}

	case ECMAScriptParserT__24:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2700)
			p.Match(ECMAScriptParserT__24)
		}
		{
			p.SetState(2701)
			p.UnaryExpression_Await()
		}

	case ECMAScriptParserT__25:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2702)
			p.Match(ECMAScriptParserT__25)
		}
		{
			p.SetState(2703)
			p.UnaryExpression_Await()
		}

	case ECMAScriptParserT__2:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2704)
			p.AwaitExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUnaryExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IUnaryExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryExpression_Yield_AwaitContext differentiates from other interfaces.
	IsUnaryExpression_Yield_AwaitContext()
}

type UnaryExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryExpression_Yield_AwaitContext() *UnaryExpression_Yield_AwaitContext {
	var p = new(UnaryExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_unaryExpression_Yield_Await
	return p
}

func (*UnaryExpression_Yield_AwaitContext) IsUnaryExpression_Yield_AwaitContext() {}

func NewUnaryExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryExpression_Yield_AwaitContext {
	var p = new(UnaryExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_unaryExpression_Yield_Await

	return p
}

func (s *UnaryExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryExpression_Yield_AwaitContext) UpdateExpression_Yield_Await() IUpdateExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateExpression_Yield_AwaitContext)
}

func (s *UnaryExpression_Yield_AwaitContext) UnaryExpression_Yield_Await() IUnaryExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpression_Yield_AwaitContext)
}

func (s *UnaryExpression_Yield_AwaitContext) AwaitExpression_Yield() IAwaitExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAwaitExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAwaitExpression_YieldContext)
}

func (s *UnaryExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUnaryExpression_Yield_Await(s)
	}
}

func (s *UnaryExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUnaryExpression_Yield_Await(s)
	}
}

func (s *UnaryExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUnaryExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UnaryExpression_Yield_Await() (localctx IUnaryExpression_Yield_AwaitContext) {
	localctx = NewUnaryExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, ECMAScriptParserRULE_unaryExpression_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2723)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__0, ECMAScriptParserT__3, ECMAScriptParserT__4, ECMAScriptParserT__8, ECMAScriptParserT__10, ECMAScriptParserT__14, ECMAScriptParserT__15, ECMAScriptParserT__17, ECMAScriptParserT__18, ECMAScriptParserT__80, ECMAScriptParserT__85, ECMAScriptParserT__86, ECMAScriptParserNullLiteral, ECMAScriptParserBooleanLiteral, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral, ECMAScriptParserNoSubstitutionTemplate, ECMAScriptParserTemplateHead, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2707)
			p.UpdateExpression_Yield_Await()
		}

	case ECMAScriptParserT__19:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2708)
			p.Match(ECMAScriptParserT__19)
		}
		{
			p.SetState(2709)
			p.UnaryExpression_Yield_Await()
		}

	case ECMAScriptParserT__20:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2710)
			p.Match(ECMAScriptParserT__20)
		}
		{
			p.SetState(2711)
			p.UnaryExpression_Yield_Await()
		}

	case ECMAScriptParserT__21:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2712)
			p.Match(ECMAScriptParserT__21)
		}
		{
			p.SetState(2713)
			p.UnaryExpression_Yield_Await()
		}

	case ECMAScriptParserT__22:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2714)
			p.Match(ECMAScriptParserT__22)
		}
		{
			p.SetState(2715)
			p.UnaryExpression_Yield_Await()
		}

	case ECMAScriptParserT__23:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2716)
			p.Match(ECMAScriptParserT__23)
		}
		{
			p.SetState(2717)
			p.UnaryExpression_Yield_Await()
		}

	case ECMAScriptParserT__24:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2718)
			p.Match(ECMAScriptParserT__24)
		}
		{
			p.SetState(2719)
			p.UnaryExpression_Yield_Await()
		}

	case ECMAScriptParserT__25:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2720)
			p.Match(ECMAScriptParserT__25)
		}
		{
			p.SetState(2721)
			p.UnaryExpression_Yield_Await()
		}

	case ECMAScriptParserT__2:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2722)
			p.AwaitExpression_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExponentationExpressionContext is an interface to support dynamic dispatch.
type IExponentationExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExponentationExpressionContext differentiates from other interfaces.
	IsExponentationExpressionContext()
}

type ExponentationExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExponentationExpressionContext() *ExponentationExpressionContext {
	var p = new(ExponentationExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_exponentationExpression
	return p
}

func (*ExponentationExpressionContext) IsExponentationExpressionContext() {}

func NewExponentationExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExponentationExpressionContext {
	var p = new(ExponentationExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_exponentationExpression

	return p
}

func (s *ExponentationExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExponentationExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *ExponentationExpressionContext) UpdateExpression() IUpdateExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateExpressionContext)
}

func (s *ExponentationExpressionContext) ExponentationExpression() IExponentationExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExponentationExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExponentationExpressionContext)
}

func (s *ExponentationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExponentationExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExponentationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExponentationExpression(s)
	}
}

func (s *ExponentationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExponentationExpression(s)
	}
}

func (s *ExponentationExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExponentationExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExponentationExpression() (localctx IExponentationExpressionContext) {
	localctx = NewExponentationExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, ECMAScriptParserRULE_exponentationExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2730)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2725)
			p.UnaryExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2726)
			p.UpdateExpression()
		}
		{
			p.SetState(2727)
			p.Match(ECMAScriptParserT__26)
		}
		{
			p.SetState(2728)
			p.ExponentationExpression()
		}

	}

	return localctx
}

// IExponentationExpression_YieldContext is an interface to support dynamic dispatch.
type IExponentationExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExponentationExpression_YieldContext differentiates from other interfaces.
	IsExponentationExpression_YieldContext()
}

type ExponentationExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExponentationExpression_YieldContext() *ExponentationExpression_YieldContext {
	var p = new(ExponentationExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_exponentationExpression_Yield
	return p
}

func (*ExponentationExpression_YieldContext) IsExponentationExpression_YieldContext() {}

func NewExponentationExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExponentationExpression_YieldContext {
	var p = new(ExponentationExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_exponentationExpression_Yield

	return p
}

func (s *ExponentationExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ExponentationExpression_YieldContext) UnaryExpression_Yield() IUnaryExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpression_YieldContext)
}

func (s *ExponentationExpression_YieldContext) UpdateExpression_Yield() IUpdateExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateExpression_YieldContext)
}

func (s *ExponentationExpression_YieldContext) ExponentationExpression_Yield() IExponentationExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExponentationExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExponentationExpression_YieldContext)
}

func (s *ExponentationExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExponentationExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExponentationExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExponentationExpression_Yield(s)
	}
}

func (s *ExponentationExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExponentationExpression_Yield(s)
	}
}

func (s *ExponentationExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExponentationExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExponentationExpression_Yield() (localctx IExponentationExpression_YieldContext) {
	localctx = NewExponentationExpression_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, ECMAScriptParserRULE_exponentationExpression_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2737)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2732)
			p.UnaryExpression_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2733)
			p.UpdateExpression_Yield()
		}
		{
			p.SetState(2734)
			p.Match(ECMAScriptParserT__26)
		}
		{
			p.SetState(2735)
			p.ExponentationExpression_Yield()
		}

	}

	return localctx
}

// IExponentationExpression_AwaitContext is an interface to support dynamic dispatch.
type IExponentationExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExponentationExpression_AwaitContext differentiates from other interfaces.
	IsExponentationExpression_AwaitContext()
}

type ExponentationExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExponentationExpression_AwaitContext() *ExponentationExpression_AwaitContext {
	var p = new(ExponentationExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_exponentationExpression_Await
	return p
}

func (*ExponentationExpression_AwaitContext) IsExponentationExpression_AwaitContext() {}

func NewExponentationExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExponentationExpression_AwaitContext {
	var p = new(ExponentationExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_exponentationExpression_Await

	return p
}

func (s *ExponentationExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ExponentationExpression_AwaitContext) UnaryExpression_Await() IUnaryExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpression_AwaitContext)
}

func (s *ExponentationExpression_AwaitContext) UpdateExpression_Await() IUpdateExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateExpression_AwaitContext)
}

func (s *ExponentationExpression_AwaitContext) ExponentationExpression_Await() IExponentationExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExponentationExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExponentationExpression_AwaitContext)
}

func (s *ExponentationExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExponentationExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExponentationExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExponentationExpression_Await(s)
	}
}

func (s *ExponentationExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExponentationExpression_Await(s)
	}
}

func (s *ExponentationExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExponentationExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExponentationExpression_Await() (localctx IExponentationExpression_AwaitContext) {
	localctx = NewExponentationExpression_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, ECMAScriptParserRULE_exponentationExpression_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2744)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2739)
			p.UnaryExpression_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2740)
			p.UpdateExpression_Await()
		}
		{
			p.SetState(2741)
			p.Match(ECMAScriptParserT__26)
		}
		{
			p.SetState(2742)
			p.ExponentationExpression_Await()
		}

	}

	return localctx
}

// IExponentationExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IExponentationExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExponentationExpression_Yield_AwaitContext differentiates from other interfaces.
	IsExponentationExpression_Yield_AwaitContext()
}

type ExponentationExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExponentationExpression_Yield_AwaitContext() *ExponentationExpression_Yield_AwaitContext {
	var p = new(ExponentationExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_exponentationExpression_Yield_Await
	return p
}

func (*ExponentationExpression_Yield_AwaitContext) IsExponentationExpression_Yield_AwaitContext() {}

func NewExponentationExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExponentationExpression_Yield_AwaitContext {
	var p = new(ExponentationExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_exponentationExpression_Yield_Await

	return p
}

func (s *ExponentationExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ExponentationExpression_Yield_AwaitContext) UnaryExpression_Yield_Await() IUnaryExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpression_Yield_AwaitContext)
}

func (s *ExponentationExpression_Yield_AwaitContext) UpdateExpression_Yield_Await() IUpdateExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateExpression_Yield_AwaitContext)
}

func (s *ExponentationExpression_Yield_AwaitContext) ExponentationExpression_Yield_Await() IExponentationExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExponentationExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExponentationExpression_Yield_AwaitContext)
}

func (s *ExponentationExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExponentationExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExponentationExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExponentationExpression_Yield_Await(s)
	}
}

func (s *ExponentationExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExponentationExpression_Yield_Await(s)
	}
}

func (s *ExponentationExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExponentationExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExponentationExpression_Yield_Await() (localctx IExponentationExpression_Yield_AwaitContext) {
	localctx = NewExponentationExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, ECMAScriptParserRULE_exponentationExpression_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2751)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2746)
			p.UnaryExpression_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2747)
			p.UpdateExpression_Yield_Await()
		}
		{
			p.SetState(2748)
			p.Match(ECMAScriptParserT__26)
		}
		{
			p.SetState(2749)
			p.ExponentationExpression_Yield_Await()
		}

	}

	return localctx
}

// IMultiplicativeExpressionContext is an interface to support dynamic dispatch.
type IMultiplicativeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiplicativeExpressionContext differentiates from other interfaces.
	IsMultiplicativeExpressionContext()
}

type MultiplicativeExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeExpressionContext() *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_multiplicativeExpression
	return p
}

func (*MultiplicativeExpressionContext) IsMultiplicativeExpressionContext() {}

func NewMultiplicativeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_multiplicativeExpression

	return p
}

func (s *MultiplicativeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeExpressionContext) ExponentationExpression() IExponentationExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExponentationExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExponentationExpressionContext)
}

func (s *MultiplicativeExpressionContext) MultiplicativeExpression() IMultiplicativeExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpressionContext)
}

func (s *MultiplicativeExpressionContext) MultiplicativeOperator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserMultiplicativeOperator, 0)
}

func (s *MultiplicativeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMultiplicativeExpression(s)
	}
}

func (s *MultiplicativeExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMultiplicativeExpression(s)
	}
}

func (s *MultiplicativeExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMultiplicativeExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MultiplicativeExpression() (localctx IMultiplicativeExpressionContext) {
	return p.multiplicativeExpression(0)
}

func (p *ECMAScriptParser) multiplicativeExpression(_p int) (localctx IMultiplicativeExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMultiplicativeExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMultiplicativeExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 300
	p.EnterRecursionRule(localctx, 300, ECMAScriptParserRULE_multiplicativeExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2754)
		p.ExponentationExpression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2761)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMultiplicativeExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_multiplicativeExpression)
			p.SetState(2756)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2757)
				p.Match(ECMAScriptParserMultiplicativeOperator)
			}
			{
				p.SetState(2758)
				p.ExponentationExpression()
			}

		}
		p.SetState(2763)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext())
	}

	return localctx
}

// IMultiplicativeExpression_YieldContext is an interface to support dynamic dispatch.
type IMultiplicativeExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiplicativeExpression_YieldContext differentiates from other interfaces.
	IsMultiplicativeExpression_YieldContext()
}

type MultiplicativeExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeExpression_YieldContext() *MultiplicativeExpression_YieldContext {
	var p = new(MultiplicativeExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_multiplicativeExpression_Yield
	return p
}

func (*MultiplicativeExpression_YieldContext) IsMultiplicativeExpression_YieldContext() {}

func NewMultiplicativeExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeExpression_YieldContext {
	var p = new(MultiplicativeExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_multiplicativeExpression_Yield

	return p
}

func (s *MultiplicativeExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeExpression_YieldContext) ExponentationExpression_Yield() IExponentationExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExponentationExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExponentationExpression_YieldContext)
}

func (s *MultiplicativeExpression_YieldContext) MultiplicativeExpression_Yield() IMultiplicativeExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpression_YieldContext)
}

func (s *MultiplicativeExpression_YieldContext) MultiplicativeOperator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserMultiplicativeOperator, 0)
}

func (s *MultiplicativeExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMultiplicativeExpression_Yield(s)
	}
}

func (s *MultiplicativeExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMultiplicativeExpression_Yield(s)
	}
}

func (s *MultiplicativeExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMultiplicativeExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MultiplicativeExpression_Yield() (localctx IMultiplicativeExpression_YieldContext) {
	return p.multiplicativeExpression_Yield(0)
}

func (p *ECMAScriptParser) multiplicativeExpression_Yield(_p int) (localctx IMultiplicativeExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMultiplicativeExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMultiplicativeExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 302
	p.EnterRecursionRule(localctx, 302, ECMAScriptParserRULE_multiplicativeExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2765)
		p.ExponentationExpression_Yield()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2772)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMultiplicativeExpression_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_multiplicativeExpression_Yield)
			p.SetState(2767)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2768)
				p.Match(ECMAScriptParserMultiplicativeOperator)
			}
			{
				p.SetState(2769)
				p.ExponentationExpression_Yield()
			}

		}
		p.SetState(2774)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext())
	}

	return localctx
}

// IMultiplicativeExpression_AwaitContext is an interface to support dynamic dispatch.
type IMultiplicativeExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiplicativeExpression_AwaitContext differentiates from other interfaces.
	IsMultiplicativeExpression_AwaitContext()
}

type MultiplicativeExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeExpression_AwaitContext() *MultiplicativeExpression_AwaitContext {
	var p = new(MultiplicativeExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_multiplicativeExpression_Await
	return p
}

func (*MultiplicativeExpression_AwaitContext) IsMultiplicativeExpression_AwaitContext() {}

func NewMultiplicativeExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeExpression_AwaitContext {
	var p = new(MultiplicativeExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_multiplicativeExpression_Await

	return p
}

func (s *MultiplicativeExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeExpression_AwaitContext) ExponentationExpression_Await() IExponentationExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExponentationExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExponentationExpression_AwaitContext)
}

func (s *MultiplicativeExpression_AwaitContext) MultiplicativeExpression_Await() IMultiplicativeExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpression_AwaitContext)
}

func (s *MultiplicativeExpression_AwaitContext) MultiplicativeOperator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserMultiplicativeOperator, 0)
}

func (s *MultiplicativeExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMultiplicativeExpression_Await(s)
	}
}

func (s *MultiplicativeExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMultiplicativeExpression_Await(s)
	}
}

func (s *MultiplicativeExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMultiplicativeExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MultiplicativeExpression_Await() (localctx IMultiplicativeExpression_AwaitContext) {
	return p.multiplicativeExpression_Await(0)
}

func (p *ECMAScriptParser) multiplicativeExpression_Await(_p int) (localctx IMultiplicativeExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMultiplicativeExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMultiplicativeExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 304
	p.EnterRecursionRule(localctx, 304, ECMAScriptParserRULE_multiplicativeExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2776)
		p.ExponentationExpression_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2783)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMultiplicativeExpression_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_multiplicativeExpression_Await)
			p.SetState(2778)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2779)
				p.Match(ECMAScriptParserMultiplicativeOperator)
			}
			{
				p.SetState(2780)
				p.ExponentationExpression_Await()
			}

		}
		p.SetState(2785)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext())
	}

	return localctx
}

// IMultiplicativeExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IMultiplicativeExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiplicativeExpression_Yield_AwaitContext differentiates from other interfaces.
	IsMultiplicativeExpression_Yield_AwaitContext()
}

type MultiplicativeExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeExpression_Yield_AwaitContext() *MultiplicativeExpression_Yield_AwaitContext {
	var p = new(MultiplicativeExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_multiplicativeExpression_Yield_Await
	return p
}

func (*MultiplicativeExpression_Yield_AwaitContext) IsMultiplicativeExpression_Yield_AwaitContext() {}

func NewMultiplicativeExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeExpression_Yield_AwaitContext {
	var p = new(MultiplicativeExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_multiplicativeExpression_Yield_Await

	return p
}

func (s *MultiplicativeExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeExpression_Yield_AwaitContext) ExponentationExpression_Yield_Await() IExponentationExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExponentationExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExponentationExpression_Yield_AwaitContext)
}

func (s *MultiplicativeExpression_Yield_AwaitContext) MultiplicativeExpression_Yield_Await() IMultiplicativeExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpression_Yield_AwaitContext)
}

func (s *MultiplicativeExpression_Yield_AwaitContext) MultiplicativeOperator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserMultiplicativeOperator, 0)
}

func (s *MultiplicativeExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMultiplicativeExpression_Yield_Await(s)
	}
}

func (s *MultiplicativeExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMultiplicativeExpression_Yield_Await(s)
	}
}

func (s *MultiplicativeExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMultiplicativeExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MultiplicativeExpression_Yield_Await() (localctx IMultiplicativeExpression_Yield_AwaitContext) {
	return p.multiplicativeExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) multiplicativeExpression_Yield_Await(_p int) (localctx IMultiplicativeExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMultiplicativeExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMultiplicativeExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 306
	p.EnterRecursionRule(localctx, 306, ECMAScriptParserRULE_multiplicativeExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2787)
		p.ExponentationExpression_Yield_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2794)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMultiplicativeExpression_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_multiplicativeExpression_Yield_Await)
			p.SetState(2789)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(2790)
				p.Match(ECMAScriptParserMultiplicativeOperator)
			}
			{
				p.SetState(2791)
				p.ExponentationExpression_Yield_Await()
			}

		}
		p.SetState(2796)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext())
	}

	return localctx
}

// IAdditiveExpressionContext is an interface to support dynamic dispatch.
type IAdditiveExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditiveExpressionContext differentiates from other interfaces.
	IsAdditiveExpressionContext()
}

type AdditiveExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveExpressionContext() *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_additiveExpression
	return p
}

func (*AdditiveExpressionContext) IsAdditiveExpressionContext() {}

func NewAdditiveExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_additiveExpression

	return p
}

func (s *AdditiveExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveExpressionContext) MultiplicativeExpression() IMultiplicativeExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpressionContext)
}

func (s *AdditiveExpressionContext) AdditiveExpression() IAdditiveExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpressionContext)
}

func (s *AdditiveExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAdditiveExpression(s)
	}
}

func (s *AdditiveExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAdditiveExpression(s)
	}
}

func (s *AdditiveExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAdditiveExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AdditiveExpression() (localctx IAdditiveExpressionContext) {
	return p.additiveExpression(0)
}

func (p *ECMAScriptParser) additiveExpression(_p int) (localctx IAdditiveExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAdditiveExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAdditiveExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 308
	p.EnterRecursionRule(localctx, 308, ECMAScriptParserRULE_additiveExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2798)
		p.multiplicativeExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2808)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2806)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAdditiveExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_additiveExpression)
				p.SetState(2800)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2801)
					p.Match(ECMAScriptParserT__22)
				}
				{
					p.SetState(2802)
					p.multiplicativeExpression(0)
				}

			case 2:
				localctx = NewAdditiveExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_additiveExpression)
				p.SetState(2803)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2804)
					p.Match(ECMAScriptParserT__23)
				}
				{
					p.SetState(2805)
					p.multiplicativeExpression(0)
				}

			}

		}
		p.SetState(2810)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext())
	}

	return localctx
}

// IAdditiveExpression_YieldContext is an interface to support dynamic dispatch.
type IAdditiveExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditiveExpression_YieldContext differentiates from other interfaces.
	IsAdditiveExpression_YieldContext()
}

type AdditiveExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveExpression_YieldContext() *AdditiveExpression_YieldContext {
	var p = new(AdditiveExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_additiveExpression_Yield
	return p
}

func (*AdditiveExpression_YieldContext) IsAdditiveExpression_YieldContext() {}

func NewAdditiveExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveExpression_YieldContext {
	var p = new(AdditiveExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_additiveExpression_Yield

	return p
}

func (s *AdditiveExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveExpression_YieldContext) MultiplicativeExpression_Yield() IMultiplicativeExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpression_YieldContext)
}

func (s *AdditiveExpression_YieldContext) AdditiveExpression_Yield() IAdditiveExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpression_YieldContext)
}

func (s *AdditiveExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAdditiveExpression_Yield(s)
	}
}

func (s *AdditiveExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAdditiveExpression_Yield(s)
	}
}

func (s *AdditiveExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAdditiveExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AdditiveExpression_Yield() (localctx IAdditiveExpression_YieldContext) {
	return p.additiveExpression_Yield(0)
}

func (p *ECMAScriptParser) additiveExpression_Yield(_p int) (localctx IAdditiveExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAdditiveExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAdditiveExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 310
	p.EnterRecursionRule(localctx, 310, ECMAScriptParserRULE_additiveExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2812)
		p.multiplicativeExpression_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2822)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2820)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAdditiveExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_additiveExpression_Yield)
				p.SetState(2814)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2815)
					p.Match(ECMAScriptParserT__22)
				}
				{
					p.SetState(2816)
					p.multiplicativeExpression_Yield(0)
				}

			case 2:
				localctx = NewAdditiveExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_additiveExpression_Yield)
				p.SetState(2817)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2818)
					p.Match(ECMAScriptParserT__23)
				}
				{
					p.SetState(2819)
					p.multiplicativeExpression_Yield(0)
				}

			}

		}
		p.SetState(2824)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext())
	}

	return localctx
}

// IAdditiveExpression_AwaitContext is an interface to support dynamic dispatch.
type IAdditiveExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditiveExpression_AwaitContext differentiates from other interfaces.
	IsAdditiveExpression_AwaitContext()
}

type AdditiveExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveExpression_AwaitContext() *AdditiveExpression_AwaitContext {
	var p = new(AdditiveExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_additiveExpression_Await
	return p
}

func (*AdditiveExpression_AwaitContext) IsAdditiveExpression_AwaitContext() {}

func NewAdditiveExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveExpression_AwaitContext {
	var p = new(AdditiveExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_additiveExpression_Await

	return p
}

func (s *AdditiveExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveExpression_AwaitContext) MultiplicativeExpression_Await() IMultiplicativeExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpression_AwaitContext)
}

func (s *AdditiveExpression_AwaitContext) AdditiveExpression_Await() IAdditiveExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpression_AwaitContext)
}

func (s *AdditiveExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAdditiveExpression_Await(s)
	}
}

func (s *AdditiveExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAdditiveExpression_Await(s)
	}
}

func (s *AdditiveExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAdditiveExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AdditiveExpression_Await() (localctx IAdditiveExpression_AwaitContext) {
	return p.additiveExpression_Await(0)
}

func (p *ECMAScriptParser) additiveExpression_Await(_p int) (localctx IAdditiveExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAdditiveExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAdditiveExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 312
	p.EnterRecursionRule(localctx, 312, ECMAScriptParserRULE_additiveExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2826)
		p.multiplicativeExpression_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2836)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2834)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAdditiveExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_additiveExpression_Await)
				p.SetState(2828)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2829)
					p.Match(ECMAScriptParserT__22)
				}
				{
					p.SetState(2830)
					p.multiplicativeExpression_Await(0)
				}

			case 2:
				localctx = NewAdditiveExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_additiveExpression_Await)
				p.SetState(2831)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2832)
					p.Match(ECMAScriptParserT__23)
				}
				{
					p.SetState(2833)
					p.multiplicativeExpression_Await(0)
				}

			}

		}
		p.SetState(2838)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())
	}

	return localctx
}

// IAdditiveExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IAdditiveExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditiveExpression_Yield_AwaitContext differentiates from other interfaces.
	IsAdditiveExpression_Yield_AwaitContext()
}

type AdditiveExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveExpression_Yield_AwaitContext() *AdditiveExpression_Yield_AwaitContext {
	var p = new(AdditiveExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_additiveExpression_Yield_Await
	return p
}

func (*AdditiveExpression_Yield_AwaitContext) IsAdditiveExpression_Yield_AwaitContext() {}

func NewAdditiveExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveExpression_Yield_AwaitContext {
	var p = new(AdditiveExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_additiveExpression_Yield_Await

	return p
}

func (s *AdditiveExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveExpression_Yield_AwaitContext) MultiplicativeExpression_Yield_Await() IMultiplicativeExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpression_Yield_AwaitContext)
}

func (s *AdditiveExpression_Yield_AwaitContext) AdditiveExpression_Yield_Await() IAdditiveExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpression_Yield_AwaitContext)
}

func (s *AdditiveExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAdditiveExpression_Yield_Await(s)
	}
}

func (s *AdditiveExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAdditiveExpression_Yield_Await(s)
	}
}

func (s *AdditiveExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAdditiveExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AdditiveExpression_Yield_Await() (localctx IAdditiveExpression_Yield_AwaitContext) {
	return p.additiveExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) additiveExpression_Yield_Await(_p int) (localctx IAdditiveExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAdditiveExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAdditiveExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 314
	p.EnterRecursionRule(localctx, 314, ECMAScriptParserRULE_additiveExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2840)
		p.multiplicativeExpression_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2850)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2848)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAdditiveExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_additiveExpression_Yield_Await)
				p.SetState(2842)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2843)
					p.Match(ECMAScriptParserT__22)
				}
				{
					p.SetState(2844)
					p.multiplicativeExpression_Yield_Await(0)
				}

			case 2:
				localctx = NewAdditiveExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_additiveExpression_Yield_Await)
				p.SetState(2845)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2846)
					p.Match(ECMAScriptParserT__23)
				}
				{
					p.SetState(2847)
					p.multiplicativeExpression_Yield_Await(0)
				}

			}

		}
		p.SetState(2852)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext())
	}

	return localctx
}

// IShiftExpressionContext is an interface to support dynamic dispatch.
type IShiftExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShiftExpressionContext differentiates from other interfaces.
	IsShiftExpressionContext()
}

type ShiftExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftExpressionContext() *ShiftExpressionContext {
	var p = new(ShiftExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_shiftExpression
	return p
}

func (*ShiftExpressionContext) IsShiftExpressionContext() {}

func NewShiftExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftExpressionContext {
	var p = new(ShiftExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_shiftExpression

	return p
}

func (s *ShiftExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftExpressionContext) AdditiveExpression() IAdditiveExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpressionContext)
}

func (s *ShiftExpressionContext) ShiftExpression() IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *ShiftExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterShiftExpression(s)
	}
}

func (s *ShiftExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitShiftExpression(s)
	}
}

func (s *ShiftExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitShiftExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ShiftExpression() (localctx IShiftExpressionContext) {
	return p.shiftExpression(0)
}

func (p *ECMAScriptParser) shiftExpression(_p int) (localctx IShiftExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewShiftExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IShiftExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 316
	p.EnterRecursionRule(localctx, 316, ECMAScriptParserRULE_shiftExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2854)
		p.additiveExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2867)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2865)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext()) {
			case 1:
				localctx = NewShiftExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression)
				p.SetState(2856)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2857)
					p.Match(ECMAScriptParserT__27)
				}
				{
					p.SetState(2858)
					p.additiveExpression(0)
				}

			case 2:
				localctx = NewShiftExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression)
				p.SetState(2859)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2860)
					p.Match(ECMAScriptParserT__28)
				}
				{
					p.SetState(2861)
					p.additiveExpression(0)
				}

			case 3:
				localctx = NewShiftExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression)
				p.SetState(2862)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2863)
					p.Match(ECMAScriptParserT__29)
				}
				{
					p.SetState(2864)
					p.additiveExpression(0)
				}

			}

		}
		p.SetState(2869)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())
	}

	return localctx
}

// IShiftExpression_YieldContext is an interface to support dynamic dispatch.
type IShiftExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShiftExpression_YieldContext differentiates from other interfaces.
	IsShiftExpression_YieldContext()
}

type ShiftExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftExpression_YieldContext() *ShiftExpression_YieldContext {
	var p = new(ShiftExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_shiftExpression_Yield
	return p
}

func (*ShiftExpression_YieldContext) IsShiftExpression_YieldContext() {}

func NewShiftExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftExpression_YieldContext {
	var p = new(ShiftExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_shiftExpression_Yield

	return p
}

func (s *ShiftExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftExpression_YieldContext) AdditiveExpression_Yield() IAdditiveExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpression_YieldContext)
}

func (s *ShiftExpression_YieldContext) ShiftExpression_Yield() IShiftExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpression_YieldContext)
}

func (s *ShiftExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterShiftExpression_Yield(s)
	}
}

func (s *ShiftExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitShiftExpression_Yield(s)
	}
}

func (s *ShiftExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitShiftExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ShiftExpression_Yield() (localctx IShiftExpression_YieldContext) {
	return p.shiftExpression_Yield(0)
}

func (p *ECMAScriptParser) shiftExpression_Yield(_p int) (localctx IShiftExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewShiftExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IShiftExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 318
	p.EnterRecursionRule(localctx, 318, ECMAScriptParserRULE_shiftExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2871)
		p.additiveExpression_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2884)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2882)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext()) {
			case 1:
				localctx = NewShiftExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression_Yield)
				p.SetState(2873)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2874)
					p.Match(ECMAScriptParserT__27)
				}
				{
					p.SetState(2875)
					p.additiveExpression_Yield(0)
				}

			case 2:
				localctx = NewShiftExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression_Yield)
				p.SetState(2876)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2877)
					p.Match(ECMAScriptParserT__28)
				}
				{
					p.SetState(2878)
					p.additiveExpression_Yield(0)
				}

			case 3:
				localctx = NewShiftExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression_Yield)
				p.SetState(2879)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2880)
					p.Match(ECMAScriptParserT__29)
				}
				{
					p.SetState(2881)
					p.additiveExpression_Yield(0)
				}

			}

		}
		p.SetState(2886)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext())
	}

	return localctx
}

// IShiftExpression_AwaitContext is an interface to support dynamic dispatch.
type IShiftExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShiftExpression_AwaitContext differentiates from other interfaces.
	IsShiftExpression_AwaitContext()
}

type ShiftExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftExpression_AwaitContext() *ShiftExpression_AwaitContext {
	var p = new(ShiftExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_shiftExpression_Await
	return p
}

func (*ShiftExpression_AwaitContext) IsShiftExpression_AwaitContext() {}

func NewShiftExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftExpression_AwaitContext {
	var p = new(ShiftExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_shiftExpression_Await

	return p
}

func (s *ShiftExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftExpression_AwaitContext) AdditiveExpression_Await() IAdditiveExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpression_AwaitContext)
}

func (s *ShiftExpression_AwaitContext) ShiftExpression_Await() IShiftExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpression_AwaitContext)
}

func (s *ShiftExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterShiftExpression_Await(s)
	}
}

func (s *ShiftExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitShiftExpression_Await(s)
	}
}

func (s *ShiftExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitShiftExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ShiftExpression_Await() (localctx IShiftExpression_AwaitContext) {
	return p.shiftExpression_Await(0)
}

func (p *ECMAScriptParser) shiftExpression_Await(_p int) (localctx IShiftExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewShiftExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IShiftExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 320
	p.EnterRecursionRule(localctx, 320, ECMAScriptParserRULE_shiftExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2888)
		p.additiveExpression_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2901)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2899)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) {
			case 1:
				localctx = NewShiftExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression_Await)
				p.SetState(2890)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2891)
					p.Match(ECMAScriptParserT__27)
				}
				{
					p.SetState(2892)
					p.additiveExpression_Await(0)
				}

			case 2:
				localctx = NewShiftExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression_Await)
				p.SetState(2893)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2894)
					p.Match(ECMAScriptParserT__28)
				}
				{
					p.SetState(2895)
					p.additiveExpression_Await(0)
				}

			case 3:
				localctx = NewShiftExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression_Await)
				p.SetState(2896)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2897)
					p.Match(ECMAScriptParserT__29)
				}
				{
					p.SetState(2898)
					p.additiveExpression_Await(0)
				}

			}

		}
		p.SetState(2903)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext())
	}

	return localctx
}

// IShiftExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IShiftExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShiftExpression_Yield_AwaitContext differentiates from other interfaces.
	IsShiftExpression_Yield_AwaitContext()
}

type ShiftExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftExpression_Yield_AwaitContext() *ShiftExpression_Yield_AwaitContext {
	var p = new(ShiftExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_shiftExpression_Yield_Await
	return p
}

func (*ShiftExpression_Yield_AwaitContext) IsShiftExpression_Yield_AwaitContext() {}

func NewShiftExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftExpression_Yield_AwaitContext {
	var p = new(ShiftExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_shiftExpression_Yield_Await

	return p
}

func (s *ShiftExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftExpression_Yield_AwaitContext) AdditiveExpression_Yield_Await() IAdditiveExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpression_Yield_AwaitContext)
}

func (s *ShiftExpression_Yield_AwaitContext) ShiftExpression_Yield_Await() IShiftExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpression_Yield_AwaitContext)
}

func (s *ShiftExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterShiftExpression_Yield_Await(s)
	}
}

func (s *ShiftExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitShiftExpression_Yield_Await(s)
	}
}

func (s *ShiftExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitShiftExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ShiftExpression_Yield_Await() (localctx IShiftExpression_Yield_AwaitContext) {
	return p.shiftExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) shiftExpression_Yield_Await(_p int) (localctx IShiftExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewShiftExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IShiftExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 322
	p.EnterRecursionRule(localctx, 322, ECMAScriptParserRULE_shiftExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2905)
		p.additiveExpression_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2918)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2916)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) {
			case 1:
				localctx = NewShiftExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression_Yield_Await)
				p.SetState(2907)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2908)
					p.Match(ECMAScriptParserT__27)
				}
				{
					p.SetState(2909)
					p.additiveExpression_Yield_Await(0)
				}

			case 2:
				localctx = NewShiftExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression_Yield_Await)
				p.SetState(2910)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2911)
					p.Match(ECMAScriptParserT__28)
				}
				{
					p.SetState(2912)
					p.additiveExpression_Yield_Await(0)
				}

			case 3:
				localctx = NewShiftExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_shiftExpression_Yield_Await)
				p.SetState(2913)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2914)
					p.Match(ECMAScriptParserT__29)
				}
				{
					p.SetState(2915)
					p.additiveExpression_Yield_Await(0)
				}

			}

		}
		p.SetState(2920)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext())
	}

	return localctx
}

// IRelationalExpressionContext is an interface to support dynamic dispatch.
type IRelationalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationalExpressionContext differentiates from other interfaces.
	IsRelationalExpressionContext()
}

type RelationalExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpressionContext() *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression
	return p
}

func (*RelationalExpressionContext) IsRelationalExpressionContext() {}

func NewRelationalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression

	return p
}

func (s *RelationalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpressionContext) ShiftExpression() IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpressionContext) RelationalExpression() IRelationalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpressionContext)
}

func (s *RelationalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterRelationalExpression(s)
	}
}

func (s *RelationalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitRelationalExpression(s)
	}
}

func (s *RelationalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitRelationalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) RelationalExpression() (localctx IRelationalExpressionContext) {
	return p.relationalExpression(0)
}

func (p *ECMAScriptParser) relationalExpression(_p int) (localctx IRelationalExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationalExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationalExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 324
	p.EnterRecursionRule(localctx, 324, ECMAScriptParserRULE_relationalExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2922)
		p.shiftExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2941)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2939)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext()) {
			case 1:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression)
				p.SetState(2924)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(2925)
					p.Match(ECMAScriptParserT__30)
				}
				{
					p.SetState(2926)
					p.shiftExpression(0)
				}

			case 2:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression)
				p.SetState(2927)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2928)
					p.Match(ECMAScriptParserT__31)
				}
				{
					p.SetState(2929)
					p.shiftExpression(0)
				}

			case 3:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression)
				p.SetState(2930)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2931)
					p.Match(ECMAScriptParserT__32)
				}
				{
					p.SetState(2932)
					p.shiftExpression(0)
				}

			case 4:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression)
				p.SetState(2933)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2934)
					p.Match(ECMAScriptParserT__33)
				}
				{
					p.SetState(2935)
					p.shiftExpression(0)
				}

			case 5:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression)
				p.SetState(2936)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2937)
					p.Match(ECMAScriptParserT__34)
				}
				{
					p.SetState(2938)
					p.shiftExpression(0)
				}

			}

		}
		p.SetState(2943)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext())
	}

	return localctx
}

// IRelationalExpression_InContext is an interface to support dynamic dispatch.
type IRelationalExpression_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationalExpression_InContext differentiates from other interfaces.
	IsRelationalExpression_InContext()
}

type RelationalExpression_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpression_InContext() *RelationalExpression_InContext {
	var p = new(RelationalExpression_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_In
	return p
}

func (*RelationalExpression_InContext) IsRelationalExpression_InContext() {}

func NewRelationalExpression_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpression_InContext {
	var p = new(RelationalExpression_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_In

	return p
}

func (s *RelationalExpression_InContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpression_InContext) ShiftExpression() IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpression_InContext) RelationalExpression() IRelationalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpressionContext)
}

func (s *RelationalExpression_InContext) RelationalExpression_In() IRelationalExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_InContext)
}

func (s *RelationalExpression_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpression_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpression_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterRelationalExpression_In(s)
	}
}

func (s *RelationalExpression_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitRelationalExpression_In(s)
	}
}

func (s *RelationalExpression_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitRelationalExpression_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) RelationalExpression_In() (localctx IRelationalExpression_InContext) {
	return p.relationalExpression_In(0)
}

func (p *ECMAScriptParser) relationalExpression_In(_p int) (localctx IRelationalExpression_InContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationalExpression_InContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationalExpression_InContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 326
	p.EnterRecursionRule(localctx, 326, ECMAScriptParserRULE_relationalExpression_In, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2950)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2945)
			p.shiftExpression(0)
		}

	case 2:
		{
			p.SetState(2946)
			p.relationalExpression(0)
		}
		{
			p.SetState(2947)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(2948)
			p.shiftExpression(0)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2969)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2967)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) {
			case 1:
				localctx = NewRelationalExpression_InContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In)
				p.SetState(2952)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(2953)
					p.Match(ECMAScriptParserT__30)
				}
				{
					p.SetState(2954)
					p.shiftExpression(0)
				}

			case 2:
				localctx = NewRelationalExpression_InContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In)
				p.SetState(2955)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(2956)
					p.Match(ECMAScriptParserT__31)
				}
				{
					p.SetState(2957)
					p.shiftExpression(0)
				}

			case 3:
				localctx = NewRelationalExpression_InContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In)
				p.SetState(2958)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2959)
					p.Match(ECMAScriptParserT__32)
				}
				{
					p.SetState(2960)
					p.shiftExpression(0)
				}

			case 4:
				localctx = NewRelationalExpression_InContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In)
				p.SetState(2961)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2962)
					p.Match(ECMAScriptParserT__33)
				}
				{
					p.SetState(2963)
					p.shiftExpression(0)
				}

			case 5:
				localctx = NewRelationalExpression_InContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In)
				p.SetState(2964)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2965)
					p.Match(ECMAScriptParserT__34)
				}
				{
					p.SetState(2966)
					p.shiftExpression(0)
				}

			}

		}
		p.SetState(2971)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())
	}

	return localctx
}

// IRelationalExpression_YieldContext is an interface to support dynamic dispatch.
type IRelationalExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationalExpression_YieldContext differentiates from other interfaces.
	IsRelationalExpression_YieldContext()
}

type RelationalExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpression_YieldContext() *RelationalExpression_YieldContext {
	var p = new(RelationalExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_Yield
	return p
}

func (*RelationalExpression_YieldContext) IsRelationalExpression_YieldContext() {}

func NewRelationalExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpression_YieldContext {
	var p = new(RelationalExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_Yield

	return p
}

func (s *RelationalExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpression_YieldContext) ShiftExpression() IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpression_YieldContext) RelationalExpression_Yield() IRelationalExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_YieldContext)
}

func (s *RelationalExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterRelationalExpression_Yield(s)
	}
}

func (s *RelationalExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitRelationalExpression_Yield(s)
	}
}

func (s *RelationalExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitRelationalExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) RelationalExpression_Yield() (localctx IRelationalExpression_YieldContext) {
	return p.relationalExpression_Yield(0)
}

func (p *ECMAScriptParser) relationalExpression_Yield(_p int) (localctx IRelationalExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationalExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationalExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 328
	p.EnterRecursionRule(localctx, 328, ECMAScriptParserRULE_relationalExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2973)
		p.shiftExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2992)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2990)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 185, p.GetParserRuleContext()) {
			case 1:
				localctx = NewRelationalExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Yield)
				p.SetState(2975)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(2976)
					p.Match(ECMAScriptParserT__30)
				}
				{
					p.SetState(2977)
					p.shiftExpression(0)
				}

			case 2:
				localctx = NewRelationalExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Yield)
				p.SetState(2978)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(2979)
					p.Match(ECMAScriptParserT__31)
				}
				{
					p.SetState(2980)
					p.shiftExpression(0)
				}

			case 3:
				localctx = NewRelationalExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Yield)
				p.SetState(2981)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(2982)
					p.Match(ECMAScriptParserT__32)
				}
				{
					p.SetState(2983)
					p.shiftExpression(0)
				}

			case 4:
				localctx = NewRelationalExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Yield)
				p.SetState(2984)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(2985)
					p.Match(ECMAScriptParserT__33)
				}
				{
					p.SetState(2986)
					p.shiftExpression(0)
				}

			case 5:
				localctx = NewRelationalExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Yield)
				p.SetState(2987)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(2988)
					p.Match(ECMAScriptParserT__34)
				}
				{
					p.SetState(2989)
					p.shiftExpression(0)
				}

			}

		}
		p.SetState(2994)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext())
	}

	return localctx
}

// IRelationalExpression_In_YieldContext is an interface to support dynamic dispatch.
type IRelationalExpression_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationalExpression_In_YieldContext differentiates from other interfaces.
	IsRelationalExpression_In_YieldContext()
}

type RelationalExpression_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpression_In_YieldContext() *RelationalExpression_In_YieldContext {
	var p = new(RelationalExpression_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_In_Yield
	return p
}

func (*RelationalExpression_In_YieldContext) IsRelationalExpression_In_YieldContext() {}

func NewRelationalExpression_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpression_In_YieldContext {
	var p = new(RelationalExpression_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_In_Yield

	return p
}

func (s *RelationalExpression_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpression_In_YieldContext) ShiftExpression() IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpression_In_YieldContext) RelationalExpression_Yield() IRelationalExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_YieldContext)
}

func (s *RelationalExpression_In_YieldContext) ShiftExpression_Yield() IShiftExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpression_YieldContext)
}

func (s *RelationalExpression_In_YieldContext) RelationalExpression_In_Yield() IRelationalExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_In_YieldContext)
}

func (s *RelationalExpression_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpression_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpression_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterRelationalExpression_In_Yield(s)
	}
}

func (s *RelationalExpression_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitRelationalExpression_In_Yield(s)
	}
}

func (s *RelationalExpression_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitRelationalExpression_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) RelationalExpression_In_Yield() (localctx IRelationalExpression_In_YieldContext) {
	return p.relationalExpression_In_Yield(0)
}

func (p *ECMAScriptParser) relationalExpression_In_Yield(_p int) (localctx IRelationalExpression_In_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationalExpression_In_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationalExpression_In_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 330
	p.EnterRecursionRule(localctx, 330, ECMAScriptParserRULE_relationalExpression_In_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3001)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2996)
			p.shiftExpression(0)
		}

	case 2:
		{
			p.SetState(2997)
			p.relationalExpression_Yield(0)
		}
		{
			p.SetState(2998)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(2999)
			p.shiftExpression_Yield(0)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3020)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3018)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext()) {
			case 1:
				localctx = NewRelationalExpression_In_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Yield)
				p.SetState(3003)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(3004)
					p.Match(ECMAScriptParserT__30)
				}
				{
					p.SetState(3005)
					p.shiftExpression(0)
				}

			case 2:
				localctx = NewRelationalExpression_In_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Yield)
				p.SetState(3006)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(3007)
					p.Match(ECMAScriptParserT__31)
				}
				{
					p.SetState(3008)
					p.shiftExpression(0)
				}

			case 3:
				localctx = NewRelationalExpression_In_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Yield)
				p.SetState(3009)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3010)
					p.Match(ECMAScriptParserT__32)
				}
				{
					p.SetState(3011)
					p.shiftExpression(0)
				}

			case 4:
				localctx = NewRelationalExpression_In_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Yield)
				p.SetState(3012)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3013)
					p.Match(ECMAScriptParserT__33)
				}
				{
					p.SetState(3014)
					p.shiftExpression(0)
				}

			case 5:
				localctx = NewRelationalExpression_In_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Yield)
				p.SetState(3015)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3016)
					p.Match(ECMAScriptParserT__34)
				}
				{
					p.SetState(3017)
					p.shiftExpression(0)
				}

			}

		}
		p.SetState(3022)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())
	}

	return localctx
}

// IRelationalExpression_AwaitContext is an interface to support dynamic dispatch.
type IRelationalExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationalExpression_AwaitContext differentiates from other interfaces.
	IsRelationalExpression_AwaitContext()
}

type RelationalExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpression_AwaitContext() *RelationalExpression_AwaitContext {
	var p = new(RelationalExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_Await
	return p
}

func (*RelationalExpression_AwaitContext) IsRelationalExpression_AwaitContext() {}

func NewRelationalExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpression_AwaitContext {
	var p = new(RelationalExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_Await

	return p
}

func (s *RelationalExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpression_AwaitContext) ShiftExpression() IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpression_AwaitContext) RelationalExpression_Await() IRelationalExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_AwaitContext)
}

func (s *RelationalExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterRelationalExpression_Await(s)
	}
}

func (s *RelationalExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitRelationalExpression_Await(s)
	}
}

func (s *RelationalExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitRelationalExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) RelationalExpression_Await() (localctx IRelationalExpression_AwaitContext) {
	return p.relationalExpression_Await(0)
}

func (p *ECMAScriptParser) relationalExpression_Await(_p int) (localctx IRelationalExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationalExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationalExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 332
	p.EnterRecursionRule(localctx, 332, ECMAScriptParserRULE_relationalExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3024)
		p.shiftExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3043)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3041)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) {
			case 1:
				localctx = NewRelationalExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Await)
				p.SetState(3026)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(3027)
					p.Match(ECMAScriptParserT__30)
				}
				{
					p.SetState(3028)
					p.shiftExpression(0)
				}

			case 2:
				localctx = NewRelationalExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Await)
				p.SetState(3029)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3030)
					p.Match(ECMAScriptParserT__31)
				}
				{
					p.SetState(3031)
					p.shiftExpression(0)
				}

			case 3:
				localctx = NewRelationalExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Await)
				p.SetState(3032)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3033)
					p.Match(ECMAScriptParserT__32)
				}
				{
					p.SetState(3034)
					p.shiftExpression(0)
				}

			case 4:
				localctx = NewRelationalExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Await)
				p.SetState(3035)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3036)
					p.Match(ECMAScriptParserT__33)
				}
				{
					p.SetState(3037)
					p.shiftExpression(0)
				}

			case 5:
				localctx = NewRelationalExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Await)
				p.SetState(3038)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(3039)
					p.Match(ECMAScriptParserT__34)
				}
				{
					p.SetState(3040)
					p.shiftExpression(0)
				}

			}

		}
		p.SetState(3045)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext())
	}

	return localctx
}

// IRelationalExpression_In_AwaitContext is an interface to support dynamic dispatch.
type IRelationalExpression_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationalExpression_In_AwaitContext differentiates from other interfaces.
	IsRelationalExpression_In_AwaitContext()
}

type RelationalExpression_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpression_In_AwaitContext() *RelationalExpression_In_AwaitContext {
	var p = new(RelationalExpression_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_In_Await
	return p
}

func (*RelationalExpression_In_AwaitContext) IsRelationalExpression_In_AwaitContext() {}

func NewRelationalExpression_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpression_In_AwaitContext {
	var p = new(RelationalExpression_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_In_Await

	return p
}

func (s *RelationalExpression_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpression_In_AwaitContext) ShiftExpression() IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpression_In_AwaitContext) RelationalExpression_Await() IRelationalExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_AwaitContext)
}

func (s *RelationalExpression_In_AwaitContext) ShiftExpression_Await() IShiftExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpression_AwaitContext)
}

func (s *RelationalExpression_In_AwaitContext) RelationalExpression_In_Await() IRelationalExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_In_AwaitContext)
}

func (s *RelationalExpression_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpression_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpression_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterRelationalExpression_In_Await(s)
	}
}

func (s *RelationalExpression_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitRelationalExpression_In_Await(s)
	}
}

func (s *RelationalExpression_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitRelationalExpression_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) RelationalExpression_In_Await() (localctx IRelationalExpression_In_AwaitContext) {
	return p.relationalExpression_In_Await(0)
}

func (p *ECMAScriptParser) relationalExpression_In_Await(_p int) (localctx IRelationalExpression_In_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationalExpression_In_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationalExpression_In_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 334
	p.EnterRecursionRule(localctx, 334, ECMAScriptParserRULE_relationalExpression_In_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3052)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3047)
			p.shiftExpression(0)
		}

	case 2:
		{
			p.SetState(3048)
			p.relationalExpression_Await(0)
		}
		{
			p.SetState(3049)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(3050)
			p.shiftExpression_Await(0)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3071)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3069)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext()) {
			case 1:
				localctx = NewRelationalExpression_In_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Await)
				p.SetState(3054)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(3055)
					p.Match(ECMAScriptParserT__30)
				}
				{
					p.SetState(3056)
					p.shiftExpression(0)
				}

			case 2:
				localctx = NewRelationalExpression_In_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Await)
				p.SetState(3057)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(3058)
					p.Match(ECMAScriptParserT__31)
				}
				{
					p.SetState(3059)
					p.shiftExpression(0)
				}

			case 3:
				localctx = NewRelationalExpression_In_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Await)
				p.SetState(3060)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3061)
					p.Match(ECMAScriptParserT__32)
				}
				{
					p.SetState(3062)
					p.shiftExpression(0)
				}

			case 4:
				localctx = NewRelationalExpression_In_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Await)
				p.SetState(3063)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3064)
					p.Match(ECMAScriptParserT__33)
				}
				{
					p.SetState(3065)
					p.shiftExpression(0)
				}

			case 5:
				localctx = NewRelationalExpression_In_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Await)
				p.SetState(3066)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3067)
					p.Match(ECMAScriptParserT__34)
				}
				{
					p.SetState(3068)
					p.shiftExpression(0)
				}

			}

		}
		p.SetState(3073)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext())
	}

	return localctx
}

// IRelationalExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IRelationalExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationalExpression_Yield_AwaitContext differentiates from other interfaces.
	IsRelationalExpression_Yield_AwaitContext()
}

type RelationalExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpression_Yield_AwaitContext() *RelationalExpression_Yield_AwaitContext {
	var p = new(RelationalExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_Yield_Await
	return p
}

func (*RelationalExpression_Yield_AwaitContext) IsRelationalExpression_Yield_AwaitContext() {}

func NewRelationalExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpression_Yield_AwaitContext {
	var p = new(RelationalExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_Yield_Await

	return p
}

func (s *RelationalExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpression_Yield_AwaitContext) ShiftExpression() IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpression_Yield_AwaitContext) RelationalExpression_Yield_Await() IRelationalExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_Yield_AwaitContext)
}

func (s *RelationalExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterRelationalExpression_Yield_Await(s)
	}
}

func (s *RelationalExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitRelationalExpression_Yield_Await(s)
	}
}

func (s *RelationalExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitRelationalExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) RelationalExpression_Yield_Await() (localctx IRelationalExpression_Yield_AwaitContext) {
	return p.relationalExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) relationalExpression_Yield_Await(_p int) (localctx IRelationalExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationalExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationalExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 336
	p.EnterRecursionRule(localctx, 336, ECMAScriptParserRULE_relationalExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3075)
		p.shiftExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3094)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3092)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 195, p.GetParserRuleContext()) {
			case 1:
				localctx = NewRelationalExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Yield_Await)
				p.SetState(3077)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(3078)
					p.Match(ECMAScriptParserT__30)
				}
				{
					p.SetState(3079)
					p.shiftExpression(0)
				}

			case 2:
				localctx = NewRelationalExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Yield_Await)
				p.SetState(3080)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3081)
					p.Match(ECMAScriptParserT__31)
				}
				{
					p.SetState(3082)
					p.shiftExpression(0)
				}

			case 3:
				localctx = NewRelationalExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Yield_Await)
				p.SetState(3083)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3084)
					p.Match(ECMAScriptParserT__32)
				}
				{
					p.SetState(3085)
					p.shiftExpression(0)
				}

			case 4:
				localctx = NewRelationalExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Yield_Await)
				p.SetState(3086)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3087)
					p.Match(ECMAScriptParserT__33)
				}
				{
					p.SetState(3088)
					p.shiftExpression(0)
				}

			case 5:
				localctx = NewRelationalExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_Yield_Await)
				p.SetState(3089)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(3090)
					p.Match(ECMAScriptParserT__34)
				}
				{
					p.SetState(3091)
					p.shiftExpression(0)
				}

			}

		}
		p.SetState(3096)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext())
	}

	return localctx
}

// IRelationalExpression_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IRelationalExpression_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationalExpression_In_Yield_AwaitContext differentiates from other interfaces.
	IsRelationalExpression_In_Yield_AwaitContext()
}

type RelationalExpression_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpression_In_Yield_AwaitContext() *RelationalExpression_In_Yield_AwaitContext {
	var p = new(RelationalExpression_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_In_Yield_Await
	return p
}

func (*RelationalExpression_In_Yield_AwaitContext) IsRelationalExpression_In_Yield_AwaitContext() {}

func NewRelationalExpression_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpression_In_Yield_AwaitContext {
	var p = new(RelationalExpression_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_relationalExpression_In_Yield_Await

	return p
}

func (s *RelationalExpression_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpression_In_Yield_AwaitContext) ShiftExpression() IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpression_In_Yield_AwaitContext) RelationalExpression_Yield_Await() IRelationalExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_Yield_AwaitContext)
}

func (s *RelationalExpression_In_Yield_AwaitContext) ShiftExpression_Yield_Await() IShiftExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpression_Yield_AwaitContext)
}

func (s *RelationalExpression_In_Yield_AwaitContext) RelationalExpression_In_Yield_Await() IRelationalExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_In_Yield_AwaitContext)
}

func (s *RelationalExpression_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpression_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpression_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterRelationalExpression_In_Yield_Await(s)
	}
}

func (s *RelationalExpression_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitRelationalExpression_In_Yield_Await(s)
	}
}

func (s *RelationalExpression_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitRelationalExpression_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) RelationalExpression_In_Yield_Await() (localctx IRelationalExpression_In_Yield_AwaitContext) {
	return p.relationalExpression_In_Yield_Await(0)
}

func (p *ECMAScriptParser) relationalExpression_In_Yield_Await(_p int) (localctx IRelationalExpression_In_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationalExpression_In_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationalExpression_In_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 338
	p.EnterRecursionRule(localctx, 338, ECMAScriptParserRULE_relationalExpression_In_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3103)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3098)
			p.shiftExpression(0)
		}

	case 2:
		{
			p.SetState(3099)
			p.relationalExpression_Yield_Await(0)
		}
		{
			p.SetState(3100)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(3101)
			p.shiftExpression_Yield_Await(0)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3122)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3120)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 198, p.GetParserRuleContext()) {
			case 1:
				localctx = NewRelationalExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Yield_Await)
				p.SetState(3105)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(3106)
					p.Match(ECMAScriptParserT__30)
				}
				{
					p.SetState(3107)
					p.shiftExpression(0)
				}

			case 2:
				localctx = NewRelationalExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Yield_Await)
				p.SetState(3108)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(3109)
					p.Match(ECMAScriptParserT__31)
				}
				{
					p.SetState(3110)
					p.shiftExpression(0)
				}

			case 3:
				localctx = NewRelationalExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Yield_Await)
				p.SetState(3111)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3112)
					p.Match(ECMAScriptParserT__32)
				}
				{
					p.SetState(3113)
					p.shiftExpression(0)
				}

			case 4:
				localctx = NewRelationalExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Yield_Await)
				p.SetState(3114)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3115)
					p.Match(ECMAScriptParserT__33)
				}
				{
					p.SetState(3116)
					p.shiftExpression(0)
				}

			case 5:
				localctx = NewRelationalExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_relationalExpression_In_Yield_Await)
				p.SetState(3117)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3118)
					p.Match(ECMAScriptParserT__34)
				}
				{
					p.SetState(3119)
					p.shiftExpression(0)
				}

			}

		}
		p.SetState(3124)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext())
	}

	return localctx
}

// IEqualityExpressionContext is an interface to support dynamic dispatch.
type IEqualityExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityExpressionContext differentiates from other interfaces.
	IsEqualityExpressionContext()
}

type EqualityExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpressionContext() *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression
	return p
}

func (*EqualityExpressionContext) IsEqualityExpressionContext() {}

func NewEqualityExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression

	return p
}

func (s *EqualityExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpressionContext) RelationalExpression() IRelationalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpressionContext)
}

func (s *EqualityExpressionContext) EqualityExpression() IEqualityExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpressionContext)
}

func (s *EqualityExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterEqualityExpression(s)
	}
}

func (s *EqualityExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitEqualityExpression(s)
	}
}

func (s *EqualityExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitEqualityExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) EqualityExpression() (localctx IEqualityExpressionContext) {
	return p.equalityExpression(0)
}

func (p *ECMAScriptParser) equalityExpression(_p int) (localctx IEqualityExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEqualityExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEqualityExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 340
	p.EnterRecursionRule(localctx, 340, ECMAScriptParserRULE_equalityExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3126)
		p.relationalExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3142)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3140)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqualityExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression)
				p.SetState(3128)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3129)
					p.Match(ECMAScriptParserT__36)
				}
				{
					p.SetState(3130)
					p.relationalExpression(0)
				}

			case 2:
				localctx = NewEqualityExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression)
				p.SetState(3131)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3132)
					p.Match(ECMAScriptParserT__37)
				}
				{
					p.SetState(3133)
					p.relationalExpression(0)
				}

			case 3:
				localctx = NewEqualityExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression)
				p.SetState(3134)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3135)
					p.Match(ECMAScriptParserT__38)
				}
				{
					p.SetState(3136)
					p.relationalExpression(0)
				}

			case 4:
				localctx = NewEqualityExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression)
				p.SetState(3137)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(3138)
					p.Match(ECMAScriptParserT__39)
				}
				{
					p.SetState(3139)
					p.relationalExpression(0)
				}

			}

		}
		p.SetState(3144)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext())
	}

	return localctx
}

// IEqualityExpression_InContext is an interface to support dynamic dispatch.
type IEqualityExpression_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityExpression_InContext differentiates from other interfaces.
	IsEqualityExpression_InContext()
}

type EqualityExpression_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpression_InContext() *EqualityExpression_InContext {
	var p = new(EqualityExpression_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_In
	return p
}

func (*EqualityExpression_InContext) IsEqualityExpression_InContext() {}

func NewEqualityExpression_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpression_InContext {
	var p = new(EqualityExpression_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_In

	return p
}

func (s *EqualityExpression_InContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpression_InContext) RelationalExpression_In() IRelationalExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_InContext)
}

func (s *EqualityExpression_InContext) EqualityExpression_In() IEqualityExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_InContext)
}

func (s *EqualityExpression_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpression_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpression_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterEqualityExpression_In(s)
	}
}

func (s *EqualityExpression_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitEqualityExpression_In(s)
	}
}

func (s *EqualityExpression_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitEqualityExpression_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) EqualityExpression_In() (localctx IEqualityExpression_InContext) {
	return p.equalityExpression_In(0)
}

func (p *ECMAScriptParser) equalityExpression_In(_p int) (localctx IEqualityExpression_InContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEqualityExpression_InContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEqualityExpression_InContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 342
	p.EnterRecursionRule(localctx, 342, ECMAScriptParserRULE_equalityExpression_In, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3146)
		p.relationalExpression_In(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3162)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3160)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqualityExpression_InContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In)
				p.SetState(3148)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3149)
					p.Match(ECMAScriptParserT__36)
				}
				{
					p.SetState(3150)
					p.relationalExpression_In(0)
				}

			case 2:
				localctx = NewEqualityExpression_InContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In)
				p.SetState(3151)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3152)
					p.Match(ECMAScriptParserT__37)
				}
				{
					p.SetState(3153)
					p.relationalExpression_In(0)
				}

			case 3:
				localctx = NewEqualityExpression_InContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In)
				p.SetState(3154)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3155)
					p.Match(ECMAScriptParserT__38)
				}
				{
					p.SetState(3156)
					p.relationalExpression_In(0)
				}

			case 4:
				localctx = NewEqualityExpression_InContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In)
				p.SetState(3157)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(3158)
					p.Match(ECMAScriptParserT__39)
				}
				{
					p.SetState(3159)
					p.relationalExpression_In(0)
				}

			}

		}
		p.SetState(3164)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext())
	}

	return localctx
}

// IEqualityExpression_YieldContext is an interface to support dynamic dispatch.
type IEqualityExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityExpression_YieldContext differentiates from other interfaces.
	IsEqualityExpression_YieldContext()
}

type EqualityExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpression_YieldContext() *EqualityExpression_YieldContext {
	var p = new(EqualityExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_Yield
	return p
}

func (*EqualityExpression_YieldContext) IsEqualityExpression_YieldContext() {}

func NewEqualityExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpression_YieldContext {
	var p = new(EqualityExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_Yield

	return p
}

func (s *EqualityExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpression_YieldContext) RelationalExpression_Yield() IRelationalExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_YieldContext)
}

func (s *EqualityExpression_YieldContext) EqualityExpression_Yield() IEqualityExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_YieldContext)
}

func (s *EqualityExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterEqualityExpression_Yield(s)
	}
}

func (s *EqualityExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitEqualityExpression_Yield(s)
	}
}

func (s *EqualityExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitEqualityExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) EqualityExpression_Yield() (localctx IEqualityExpression_YieldContext) {
	return p.equalityExpression_Yield(0)
}

func (p *ECMAScriptParser) equalityExpression_Yield(_p int) (localctx IEqualityExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEqualityExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEqualityExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 344
	p.EnterRecursionRule(localctx, 344, ECMAScriptParserRULE_equalityExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3166)
		p.relationalExpression_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3182)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3180)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqualityExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Yield)
				p.SetState(3168)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3169)
					p.Match(ECMAScriptParserT__36)
				}
				{
					p.SetState(3170)
					p.relationalExpression_Yield(0)
				}

			case 2:
				localctx = NewEqualityExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Yield)
				p.SetState(3171)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3172)
					p.Match(ECMAScriptParserT__37)
				}
				{
					p.SetState(3173)
					p.relationalExpression_Yield(0)
				}

			case 3:
				localctx = NewEqualityExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Yield)
				p.SetState(3174)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3175)
					p.Match(ECMAScriptParserT__38)
				}
				{
					p.SetState(3176)
					p.relationalExpression_Yield(0)
				}

			case 4:
				localctx = NewEqualityExpression_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Yield)
				p.SetState(3177)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(3178)
					p.Match(ECMAScriptParserT__39)
				}
				{
					p.SetState(3179)
					p.relationalExpression_Yield(0)
				}

			}

		}
		p.SetState(3184)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext())
	}

	return localctx
}

// IEqualityExpression_In_YieldContext is an interface to support dynamic dispatch.
type IEqualityExpression_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityExpression_In_YieldContext differentiates from other interfaces.
	IsEqualityExpression_In_YieldContext()
}

type EqualityExpression_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpression_In_YieldContext() *EqualityExpression_In_YieldContext {
	var p = new(EqualityExpression_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_In_Yield
	return p
}

func (*EqualityExpression_In_YieldContext) IsEqualityExpression_In_YieldContext() {}

func NewEqualityExpression_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpression_In_YieldContext {
	var p = new(EqualityExpression_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_In_Yield

	return p
}

func (s *EqualityExpression_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpression_In_YieldContext) RelationalExpression_In_Yield() IRelationalExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_In_YieldContext)
}

func (s *EqualityExpression_In_YieldContext) EqualityExpression_In_Yield() IEqualityExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_YieldContext)
}

func (s *EqualityExpression_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpression_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpression_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterEqualityExpression_In_Yield(s)
	}
}

func (s *EqualityExpression_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitEqualityExpression_In_Yield(s)
	}
}

func (s *EqualityExpression_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitEqualityExpression_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) EqualityExpression_In_Yield() (localctx IEqualityExpression_In_YieldContext) {
	return p.equalityExpression_In_Yield(0)
}

func (p *ECMAScriptParser) equalityExpression_In_Yield(_p int) (localctx IEqualityExpression_In_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEqualityExpression_In_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEqualityExpression_In_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 346
	p.EnterRecursionRule(localctx, 346, ECMAScriptParserRULE_equalityExpression_In_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3186)
		p.relationalExpression_In_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3202)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3200)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 206, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqualityExpression_In_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Yield)
				p.SetState(3188)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3189)
					p.Match(ECMAScriptParserT__36)
				}
				{
					p.SetState(3190)
					p.relationalExpression_In_Yield(0)
				}

			case 2:
				localctx = NewEqualityExpression_In_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Yield)
				p.SetState(3191)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3192)
					p.Match(ECMAScriptParserT__37)
				}
				{
					p.SetState(3193)
					p.relationalExpression_In_Yield(0)
				}

			case 3:
				localctx = NewEqualityExpression_In_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Yield)
				p.SetState(3194)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3195)
					p.Match(ECMAScriptParserT__38)
				}
				{
					p.SetState(3196)
					p.relationalExpression_In_Yield(0)
				}

			case 4:
				localctx = NewEqualityExpression_In_YieldContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Yield)
				p.SetState(3197)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(3198)
					p.Match(ECMAScriptParserT__39)
				}
				{
					p.SetState(3199)
					p.relationalExpression_In_Yield(0)
				}

			}

		}
		p.SetState(3204)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext())
	}

	return localctx
}

// IEqualityExpression_AwaitContext is an interface to support dynamic dispatch.
type IEqualityExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityExpression_AwaitContext differentiates from other interfaces.
	IsEqualityExpression_AwaitContext()
}

type EqualityExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpression_AwaitContext() *EqualityExpression_AwaitContext {
	var p = new(EqualityExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_Await
	return p
}

func (*EqualityExpression_AwaitContext) IsEqualityExpression_AwaitContext() {}

func NewEqualityExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpression_AwaitContext {
	var p = new(EqualityExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_Await

	return p
}

func (s *EqualityExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpression_AwaitContext) RelationalExpression_Await() IRelationalExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_AwaitContext)
}

func (s *EqualityExpression_AwaitContext) EqualityExpression_Await() IEqualityExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_AwaitContext)
}

func (s *EqualityExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterEqualityExpression_Await(s)
	}
}

func (s *EqualityExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitEqualityExpression_Await(s)
	}
}

func (s *EqualityExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitEqualityExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) EqualityExpression_Await() (localctx IEqualityExpression_AwaitContext) {
	return p.equalityExpression_Await(0)
}

func (p *ECMAScriptParser) equalityExpression_Await(_p int) (localctx IEqualityExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEqualityExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEqualityExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 348
	p.EnterRecursionRule(localctx, 348, ECMAScriptParserRULE_equalityExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3206)
		p.relationalExpression_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3222)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3220)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 208, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqualityExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Await)
				p.SetState(3208)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3209)
					p.Match(ECMAScriptParserT__36)
				}
				{
					p.SetState(3210)
					p.relationalExpression_Await(0)
				}

			case 2:
				localctx = NewEqualityExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Await)
				p.SetState(3211)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3212)
					p.Match(ECMAScriptParserT__37)
				}
				{
					p.SetState(3213)
					p.relationalExpression_Await(0)
				}

			case 3:
				localctx = NewEqualityExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Await)
				p.SetState(3214)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3215)
					p.Match(ECMAScriptParserT__38)
				}
				{
					p.SetState(3216)
					p.relationalExpression_Await(0)
				}

			case 4:
				localctx = NewEqualityExpression_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Await)
				p.SetState(3217)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(3218)
					p.Match(ECMAScriptParserT__39)
				}
				{
					p.SetState(3219)
					p.relationalExpression_Await(0)
				}

			}

		}
		p.SetState(3224)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext())
	}

	return localctx
}

// IEqualityExpression_In_AwaitContext is an interface to support dynamic dispatch.
type IEqualityExpression_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityExpression_In_AwaitContext differentiates from other interfaces.
	IsEqualityExpression_In_AwaitContext()
}

type EqualityExpression_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpression_In_AwaitContext() *EqualityExpression_In_AwaitContext {
	var p = new(EqualityExpression_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_In_Await
	return p
}

func (*EqualityExpression_In_AwaitContext) IsEqualityExpression_In_AwaitContext() {}

func NewEqualityExpression_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpression_In_AwaitContext {
	var p = new(EqualityExpression_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_In_Await

	return p
}

func (s *EqualityExpression_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpression_In_AwaitContext) RelationalExpression_In_Await() IRelationalExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_In_AwaitContext)
}

func (s *EqualityExpression_In_AwaitContext) EqualityExpression_In_Await() IEqualityExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_AwaitContext)
}

func (s *EqualityExpression_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpression_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpression_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterEqualityExpression_In_Await(s)
	}
}

func (s *EqualityExpression_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitEqualityExpression_In_Await(s)
	}
}

func (s *EqualityExpression_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitEqualityExpression_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) EqualityExpression_In_Await() (localctx IEqualityExpression_In_AwaitContext) {
	return p.equalityExpression_In_Await(0)
}

func (p *ECMAScriptParser) equalityExpression_In_Await(_p int) (localctx IEqualityExpression_In_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEqualityExpression_In_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEqualityExpression_In_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 350
	p.EnterRecursionRule(localctx, 350, ECMAScriptParserRULE_equalityExpression_In_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3226)
		p.relationalExpression_In_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3242)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3240)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqualityExpression_In_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Await)
				p.SetState(3228)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3229)
					p.Match(ECMAScriptParserT__36)
				}
				{
					p.SetState(3230)
					p.relationalExpression_In_Await(0)
				}

			case 2:
				localctx = NewEqualityExpression_In_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Await)
				p.SetState(3231)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3232)
					p.Match(ECMAScriptParserT__37)
				}
				{
					p.SetState(3233)
					p.relationalExpression_In_Await(0)
				}

			case 3:
				localctx = NewEqualityExpression_In_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Await)
				p.SetState(3234)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3235)
					p.Match(ECMAScriptParserT__38)
				}
				{
					p.SetState(3236)
					p.relationalExpression_In_Await(0)
				}

			case 4:
				localctx = NewEqualityExpression_In_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Await)
				p.SetState(3237)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(3238)
					p.Match(ECMAScriptParserT__39)
				}
				{
					p.SetState(3239)
					p.relationalExpression_In_Await(0)
				}

			}

		}
		p.SetState(3244)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext())
	}

	return localctx
}

// IEqualityExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IEqualityExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityExpression_Yield_AwaitContext differentiates from other interfaces.
	IsEqualityExpression_Yield_AwaitContext()
}

type EqualityExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpression_Yield_AwaitContext() *EqualityExpression_Yield_AwaitContext {
	var p = new(EqualityExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_Yield_Await
	return p
}

func (*EqualityExpression_Yield_AwaitContext) IsEqualityExpression_Yield_AwaitContext() {}

func NewEqualityExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpression_Yield_AwaitContext {
	var p = new(EqualityExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_Yield_Await

	return p
}

func (s *EqualityExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpression_Yield_AwaitContext) RelationalExpression_Yield_Await() IRelationalExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_Yield_AwaitContext)
}

func (s *EqualityExpression_Yield_AwaitContext) EqualityExpression_Yield_Await() IEqualityExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_Yield_AwaitContext)
}

func (s *EqualityExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterEqualityExpression_Yield_Await(s)
	}
}

func (s *EqualityExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitEqualityExpression_Yield_Await(s)
	}
}

func (s *EqualityExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitEqualityExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) EqualityExpression_Yield_Await() (localctx IEqualityExpression_Yield_AwaitContext) {
	return p.equalityExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) equalityExpression_Yield_Await(_p int) (localctx IEqualityExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEqualityExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEqualityExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 352
	p.EnterRecursionRule(localctx, 352, ECMAScriptParserRULE_equalityExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3246)
		p.relationalExpression_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3262)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3260)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqualityExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Yield_Await)
				p.SetState(3248)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3249)
					p.Match(ECMAScriptParserT__36)
				}
				{
					p.SetState(3250)
					p.relationalExpression_Yield_Await(0)
				}

			case 2:
				localctx = NewEqualityExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Yield_Await)
				p.SetState(3251)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3252)
					p.Match(ECMAScriptParserT__37)
				}
				{
					p.SetState(3253)
					p.relationalExpression_Yield_Await(0)
				}

			case 3:
				localctx = NewEqualityExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Yield_Await)
				p.SetState(3254)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3255)
					p.Match(ECMAScriptParserT__38)
				}
				{
					p.SetState(3256)
					p.relationalExpression_Yield_Await(0)
				}

			case 4:
				localctx = NewEqualityExpression_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_Yield_Await)
				p.SetState(3257)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(3258)
					p.Match(ECMAScriptParserT__39)
				}
				{
					p.SetState(3259)
					p.relationalExpression_Yield_Await(0)
				}

			}

		}
		p.SetState(3264)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext())
	}

	return localctx
}

// IEqualityExpression_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IEqualityExpression_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityExpression_In_Yield_AwaitContext differentiates from other interfaces.
	IsEqualityExpression_In_Yield_AwaitContext()
}

type EqualityExpression_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpression_In_Yield_AwaitContext() *EqualityExpression_In_Yield_AwaitContext {
	var p = new(EqualityExpression_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_In_Yield_Await
	return p
}

func (*EqualityExpression_In_Yield_AwaitContext) IsEqualityExpression_In_Yield_AwaitContext() {}

func NewEqualityExpression_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpression_In_Yield_AwaitContext {
	var p = new(EqualityExpression_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_equalityExpression_In_Yield_Await

	return p
}

func (s *EqualityExpression_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpression_In_Yield_AwaitContext) RelationalExpression_In_Yield_Await() IRelationalExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpression_In_Yield_AwaitContext)
}

func (s *EqualityExpression_In_Yield_AwaitContext) EqualityExpression_In_Yield_Await() IEqualityExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_Yield_AwaitContext)
}

func (s *EqualityExpression_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpression_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpression_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterEqualityExpression_In_Yield_Await(s)
	}
}

func (s *EqualityExpression_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitEqualityExpression_In_Yield_Await(s)
	}
}

func (s *EqualityExpression_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitEqualityExpression_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) EqualityExpression_In_Yield_Await() (localctx IEqualityExpression_In_Yield_AwaitContext) {
	return p.equalityExpression_In_Yield_Await(0)
}

func (p *ECMAScriptParser) equalityExpression_In_Yield_Await(_p int) (localctx IEqualityExpression_In_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEqualityExpression_In_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEqualityExpression_In_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 354
	p.EnterRecursionRule(localctx, 354, ECMAScriptParserRULE_equalityExpression_In_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3266)
		p.relationalExpression_In_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3282)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3280)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqualityExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Yield_Await)
				p.SetState(3268)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(3269)
					p.Match(ECMAScriptParserT__36)
				}
				{
					p.SetState(3270)
					p.relationalExpression_In_Yield_Await(0)
				}

			case 2:
				localctx = NewEqualityExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Yield_Await)
				p.SetState(3271)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(3272)
					p.Match(ECMAScriptParserT__37)
				}
				{
					p.SetState(3273)
					p.relationalExpression_In_Yield_Await(0)
				}

			case 3:
				localctx = NewEqualityExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Yield_Await)
				p.SetState(3274)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(3275)
					p.Match(ECMAScriptParserT__38)
				}
				{
					p.SetState(3276)
					p.relationalExpression_In_Yield_Await(0)
				}

			case 4:
				localctx = NewEqualityExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_equalityExpression_In_Yield_Await)
				p.SetState(3277)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(3278)
					p.Match(ECMAScriptParserT__39)
				}
				{
					p.SetState(3279)
					p.relationalExpression_In_Yield_Await(0)
				}

			}

		}
		p.SetState(3284)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseANDExpressionContext is an interface to support dynamic dispatch.
type IBitwiseANDExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseANDExpressionContext differentiates from other interfaces.
	IsBitwiseANDExpressionContext()
}

type BitwiseANDExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseANDExpressionContext() *BitwiseANDExpressionContext {
	var p = new(BitwiseANDExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression
	return p
}

func (*BitwiseANDExpressionContext) IsBitwiseANDExpressionContext() {}

func NewBitwiseANDExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseANDExpressionContext {
	var p = new(BitwiseANDExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression

	return p
}

func (s *BitwiseANDExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseANDExpressionContext) EqualityExpression() IEqualityExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpressionContext)
}

func (s *BitwiseANDExpressionContext) BitwiseANDExpression() IBitwiseANDExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseANDExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseANDExpressionContext)
}

func (s *BitwiseANDExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseANDExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseANDExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseANDExpression(s)
	}
}

func (s *BitwiseANDExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseANDExpression(s)
	}
}

func (s *BitwiseANDExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseANDExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression() (localctx IBitwiseANDExpressionContext) {
	return p.bitwiseANDExpression(0)
}

func (p *ECMAScriptParser) bitwiseANDExpression(_p int) (localctx IBitwiseANDExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseANDExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseANDExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 356
	p.EnterRecursionRule(localctx, 356, ECMAScriptParserRULE_bitwiseANDExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3286)
		p.equalityExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3293)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseANDExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseANDExpression)
			p.SetState(3288)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3289)
				p.Match(ECMAScriptParserT__40)
			}
			{
				p.SetState(3290)
				p.equalityExpression(0)
			}

		}
		p.SetState(3295)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseANDExpression_InContext is an interface to support dynamic dispatch.
type IBitwiseANDExpression_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseANDExpression_InContext differentiates from other interfaces.
	IsBitwiseANDExpression_InContext()
}

type BitwiseANDExpression_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseANDExpression_InContext() *BitwiseANDExpression_InContext {
	var p = new(BitwiseANDExpression_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_In
	return p
}

func (*BitwiseANDExpression_InContext) IsBitwiseANDExpression_InContext() {}

func NewBitwiseANDExpression_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseANDExpression_InContext {
	var p = new(BitwiseANDExpression_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_In

	return p
}

func (s *BitwiseANDExpression_InContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseANDExpression_InContext) EqualityExpression_In() IEqualityExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_InContext)
}

func (s *BitwiseANDExpression_InContext) BitwiseANDExpression_In() IBitwiseANDExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseANDExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseANDExpression_InContext)
}

func (s *BitwiseANDExpression_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseANDExpression_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseANDExpression_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseANDExpression_In(s)
	}
}

func (s *BitwiseANDExpression_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseANDExpression_In(s)
	}
}

func (s *BitwiseANDExpression_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseANDExpression_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_In() (localctx IBitwiseANDExpression_InContext) {
	return p.bitwiseANDExpression_In(0)
}

func (p *ECMAScriptParser) bitwiseANDExpression_In(_p int) (localctx IBitwiseANDExpression_InContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseANDExpression_InContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseANDExpression_InContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 358
	p.EnterRecursionRule(localctx, 358, ECMAScriptParserRULE_bitwiseANDExpression_In, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3297)
		p.equalityExpression_In(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3304)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseANDExpression_InContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseANDExpression_In)
			p.SetState(3299)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3300)
				p.Match(ECMAScriptParserT__40)
			}
			{
				p.SetState(3301)
				p.equalityExpression_In(0)
			}

		}
		p.SetState(3306)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseANDExpression_YieldContext is an interface to support dynamic dispatch.
type IBitwiseANDExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseANDExpression_YieldContext differentiates from other interfaces.
	IsBitwiseANDExpression_YieldContext()
}

type BitwiseANDExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseANDExpression_YieldContext() *BitwiseANDExpression_YieldContext {
	var p = new(BitwiseANDExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_Yield
	return p
}

func (*BitwiseANDExpression_YieldContext) IsBitwiseANDExpression_YieldContext() {}

func NewBitwiseANDExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseANDExpression_YieldContext {
	var p = new(BitwiseANDExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_Yield

	return p
}

func (s *BitwiseANDExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseANDExpression_YieldContext) EqualityExpression_Yield() IEqualityExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_YieldContext)
}

func (s *BitwiseANDExpression_YieldContext) BitwiseANDExpression_Yield() IBitwiseANDExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseANDExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseANDExpression_YieldContext)
}

func (s *BitwiseANDExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseANDExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseANDExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseANDExpression_Yield(s)
	}
}

func (s *BitwiseANDExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseANDExpression_Yield(s)
	}
}

func (s *BitwiseANDExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseANDExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_Yield() (localctx IBitwiseANDExpression_YieldContext) {
	return p.bitwiseANDExpression_Yield(0)
}

func (p *ECMAScriptParser) bitwiseANDExpression_Yield(_p int) (localctx IBitwiseANDExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseANDExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseANDExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 360
	p.EnterRecursionRule(localctx, 360, ECMAScriptParserRULE_bitwiseANDExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3308)
		p.equalityExpression_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3315)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseANDExpression_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseANDExpression_Yield)
			p.SetState(3310)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3311)
				p.Match(ECMAScriptParserT__40)
			}
			{
				p.SetState(3312)
				p.equalityExpression_Yield(0)
			}

		}
		p.SetState(3317)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseANDExpression_In_YieldContext is an interface to support dynamic dispatch.
type IBitwiseANDExpression_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseANDExpression_In_YieldContext differentiates from other interfaces.
	IsBitwiseANDExpression_In_YieldContext()
}

type BitwiseANDExpression_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseANDExpression_In_YieldContext() *BitwiseANDExpression_In_YieldContext {
	var p = new(BitwiseANDExpression_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_In_Yield
	return p
}

func (*BitwiseANDExpression_In_YieldContext) IsBitwiseANDExpression_In_YieldContext() {}

func NewBitwiseANDExpression_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseANDExpression_In_YieldContext {
	var p = new(BitwiseANDExpression_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_In_Yield

	return p
}

func (s *BitwiseANDExpression_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseANDExpression_In_YieldContext) EqualityExpression_In_Yield() IEqualityExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_YieldContext)
}

func (s *BitwiseANDExpression_In_YieldContext) BitwiseANDExpression_In_Yield() IBitwiseANDExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseANDExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseANDExpression_In_YieldContext)
}

func (s *BitwiseANDExpression_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseANDExpression_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseANDExpression_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseANDExpression_In_Yield(s)
	}
}

func (s *BitwiseANDExpression_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseANDExpression_In_Yield(s)
	}
}

func (s *BitwiseANDExpression_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseANDExpression_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_In_Yield() (localctx IBitwiseANDExpression_In_YieldContext) {
	return p.bitwiseANDExpression_In_Yield(0)
}

func (p *ECMAScriptParser) bitwiseANDExpression_In_Yield(_p int) (localctx IBitwiseANDExpression_In_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseANDExpression_In_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseANDExpression_In_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 362
	p.EnterRecursionRule(localctx, 362, ECMAScriptParserRULE_bitwiseANDExpression_In_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3319)
		p.equalityExpression_In_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3326)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 219, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseANDExpression_In_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseANDExpression_In_Yield)
			p.SetState(3321)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3322)
				p.Match(ECMAScriptParserT__40)
			}
			{
				p.SetState(3323)
				p.equalityExpression_In_Yield(0)
			}

		}
		p.SetState(3328)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 219, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseANDExpression_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseANDExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseANDExpression_AwaitContext differentiates from other interfaces.
	IsBitwiseANDExpression_AwaitContext()
}

type BitwiseANDExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseANDExpression_AwaitContext() *BitwiseANDExpression_AwaitContext {
	var p = new(BitwiseANDExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_Await
	return p
}

func (*BitwiseANDExpression_AwaitContext) IsBitwiseANDExpression_AwaitContext() {}

func NewBitwiseANDExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseANDExpression_AwaitContext {
	var p = new(BitwiseANDExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_Await

	return p
}

func (s *BitwiseANDExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseANDExpression_AwaitContext) EqualityExpression_Await() IEqualityExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_AwaitContext)
}

func (s *BitwiseANDExpression_AwaitContext) BitwiseANDExpression_Await() IBitwiseANDExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseANDExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseANDExpression_AwaitContext)
}

func (s *BitwiseANDExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseANDExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseANDExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseANDExpression_Await(s)
	}
}

func (s *BitwiseANDExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseANDExpression_Await(s)
	}
}

func (s *BitwiseANDExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseANDExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_Await() (localctx IBitwiseANDExpression_AwaitContext) {
	return p.bitwiseANDExpression_Await(0)
}

func (p *ECMAScriptParser) bitwiseANDExpression_Await(_p int) (localctx IBitwiseANDExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseANDExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseANDExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 364
	p.EnterRecursionRule(localctx, 364, ECMAScriptParserRULE_bitwiseANDExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3330)
		p.equalityExpression_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3337)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseANDExpression_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseANDExpression_Await)
			p.SetState(3332)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3333)
				p.Match(ECMAScriptParserT__40)
			}
			{
				p.SetState(3334)
				p.equalityExpression_Await(0)
			}

		}
		p.SetState(3339)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseANDExpression_In_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseANDExpression_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseANDExpression_In_AwaitContext differentiates from other interfaces.
	IsBitwiseANDExpression_In_AwaitContext()
}

type BitwiseANDExpression_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseANDExpression_In_AwaitContext() *BitwiseANDExpression_In_AwaitContext {
	var p = new(BitwiseANDExpression_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_In_Await
	return p
}

func (*BitwiseANDExpression_In_AwaitContext) IsBitwiseANDExpression_In_AwaitContext() {}

func NewBitwiseANDExpression_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseANDExpression_In_AwaitContext {
	var p = new(BitwiseANDExpression_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_In_Await

	return p
}

func (s *BitwiseANDExpression_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseANDExpression_In_AwaitContext) EqualityExpression_In_Await() IEqualityExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_AwaitContext)
}

func (s *BitwiseANDExpression_In_AwaitContext) BitwiseANDExpression_In_Await() IBitwiseANDExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseANDExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseANDExpression_In_AwaitContext)
}

func (s *BitwiseANDExpression_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseANDExpression_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseANDExpression_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseANDExpression_In_Await(s)
	}
}

func (s *BitwiseANDExpression_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseANDExpression_In_Await(s)
	}
}

func (s *BitwiseANDExpression_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseANDExpression_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_In_Await() (localctx IBitwiseANDExpression_In_AwaitContext) {
	return p.bitwiseANDExpression_In_Await(0)
}

func (p *ECMAScriptParser) bitwiseANDExpression_In_Await(_p int) (localctx IBitwiseANDExpression_In_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseANDExpression_In_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseANDExpression_In_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 366
	p.EnterRecursionRule(localctx, 366, ECMAScriptParserRULE_bitwiseANDExpression_In_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3341)
		p.equalityExpression_In_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3348)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseANDExpression_In_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseANDExpression_In_Await)
			p.SetState(3343)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3344)
				p.Match(ECMAScriptParserT__40)
			}
			{
				p.SetState(3345)
				p.equalityExpression_In_Await(0)
			}

		}
		p.SetState(3350)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseANDExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseANDExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseANDExpression_Yield_AwaitContext differentiates from other interfaces.
	IsBitwiseANDExpression_Yield_AwaitContext()
}

type BitwiseANDExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseANDExpression_Yield_AwaitContext() *BitwiseANDExpression_Yield_AwaitContext {
	var p = new(BitwiseANDExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_Yield_Await
	return p
}

func (*BitwiseANDExpression_Yield_AwaitContext) IsBitwiseANDExpression_Yield_AwaitContext() {}

func NewBitwiseANDExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseANDExpression_Yield_AwaitContext {
	var p = new(BitwiseANDExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_Yield_Await

	return p
}

func (s *BitwiseANDExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseANDExpression_Yield_AwaitContext) EqualityExpression_Yield_Await() IEqualityExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_Yield_AwaitContext)
}

func (s *BitwiseANDExpression_Yield_AwaitContext) BitwiseANDExpression_Yield_Await() IBitwiseANDExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseANDExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseANDExpression_Yield_AwaitContext)
}

func (s *BitwiseANDExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseANDExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseANDExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseANDExpression_Yield_Await(s)
	}
}

func (s *BitwiseANDExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseANDExpression_Yield_Await(s)
	}
}

func (s *BitwiseANDExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseANDExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_Yield_Await() (localctx IBitwiseANDExpression_Yield_AwaitContext) {
	return p.bitwiseANDExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) bitwiseANDExpression_Yield_Await(_p int) (localctx IBitwiseANDExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseANDExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseANDExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 368
	p.EnterRecursionRule(localctx, 368, ECMAScriptParserRULE_bitwiseANDExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3352)
		p.equalityExpression_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3359)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseANDExpression_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseANDExpression_Yield_Await)
			p.SetState(3354)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3355)
				p.Match(ECMAScriptParserT__40)
			}
			{
				p.SetState(3356)
				p.equalityExpression_Yield_Await(0)
			}

		}
		p.SetState(3361)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseANDExpression_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseANDExpression_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseANDExpression_In_Yield_AwaitContext differentiates from other interfaces.
	IsBitwiseANDExpression_In_Yield_AwaitContext()
}

type BitwiseANDExpression_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseANDExpression_In_Yield_AwaitContext() *BitwiseANDExpression_In_Yield_AwaitContext {
	var p = new(BitwiseANDExpression_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_In_Yield_Await
	return p
}

func (*BitwiseANDExpression_In_Yield_AwaitContext) IsBitwiseANDExpression_In_Yield_AwaitContext() {}

func NewBitwiseANDExpression_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseANDExpression_In_Yield_AwaitContext {
	var p = new(BitwiseANDExpression_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseANDExpression_In_Yield_Await

	return p
}

func (s *BitwiseANDExpression_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseANDExpression_In_Yield_AwaitContext) EqualityExpression_In_Yield_Await() IEqualityExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_Yield_AwaitContext)
}

func (s *BitwiseANDExpression_In_Yield_AwaitContext) BitwiseANDExpression_In_Yield_Await() IBitwiseANDExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseANDExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseANDExpression_In_Yield_AwaitContext)
}

func (s *BitwiseANDExpression_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseANDExpression_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseANDExpression_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseANDExpression_In_Yield_Await(s)
	}
}

func (s *BitwiseANDExpression_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseANDExpression_In_Yield_Await(s)
	}
}

func (s *BitwiseANDExpression_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseANDExpression_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_In_Yield_Await() (localctx IBitwiseANDExpression_In_Yield_AwaitContext) {
	return p.bitwiseANDExpression_In_Yield_Await(0)
}

func (p *ECMAScriptParser) bitwiseANDExpression_In_Yield_Await(_p int) (localctx IBitwiseANDExpression_In_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseANDExpression_In_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseANDExpression_In_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 370
	p.EnterRecursionRule(localctx, 370, ECMAScriptParserRULE_bitwiseANDExpression_In_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3363)
		p.equalityExpression_In_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3370)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 223, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseANDExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseANDExpression_In_Yield_Await)
			p.SetState(3365)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3366)
				p.Match(ECMAScriptParserT__40)
			}
			{
				p.SetState(3367)
				p.equalityExpression_In_Yield_Await(0)
			}

		}
		p.SetState(3372)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 223, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseXORExpressionContext is an interface to support dynamic dispatch.
type IBitwiseXORExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseXORExpressionContext differentiates from other interfaces.
	IsBitwiseXORExpressionContext()
}

type BitwiseXORExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseXORExpressionContext() *BitwiseXORExpressionContext {
	var p = new(BitwiseXORExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression
	return p
}

func (*BitwiseXORExpressionContext) IsBitwiseXORExpressionContext() {}

func NewBitwiseXORExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseXORExpressionContext {
	var p = new(BitwiseXORExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression

	return p
}

func (s *BitwiseXORExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseXORExpressionContext) EqualityExpression() IEqualityExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpressionContext)
}

func (s *BitwiseXORExpressionContext) BitwiseXORExpression() IBitwiseXORExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseXORExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseXORExpressionContext)
}

func (s *BitwiseXORExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXORExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseXORExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseXORExpression(s)
	}
}

func (s *BitwiseXORExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseXORExpression(s)
	}
}

func (s *BitwiseXORExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseXORExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression() (localctx IBitwiseXORExpressionContext) {
	return p.bitwiseXORExpression(0)
}

func (p *ECMAScriptParser) bitwiseXORExpression(_p int) (localctx IBitwiseXORExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseXORExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseXORExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 372
	p.EnterRecursionRule(localctx, 372, ECMAScriptParserRULE_bitwiseXORExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3374)
		p.equalityExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3381)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 224, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseXORExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseXORExpression)
			p.SetState(3376)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3377)
				p.Match(ECMAScriptParserT__41)
			}
			{
				p.SetState(3378)
				p.equalityExpression(0)
			}

		}
		p.SetState(3383)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 224, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseXORExpression_InContext is an interface to support dynamic dispatch.
type IBitwiseXORExpression_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseXORExpression_InContext differentiates from other interfaces.
	IsBitwiseXORExpression_InContext()
}

type BitwiseXORExpression_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseXORExpression_InContext() *BitwiseXORExpression_InContext {
	var p = new(BitwiseXORExpression_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_In
	return p
}

func (*BitwiseXORExpression_InContext) IsBitwiseXORExpression_InContext() {}

func NewBitwiseXORExpression_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseXORExpression_InContext {
	var p = new(BitwiseXORExpression_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_In

	return p
}

func (s *BitwiseXORExpression_InContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseXORExpression_InContext) EqualityExpression_In() IEqualityExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_InContext)
}

func (s *BitwiseXORExpression_InContext) BitwiseXORExpression_In() IBitwiseXORExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseXORExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseXORExpression_InContext)
}

func (s *BitwiseXORExpression_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXORExpression_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseXORExpression_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseXORExpression_In(s)
	}
}

func (s *BitwiseXORExpression_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseXORExpression_In(s)
	}
}

func (s *BitwiseXORExpression_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseXORExpression_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_In() (localctx IBitwiseXORExpression_InContext) {
	return p.bitwiseXORExpression_In(0)
}

func (p *ECMAScriptParser) bitwiseXORExpression_In(_p int) (localctx IBitwiseXORExpression_InContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseXORExpression_InContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseXORExpression_InContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 374
	p.EnterRecursionRule(localctx, 374, ECMAScriptParserRULE_bitwiseXORExpression_In, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3385)
		p.equalityExpression_In(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3392)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseXORExpression_InContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseXORExpression_In)
			p.SetState(3387)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3388)
				p.Match(ECMAScriptParserT__41)
			}
			{
				p.SetState(3389)
				p.equalityExpression_In(0)
			}

		}
		p.SetState(3394)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseXORExpression_YieldContext is an interface to support dynamic dispatch.
type IBitwiseXORExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseXORExpression_YieldContext differentiates from other interfaces.
	IsBitwiseXORExpression_YieldContext()
}

type BitwiseXORExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseXORExpression_YieldContext() *BitwiseXORExpression_YieldContext {
	var p = new(BitwiseXORExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_Yield
	return p
}

func (*BitwiseXORExpression_YieldContext) IsBitwiseXORExpression_YieldContext() {}

func NewBitwiseXORExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseXORExpression_YieldContext {
	var p = new(BitwiseXORExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_Yield

	return p
}

func (s *BitwiseXORExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseXORExpression_YieldContext) EqualityExpression_Yield() IEqualityExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_YieldContext)
}

func (s *BitwiseXORExpression_YieldContext) BitwiseXORExpression_Yield() IBitwiseXORExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseXORExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseXORExpression_YieldContext)
}

func (s *BitwiseXORExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXORExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseXORExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseXORExpression_Yield(s)
	}
}

func (s *BitwiseXORExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseXORExpression_Yield(s)
	}
}

func (s *BitwiseXORExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseXORExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_Yield() (localctx IBitwiseXORExpression_YieldContext) {
	return p.bitwiseXORExpression_Yield(0)
}

func (p *ECMAScriptParser) bitwiseXORExpression_Yield(_p int) (localctx IBitwiseXORExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseXORExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseXORExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 376
	p.EnterRecursionRule(localctx, 376, ECMAScriptParserRULE_bitwiseXORExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3396)
		p.equalityExpression_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3403)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseXORExpression_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseXORExpression_Yield)
			p.SetState(3398)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3399)
				p.Match(ECMAScriptParserT__41)
			}
			{
				p.SetState(3400)
				p.equalityExpression_Yield(0)
			}

		}
		p.SetState(3405)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseXORExpression_In_YieldContext is an interface to support dynamic dispatch.
type IBitwiseXORExpression_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseXORExpression_In_YieldContext differentiates from other interfaces.
	IsBitwiseXORExpression_In_YieldContext()
}

type BitwiseXORExpression_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseXORExpression_In_YieldContext() *BitwiseXORExpression_In_YieldContext {
	var p = new(BitwiseXORExpression_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_In_Yield
	return p
}

func (*BitwiseXORExpression_In_YieldContext) IsBitwiseXORExpression_In_YieldContext() {}

func NewBitwiseXORExpression_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseXORExpression_In_YieldContext {
	var p = new(BitwiseXORExpression_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_In_Yield

	return p
}

func (s *BitwiseXORExpression_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseXORExpression_In_YieldContext) EqualityExpression_In_Yield() IEqualityExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_YieldContext)
}

func (s *BitwiseXORExpression_In_YieldContext) BitwiseXORExpression_In_Yield() IBitwiseXORExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseXORExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseXORExpression_In_YieldContext)
}

func (s *BitwiseXORExpression_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXORExpression_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseXORExpression_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseXORExpression_In_Yield(s)
	}
}

func (s *BitwiseXORExpression_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseXORExpression_In_Yield(s)
	}
}

func (s *BitwiseXORExpression_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseXORExpression_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_In_Yield() (localctx IBitwiseXORExpression_In_YieldContext) {
	return p.bitwiseXORExpression_In_Yield(0)
}

func (p *ECMAScriptParser) bitwiseXORExpression_In_Yield(_p int) (localctx IBitwiseXORExpression_In_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseXORExpression_In_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseXORExpression_In_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 378
	p.EnterRecursionRule(localctx, 378, ECMAScriptParserRULE_bitwiseXORExpression_In_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3407)
		p.equalityExpression_In_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3414)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseXORExpression_In_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseXORExpression_In_Yield)
			p.SetState(3409)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3410)
				p.Match(ECMAScriptParserT__41)
			}
			{
				p.SetState(3411)
				p.equalityExpression_In_Yield(0)
			}

		}
		p.SetState(3416)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseXORExpression_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseXORExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseXORExpression_AwaitContext differentiates from other interfaces.
	IsBitwiseXORExpression_AwaitContext()
}

type BitwiseXORExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseXORExpression_AwaitContext() *BitwiseXORExpression_AwaitContext {
	var p = new(BitwiseXORExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_Await
	return p
}

func (*BitwiseXORExpression_AwaitContext) IsBitwiseXORExpression_AwaitContext() {}

func NewBitwiseXORExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseXORExpression_AwaitContext {
	var p = new(BitwiseXORExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_Await

	return p
}

func (s *BitwiseXORExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseXORExpression_AwaitContext) EqualityExpression_Await() IEqualityExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_AwaitContext)
}

func (s *BitwiseXORExpression_AwaitContext) BitwiseXORExpression_Await() IBitwiseXORExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseXORExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseXORExpression_AwaitContext)
}

func (s *BitwiseXORExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXORExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseXORExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseXORExpression_Await(s)
	}
}

func (s *BitwiseXORExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseXORExpression_Await(s)
	}
}

func (s *BitwiseXORExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseXORExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_Await() (localctx IBitwiseXORExpression_AwaitContext) {
	return p.bitwiseXORExpression_Await(0)
}

func (p *ECMAScriptParser) bitwiseXORExpression_Await(_p int) (localctx IBitwiseXORExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseXORExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseXORExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 380
	p.EnterRecursionRule(localctx, 380, ECMAScriptParserRULE_bitwiseXORExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3418)
		p.equalityExpression_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3425)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseXORExpression_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseXORExpression_Await)
			p.SetState(3420)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3421)
				p.Match(ECMAScriptParserT__41)
			}
			{
				p.SetState(3422)
				p.equalityExpression_Await(0)
			}

		}
		p.SetState(3427)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseXORExpression_In_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseXORExpression_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseXORExpression_In_AwaitContext differentiates from other interfaces.
	IsBitwiseXORExpression_In_AwaitContext()
}

type BitwiseXORExpression_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseXORExpression_In_AwaitContext() *BitwiseXORExpression_In_AwaitContext {
	var p = new(BitwiseXORExpression_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_In_Await
	return p
}

func (*BitwiseXORExpression_In_AwaitContext) IsBitwiseXORExpression_In_AwaitContext() {}

func NewBitwiseXORExpression_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseXORExpression_In_AwaitContext {
	var p = new(BitwiseXORExpression_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_In_Await

	return p
}

func (s *BitwiseXORExpression_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseXORExpression_In_AwaitContext) EqualityExpression_In_Await() IEqualityExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_AwaitContext)
}

func (s *BitwiseXORExpression_In_AwaitContext) BitwiseXORExpression_In_Await() IBitwiseXORExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseXORExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseXORExpression_In_AwaitContext)
}

func (s *BitwiseXORExpression_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXORExpression_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseXORExpression_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseXORExpression_In_Await(s)
	}
}

func (s *BitwiseXORExpression_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseXORExpression_In_Await(s)
	}
}

func (s *BitwiseXORExpression_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseXORExpression_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_In_Await() (localctx IBitwiseXORExpression_In_AwaitContext) {
	return p.bitwiseXORExpression_In_Await(0)
}

func (p *ECMAScriptParser) bitwiseXORExpression_In_Await(_p int) (localctx IBitwiseXORExpression_In_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseXORExpression_In_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseXORExpression_In_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 382
	p.EnterRecursionRule(localctx, 382, ECMAScriptParserRULE_bitwiseXORExpression_In_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3429)
		p.equalityExpression_In_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3436)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseXORExpression_In_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseXORExpression_In_Await)
			p.SetState(3431)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3432)
				p.Match(ECMAScriptParserT__41)
			}
			{
				p.SetState(3433)
				p.equalityExpression_In_Await(0)
			}

		}
		p.SetState(3438)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseXORExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseXORExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseXORExpression_Yield_AwaitContext differentiates from other interfaces.
	IsBitwiseXORExpression_Yield_AwaitContext()
}

type BitwiseXORExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseXORExpression_Yield_AwaitContext() *BitwiseXORExpression_Yield_AwaitContext {
	var p = new(BitwiseXORExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_Yield_Await
	return p
}

func (*BitwiseXORExpression_Yield_AwaitContext) IsBitwiseXORExpression_Yield_AwaitContext() {}

func NewBitwiseXORExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseXORExpression_Yield_AwaitContext {
	var p = new(BitwiseXORExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_Yield_Await

	return p
}

func (s *BitwiseXORExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseXORExpression_Yield_AwaitContext) EqualityExpression_Yield_Await() IEqualityExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_Yield_AwaitContext)
}

func (s *BitwiseXORExpression_Yield_AwaitContext) BitwiseXORExpression_Yield_Await() IBitwiseXORExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseXORExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseXORExpression_Yield_AwaitContext)
}

func (s *BitwiseXORExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXORExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseXORExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseXORExpression_Yield_Await(s)
	}
}

func (s *BitwiseXORExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseXORExpression_Yield_Await(s)
	}
}

func (s *BitwiseXORExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseXORExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_Yield_Await() (localctx IBitwiseXORExpression_Yield_AwaitContext) {
	return p.bitwiseXORExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) bitwiseXORExpression_Yield_Await(_p int) (localctx IBitwiseXORExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseXORExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseXORExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 384
	p.EnterRecursionRule(localctx, 384, ECMAScriptParserRULE_bitwiseXORExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3440)
		p.equalityExpression_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3447)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseXORExpression_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseXORExpression_Yield_Await)
			p.SetState(3442)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3443)
				p.Match(ECMAScriptParserT__41)
			}
			{
				p.SetState(3444)
				p.equalityExpression_Yield_Await(0)
			}

		}
		p.SetState(3449)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseXORExpression_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseXORExpression_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseXORExpression_In_Yield_AwaitContext differentiates from other interfaces.
	IsBitwiseXORExpression_In_Yield_AwaitContext()
}

type BitwiseXORExpression_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseXORExpression_In_Yield_AwaitContext() *BitwiseXORExpression_In_Yield_AwaitContext {
	var p = new(BitwiseXORExpression_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_In_Yield_Await
	return p
}

func (*BitwiseXORExpression_In_Yield_AwaitContext) IsBitwiseXORExpression_In_Yield_AwaitContext() {}

func NewBitwiseXORExpression_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseXORExpression_In_Yield_AwaitContext {
	var p = new(BitwiseXORExpression_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseXORExpression_In_Yield_Await

	return p
}

func (s *BitwiseXORExpression_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseXORExpression_In_Yield_AwaitContext) EqualityExpression_In_Yield_Await() IEqualityExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_Yield_AwaitContext)
}

func (s *BitwiseXORExpression_In_Yield_AwaitContext) BitwiseXORExpression_In_Yield_Await() IBitwiseXORExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseXORExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseXORExpression_In_Yield_AwaitContext)
}

func (s *BitwiseXORExpression_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXORExpression_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseXORExpression_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseXORExpression_In_Yield_Await(s)
	}
}

func (s *BitwiseXORExpression_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseXORExpression_In_Yield_Await(s)
	}
}

func (s *BitwiseXORExpression_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseXORExpression_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_In_Yield_Await() (localctx IBitwiseXORExpression_In_Yield_AwaitContext) {
	return p.bitwiseXORExpression_In_Yield_Await(0)
}

func (p *ECMAScriptParser) bitwiseXORExpression_In_Yield_Await(_p int) (localctx IBitwiseXORExpression_In_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseXORExpression_In_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseXORExpression_In_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 386
	p.EnterRecursionRule(localctx, 386, ECMAScriptParserRULE_bitwiseXORExpression_In_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3451)
		p.equalityExpression_In_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3458)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseXORExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseXORExpression_In_Yield_Await)
			p.SetState(3453)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3454)
				p.Match(ECMAScriptParserT__41)
			}
			{
				p.SetState(3455)
				p.equalityExpression_In_Yield_Await(0)
			}

		}
		p.SetState(3460)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseORExpressionContext is an interface to support dynamic dispatch.
type IBitwiseORExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseORExpressionContext differentiates from other interfaces.
	IsBitwiseORExpressionContext()
}

type BitwiseORExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseORExpressionContext() *BitwiseORExpressionContext {
	var p = new(BitwiseORExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression
	return p
}

func (*BitwiseORExpressionContext) IsBitwiseORExpressionContext() {}

func NewBitwiseORExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseORExpressionContext {
	var p = new(BitwiseORExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression

	return p
}

func (s *BitwiseORExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseORExpressionContext) EqualityExpression() IEqualityExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpressionContext)
}

func (s *BitwiseORExpressionContext) BitwiseORExpression() IBitwiseORExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpressionContext)
}

func (s *BitwiseORExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseORExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseORExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseORExpression(s)
	}
}

func (s *BitwiseORExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseORExpression(s)
	}
}

func (s *BitwiseORExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseORExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseORExpression() (localctx IBitwiseORExpressionContext) {
	return p.bitwiseORExpression(0)
}

func (p *ECMAScriptParser) bitwiseORExpression(_p int) (localctx IBitwiseORExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseORExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseORExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 388
	p.EnterRecursionRule(localctx, 388, ECMAScriptParserRULE_bitwiseORExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3462)
		p.equalityExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3469)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseORExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseORExpression)
			p.SetState(3464)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3465)
				p.Match(ECMAScriptParserT__42)
			}
			{
				p.SetState(3466)
				p.equalityExpression(0)
			}

		}
		p.SetState(3471)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseORExpression_InContext is an interface to support dynamic dispatch.
type IBitwiseORExpression_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseORExpression_InContext differentiates from other interfaces.
	IsBitwiseORExpression_InContext()
}

type BitwiseORExpression_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseORExpression_InContext() *BitwiseORExpression_InContext {
	var p = new(BitwiseORExpression_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_In
	return p
}

func (*BitwiseORExpression_InContext) IsBitwiseORExpression_InContext() {}

func NewBitwiseORExpression_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseORExpression_InContext {
	var p = new(BitwiseORExpression_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_In

	return p
}

func (s *BitwiseORExpression_InContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseORExpression_InContext) EqualityExpression_In() IEqualityExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_InContext)
}

func (s *BitwiseORExpression_InContext) BitwiseORExpression_In() IBitwiseORExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_InContext)
}

func (s *BitwiseORExpression_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseORExpression_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseORExpression_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseORExpression_In(s)
	}
}

func (s *BitwiseORExpression_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseORExpression_In(s)
	}
}

func (s *BitwiseORExpression_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseORExpression_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_In() (localctx IBitwiseORExpression_InContext) {
	return p.bitwiseORExpression_In(0)
}

func (p *ECMAScriptParser) bitwiseORExpression_In(_p int) (localctx IBitwiseORExpression_InContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseORExpression_InContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseORExpression_InContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 390
	p.EnterRecursionRule(localctx, 390, ECMAScriptParserRULE_bitwiseORExpression_In, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3473)
		p.equalityExpression_In(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3480)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseORExpression_InContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseORExpression_In)
			p.SetState(3475)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3476)
				p.Match(ECMAScriptParserT__42)
			}
			{
				p.SetState(3477)
				p.equalityExpression_In(0)
			}

		}
		p.SetState(3482)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseORExpression_YieldContext is an interface to support dynamic dispatch.
type IBitwiseORExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseORExpression_YieldContext differentiates from other interfaces.
	IsBitwiseORExpression_YieldContext()
}

type BitwiseORExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseORExpression_YieldContext() *BitwiseORExpression_YieldContext {
	var p = new(BitwiseORExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_Yield
	return p
}

func (*BitwiseORExpression_YieldContext) IsBitwiseORExpression_YieldContext() {}

func NewBitwiseORExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseORExpression_YieldContext {
	var p = new(BitwiseORExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_Yield

	return p
}

func (s *BitwiseORExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseORExpression_YieldContext) EqualityExpression_Yield() IEqualityExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_YieldContext)
}

func (s *BitwiseORExpression_YieldContext) BitwiseORExpression_Yield() IBitwiseORExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_YieldContext)
}

func (s *BitwiseORExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseORExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseORExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseORExpression_Yield(s)
	}
}

func (s *BitwiseORExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseORExpression_Yield(s)
	}
}

func (s *BitwiseORExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseORExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_Yield() (localctx IBitwiseORExpression_YieldContext) {
	return p.bitwiseORExpression_Yield(0)
}

func (p *ECMAScriptParser) bitwiseORExpression_Yield(_p int) (localctx IBitwiseORExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseORExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseORExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 392
	p.EnterRecursionRule(localctx, 392, ECMAScriptParserRULE_bitwiseORExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3484)
		p.equalityExpression_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3491)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseORExpression_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseORExpression_Yield)
			p.SetState(3486)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3487)
				p.Match(ECMAScriptParserT__42)
			}
			{
				p.SetState(3488)
				p.equalityExpression_Yield(0)
			}

		}
		p.SetState(3493)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseORExpression_In_YieldContext is an interface to support dynamic dispatch.
type IBitwiseORExpression_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseORExpression_In_YieldContext differentiates from other interfaces.
	IsBitwiseORExpression_In_YieldContext()
}

type BitwiseORExpression_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseORExpression_In_YieldContext() *BitwiseORExpression_In_YieldContext {
	var p = new(BitwiseORExpression_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_In_Yield
	return p
}

func (*BitwiseORExpression_In_YieldContext) IsBitwiseORExpression_In_YieldContext() {}

func NewBitwiseORExpression_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseORExpression_In_YieldContext {
	var p = new(BitwiseORExpression_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_In_Yield

	return p
}

func (s *BitwiseORExpression_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseORExpression_In_YieldContext) EqualityExpression_In_Yield() IEqualityExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_YieldContext)
}

func (s *BitwiseORExpression_In_YieldContext) BitwiseORExpression_In_Yield() IBitwiseORExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_In_YieldContext)
}

func (s *BitwiseORExpression_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseORExpression_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseORExpression_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseORExpression_In_Yield(s)
	}
}

func (s *BitwiseORExpression_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseORExpression_In_Yield(s)
	}
}

func (s *BitwiseORExpression_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseORExpression_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_In_Yield() (localctx IBitwiseORExpression_In_YieldContext) {
	return p.bitwiseORExpression_In_Yield(0)
}

func (p *ECMAScriptParser) bitwiseORExpression_In_Yield(_p int) (localctx IBitwiseORExpression_In_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseORExpression_In_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseORExpression_In_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 394
	p.EnterRecursionRule(localctx, 394, ECMAScriptParserRULE_bitwiseORExpression_In_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3495)
		p.equalityExpression_In_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3502)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseORExpression_In_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseORExpression_In_Yield)
			p.SetState(3497)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3498)
				p.Match(ECMAScriptParserT__42)
			}
			{
				p.SetState(3499)
				p.equalityExpression_In_Yield(0)
			}

		}
		p.SetState(3504)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseORExpression_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseORExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseORExpression_AwaitContext differentiates from other interfaces.
	IsBitwiseORExpression_AwaitContext()
}

type BitwiseORExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseORExpression_AwaitContext() *BitwiseORExpression_AwaitContext {
	var p = new(BitwiseORExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_Await
	return p
}

func (*BitwiseORExpression_AwaitContext) IsBitwiseORExpression_AwaitContext() {}

func NewBitwiseORExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseORExpression_AwaitContext {
	var p = new(BitwiseORExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_Await

	return p
}

func (s *BitwiseORExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseORExpression_AwaitContext) EqualityExpression_Await() IEqualityExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_AwaitContext)
}

func (s *BitwiseORExpression_AwaitContext) BitwiseORExpression_Await() IBitwiseORExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_AwaitContext)
}

func (s *BitwiseORExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseORExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseORExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseORExpression_Await(s)
	}
}

func (s *BitwiseORExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseORExpression_Await(s)
	}
}

func (s *BitwiseORExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseORExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_Await() (localctx IBitwiseORExpression_AwaitContext) {
	return p.bitwiseORExpression_Await(0)
}

func (p *ECMAScriptParser) bitwiseORExpression_Await(_p int) (localctx IBitwiseORExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseORExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseORExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 396
	p.EnterRecursionRule(localctx, 396, ECMAScriptParserRULE_bitwiseORExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3506)
		p.equalityExpression_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3513)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 236, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseORExpression_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseORExpression_Await)
			p.SetState(3508)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3509)
				p.Match(ECMAScriptParserT__42)
			}
			{
				p.SetState(3510)
				p.equalityExpression_Await(0)
			}

		}
		p.SetState(3515)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 236, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseORExpression_In_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseORExpression_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseORExpression_In_AwaitContext differentiates from other interfaces.
	IsBitwiseORExpression_In_AwaitContext()
}

type BitwiseORExpression_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseORExpression_In_AwaitContext() *BitwiseORExpression_In_AwaitContext {
	var p = new(BitwiseORExpression_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_In_Await
	return p
}

func (*BitwiseORExpression_In_AwaitContext) IsBitwiseORExpression_In_AwaitContext() {}

func NewBitwiseORExpression_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseORExpression_In_AwaitContext {
	var p = new(BitwiseORExpression_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_In_Await

	return p
}

func (s *BitwiseORExpression_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseORExpression_In_AwaitContext) EqualityExpression_In_Await() IEqualityExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_AwaitContext)
}

func (s *BitwiseORExpression_In_AwaitContext) BitwiseORExpression_In_Await() IBitwiseORExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_In_AwaitContext)
}

func (s *BitwiseORExpression_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseORExpression_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseORExpression_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseORExpression_In_Await(s)
	}
}

func (s *BitwiseORExpression_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseORExpression_In_Await(s)
	}
}

func (s *BitwiseORExpression_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseORExpression_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_In_Await() (localctx IBitwiseORExpression_In_AwaitContext) {
	return p.bitwiseORExpression_In_Await(0)
}

func (p *ECMAScriptParser) bitwiseORExpression_In_Await(_p int) (localctx IBitwiseORExpression_In_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseORExpression_In_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseORExpression_In_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 398
	p.EnterRecursionRule(localctx, 398, ECMAScriptParserRULE_bitwiseORExpression_In_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3517)
		p.equalityExpression_In_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3524)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 237, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseORExpression_In_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseORExpression_In_Await)
			p.SetState(3519)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3520)
				p.Match(ECMAScriptParserT__42)
			}
			{
				p.SetState(3521)
				p.equalityExpression_In_Await(0)
			}

		}
		p.SetState(3526)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 237, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseORExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseORExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseORExpression_Yield_AwaitContext differentiates from other interfaces.
	IsBitwiseORExpression_Yield_AwaitContext()
}

type BitwiseORExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseORExpression_Yield_AwaitContext() *BitwiseORExpression_Yield_AwaitContext {
	var p = new(BitwiseORExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_Yield_Await
	return p
}

func (*BitwiseORExpression_Yield_AwaitContext) IsBitwiseORExpression_Yield_AwaitContext() {}

func NewBitwiseORExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseORExpression_Yield_AwaitContext {
	var p = new(BitwiseORExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_Yield_Await

	return p
}

func (s *BitwiseORExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseORExpression_Yield_AwaitContext) EqualityExpression_Yield_Await() IEqualityExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_Yield_AwaitContext)
}

func (s *BitwiseORExpression_Yield_AwaitContext) BitwiseORExpression_Yield_Await() IBitwiseORExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_Yield_AwaitContext)
}

func (s *BitwiseORExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseORExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseORExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseORExpression_Yield_Await(s)
	}
}

func (s *BitwiseORExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseORExpression_Yield_Await(s)
	}
}

func (s *BitwiseORExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseORExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_Yield_Await() (localctx IBitwiseORExpression_Yield_AwaitContext) {
	return p.bitwiseORExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) bitwiseORExpression_Yield_Await(_p int) (localctx IBitwiseORExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseORExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseORExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 400
	p.EnterRecursionRule(localctx, 400, ECMAScriptParserRULE_bitwiseORExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3528)
		p.equalityExpression_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3535)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseORExpression_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseORExpression_Yield_Await)
			p.SetState(3530)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3531)
				p.Match(ECMAScriptParserT__42)
			}
			{
				p.SetState(3532)
				p.equalityExpression_Yield_Await(0)
			}

		}
		p.SetState(3537)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext())
	}

	return localctx
}

// IBitwiseORExpression_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBitwiseORExpression_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseORExpression_In_Yield_AwaitContext differentiates from other interfaces.
	IsBitwiseORExpression_In_Yield_AwaitContext()
}

type BitwiseORExpression_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseORExpression_In_Yield_AwaitContext() *BitwiseORExpression_In_Yield_AwaitContext {
	var p = new(BitwiseORExpression_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_In_Yield_Await
	return p
}

func (*BitwiseORExpression_In_Yield_AwaitContext) IsBitwiseORExpression_In_Yield_AwaitContext() {}

func NewBitwiseORExpression_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseORExpression_In_Yield_AwaitContext {
	var p = new(BitwiseORExpression_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bitwiseORExpression_In_Yield_Await

	return p
}

func (s *BitwiseORExpression_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseORExpression_In_Yield_AwaitContext) EqualityExpression_In_Yield_Await() IEqualityExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpression_In_Yield_AwaitContext)
}

func (s *BitwiseORExpression_In_Yield_AwaitContext) BitwiseORExpression_In_Yield_Await() IBitwiseORExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_In_Yield_AwaitContext)
}

func (s *BitwiseORExpression_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseORExpression_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseORExpression_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBitwiseORExpression_In_Yield_Await(s)
	}
}

func (s *BitwiseORExpression_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBitwiseORExpression_In_Yield_Await(s)
	}
}

func (s *BitwiseORExpression_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBitwiseORExpression_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_In_Yield_Await() (localctx IBitwiseORExpression_In_Yield_AwaitContext) {
	return p.bitwiseORExpression_In_Yield_Await(0)
}

func (p *ECMAScriptParser) bitwiseORExpression_In_Yield_Await(_p int) (localctx IBitwiseORExpression_In_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBitwiseORExpression_In_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBitwiseORExpression_In_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 402
	p.EnterRecursionRule(localctx, 402, ECMAScriptParserRULE_bitwiseORExpression_In_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3539)
		p.equalityExpression_In_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3546)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 239, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBitwiseORExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bitwiseORExpression_In_Yield_Await)
			p.SetState(3541)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3542)
				p.Match(ECMAScriptParserT__42)
			}
			{
				p.SetState(3543)
				p.equalityExpression_In_Yield_Await(0)
			}

		}
		p.SetState(3548)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 239, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalANDExpressionContext is an interface to support dynamic dispatch.
type ILogicalANDExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalANDExpressionContext differentiates from other interfaces.
	IsLogicalANDExpressionContext()
}

type LogicalANDExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalANDExpressionContext() *LogicalANDExpressionContext {
	var p = new(LogicalANDExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression
	return p
}

func (*LogicalANDExpressionContext) IsLogicalANDExpressionContext() {}

func NewLogicalANDExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalANDExpressionContext {
	var p = new(LogicalANDExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression

	return p
}

func (s *LogicalANDExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalANDExpressionContext) BitwiseORExpression() IBitwiseORExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpressionContext)
}

func (s *LogicalANDExpressionContext) LogicalANDExpression() ILogicalANDExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalANDExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalANDExpressionContext)
}

func (s *LogicalANDExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalANDExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalANDExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalANDExpression(s)
	}
}

func (s *LogicalANDExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalANDExpression(s)
	}
}

func (s *LogicalANDExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalANDExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalANDExpression() (localctx ILogicalANDExpressionContext) {
	return p.logicalANDExpression(0)
}

func (p *ECMAScriptParser) logicalANDExpression(_p int) (localctx ILogicalANDExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalANDExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalANDExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 404
	p.EnterRecursionRule(localctx, 404, ECMAScriptParserRULE_logicalANDExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3550)
		p.bitwiseORExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3557)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalANDExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalANDExpression)
			p.SetState(3552)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3553)
				p.Match(ECMAScriptParserT__43)
			}
			{
				p.SetState(3554)
				p.bitwiseORExpression(0)
			}

		}
		p.SetState(3559)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalANDExpression_InContext is an interface to support dynamic dispatch.
type ILogicalANDExpression_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalANDExpression_InContext differentiates from other interfaces.
	IsLogicalANDExpression_InContext()
}

type LogicalANDExpression_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalANDExpression_InContext() *LogicalANDExpression_InContext {
	var p = new(LogicalANDExpression_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_In
	return p
}

func (*LogicalANDExpression_InContext) IsLogicalANDExpression_InContext() {}

func NewLogicalANDExpression_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalANDExpression_InContext {
	var p = new(LogicalANDExpression_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_In

	return p
}

func (s *LogicalANDExpression_InContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalANDExpression_InContext) BitwiseORExpression_In() IBitwiseORExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_InContext)
}

func (s *LogicalANDExpression_InContext) LogicalANDExpression_In() ILogicalANDExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalANDExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalANDExpression_InContext)
}

func (s *LogicalANDExpression_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalANDExpression_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalANDExpression_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalANDExpression_In(s)
	}
}

func (s *LogicalANDExpression_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalANDExpression_In(s)
	}
}

func (s *LogicalANDExpression_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalANDExpression_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_In() (localctx ILogicalANDExpression_InContext) {
	return p.logicalANDExpression_In(0)
}

func (p *ECMAScriptParser) logicalANDExpression_In(_p int) (localctx ILogicalANDExpression_InContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalANDExpression_InContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalANDExpression_InContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 406
	p.EnterRecursionRule(localctx, 406, ECMAScriptParserRULE_logicalANDExpression_In, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3561)
		p.bitwiseORExpression_In(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3568)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 241, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalANDExpression_InContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalANDExpression_In)
			p.SetState(3563)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3564)
				p.Match(ECMAScriptParserT__43)
			}
			{
				p.SetState(3565)
				p.bitwiseORExpression_In(0)
			}

		}
		p.SetState(3570)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 241, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalANDExpression_YieldContext is an interface to support dynamic dispatch.
type ILogicalANDExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalANDExpression_YieldContext differentiates from other interfaces.
	IsLogicalANDExpression_YieldContext()
}

type LogicalANDExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalANDExpression_YieldContext() *LogicalANDExpression_YieldContext {
	var p = new(LogicalANDExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_Yield
	return p
}

func (*LogicalANDExpression_YieldContext) IsLogicalANDExpression_YieldContext() {}

func NewLogicalANDExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalANDExpression_YieldContext {
	var p = new(LogicalANDExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_Yield

	return p
}

func (s *LogicalANDExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalANDExpression_YieldContext) BitwiseORExpression_Yield() IBitwiseORExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_YieldContext)
}

func (s *LogicalANDExpression_YieldContext) LogicalANDExpression_Yield() ILogicalANDExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalANDExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalANDExpression_YieldContext)
}

func (s *LogicalANDExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalANDExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalANDExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalANDExpression_Yield(s)
	}
}

func (s *LogicalANDExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalANDExpression_Yield(s)
	}
}

func (s *LogicalANDExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalANDExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_Yield() (localctx ILogicalANDExpression_YieldContext) {
	return p.logicalANDExpression_Yield(0)
}

func (p *ECMAScriptParser) logicalANDExpression_Yield(_p int) (localctx ILogicalANDExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalANDExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalANDExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 408
	p.EnterRecursionRule(localctx, 408, ECMAScriptParserRULE_logicalANDExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3572)
		p.bitwiseORExpression_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3579)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalANDExpression_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalANDExpression_Yield)
			p.SetState(3574)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3575)
				p.Match(ECMAScriptParserT__43)
			}
			{
				p.SetState(3576)
				p.bitwiseORExpression_Yield(0)
			}

		}
		p.SetState(3581)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalANDExpression_In_YieldContext is an interface to support dynamic dispatch.
type ILogicalANDExpression_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalANDExpression_In_YieldContext differentiates from other interfaces.
	IsLogicalANDExpression_In_YieldContext()
}

type LogicalANDExpression_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalANDExpression_In_YieldContext() *LogicalANDExpression_In_YieldContext {
	var p = new(LogicalANDExpression_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_In_Yield
	return p
}

func (*LogicalANDExpression_In_YieldContext) IsLogicalANDExpression_In_YieldContext() {}

func NewLogicalANDExpression_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalANDExpression_In_YieldContext {
	var p = new(LogicalANDExpression_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_In_Yield

	return p
}

func (s *LogicalANDExpression_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalANDExpression_In_YieldContext) BitwiseORExpression_In_Yield() IBitwiseORExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_In_YieldContext)
}

func (s *LogicalANDExpression_In_YieldContext) LogicalANDExpression_In_Yield() ILogicalANDExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalANDExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalANDExpression_In_YieldContext)
}

func (s *LogicalANDExpression_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalANDExpression_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalANDExpression_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalANDExpression_In_Yield(s)
	}
}

func (s *LogicalANDExpression_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalANDExpression_In_Yield(s)
	}
}

func (s *LogicalANDExpression_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalANDExpression_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_In_Yield() (localctx ILogicalANDExpression_In_YieldContext) {
	return p.logicalANDExpression_In_Yield(0)
}

func (p *ECMAScriptParser) logicalANDExpression_In_Yield(_p int) (localctx ILogicalANDExpression_In_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalANDExpression_In_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalANDExpression_In_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 410
	p.EnterRecursionRule(localctx, 410, ECMAScriptParserRULE_logicalANDExpression_In_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3583)
		p.bitwiseORExpression_In_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3590)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 243, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalANDExpression_In_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalANDExpression_In_Yield)
			p.SetState(3585)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3586)
				p.Match(ECMAScriptParserT__43)
			}
			{
				p.SetState(3587)
				p.bitwiseORExpression_In_Yield(0)
			}

		}
		p.SetState(3592)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 243, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalANDExpression_AwaitContext is an interface to support dynamic dispatch.
type ILogicalANDExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalANDExpression_AwaitContext differentiates from other interfaces.
	IsLogicalANDExpression_AwaitContext()
}

type LogicalANDExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalANDExpression_AwaitContext() *LogicalANDExpression_AwaitContext {
	var p = new(LogicalANDExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_Await
	return p
}

func (*LogicalANDExpression_AwaitContext) IsLogicalANDExpression_AwaitContext() {}

func NewLogicalANDExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalANDExpression_AwaitContext {
	var p = new(LogicalANDExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_Await

	return p
}

func (s *LogicalANDExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalANDExpression_AwaitContext) BitwiseORExpression_Await() IBitwiseORExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_AwaitContext)
}

func (s *LogicalANDExpression_AwaitContext) LogicalANDExpression_Await() ILogicalANDExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalANDExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalANDExpression_AwaitContext)
}

func (s *LogicalANDExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalANDExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalANDExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalANDExpression_Await(s)
	}
}

func (s *LogicalANDExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalANDExpression_Await(s)
	}
}

func (s *LogicalANDExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalANDExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_Await() (localctx ILogicalANDExpression_AwaitContext) {
	return p.logicalANDExpression_Await(0)
}

func (p *ECMAScriptParser) logicalANDExpression_Await(_p int) (localctx ILogicalANDExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalANDExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalANDExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 412
	p.EnterRecursionRule(localctx, 412, ECMAScriptParserRULE_logicalANDExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3594)
		p.bitwiseORExpression_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3601)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 244, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalANDExpression_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalANDExpression_Await)
			p.SetState(3596)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3597)
				p.Match(ECMAScriptParserT__43)
			}
			{
				p.SetState(3598)
				p.bitwiseORExpression_Await(0)
			}

		}
		p.SetState(3603)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 244, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalANDExpression_In_AwaitContext is an interface to support dynamic dispatch.
type ILogicalANDExpression_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalANDExpression_In_AwaitContext differentiates from other interfaces.
	IsLogicalANDExpression_In_AwaitContext()
}

type LogicalANDExpression_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalANDExpression_In_AwaitContext() *LogicalANDExpression_In_AwaitContext {
	var p = new(LogicalANDExpression_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_In_Await
	return p
}

func (*LogicalANDExpression_In_AwaitContext) IsLogicalANDExpression_In_AwaitContext() {}

func NewLogicalANDExpression_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalANDExpression_In_AwaitContext {
	var p = new(LogicalANDExpression_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_In_Await

	return p
}

func (s *LogicalANDExpression_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalANDExpression_In_AwaitContext) BitwiseORExpression_In_Await() IBitwiseORExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_In_AwaitContext)
}

func (s *LogicalANDExpression_In_AwaitContext) LogicalANDExpression_In_Await() ILogicalANDExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalANDExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalANDExpression_In_AwaitContext)
}

func (s *LogicalANDExpression_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalANDExpression_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalANDExpression_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalANDExpression_In_Await(s)
	}
}

func (s *LogicalANDExpression_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalANDExpression_In_Await(s)
	}
}

func (s *LogicalANDExpression_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalANDExpression_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_In_Await() (localctx ILogicalANDExpression_In_AwaitContext) {
	return p.logicalANDExpression_In_Await(0)
}

func (p *ECMAScriptParser) logicalANDExpression_In_Await(_p int) (localctx ILogicalANDExpression_In_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalANDExpression_In_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalANDExpression_In_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 414
	p.EnterRecursionRule(localctx, 414, ECMAScriptParserRULE_logicalANDExpression_In_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3605)
		p.bitwiseORExpression_In_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3612)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalANDExpression_In_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalANDExpression_In_Await)
			p.SetState(3607)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3608)
				p.Match(ECMAScriptParserT__43)
			}
			{
				p.SetState(3609)
				p.bitwiseORExpression_In_Await(0)
			}

		}
		p.SetState(3614)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalANDExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILogicalANDExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalANDExpression_Yield_AwaitContext differentiates from other interfaces.
	IsLogicalANDExpression_Yield_AwaitContext()
}

type LogicalANDExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalANDExpression_Yield_AwaitContext() *LogicalANDExpression_Yield_AwaitContext {
	var p = new(LogicalANDExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_Yield_Await
	return p
}

func (*LogicalANDExpression_Yield_AwaitContext) IsLogicalANDExpression_Yield_AwaitContext() {}

func NewLogicalANDExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalANDExpression_Yield_AwaitContext {
	var p = new(LogicalANDExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_Yield_Await

	return p
}

func (s *LogicalANDExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalANDExpression_Yield_AwaitContext) BitwiseORExpression_Yield_Await() IBitwiseORExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_Yield_AwaitContext)
}

func (s *LogicalANDExpression_Yield_AwaitContext) LogicalANDExpression_Yield_Await() ILogicalANDExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalANDExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalANDExpression_Yield_AwaitContext)
}

func (s *LogicalANDExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalANDExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalANDExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalANDExpression_Yield_Await(s)
	}
}

func (s *LogicalANDExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalANDExpression_Yield_Await(s)
	}
}

func (s *LogicalANDExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalANDExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_Yield_Await() (localctx ILogicalANDExpression_Yield_AwaitContext) {
	return p.logicalANDExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) logicalANDExpression_Yield_Await(_p int) (localctx ILogicalANDExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalANDExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalANDExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 416
	p.EnterRecursionRule(localctx, 416, ECMAScriptParserRULE_logicalANDExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3616)
		p.bitwiseORExpression_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3623)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalANDExpression_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalANDExpression_Yield_Await)
			p.SetState(3618)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3619)
				p.Match(ECMAScriptParserT__43)
			}
			{
				p.SetState(3620)
				p.bitwiseORExpression_Yield_Await(0)
			}

		}
		p.SetState(3625)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalANDExpression_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILogicalANDExpression_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalANDExpression_In_Yield_AwaitContext differentiates from other interfaces.
	IsLogicalANDExpression_In_Yield_AwaitContext()
}

type LogicalANDExpression_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalANDExpression_In_Yield_AwaitContext() *LogicalANDExpression_In_Yield_AwaitContext {
	var p = new(LogicalANDExpression_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_In_Yield_Await
	return p
}

func (*LogicalANDExpression_In_Yield_AwaitContext) IsLogicalANDExpression_In_Yield_AwaitContext() {}

func NewLogicalANDExpression_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalANDExpression_In_Yield_AwaitContext {
	var p = new(LogicalANDExpression_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalANDExpression_In_Yield_Await

	return p
}

func (s *LogicalANDExpression_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalANDExpression_In_Yield_AwaitContext) BitwiseORExpression_In_Yield_Await() IBitwiseORExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_In_Yield_AwaitContext)
}

func (s *LogicalANDExpression_In_Yield_AwaitContext) LogicalANDExpression_In_Yield_Await() ILogicalANDExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalANDExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalANDExpression_In_Yield_AwaitContext)
}

func (s *LogicalANDExpression_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalANDExpression_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalANDExpression_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalANDExpression_In_Yield_Await(s)
	}
}

func (s *LogicalANDExpression_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalANDExpression_In_Yield_Await(s)
	}
}

func (s *LogicalANDExpression_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalANDExpression_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_In_Yield_Await() (localctx ILogicalANDExpression_In_Yield_AwaitContext) {
	return p.logicalANDExpression_In_Yield_Await(0)
}

func (p *ECMAScriptParser) logicalANDExpression_In_Yield_Await(_p int) (localctx ILogicalANDExpression_In_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalANDExpression_In_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalANDExpression_In_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 418
	p.EnterRecursionRule(localctx, 418, ECMAScriptParserRULE_logicalANDExpression_In_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3627)
		p.bitwiseORExpression_In_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3634)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalANDExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalANDExpression_In_Yield_Await)
			p.SetState(3629)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3630)
				p.Match(ECMAScriptParserT__43)
			}
			{
				p.SetState(3631)
				p.bitwiseORExpression_In_Yield_Await(0)
			}

		}
		p.SetState(3636)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalORExpressionContext is an interface to support dynamic dispatch.
type ILogicalORExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalORExpressionContext differentiates from other interfaces.
	IsLogicalORExpressionContext()
}

type LogicalORExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalORExpressionContext() *LogicalORExpressionContext {
	var p = new(LogicalORExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression
	return p
}

func (*LogicalORExpressionContext) IsLogicalORExpressionContext() {}

func NewLogicalORExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalORExpressionContext {
	var p = new(LogicalORExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression

	return p
}

func (s *LogicalORExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalORExpressionContext) BitwiseORExpression() IBitwiseORExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpressionContext)
}

func (s *LogicalORExpressionContext) LogicalORExpression() ILogicalORExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpressionContext)
}

func (s *LogicalORExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalORExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalORExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalORExpression(s)
	}
}

func (s *LogicalORExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalORExpression(s)
	}
}

func (s *LogicalORExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalORExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalORExpression() (localctx ILogicalORExpressionContext) {
	return p.logicalORExpression(0)
}

func (p *ECMAScriptParser) logicalORExpression(_p int) (localctx ILogicalORExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalORExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalORExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 420
	p.EnterRecursionRule(localctx, 420, ECMAScriptParserRULE_logicalORExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3638)
		p.bitwiseORExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3645)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalORExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalORExpression)
			p.SetState(3640)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3641)
				p.Match(ECMAScriptParserT__44)
			}
			{
				p.SetState(3642)
				p.bitwiseORExpression(0)
			}

		}
		p.SetState(3647)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalORExpression_InContext is an interface to support dynamic dispatch.
type ILogicalORExpression_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalORExpression_InContext differentiates from other interfaces.
	IsLogicalORExpression_InContext()
}

type LogicalORExpression_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalORExpression_InContext() *LogicalORExpression_InContext {
	var p = new(LogicalORExpression_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_In
	return p
}

func (*LogicalORExpression_InContext) IsLogicalORExpression_InContext() {}

func NewLogicalORExpression_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalORExpression_InContext {
	var p = new(LogicalORExpression_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_In

	return p
}

func (s *LogicalORExpression_InContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalORExpression_InContext) BitwiseORExpression_In() IBitwiseORExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_InContext)
}

func (s *LogicalORExpression_InContext) LogicalORExpression_In() ILogicalORExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_InContext)
}

func (s *LogicalORExpression_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalORExpression_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalORExpression_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalORExpression_In(s)
	}
}

func (s *LogicalORExpression_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalORExpression_In(s)
	}
}

func (s *LogicalORExpression_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalORExpression_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalORExpression_In() (localctx ILogicalORExpression_InContext) {
	return p.logicalORExpression_In(0)
}

func (p *ECMAScriptParser) logicalORExpression_In(_p int) (localctx ILogicalORExpression_InContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalORExpression_InContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalORExpression_InContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 422
	p.EnterRecursionRule(localctx, 422, ECMAScriptParserRULE_logicalORExpression_In, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3649)
		p.bitwiseORExpression_In(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3656)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalORExpression_InContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalORExpression_In)
			p.SetState(3651)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3652)
				p.Match(ECMAScriptParserT__44)
			}
			{
				p.SetState(3653)
				p.bitwiseORExpression_In(0)
			}

		}
		p.SetState(3658)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalORExpression_YieldContext is an interface to support dynamic dispatch.
type ILogicalORExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalORExpression_YieldContext differentiates from other interfaces.
	IsLogicalORExpression_YieldContext()
}

type LogicalORExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalORExpression_YieldContext() *LogicalORExpression_YieldContext {
	var p = new(LogicalORExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_Yield
	return p
}

func (*LogicalORExpression_YieldContext) IsLogicalORExpression_YieldContext() {}

func NewLogicalORExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalORExpression_YieldContext {
	var p = new(LogicalORExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_Yield

	return p
}

func (s *LogicalORExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalORExpression_YieldContext) BitwiseORExpression_Yield() IBitwiseORExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_YieldContext)
}

func (s *LogicalORExpression_YieldContext) LogicalORExpression_Yield() ILogicalORExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_YieldContext)
}

func (s *LogicalORExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalORExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalORExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalORExpression_Yield(s)
	}
}

func (s *LogicalORExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalORExpression_Yield(s)
	}
}

func (s *LogicalORExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalORExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalORExpression_Yield() (localctx ILogicalORExpression_YieldContext) {
	return p.logicalORExpression_Yield(0)
}

func (p *ECMAScriptParser) logicalORExpression_Yield(_p int) (localctx ILogicalORExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalORExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalORExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 424
	p.EnterRecursionRule(localctx, 424, ECMAScriptParserRULE_logicalORExpression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3660)
		p.bitwiseORExpression_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3667)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 250, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalORExpression_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalORExpression_Yield)
			p.SetState(3662)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3663)
				p.Match(ECMAScriptParserT__44)
			}
			{
				p.SetState(3664)
				p.bitwiseORExpression_Yield(0)
			}

		}
		p.SetState(3669)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 250, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalORExpression_In_YieldContext is an interface to support dynamic dispatch.
type ILogicalORExpression_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalORExpression_In_YieldContext differentiates from other interfaces.
	IsLogicalORExpression_In_YieldContext()
}

type LogicalORExpression_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalORExpression_In_YieldContext() *LogicalORExpression_In_YieldContext {
	var p = new(LogicalORExpression_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_In_Yield
	return p
}

func (*LogicalORExpression_In_YieldContext) IsLogicalORExpression_In_YieldContext() {}

func NewLogicalORExpression_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalORExpression_In_YieldContext {
	var p = new(LogicalORExpression_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_In_Yield

	return p
}

func (s *LogicalORExpression_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalORExpression_In_YieldContext) BitwiseORExpression_In_Yield() IBitwiseORExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_In_YieldContext)
}

func (s *LogicalORExpression_In_YieldContext) LogicalORExpression_In_Yield() ILogicalORExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_In_YieldContext)
}

func (s *LogicalORExpression_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalORExpression_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalORExpression_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalORExpression_In_Yield(s)
	}
}

func (s *LogicalORExpression_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalORExpression_In_Yield(s)
	}
}

func (s *LogicalORExpression_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalORExpression_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalORExpression_In_Yield() (localctx ILogicalORExpression_In_YieldContext) {
	return p.logicalORExpression_In_Yield(0)
}

func (p *ECMAScriptParser) logicalORExpression_In_Yield(_p int) (localctx ILogicalORExpression_In_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalORExpression_In_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalORExpression_In_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 426
	p.EnterRecursionRule(localctx, 426, ECMAScriptParserRULE_logicalORExpression_In_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3671)
		p.bitwiseORExpression_In_Yield(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3678)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalORExpression_In_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalORExpression_In_Yield)
			p.SetState(3673)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3674)
				p.Match(ECMAScriptParserT__44)
			}
			{
				p.SetState(3675)
				p.bitwiseORExpression_In_Yield(0)
			}

		}
		p.SetState(3680)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalORExpression_AwaitContext is an interface to support dynamic dispatch.
type ILogicalORExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalORExpression_AwaitContext differentiates from other interfaces.
	IsLogicalORExpression_AwaitContext()
}

type LogicalORExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalORExpression_AwaitContext() *LogicalORExpression_AwaitContext {
	var p = new(LogicalORExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_Await
	return p
}

func (*LogicalORExpression_AwaitContext) IsLogicalORExpression_AwaitContext() {}

func NewLogicalORExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalORExpression_AwaitContext {
	var p = new(LogicalORExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_Await

	return p
}

func (s *LogicalORExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalORExpression_AwaitContext) BitwiseORExpression_Await() IBitwiseORExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_AwaitContext)
}

func (s *LogicalORExpression_AwaitContext) LogicalORExpression_Await() ILogicalORExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_AwaitContext)
}

func (s *LogicalORExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalORExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalORExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalORExpression_Await(s)
	}
}

func (s *LogicalORExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalORExpression_Await(s)
	}
}

func (s *LogicalORExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalORExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalORExpression_Await() (localctx ILogicalORExpression_AwaitContext) {
	return p.logicalORExpression_Await(0)
}

func (p *ECMAScriptParser) logicalORExpression_Await(_p int) (localctx ILogicalORExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalORExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalORExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 428
	p.EnterRecursionRule(localctx, 428, ECMAScriptParserRULE_logicalORExpression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3682)
		p.bitwiseORExpression_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3689)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalORExpression_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalORExpression_Await)
			p.SetState(3684)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3685)
				p.Match(ECMAScriptParserT__44)
			}
			{
				p.SetState(3686)
				p.bitwiseORExpression_Await(0)
			}

		}
		p.SetState(3691)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalORExpression_In_AwaitContext is an interface to support dynamic dispatch.
type ILogicalORExpression_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalORExpression_In_AwaitContext differentiates from other interfaces.
	IsLogicalORExpression_In_AwaitContext()
}

type LogicalORExpression_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalORExpression_In_AwaitContext() *LogicalORExpression_In_AwaitContext {
	var p = new(LogicalORExpression_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_In_Await
	return p
}

func (*LogicalORExpression_In_AwaitContext) IsLogicalORExpression_In_AwaitContext() {}

func NewLogicalORExpression_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalORExpression_In_AwaitContext {
	var p = new(LogicalORExpression_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_In_Await

	return p
}

func (s *LogicalORExpression_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalORExpression_In_AwaitContext) BitwiseORExpression_In_Await() IBitwiseORExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_In_AwaitContext)
}

func (s *LogicalORExpression_In_AwaitContext) LogicalORExpression_In_Await() ILogicalORExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_In_AwaitContext)
}

func (s *LogicalORExpression_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalORExpression_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalORExpression_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalORExpression_In_Await(s)
	}
}

func (s *LogicalORExpression_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalORExpression_In_Await(s)
	}
}

func (s *LogicalORExpression_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalORExpression_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalORExpression_In_Await() (localctx ILogicalORExpression_In_AwaitContext) {
	return p.logicalORExpression_In_Await(0)
}

func (p *ECMAScriptParser) logicalORExpression_In_Await(_p int) (localctx ILogicalORExpression_In_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalORExpression_In_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalORExpression_In_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 430
	p.EnterRecursionRule(localctx, 430, ECMAScriptParserRULE_logicalORExpression_In_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3693)
		p.bitwiseORExpression_In_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3700)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 253, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalORExpression_In_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalORExpression_In_Await)
			p.SetState(3695)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3696)
				p.Match(ECMAScriptParserT__44)
			}
			{
				p.SetState(3697)
				p.bitwiseORExpression_In_Await(0)
			}

		}
		p.SetState(3702)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 253, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalORExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILogicalORExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalORExpression_Yield_AwaitContext differentiates from other interfaces.
	IsLogicalORExpression_Yield_AwaitContext()
}

type LogicalORExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalORExpression_Yield_AwaitContext() *LogicalORExpression_Yield_AwaitContext {
	var p = new(LogicalORExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_Yield_Await
	return p
}

func (*LogicalORExpression_Yield_AwaitContext) IsLogicalORExpression_Yield_AwaitContext() {}

func NewLogicalORExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalORExpression_Yield_AwaitContext {
	var p = new(LogicalORExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_Yield_Await

	return p
}

func (s *LogicalORExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalORExpression_Yield_AwaitContext) BitwiseORExpression_Yield_Await() IBitwiseORExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_Yield_AwaitContext)
}

func (s *LogicalORExpression_Yield_AwaitContext) LogicalORExpression_Yield_Await() ILogicalORExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_Yield_AwaitContext)
}

func (s *LogicalORExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalORExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalORExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalORExpression_Yield_Await(s)
	}
}

func (s *LogicalORExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalORExpression_Yield_Await(s)
	}
}

func (s *LogicalORExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalORExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalORExpression_Yield_Await() (localctx ILogicalORExpression_Yield_AwaitContext) {
	return p.logicalORExpression_Yield_Await(0)
}

func (p *ECMAScriptParser) logicalORExpression_Yield_Await(_p int) (localctx ILogicalORExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalORExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalORExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 432
	p.EnterRecursionRule(localctx, 432, ECMAScriptParserRULE_logicalORExpression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3704)
		p.bitwiseORExpression_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3711)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalORExpression_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalORExpression_Yield_Await)
			p.SetState(3706)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3707)
				p.Match(ECMAScriptParserT__44)
			}
			{
				p.SetState(3708)
				p.bitwiseORExpression_Yield_Await(0)
			}

		}
		p.SetState(3713)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalORExpression_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILogicalORExpression_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalORExpression_In_Yield_AwaitContext differentiates from other interfaces.
	IsLogicalORExpression_In_Yield_AwaitContext()
}

type LogicalORExpression_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalORExpression_In_Yield_AwaitContext() *LogicalORExpression_In_Yield_AwaitContext {
	var p = new(LogicalORExpression_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_In_Yield_Await
	return p
}

func (*LogicalORExpression_In_Yield_AwaitContext) IsLogicalORExpression_In_Yield_AwaitContext() {}

func NewLogicalORExpression_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalORExpression_In_Yield_AwaitContext {
	var p = new(LogicalORExpression_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_logicalORExpression_In_Yield_Await

	return p
}

func (s *LogicalORExpression_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalORExpression_In_Yield_AwaitContext) BitwiseORExpression_In_Yield_Await() IBitwiseORExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseORExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseORExpression_In_Yield_AwaitContext)
}

func (s *LogicalORExpression_In_Yield_AwaitContext) LogicalORExpression_In_Yield_Await() ILogicalORExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_In_Yield_AwaitContext)
}

func (s *LogicalORExpression_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalORExpression_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalORExpression_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLogicalORExpression_In_Yield_Await(s)
	}
}

func (s *LogicalORExpression_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLogicalORExpression_In_Yield_Await(s)
	}
}

func (s *LogicalORExpression_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLogicalORExpression_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LogicalORExpression_In_Yield_Await() (localctx ILogicalORExpression_In_Yield_AwaitContext) {
	return p.logicalORExpression_In_Yield_Await(0)
}

func (p *ECMAScriptParser) logicalORExpression_In_Yield_Await(_p int) (localctx ILogicalORExpression_In_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalORExpression_In_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalORExpression_In_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 434
	p.EnterRecursionRule(localctx, 434, ECMAScriptParserRULE_logicalORExpression_In_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3715)
		p.bitwiseORExpression_In_Yield_Await(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3722)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalORExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_logicalORExpression_In_Yield_Await)
			p.SetState(3717)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3718)
				p.Match(ECMAScriptParserT__44)
			}
			{
				p.SetState(3719)
				p.bitwiseORExpression_In_Yield_Await(0)
			}

		}
		p.SetState(3724)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext())
	}

	return localctx
}

// IConditionalExpressionContext is an interface to support dynamic dispatch.
type IConditionalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalExpressionContext differentiates from other interfaces.
	IsConditionalExpressionContext()
}

type ConditionalExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpressionContext() *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression
	return p
}

func (*ConditionalExpressionContext) IsConditionalExpressionContext() {}

func NewConditionalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression

	return p
}

func (s *ConditionalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpressionContext) LogicalORExpression() ILogicalORExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpressionContext)
}

func (s *ConditionalExpressionContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *ConditionalExpressionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ConditionalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterConditionalExpression(s)
	}
}

func (s *ConditionalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitConditionalExpression(s)
	}
}

func (s *ConditionalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitConditionalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ConditionalExpression() (localctx IConditionalExpressionContext) {
	localctx = NewConditionalExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, ECMAScriptParserRULE_conditionalExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3732)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 256, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3725)
			p.logicalORExpression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3726)
			p.logicalORExpression(0)
		}
		{
			p.SetState(3727)
			p.Match(ECMAScriptParserT__45)
		}
		{
			p.SetState(3728)
			p.AssignmentExpression_In()
		}
		{
			p.SetState(3729)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(3730)
			p.AssignmentExpression()
		}

	}

	return localctx
}

// IConditionalExpression_InContext is an interface to support dynamic dispatch.
type IConditionalExpression_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalExpression_InContext differentiates from other interfaces.
	IsConditionalExpression_InContext()
}

type ConditionalExpression_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpression_InContext() *ConditionalExpression_InContext {
	var p = new(ConditionalExpression_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_In
	return p
}

func (*ConditionalExpression_InContext) IsConditionalExpression_InContext() {}

func NewConditionalExpression_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpression_InContext {
	var p = new(ConditionalExpression_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_In

	return p
}

func (s *ConditionalExpression_InContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpression_InContext) LogicalORExpression_In() ILogicalORExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_InContext)
}

func (s *ConditionalExpression_InContext) AllAssignmentExpression_In() []IAssignmentExpression_InContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem())
	var tst = make([]IAssignmentExpression_InContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentExpression_InContext)
		}
	}

	return tst
}

func (s *ConditionalExpression_InContext) AssignmentExpression_In(i int) IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *ConditionalExpression_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpression_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpression_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterConditionalExpression_In(s)
	}
}

func (s *ConditionalExpression_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitConditionalExpression_In(s)
	}
}

func (s *ConditionalExpression_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitConditionalExpression_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ConditionalExpression_In() (localctx IConditionalExpression_InContext) {
	localctx = NewConditionalExpression_InContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, ECMAScriptParserRULE_conditionalExpression_In)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3741)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3734)
			p.logicalORExpression_In(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3735)
			p.logicalORExpression_In(0)
		}
		{
			p.SetState(3736)
			p.Match(ECMAScriptParserT__45)
		}
		{
			p.SetState(3737)
			p.AssignmentExpression_In()
		}
		{
			p.SetState(3738)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(3739)
			p.AssignmentExpression_In()
		}

	}

	return localctx
}

// IConditionalExpression_YieldContext is an interface to support dynamic dispatch.
type IConditionalExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalExpression_YieldContext differentiates from other interfaces.
	IsConditionalExpression_YieldContext()
}

type ConditionalExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpression_YieldContext() *ConditionalExpression_YieldContext {
	var p = new(ConditionalExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_Yield
	return p
}

func (*ConditionalExpression_YieldContext) IsConditionalExpression_YieldContext() {}

func NewConditionalExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpression_YieldContext {
	var p = new(ConditionalExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_Yield

	return p
}

func (s *ConditionalExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpression_YieldContext) LogicalORExpression_Yield() ILogicalORExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_YieldContext)
}

func (s *ConditionalExpression_YieldContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *ConditionalExpression_YieldContext) AssignmentExpression_Yield() IAssignmentExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_YieldContext)
}

func (s *ConditionalExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterConditionalExpression_Yield(s)
	}
}

func (s *ConditionalExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitConditionalExpression_Yield(s)
	}
}

func (s *ConditionalExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitConditionalExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ConditionalExpression_Yield() (localctx IConditionalExpression_YieldContext) {
	localctx = NewConditionalExpression_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, ECMAScriptParserRULE_conditionalExpression_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3750)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 258, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3743)
			p.logicalORExpression_Yield(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3744)
			p.logicalORExpression_Yield(0)
		}
		{
			p.SetState(3745)
			p.Match(ECMAScriptParserT__45)
		}
		{
			p.SetState(3746)
			p.AssignmentExpression_In_Yield()
		}
		{
			p.SetState(3747)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(3748)
			p.AssignmentExpression_Yield()
		}

	}

	return localctx
}

// IConditionalExpression_In_YieldContext is an interface to support dynamic dispatch.
type IConditionalExpression_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalExpression_In_YieldContext differentiates from other interfaces.
	IsConditionalExpression_In_YieldContext()
}

type ConditionalExpression_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpression_In_YieldContext() *ConditionalExpression_In_YieldContext {
	var p = new(ConditionalExpression_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_In_Yield
	return p
}

func (*ConditionalExpression_In_YieldContext) IsConditionalExpression_In_YieldContext() {}

func NewConditionalExpression_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpression_In_YieldContext {
	var p = new(ConditionalExpression_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_In_Yield

	return p
}

func (s *ConditionalExpression_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpression_In_YieldContext) LogicalORExpression_In_Yield() ILogicalORExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_In_YieldContext)
}

func (s *ConditionalExpression_In_YieldContext) AllAssignmentExpression_In_Yield() []IAssignmentExpression_In_YieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem())
	var tst = make([]IAssignmentExpression_In_YieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentExpression_In_YieldContext)
		}
	}

	return tst
}

func (s *ConditionalExpression_In_YieldContext) AssignmentExpression_In_Yield(i int) IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *ConditionalExpression_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpression_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpression_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterConditionalExpression_In_Yield(s)
	}
}

func (s *ConditionalExpression_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitConditionalExpression_In_Yield(s)
	}
}

func (s *ConditionalExpression_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitConditionalExpression_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ConditionalExpression_In_Yield() (localctx IConditionalExpression_In_YieldContext) {
	localctx = NewConditionalExpression_In_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, ECMAScriptParserRULE_conditionalExpression_In_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3759)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 259, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3752)
			p.logicalORExpression_In_Yield(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3753)
			p.logicalORExpression_In_Yield(0)
		}
		{
			p.SetState(3754)
			p.Match(ECMAScriptParserT__45)
		}
		{
			p.SetState(3755)
			p.AssignmentExpression_In_Yield()
		}
		{
			p.SetState(3756)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(3757)
			p.AssignmentExpression_In_Yield()
		}

	}

	return localctx
}

// IConditionalExpression_AwaitContext is an interface to support dynamic dispatch.
type IConditionalExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalExpression_AwaitContext differentiates from other interfaces.
	IsConditionalExpression_AwaitContext()
}

type ConditionalExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpression_AwaitContext() *ConditionalExpression_AwaitContext {
	var p = new(ConditionalExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_Await
	return p
}

func (*ConditionalExpression_AwaitContext) IsConditionalExpression_AwaitContext() {}

func NewConditionalExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpression_AwaitContext {
	var p = new(ConditionalExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_Await

	return p
}

func (s *ConditionalExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpression_AwaitContext) LogicalORExpression_Await() ILogicalORExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_AwaitContext)
}

func (s *ConditionalExpression_AwaitContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *ConditionalExpression_AwaitContext) AssignmentExpression_Await() IAssignmentExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_AwaitContext)
}

func (s *ConditionalExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterConditionalExpression_Await(s)
	}
}

func (s *ConditionalExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitConditionalExpression_Await(s)
	}
}

func (s *ConditionalExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitConditionalExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ConditionalExpression_Await() (localctx IConditionalExpression_AwaitContext) {
	localctx = NewConditionalExpression_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, ECMAScriptParserRULE_conditionalExpression_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3768)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 260, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3761)
			p.logicalORExpression_Await(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3762)
			p.logicalORExpression_Await(0)
		}
		{
			p.SetState(3763)
			p.Match(ECMAScriptParserT__45)
		}
		{
			p.SetState(3764)
			p.AssignmentExpression_In_Await()
		}
		{
			p.SetState(3765)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(3766)
			p.AssignmentExpression_Await()
		}

	}

	return localctx
}

// IConditionalExpression_In_AwaitContext is an interface to support dynamic dispatch.
type IConditionalExpression_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalExpression_In_AwaitContext differentiates from other interfaces.
	IsConditionalExpression_In_AwaitContext()
}

type ConditionalExpression_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpression_In_AwaitContext() *ConditionalExpression_In_AwaitContext {
	var p = new(ConditionalExpression_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_In_Await
	return p
}

func (*ConditionalExpression_In_AwaitContext) IsConditionalExpression_In_AwaitContext() {}

func NewConditionalExpression_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpression_In_AwaitContext {
	var p = new(ConditionalExpression_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_In_Await

	return p
}

func (s *ConditionalExpression_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpression_In_AwaitContext) LogicalORExpression_In_Await() ILogicalORExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_In_AwaitContext)
}

func (s *ConditionalExpression_In_AwaitContext) AllAssignmentExpression_In_Await() []IAssignmentExpression_In_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem())
	var tst = make([]IAssignmentExpression_In_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentExpression_In_AwaitContext)
		}
	}

	return tst
}

func (s *ConditionalExpression_In_AwaitContext) AssignmentExpression_In_Await(i int) IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *ConditionalExpression_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpression_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpression_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterConditionalExpression_In_Await(s)
	}
}

func (s *ConditionalExpression_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitConditionalExpression_In_Await(s)
	}
}

func (s *ConditionalExpression_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitConditionalExpression_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ConditionalExpression_In_Await() (localctx IConditionalExpression_In_AwaitContext) {
	localctx = NewConditionalExpression_In_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, ECMAScriptParserRULE_conditionalExpression_In_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3777)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 261, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3770)
			p.logicalORExpression_In_Await(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3771)
			p.logicalORExpression_In_Await(0)
		}
		{
			p.SetState(3772)
			p.Match(ECMAScriptParserT__45)
		}
		{
			p.SetState(3773)
			p.AssignmentExpression_In_Await()
		}
		{
			p.SetState(3774)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(3775)
			p.AssignmentExpression_In_Await()
		}

	}

	return localctx
}

// IConditionalExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IConditionalExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalExpression_Yield_AwaitContext differentiates from other interfaces.
	IsConditionalExpression_Yield_AwaitContext()
}

type ConditionalExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpression_Yield_AwaitContext() *ConditionalExpression_Yield_AwaitContext {
	var p = new(ConditionalExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_Yield_Await
	return p
}

func (*ConditionalExpression_Yield_AwaitContext) IsConditionalExpression_Yield_AwaitContext() {}

func NewConditionalExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpression_Yield_AwaitContext {
	var p = new(ConditionalExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_Yield_Await

	return p
}

func (s *ConditionalExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpression_Yield_AwaitContext) LogicalORExpression_Yield_Await() ILogicalORExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_Yield_AwaitContext)
}

func (s *ConditionalExpression_Yield_AwaitContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *ConditionalExpression_Yield_AwaitContext) AssignmentExpression_Yield_Await() IAssignmentExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_Yield_AwaitContext)
}

func (s *ConditionalExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterConditionalExpression_Yield_Await(s)
	}
}

func (s *ConditionalExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitConditionalExpression_Yield_Await(s)
	}
}

func (s *ConditionalExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitConditionalExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ConditionalExpression_Yield_Await() (localctx IConditionalExpression_Yield_AwaitContext) {
	localctx = NewConditionalExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, ECMAScriptParserRULE_conditionalExpression_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3786)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 262, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3779)
			p.logicalORExpression_Yield_Await(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3780)
			p.logicalORExpression_Yield_Await(0)
		}
		{
			p.SetState(3781)
			p.Match(ECMAScriptParserT__45)
		}
		{
			p.SetState(3782)
			p.AssignmentExpression_In_Yield_Await()
		}
		{
			p.SetState(3783)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(3784)
			p.AssignmentExpression_Yield_Await()
		}

	}

	return localctx
}

// IConditionalExpression_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IConditionalExpression_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalExpression_In_Yield_AwaitContext differentiates from other interfaces.
	IsConditionalExpression_In_Yield_AwaitContext()
}

type ConditionalExpression_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpression_In_Yield_AwaitContext() *ConditionalExpression_In_Yield_AwaitContext {
	var p = new(ConditionalExpression_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_In_Yield_Await
	return p
}

func (*ConditionalExpression_In_Yield_AwaitContext) IsConditionalExpression_In_Yield_AwaitContext() {}

func NewConditionalExpression_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpression_In_Yield_AwaitContext {
	var p = new(ConditionalExpression_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_conditionalExpression_In_Yield_Await

	return p
}

func (s *ConditionalExpression_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpression_In_Yield_AwaitContext) LogicalORExpression_In_Yield_Await() ILogicalORExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalORExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalORExpression_In_Yield_AwaitContext)
}

func (s *ConditionalExpression_In_Yield_AwaitContext) AllAssignmentExpression_In_Yield_Await() []IAssignmentExpression_In_Yield_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem())
	var tst = make([]IAssignmentExpression_In_Yield_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentExpression_In_Yield_AwaitContext)
		}
	}

	return tst
}

func (s *ConditionalExpression_In_Yield_AwaitContext) AssignmentExpression_In_Yield_Await(i int) IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *ConditionalExpression_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpression_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpression_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterConditionalExpression_In_Yield_Await(s)
	}
}

func (s *ConditionalExpression_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitConditionalExpression_In_Yield_Await(s)
	}
}

func (s *ConditionalExpression_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitConditionalExpression_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ConditionalExpression_In_Yield_Await() (localctx IConditionalExpression_In_Yield_AwaitContext) {
	localctx = NewConditionalExpression_In_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, ECMAScriptParserRULE_conditionalExpression_In_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3795)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 263, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3788)
			p.logicalORExpression_In_Yield_Await(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3789)
			p.logicalORExpression_In_Yield_Await(0)
		}
		{
			p.SetState(3790)
			p.Match(ECMAScriptParserT__45)
		}
		{
			p.SetState(3791)
			p.AssignmentExpression_In_Yield_Await()
		}
		{
			p.SetState(3792)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(3793)
			p.AssignmentExpression_In_Yield_Await()
		}

	}

	return localctx
}

// IAssignmentOperatorContext is an interface to support dynamic dispatch.
type IAssignmentOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentOperatorContext differentiates from other interfaces.
	IsAssignmentOperatorContext()
}

type AssignmentOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentOperatorContext() *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_assignmentOperator
	return p
}

func (*AssignmentOperatorContext) IsAssignmentOperatorContext() {}

func NewAssignmentOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_assignmentOperator

	return p
}

func (s *AssignmentOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *AssignmentOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAssignmentOperator(s)
	}
}

func (s *AssignmentOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAssignmentOperator(s)
	}
}

func (s *AssignmentOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAssignmentOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AssignmentOperator() (localctx IAssignmentOperatorContext) {
	localctx = NewAssignmentOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, ECMAScriptParserRULE_assignmentOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3797)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-47)&-(0x1f+1)) == 0 && ((1<<uint((_la-47)))&((1<<(ECMAScriptParserT__46-47))|(1<<(ECMAScriptParserT__47-47))|(1<<(ECMAScriptParserT__48-47))|(1<<(ECMAScriptParserT__49-47))|(1<<(ECMAScriptParserT__50-47))|(1<<(ECMAScriptParserT__51-47))|(1<<(ECMAScriptParserT__52-47))|(1<<(ECMAScriptParserT__53-47))|(1<<(ECMAScriptParserT__54-47))|(1<<(ECMAScriptParserT__55-47))|(1<<(ECMAScriptParserT__56-47))|(1<<(ECMAScriptParserT__57-47)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IAssignmentExpressionContext is an interface to support dynamic dispatch.
type IAssignmentExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentExpressionContext differentiates from other interfaces.
	IsAssignmentExpressionContext()
}

type AssignmentExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpressionContext() *AssignmentExpressionContext {
	var p = new(AssignmentExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression
	return p
}

func (*AssignmentExpressionContext) IsAssignmentExpressionContext() {}

func NewAssignmentExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpressionContext {
	var p = new(AssignmentExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression

	return p
}

func (s *AssignmentExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpressionContext) ConditionalExpression() IConditionalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpressionContext)
}

func (s *AssignmentExpressionContext) ArrowFunction() IArrowFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunctionContext)
}

func (s *AssignmentExpressionContext) AsyncArrowFunction() IAsyncArrowFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowFunctionContext)
}

func (s *AssignmentExpressionContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *AssignmentExpressionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *AssignmentExpressionContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAssignmentExpression(s)
	}
}

func (s *AssignmentExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAssignmentExpression(s)
	}
}

func (s *AssignmentExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAssignmentExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AssignmentExpression() (localctx IAssignmentExpressionContext) {
	localctx = NewAssignmentExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, ECMAScriptParserRULE_assignmentExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3810)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 264, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3799)
			p.ConditionalExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3800)
			p.ArrowFunction()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3801)
			p.AsyncArrowFunction()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3802)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3803)
			p.Match(ECMAScriptParserT__12)
		}
		{
			p.SetState(3804)
			p.AssignmentExpression()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3806)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3807)
			p.AssignmentOperator()
		}
		{
			p.SetState(3808)
			p.AssignmentExpression()
		}

	}

	return localctx
}

// IAssignmentExpression_InContext is an interface to support dynamic dispatch.
type IAssignmentExpression_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentExpression_InContext differentiates from other interfaces.
	IsAssignmentExpression_InContext()
}

type AssignmentExpression_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpression_InContext() *AssignmentExpression_InContext {
	var p = new(AssignmentExpression_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_In
	return p
}

func (*AssignmentExpression_InContext) IsAssignmentExpression_InContext() {}

func NewAssignmentExpression_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpression_InContext {
	var p = new(AssignmentExpression_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_In

	return p
}

func (s *AssignmentExpression_InContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpression_InContext) ConditionalExpression_In() IConditionalExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpression_InContext)
}

func (s *AssignmentExpression_InContext) ArrowFunction_In() IArrowFunction_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunction_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunction_InContext)
}

func (s *AssignmentExpression_InContext) AsyncArrowFunction_In() IAsyncArrowFunction_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowFunction_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowFunction_InContext)
}

func (s *AssignmentExpression_InContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *AssignmentExpression_InContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *AssignmentExpression_InContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentExpression_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpression_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpression_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAssignmentExpression_In(s)
	}
}

func (s *AssignmentExpression_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAssignmentExpression_In(s)
	}
}

func (s *AssignmentExpression_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAssignmentExpression_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AssignmentExpression_In() (localctx IAssignmentExpression_InContext) {
	localctx = NewAssignmentExpression_InContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, ECMAScriptParserRULE_assignmentExpression_In)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3823)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 265, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3812)
			p.ConditionalExpression_In()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3813)
			p.ArrowFunction_In()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3814)
			p.AsyncArrowFunction_In()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3815)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3816)
			p.Match(ECMAScriptParserT__12)
		}
		{
			p.SetState(3817)
			p.AssignmentExpression_In()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3819)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3820)
			p.AssignmentOperator()
		}
		{
			p.SetState(3821)
			p.AssignmentExpression_In()
		}

	}

	return localctx
}

// IAssignmentExpression_YieldContext is an interface to support dynamic dispatch.
type IAssignmentExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentExpression_YieldContext differentiates from other interfaces.
	IsAssignmentExpression_YieldContext()
}

type AssignmentExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpression_YieldContext() *AssignmentExpression_YieldContext {
	var p = new(AssignmentExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_Yield
	return p
}

func (*AssignmentExpression_YieldContext) IsAssignmentExpression_YieldContext() {}

func NewAssignmentExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpression_YieldContext {
	var p = new(AssignmentExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_Yield

	return p
}

func (s *AssignmentExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpression_YieldContext) ConditionalExpression_Yield() IConditionalExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpression_YieldContext)
}

func (s *AssignmentExpression_YieldContext) YieldExpression() IYieldExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldExpressionContext)
}

func (s *AssignmentExpression_YieldContext) ArrowFunction_Yield() IArrowFunction_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunction_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunction_YieldContext)
}

func (s *AssignmentExpression_YieldContext) AsyncArrowFunction_Yield() IAsyncArrowFunction_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowFunction_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowFunction_YieldContext)
}

func (s *AssignmentExpression_YieldContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *AssignmentExpression_YieldContext) AssignmentExpression_Yield() IAssignmentExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_YieldContext)
}

func (s *AssignmentExpression_YieldContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAssignmentExpression_Yield(s)
	}
}

func (s *AssignmentExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAssignmentExpression_Yield(s)
	}
}

func (s *AssignmentExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAssignmentExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AssignmentExpression_Yield() (localctx IAssignmentExpression_YieldContext) {
	localctx = NewAssignmentExpression_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, ECMAScriptParserRULE_assignmentExpression_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3837)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 266, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3825)
			p.ConditionalExpression_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3826)
			p.YieldExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3827)
			p.ArrowFunction_Yield()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3828)
			p.AsyncArrowFunction_Yield()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3829)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3830)
			p.Match(ECMAScriptParserT__12)
		}
		{
			p.SetState(3831)
			p.AssignmentExpression_Yield()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3833)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3834)
			p.AssignmentOperator()
		}
		{
			p.SetState(3835)
			p.AssignmentExpression_Yield()
		}

	}

	return localctx
}

// IAssignmentExpression_In_YieldContext is an interface to support dynamic dispatch.
type IAssignmentExpression_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentExpression_In_YieldContext differentiates from other interfaces.
	IsAssignmentExpression_In_YieldContext()
}

type AssignmentExpression_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpression_In_YieldContext() *AssignmentExpression_In_YieldContext {
	var p = new(AssignmentExpression_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_In_Yield
	return p
}

func (*AssignmentExpression_In_YieldContext) IsAssignmentExpression_In_YieldContext() {}

func NewAssignmentExpression_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpression_In_YieldContext {
	var p = new(AssignmentExpression_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_In_Yield

	return p
}

func (s *AssignmentExpression_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpression_In_YieldContext) ConditionalExpression_In_Yield() IConditionalExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpression_In_YieldContext)
}

func (s *AssignmentExpression_In_YieldContext) YieldExpression_In() IYieldExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldExpression_InContext)
}

func (s *AssignmentExpression_In_YieldContext) ArrowFunction_In_Yield() IArrowFunction_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunction_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunction_In_YieldContext)
}

func (s *AssignmentExpression_In_YieldContext) AsyncArrowFunction_In_Yield() IAsyncArrowFunction_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowFunction_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowFunction_In_YieldContext)
}

func (s *AssignmentExpression_In_YieldContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *AssignmentExpression_In_YieldContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *AssignmentExpression_In_YieldContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentExpression_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpression_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpression_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAssignmentExpression_In_Yield(s)
	}
}

func (s *AssignmentExpression_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAssignmentExpression_In_Yield(s)
	}
}

func (s *AssignmentExpression_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAssignmentExpression_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AssignmentExpression_In_Yield() (localctx IAssignmentExpression_In_YieldContext) {
	localctx = NewAssignmentExpression_In_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, ECMAScriptParserRULE_assignmentExpression_In_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3851)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 267, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3839)
			p.ConditionalExpression_In_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3840)
			p.YieldExpression_In()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3841)
			p.ArrowFunction_In_Yield()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3842)
			p.AsyncArrowFunction_In_Yield()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3843)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3844)
			p.Match(ECMAScriptParserT__12)
		}
		{
			p.SetState(3845)
			p.AssignmentExpression_In_Yield()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3847)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3848)
			p.AssignmentOperator()
		}
		{
			p.SetState(3849)
			p.AssignmentExpression_In_Yield()
		}

	}

	return localctx
}

// IAssignmentExpression_AwaitContext is an interface to support dynamic dispatch.
type IAssignmentExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentExpression_AwaitContext differentiates from other interfaces.
	IsAssignmentExpression_AwaitContext()
}

type AssignmentExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpression_AwaitContext() *AssignmentExpression_AwaitContext {
	var p = new(AssignmentExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_Await
	return p
}

func (*AssignmentExpression_AwaitContext) IsAssignmentExpression_AwaitContext() {}

func NewAssignmentExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpression_AwaitContext {
	var p = new(AssignmentExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_Await

	return p
}

func (s *AssignmentExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpression_AwaitContext) ConditionalExpression_Await() IConditionalExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpression_AwaitContext)
}

func (s *AssignmentExpression_AwaitContext) ArrowFunction_Await() IArrowFunction_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunction_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunction_AwaitContext)
}

func (s *AssignmentExpression_AwaitContext) AsyncArrowFunction_Await() IAsyncArrowFunction_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowFunction_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowFunction_AwaitContext)
}

func (s *AssignmentExpression_AwaitContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *AssignmentExpression_AwaitContext) AssignmentExpression_Await() IAssignmentExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_AwaitContext)
}

func (s *AssignmentExpression_AwaitContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAssignmentExpression_Await(s)
	}
}

func (s *AssignmentExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAssignmentExpression_Await(s)
	}
}

func (s *AssignmentExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAssignmentExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AssignmentExpression_Await() (localctx IAssignmentExpression_AwaitContext) {
	localctx = NewAssignmentExpression_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, ECMAScriptParserRULE_assignmentExpression_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3864)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 268, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3853)
			p.ConditionalExpression_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3854)
			p.ArrowFunction_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3855)
			p.AsyncArrowFunction_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3856)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3857)
			p.Match(ECMAScriptParserT__12)
		}
		{
			p.SetState(3858)
			p.AssignmentExpression_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3860)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3861)
			p.AssignmentOperator()
		}
		{
			p.SetState(3862)
			p.AssignmentExpression_Await()
		}

	}

	return localctx
}

// IAssignmentExpression_In_AwaitContext is an interface to support dynamic dispatch.
type IAssignmentExpression_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentExpression_In_AwaitContext differentiates from other interfaces.
	IsAssignmentExpression_In_AwaitContext()
}

type AssignmentExpression_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpression_In_AwaitContext() *AssignmentExpression_In_AwaitContext {
	var p = new(AssignmentExpression_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_In_Await
	return p
}

func (*AssignmentExpression_In_AwaitContext) IsAssignmentExpression_In_AwaitContext() {}

func NewAssignmentExpression_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpression_In_AwaitContext {
	var p = new(AssignmentExpression_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_In_Await

	return p
}

func (s *AssignmentExpression_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpression_In_AwaitContext) ConditionalExpression_In_Await() IConditionalExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpression_In_AwaitContext)
}

func (s *AssignmentExpression_In_AwaitContext) ArrowFunction_In_Await() IArrowFunction_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunction_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunction_In_AwaitContext)
}

func (s *AssignmentExpression_In_AwaitContext) AsyncArrowFunction_In_Await() IAsyncArrowFunction_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowFunction_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowFunction_In_AwaitContext)
}

func (s *AssignmentExpression_In_AwaitContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *AssignmentExpression_In_AwaitContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *AssignmentExpression_In_AwaitContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentExpression_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpression_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpression_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAssignmentExpression_In_Await(s)
	}
}

func (s *AssignmentExpression_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAssignmentExpression_In_Await(s)
	}
}

func (s *AssignmentExpression_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAssignmentExpression_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AssignmentExpression_In_Await() (localctx IAssignmentExpression_In_AwaitContext) {
	localctx = NewAssignmentExpression_In_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, ECMAScriptParserRULE_assignmentExpression_In_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3877)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 269, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3866)
			p.ConditionalExpression_In_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3867)
			p.ArrowFunction_In_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3868)
			p.AsyncArrowFunction_In_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3869)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3870)
			p.Match(ECMAScriptParserT__12)
		}
		{
			p.SetState(3871)
			p.AssignmentExpression_In_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3873)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3874)
			p.AssignmentOperator()
		}
		{
			p.SetState(3875)
			p.AssignmentExpression_In_Await()
		}

	}

	return localctx
}

// IAssignmentExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IAssignmentExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentExpression_Yield_AwaitContext differentiates from other interfaces.
	IsAssignmentExpression_Yield_AwaitContext()
}

type AssignmentExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpression_Yield_AwaitContext() *AssignmentExpression_Yield_AwaitContext {
	var p = new(AssignmentExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_Yield_Await
	return p
}

func (*AssignmentExpression_Yield_AwaitContext) IsAssignmentExpression_Yield_AwaitContext() {}

func NewAssignmentExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpression_Yield_AwaitContext {
	var p = new(AssignmentExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_Yield_Await

	return p
}

func (s *AssignmentExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpression_Yield_AwaitContext) ConditionalExpression_Yield_Await() IConditionalExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpression_Yield_AwaitContext)
}

func (s *AssignmentExpression_Yield_AwaitContext) YieldExpression_Await() IYieldExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldExpression_AwaitContext)
}

func (s *AssignmentExpression_Yield_AwaitContext) ArrowFunction_Yield_Await() IArrowFunction_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunction_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunction_Yield_AwaitContext)
}

func (s *AssignmentExpression_Yield_AwaitContext) AsyncArrowFunction_Yield_Await() IAsyncArrowFunction_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowFunction_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowFunction_Yield_AwaitContext)
}

func (s *AssignmentExpression_Yield_AwaitContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *AssignmentExpression_Yield_AwaitContext) AssignmentExpression_Yield_Await() IAssignmentExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_Yield_AwaitContext)
}

func (s *AssignmentExpression_Yield_AwaitContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAssignmentExpression_Yield_Await(s)
	}
}

func (s *AssignmentExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAssignmentExpression_Yield_Await(s)
	}
}

func (s *AssignmentExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAssignmentExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AssignmentExpression_Yield_Await() (localctx IAssignmentExpression_Yield_AwaitContext) {
	localctx = NewAssignmentExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, ECMAScriptParserRULE_assignmentExpression_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3891)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 270, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3879)
			p.ConditionalExpression_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3880)
			p.YieldExpression_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3881)
			p.ArrowFunction_Yield_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3882)
			p.AsyncArrowFunction_Yield_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3883)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3884)
			p.Match(ECMAScriptParserT__12)
		}
		{
			p.SetState(3885)
			p.AssignmentExpression_Yield_Await()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3887)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3888)
			p.AssignmentOperator()
		}
		{
			p.SetState(3889)
			p.AssignmentExpression_Yield_Await()
		}

	}

	return localctx
}

// IAssignmentExpression_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IAssignmentExpression_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentExpression_In_Yield_AwaitContext differentiates from other interfaces.
	IsAssignmentExpression_In_Yield_AwaitContext()
}

type AssignmentExpression_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpression_In_Yield_AwaitContext() *AssignmentExpression_In_Yield_AwaitContext {
	var p = new(AssignmentExpression_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_In_Yield_Await
	return p
}

func (*AssignmentExpression_In_Yield_AwaitContext) IsAssignmentExpression_In_Yield_AwaitContext() {}

func NewAssignmentExpression_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpression_In_Yield_AwaitContext {
	var p = new(AssignmentExpression_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_assignmentExpression_In_Yield_Await

	return p
}

func (s *AssignmentExpression_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpression_In_Yield_AwaitContext) ConditionalExpression_In_Yield_Await() IConditionalExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpression_In_Yield_AwaitContext)
}

func (s *AssignmentExpression_In_Yield_AwaitContext) YieldExpression_In_Await() IYieldExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldExpression_In_AwaitContext)
}

func (s *AssignmentExpression_In_Yield_AwaitContext) ArrowFunction_In_Yield_Await() IArrowFunction_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowFunction_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowFunction_In_Yield_AwaitContext)
}

func (s *AssignmentExpression_In_Yield_AwaitContext) AsyncArrowFunction_In_Yield_Await() IAsyncArrowFunction_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowFunction_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowFunction_In_Yield_AwaitContext)
}

func (s *AssignmentExpression_In_Yield_AwaitContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *AssignmentExpression_In_Yield_AwaitContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *AssignmentExpression_In_Yield_AwaitContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentExpression_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpression_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpression_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAssignmentExpression_In_Yield_Await(s)
	}
}

func (s *AssignmentExpression_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAssignmentExpression_In_Yield_Await(s)
	}
}

func (s *AssignmentExpression_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAssignmentExpression_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AssignmentExpression_In_Yield_Await() (localctx IAssignmentExpression_In_Yield_AwaitContext) {
	localctx = NewAssignmentExpression_In_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, ECMAScriptParserRULE_assignmentExpression_In_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3905)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 271, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3893)
			p.ConditionalExpression_In_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3894)
			p.YieldExpression_In_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3895)
			p.ArrowFunction_In_Yield_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3896)
			p.AsyncArrowFunction_In_Yield_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3897)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3898)
			p.Match(ECMAScriptParserT__12)
		}
		{
			p.SetState(3899)
			p.AssignmentExpression_In_Yield_Await()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3901)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(3902)
			p.AssignmentOperator()
		}
		{
			p.SetState(3903)
			p.AssignmentExpression_In_Yield_Await()
		}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *ECMAScriptParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 470
	p.EnterRecursionRule(localctx, 470, ECMAScriptParserRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3908)
		p.AssignmentExpression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3915)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 272, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_expression)
			p.SetState(3910)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3911)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(3912)
				p.AssignmentExpression()
			}

		}
		p.SetState(3917)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 272, p.GetParserRuleContext())
	}

	return localctx
}

// IExpression_InContext is an interface to support dynamic dispatch.
type IExpression_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_InContext differentiates from other interfaces.
	IsExpression_InContext()
}

type Expression_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_InContext() *Expression_InContext {
	var p = new(Expression_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expression_In
	return p
}

func (*Expression_InContext) IsExpression_InContext() {}

func NewExpression_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_InContext {
	var p = new(Expression_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expression_In

	return p
}

func (s *Expression_InContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_InContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *Expression_InContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *Expression_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpression_In(s)
	}
}

func (s *Expression_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpression_In(s)
	}
}

func (s *Expression_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpression_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Expression_In() (localctx IExpression_InContext) {
	return p.expression_In(0)
}

func (p *ECMAScriptParser) expression_In(_p int) (localctx IExpression_InContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpression_InContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpression_InContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 472
	p.EnterRecursionRule(localctx, 472, ECMAScriptParserRULE_expression_In, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3919)
		p.AssignmentExpression_In()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3926)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpression_InContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_expression_In)
			p.SetState(3921)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3922)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(3923)
				p.AssignmentExpression_In()
			}

		}
		p.SetState(3928)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext())
	}

	return localctx
}

// IExpression_YieldContext is an interface to support dynamic dispatch.
type IExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_YieldContext differentiates from other interfaces.
	IsExpression_YieldContext()
}

type Expression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_YieldContext() *Expression_YieldContext {
	var p = new(Expression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expression_Yield
	return p
}

func (*Expression_YieldContext) IsExpression_YieldContext() {}

func NewExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_YieldContext {
	var p = new(Expression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expression_Yield

	return p
}

func (s *Expression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_YieldContext) AssignmentExpression_Yield() IAssignmentExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_YieldContext)
}

func (s *Expression_YieldContext) Expression_Yield() IExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_YieldContext)
}

func (s *Expression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpression_Yield(s)
	}
}

func (s *Expression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpression_Yield(s)
	}
}

func (s *Expression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Expression_Yield() (localctx IExpression_YieldContext) {
	return p.expression_Yield(0)
}

func (p *ECMAScriptParser) expression_Yield(_p int) (localctx IExpression_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpression_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpression_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 474
	p.EnterRecursionRule(localctx, 474, ECMAScriptParserRULE_expression_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3930)
		p.AssignmentExpression_Yield()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3937)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 274, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpression_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_expression_Yield)
			p.SetState(3932)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3933)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(3934)
				p.AssignmentExpression_Yield()
			}

		}
		p.SetState(3939)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 274, p.GetParserRuleContext())
	}

	return localctx
}

// IExpression_In_YieldContext is an interface to support dynamic dispatch.
type IExpression_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_In_YieldContext differentiates from other interfaces.
	IsExpression_In_YieldContext()
}

type Expression_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_In_YieldContext() *Expression_In_YieldContext {
	var p = new(Expression_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expression_In_Yield
	return p
}

func (*Expression_In_YieldContext) IsExpression_In_YieldContext() {}

func NewExpression_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_In_YieldContext {
	var p = new(Expression_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expression_In_Yield

	return p
}

func (s *Expression_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_In_YieldContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *Expression_In_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *Expression_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpression_In_Yield(s)
	}
}

func (s *Expression_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpression_In_Yield(s)
	}
}

func (s *Expression_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpression_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Expression_In_Yield() (localctx IExpression_In_YieldContext) {
	return p.expression_In_Yield(0)
}

func (p *ECMAScriptParser) expression_In_Yield(_p int) (localctx IExpression_In_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpression_In_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpression_In_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 476
	p.EnterRecursionRule(localctx, 476, ECMAScriptParserRULE_expression_In_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3941)
		p.AssignmentExpression_In_Yield()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3948)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 275, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpression_In_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_expression_In_Yield)
			p.SetState(3943)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3944)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(3945)
				p.AssignmentExpression_In_Yield()
			}

		}
		p.SetState(3950)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 275, p.GetParserRuleContext())
	}

	return localctx
}

// IExpression_AwaitContext is an interface to support dynamic dispatch.
type IExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_AwaitContext differentiates from other interfaces.
	IsExpression_AwaitContext()
}

type Expression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_AwaitContext() *Expression_AwaitContext {
	var p = new(Expression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expression_Await
	return p
}

func (*Expression_AwaitContext) IsExpression_AwaitContext() {}

func NewExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_AwaitContext {
	var p = new(Expression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expression_Await

	return p
}

func (s *Expression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_AwaitContext) AssignmentExpression_Await() IAssignmentExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_AwaitContext)
}

func (s *Expression_AwaitContext) Expression_Await() IExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_AwaitContext)
}

func (s *Expression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpression_Await(s)
	}
}

func (s *Expression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpression_Await(s)
	}
}

func (s *Expression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Expression_Await() (localctx IExpression_AwaitContext) {
	return p.expression_Await(0)
}

func (p *ECMAScriptParser) expression_Await(_p int) (localctx IExpression_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpression_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpression_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 478
	p.EnterRecursionRule(localctx, 478, ECMAScriptParserRULE_expression_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3952)
		p.AssignmentExpression_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3959)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 276, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpression_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_expression_Await)
			p.SetState(3954)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3955)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(3956)
				p.AssignmentExpression_Await()
			}

		}
		p.SetState(3961)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 276, p.GetParserRuleContext())
	}

	return localctx
}

// IExpression_In_AwaitContext is an interface to support dynamic dispatch.
type IExpression_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_In_AwaitContext differentiates from other interfaces.
	IsExpression_In_AwaitContext()
}

type Expression_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_In_AwaitContext() *Expression_In_AwaitContext {
	var p = new(Expression_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expression_In_Await
	return p
}

func (*Expression_In_AwaitContext) IsExpression_In_AwaitContext() {}

func NewExpression_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_In_AwaitContext {
	var p = new(Expression_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expression_In_Await

	return p
}

func (s *Expression_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_In_AwaitContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *Expression_In_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *Expression_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpression_In_Await(s)
	}
}

func (s *Expression_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpression_In_Await(s)
	}
}

func (s *Expression_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpression_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Expression_In_Await() (localctx IExpression_In_AwaitContext) {
	return p.expression_In_Await(0)
}

func (p *ECMAScriptParser) expression_In_Await(_p int) (localctx IExpression_In_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpression_In_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpression_In_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 480
	p.EnterRecursionRule(localctx, 480, ECMAScriptParserRULE_expression_In_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3963)
		p.AssignmentExpression_In_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3970)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 277, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpression_In_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_expression_In_Await)
			p.SetState(3965)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3966)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(3967)
				p.AssignmentExpression_In_Await()
			}

		}
		p.SetState(3972)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 277, p.GetParserRuleContext())
	}

	return localctx
}

// IExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_Yield_AwaitContext differentiates from other interfaces.
	IsExpression_Yield_AwaitContext()
}

type Expression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_Yield_AwaitContext() *Expression_Yield_AwaitContext {
	var p = new(Expression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expression_Yield_Await
	return p
}

func (*Expression_Yield_AwaitContext) IsExpression_Yield_AwaitContext() {}

func NewExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_Yield_AwaitContext {
	var p = new(Expression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expression_Yield_Await

	return p
}

func (s *Expression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_Yield_AwaitContext) AssignmentExpression_Yield_Await() IAssignmentExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_Yield_AwaitContext)
}

func (s *Expression_Yield_AwaitContext) Expression_Yield_Await() IExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_Yield_AwaitContext)
}

func (s *Expression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpression_Yield_Await(s)
	}
}

func (s *Expression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpression_Yield_Await(s)
	}
}

func (s *Expression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Expression_Yield_Await() (localctx IExpression_Yield_AwaitContext) {
	return p.expression_Yield_Await(0)
}

func (p *ECMAScriptParser) expression_Yield_Await(_p int) (localctx IExpression_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpression_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 482
	p.EnterRecursionRule(localctx, 482, ECMAScriptParserRULE_expression_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3974)
		p.AssignmentExpression_Yield_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3981)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpression_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_expression_Yield_Await)
			p.SetState(3976)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3977)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(3978)
				p.AssignmentExpression_Yield_Await()
			}

		}
		p.SetState(3983)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())
	}

	return localctx
}

// IExpression_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IExpression_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_In_Yield_AwaitContext differentiates from other interfaces.
	IsExpression_In_Yield_AwaitContext()
}

type Expression_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_In_Yield_AwaitContext() *Expression_In_Yield_AwaitContext {
	var p = new(Expression_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expression_In_Yield_Await
	return p
}

func (*Expression_In_Yield_AwaitContext) IsExpression_In_Yield_AwaitContext() {}

func NewExpression_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_In_Yield_AwaitContext {
	var p = new(Expression_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expression_In_Yield_Await

	return p
}

func (s *Expression_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_In_Yield_AwaitContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *Expression_In_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *Expression_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpression_In_Yield_Await(s)
	}
}

func (s *Expression_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpression_In_Yield_Await(s)
	}
}

func (s *Expression_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpression_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Expression_In_Yield_Await() (localctx IExpression_In_Yield_AwaitContext) {
	return p.expression_In_Yield_Await(0)
}

func (p *ECMAScriptParser) expression_In_Yield_Await(_p int) (localctx IExpression_In_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpression_In_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpression_In_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 484
	p.EnterRecursionRule(localctx, 484, ECMAScriptParserRULE_expression_In_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3985)
		p.AssignmentExpression_In_Yield_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3992)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpression_In_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_expression_In_Yield_Await)
			p.SetState(3987)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(3988)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(3989)
				p.AssignmentExpression_In_Yield_Await()
			}

		}
		p.SetState(3994)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext())
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) BlockStatement() IBlockStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *StatementContext) VariableStatement() IVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatementContext)
}

func (s *StatementContext) TheEmptyStatement() ITheEmptyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheEmptyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheEmptyStatementContext)
}

func (s *StatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *StatementContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *StatementContext) BreakableStatement() IBreakableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakableStatementContext)
}

func (s *StatementContext) ContinueStatement() IContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *StatementContext) BreakStatement() IBreakStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *StatementContext) WithStatement() IWithStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithStatementContext)
}

func (s *StatementContext) LabelledStatement() ILabelledStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledStatementContext)
}

func (s *StatementContext) ThrowStatement() IThrowStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatementContext)
}

func (s *StatementContext) TryStatement() ITryStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryStatementContext)
}

func (s *StatementContext) DebuggerStatement() IDebuggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDebuggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDebuggerStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, ECMAScriptParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4008)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3995)
			p.BlockStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3996)
			p.VariableStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3997)
			p.TheEmptyStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3998)
			p.ExpressionStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3999)
			p.IfStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4000)
			p.BreakableStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4001)
			p.ContinueStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4002)
			p.BreakStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4003)
			p.WithStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4004)
			p.LabelledStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4005)
			p.ThrowStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4006)
			p.TryStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4007)
			p.DebuggerStatement()
		}

	}

	return localctx
}

// IStatement_YieldContext is an interface to support dynamic dispatch.
type IStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatement_YieldContext differentiates from other interfaces.
	IsStatement_YieldContext()
}

type Statement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_YieldContext() *Statement_YieldContext {
	var p = new(Statement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statement_Yield
	return p
}

func (*Statement_YieldContext) IsStatement_YieldContext() {}

func NewStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_YieldContext {
	var p = new(Statement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statement_Yield

	return p
}

func (s *Statement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_YieldContext) BlockStatement_Yield() IBlockStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatement_YieldContext)
}

func (s *Statement_YieldContext) VariableStatement_Yield() IVariableStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatement_YieldContext)
}

func (s *Statement_YieldContext) TheEmptyStatement() ITheEmptyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheEmptyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheEmptyStatementContext)
}

func (s *Statement_YieldContext) ExpressionStatement_Yield() IExpressionStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatement_YieldContext)
}

func (s *Statement_YieldContext) IfStatement_Yield() IIfStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatement_YieldContext)
}

func (s *Statement_YieldContext) BreakableStatement_Yield() IBreakableStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakableStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakableStatement_YieldContext)
}

func (s *Statement_YieldContext) ContinueStatement_Yield() IContinueStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatement_YieldContext)
}

func (s *Statement_YieldContext) BreakStatement_Yield() IBreakStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatement_YieldContext)
}

func (s *Statement_YieldContext) WithStatement_Yield() IWithStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithStatement_YieldContext)
}

func (s *Statement_YieldContext) LabelledStatement_Yield() ILabelledStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledStatement_YieldContext)
}

func (s *Statement_YieldContext) ThrowStatement_Yield() IThrowStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatement_YieldContext)
}

func (s *Statement_YieldContext) TryStatement_Yield() ITryStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryStatement_YieldContext)
}

func (s *Statement_YieldContext) DebuggerStatement() IDebuggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDebuggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDebuggerStatementContext)
}

func (s *Statement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatement_Yield(s)
	}
}

func (s *Statement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatement_Yield(s)
	}
}

func (s *Statement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Statement_Yield() (localctx IStatement_YieldContext) {
	localctx = NewStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, ECMAScriptParserRULE_statement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4023)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 281, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4010)
			p.BlockStatement_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4011)
			p.VariableStatement_Yield()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4012)
			p.TheEmptyStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4013)
			p.ExpressionStatement_Yield()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4014)
			p.IfStatement_Yield()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4015)
			p.BreakableStatement_Yield()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4016)
			p.ContinueStatement_Yield()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4017)
			p.BreakStatement_Yield()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4018)
			p.WithStatement_Yield()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4019)
			p.LabelledStatement_Yield()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4020)
			p.ThrowStatement_Yield()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4021)
			p.TryStatement_Yield()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4022)
			p.DebuggerStatement()
		}

	}

	return localctx
}

// IStatement_AwaitContext is an interface to support dynamic dispatch.
type IStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatement_AwaitContext differentiates from other interfaces.
	IsStatement_AwaitContext()
}

type Statement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_AwaitContext() *Statement_AwaitContext {
	var p = new(Statement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statement_Await
	return p
}

func (*Statement_AwaitContext) IsStatement_AwaitContext() {}

func NewStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_AwaitContext {
	var p = new(Statement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statement_Await

	return p
}

func (s *Statement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_AwaitContext) BlockStatement_Await() IBlockStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatement_AwaitContext)
}

func (s *Statement_AwaitContext) VariableStatement_Await() IVariableStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatement_AwaitContext)
}

func (s *Statement_AwaitContext) TheEmptyStatement() ITheEmptyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheEmptyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheEmptyStatementContext)
}

func (s *Statement_AwaitContext) ExpressionStatement_Await() IExpressionStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatement_AwaitContext)
}

func (s *Statement_AwaitContext) IfStatement_Await() IIfStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatement_AwaitContext)
}

func (s *Statement_AwaitContext) BreakableStatement_Await() IBreakableStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakableStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakableStatement_AwaitContext)
}

func (s *Statement_AwaitContext) ContinueStatement_Await() IContinueStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatement_AwaitContext)
}

func (s *Statement_AwaitContext) BreakStatement_Await() IBreakStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatement_AwaitContext)
}

func (s *Statement_AwaitContext) WithStatement_Await() IWithStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithStatement_AwaitContext)
}

func (s *Statement_AwaitContext) LabelledStatement_Await() ILabelledStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledStatement_AwaitContext)
}

func (s *Statement_AwaitContext) ThrowStatement_Await() IThrowStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatement_AwaitContext)
}

func (s *Statement_AwaitContext) TryStatement_Await() ITryStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryStatement_AwaitContext)
}

func (s *Statement_AwaitContext) DebuggerStatement() IDebuggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDebuggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDebuggerStatementContext)
}

func (s *Statement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatement_Await(s)
	}
}

func (s *Statement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatement_Await(s)
	}
}

func (s *Statement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Statement_Await() (localctx IStatement_AwaitContext) {
	localctx = NewStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, ECMAScriptParserRULE_statement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4038)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 282, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4025)
			p.BlockStatement_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4026)
			p.VariableStatement_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4027)
			p.TheEmptyStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4028)
			p.ExpressionStatement_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4029)
			p.IfStatement_Await()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4030)
			p.BreakableStatement_Await()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4031)
			p.ContinueStatement_Await()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4032)
			p.BreakStatement_Await()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4033)
			p.WithStatement_Await()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4034)
			p.LabelledStatement_Await()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4035)
			p.ThrowStatement_Await()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4036)
			p.TryStatement_Await()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4037)
			p.DebuggerStatement()
		}

	}

	return localctx
}

// IStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatement_Yield_AwaitContext differentiates from other interfaces.
	IsStatement_Yield_AwaitContext()
}

type Statement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_Yield_AwaitContext() *Statement_Yield_AwaitContext {
	var p = new(Statement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statement_Yield_Await
	return p
}

func (*Statement_Yield_AwaitContext) IsStatement_Yield_AwaitContext() {}

func NewStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_Yield_AwaitContext {
	var p = new(Statement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statement_Yield_Await

	return p
}

func (s *Statement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_Yield_AwaitContext) BlockStatement_Yield_Await() IBlockStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_AwaitContext) VariableStatement_Yield_Await() IVariableStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_AwaitContext) TheEmptyStatement() ITheEmptyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheEmptyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheEmptyStatementContext)
}

func (s *Statement_Yield_AwaitContext) ExpressionStatement_Yield_Await() IExpressionStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_AwaitContext) IfStatement_Yield_Await() IIfStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_AwaitContext) BreakableStatement_Yield_Await() IBreakableStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakableStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakableStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_AwaitContext) ContinueStatement_Yield_Await() IContinueStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_AwaitContext) BreakStatement_Yield_Await() IBreakStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_AwaitContext) WithStatement_Yield_Await() IWithStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_AwaitContext) LabelledStatement_Yield_Await() ILabelledStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_AwaitContext) ThrowStatement_Yield_Await() IThrowStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_AwaitContext) TryStatement_Yield_Await() ITryStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_AwaitContext) DebuggerStatement() IDebuggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDebuggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDebuggerStatementContext)
}

func (s *Statement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatement_Yield_Await(s)
	}
}

func (s *Statement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatement_Yield_Await(s)
	}
}

func (s *Statement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Statement_Yield_Await() (localctx IStatement_Yield_AwaitContext) {
	localctx = NewStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, ECMAScriptParserRULE_statement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4053)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 283, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4040)
			p.BlockStatement_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4041)
			p.VariableStatement_Yield_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4042)
			p.TheEmptyStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4043)
			p.ExpressionStatement_Yield_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4044)
			p.IfStatement_Yield_Await()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4045)
			p.BreakableStatement_Yield_Await()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4046)
			p.ContinueStatement_Yield_Await()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4047)
			p.BreakStatement_Yield_Await()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4048)
			p.WithStatement_Yield_Await()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4049)
			p.LabelledStatement_Yield_Await()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4050)
			p.ThrowStatement_Yield_Await()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4051)
			p.TryStatement_Yield_Await()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4052)
			p.DebuggerStatement()
		}

	}

	return localctx
}

// IStatement_ReturnContext is an interface to support dynamic dispatch.
type IStatement_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatement_ReturnContext differentiates from other interfaces.
	IsStatement_ReturnContext()
}

type Statement_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_ReturnContext() *Statement_ReturnContext {
	var p = new(Statement_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statement_Return
	return p
}

func (*Statement_ReturnContext) IsStatement_ReturnContext() {}

func NewStatement_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_ReturnContext {
	var p = new(Statement_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statement_Return

	return p
}

func (s *Statement_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_ReturnContext) BlockStatement_Return() IBlockStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatement_ReturnContext)
}

func (s *Statement_ReturnContext) VariableStatement() IVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatementContext)
}

func (s *Statement_ReturnContext) TheEmptyStatement() ITheEmptyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheEmptyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheEmptyStatementContext)
}

func (s *Statement_ReturnContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *Statement_ReturnContext) IfStatement_Return() IIfStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatement_ReturnContext)
}

func (s *Statement_ReturnContext) BreakableStatement_Return() IBreakableStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakableStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakableStatement_ReturnContext)
}

func (s *Statement_ReturnContext) ContinueStatement() IContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *Statement_ReturnContext) BreakStatement() IBreakStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *Statement_ReturnContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *Statement_ReturnContext) WithStatement_Return() IWithStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithStatement_ReturnContext)
}

func (s *Statement_ReturnContext) LabelledStatement_Return() ILabelledStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledStatement_ReturnContext)
}

func (s *Statement_ReturnContext) ThrowStatement() IThrowStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatementContext)
}

func (s *Statement_ReturnContext) TryStatement_Return() ITryStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryStatement_ReturnContext)
}

func (s *Statement_ReturnContext) DebuggerStatement() IDebuggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDebuggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDebuggerStatementContext)
}

func (s *Statement_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatement_Return(s)
	}
}

func (s *Statement_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatement_Return(s)
	}
}

func (s *Statement_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatement_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Statement_Return() (localctx IStatement_ReturnContext) {
	localctx = NewStatement_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, ECMAScriptParserRULE_statement_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4069)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 284, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4055)
			p.BlockStatement_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4056)
			p.VariableStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4057)
			p.TheEmptyStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4058)
			p.ExpressionStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4059)
			p.IfStatement_Return()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4060)
			p.BreakableStatement_Return()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4061)
			p.ContinueStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4062)
			p.BreakStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4063)
			p.ReturnStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4064)
			p.WithStatement_Return()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4065)
			p.LabelledStatement_Return()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4066)
			p.ThrowStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4067)
			p.TryStatement_Return()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(4068)
			p.DebuggerStatement()
		}

	}

	return localctx
}

// IStatement_Yield_ReturnContext is an interface to support dynamic dispatch.
type IStatement_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatement_Yield_ReturnContext differentiates from other interfaces.
	IsStatement_Yield_ReturnContext()
}

type Statement_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_Yield_ReturnContext() *Statement_Yield_ReturnContext {
	var p = new(Statement_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statement_Yield_Return
	return p
}

func (*Statement_Yield_ReturnContext) IsStatement_Yield_ReturnContext() {}

func NewStatement_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_Yield_ReturnContext {
	var p = new(Statement_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statement_Yield_Return

	return p
}

func (s *Statement_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_Yield_ReturnContext) BlockStatement_Yield_Return() IBlockStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatement_Yield_ReturnContext)
}

func (s *Statement_Yield_ReturnContext) VariableStatement_Yield() IVariableStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatement_YieldContext)
}

func (s *Statement_Yield_ReturnContext) TheEmptyStatement() ITheEmptyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheEmptyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheEmptyStatementContext)
}

func (s *Statement_Yield_ReturnContext) ExpressionStatement_Yield() IExpressionStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatement_YieldContext)
}

func (s *Statement_Yield_ReturnContext) IfStatement_Yield_Return() IIfStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatement_Yield_ReturnContext)
}

func (s *Statement_Yield_ReturnContext) BreakableStatement_Yield_Return() IBreakableStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakableStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakableStatement_Yield_ReturnContext)
}

func (s *Statement_Yield_ReturnContext) ContinueStatement_Yield() IContinueStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatement_YieldContext)
}

func (s *Statement_Yield_ReturnContext) BreakStatement_Yield() IBreakStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatement_YieldContext)
}

func (s *Statement_Yield_ReturnContext) ReturnStatement_Yield() IReturnStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatement_YieldContext)
}

func (s *Statement_Yield_ReturnContext) WithStatement_Yield_Return() IWithStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithStatement_Yield_ReturnContext)
}

func (s *Statement_Yield_ReturnContext) LabelledStatement_Yield_Return() ILabelledStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledStatement_Yield_ReturnContext)
}

func (s *Statement_Yield_ReturnContext) ThrowStatement_Yield() IThrowStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatement_YieldContext)
}

func (s *Statement_Yield_ReturnContext) TryStatement_Yield_Return() ITryStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryStatement_Yield_ReturnContext)
}

func (s *Statement_Yield_ReturnContext) DebuggerStatement() IDebuggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDebuggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDebuggerStatementContext)
}

func (s *Statement_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatement_Yield_Return(s)
	}
}

func (s *Statement_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatement_Yield_Return(s)
	}
}

func (s *Statement_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatement_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Statement_Yield_Return() (localctx IStatement_Yield_ReturnContext) {
	localctx = NewStatement_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, ECMAScriptParserRULE_statement_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4085)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 285, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4071)
			p.BlockStatement_Yield_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4072)
			p.VariableStatement_Yield()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4073)
			p.TheEmptyStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4074)
			p.ExpressionStatement_Yield()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4075)
			p.IfStatement_Yield_Return()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4076)
			p.BreakableStatement_Yield_Return()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4077)
			p.ContinueStatement_Yield()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4078)
			p.BreakStatement_Yield()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4079)
			p.ReturnStatement_Yield()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4080)
			p.WithStatement_Yield_Return()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4081)
			p.LabelledStatement_Yield_Return()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4082)
			p.ThrowStatement_Yield()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4083)
			p.TryStatement_Yield_Return()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(4084)
			p.DebuggerStatement()
		}

	}

	return localctx
}

// IStatement_Await_ReturnContext is an interface to support dynamic dispatch.
type IStatement_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatement_Await_ReturnContext differentiates from other interfaces.
	IsStatement_Await_ReturnContext()
}

type Statement_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_Await_ReturnContext() *Statement_Await_ReturnContext {
	var p = new(Statement_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statement_Await_Return
	return p
}

func (*Statement_Await_ReturnContext) IsStatement_Await_ReturnContext() {}

func NewStatement_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_Await_ReturnContext {
	var p = new(Statement_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statement_Await_Return

	return p
}

func (s *Statement_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_Await_ReturnContext) BlockStatement_Await_Return() IBlockStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatement_Await_ReturnContext)
}

func (s *Statement_Await_ReturnContext) VariableStatement_Await() IVariableStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatement_AwaitContext)
}

func (s *Statement_Await_ReturnContext) TheEmptyStatement() ITheEmptyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheEmptyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheEmptyStatementContext)
}

func (s *Statement_Await_ReturnContext) ExpressionStatement_Await() IExpressionStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatement_AwaitContext)
}

func (s *Statement_Await_ReturnContext) IfStatement_Await_Return() IIfStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatement_Await_ReturnContext)
}

func (s *Statement_Await_ReturnContext) BreakableStatement_Await_Return() IBreakableStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakableStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakableStatement_Await_ReturnContext)
}

func (s *Statement_Await_ReturnContext) ContinueStatement_Await() IContinueStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatement_AwaitContext)
}

func (s *Statement_Await_ReturnContext) BreakStatement_Await() IBreakStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatement_AwaitContext)
}

func (s *Statement_Await_ReturnContext) ReturnStatement_Await() IReturnStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatement_AwaitContext)
}

func (s *Statement_Await_ReturnContext) WithStatement_Await_Return() IWithStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithStatement_Await_ReturnContext)
}

func (s *Statement_Await_ReturnContext) LabelledStatement_Await_Return() ILabelledStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledStatement_Await_ReturnContext)
}

func (s *Statement_Await_ReturnContext) ThrowStatement_Await() IThrowStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatement_AwaitContext)
}

func (s *Statement_Await_ReturnContext) TryStatement_Await_Return() ITryStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryStatement_Await_ReturnContext)
}

func (s *Statement_Await_ReturnContext) DebuggerStatement() IDebuggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDebuggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDebuggerStatementContext)
}

func (s *Statement_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatement_Await_Return(s)
	}
}

func (s *Statement_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatement_Await_Return(s)
	}
}

func (s *Statement_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatement_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Statement_Await_Return() (localctx IStatement_Await_ReturnContext) {
	localctx = NewStatement_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, ECMAScriptParserRULE_statement_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4101)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 286, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4087)
			p.BlockStatement_Await_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4088)
			p.VariableStatement_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4089)
			p.TheEmptyStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4090)
			p.ExpressionStatement_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4091)
			p.IfStatement_Await_Return()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4092)
			p.BreakableStatement_Await_Return()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4093)
			p.ContinueStatement_Await()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4094)
			p.BreakStatement_Await()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4095)
			p.ReturnStatement_Await()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4096)
			p.WithStatement_Await_Return()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4097)
			p.LabelledStatement_Await_Return()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4098)
			p.ThrowStatement_Await()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4099)
			p.TryStatement_Await_Return()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(4100)
			p.DebuggerStatement()
		}

	}

	return localctx
}

// IStatement_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type IStatement_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatement_Yield_Await_ReturnContext differentiates from other interfaces.
	IsStatement_Yield_Await_ReturnContext()
}

type Statement_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_Yield_Await_ReturnContext() *Statement_Yield_Await_ReturnContext {
	var p = new(Statement_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statement_Yield_Await_Return
	return p
}

func (*Statement_Yield_Await_ReturnContext) IsStatement_Yield_Await_ReturnContext() {}

func NewStatement_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_Yield_Await_ReturnContext {
	var p = new(Statement_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statement_Yield_Await_Return

	return p
}

func (s *Statement_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_Yield_Await_ReturnContext) BlockStatement_Yield_Await_Return() IBlockStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatement_Yield_Await_ReturnContext)
}

func (s *Statement_Yield_Await_ReturnContext) VariableStatement_Yield_Await() IVariableStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_Await_ReturnContext) TheEmptyStatement() ITheEmptyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheEmptyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheEmptyStatementContext)
}

func (s *Statement_Yield_Await_ReturnContext) ExpressionStatement_Yield_Await() IExpressionStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_Await_ReturnContext) IfStatement_Yield_Await_Return() IIfStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatement_Yield_Await_ReturnContext)
}

func (s *Statement_Yield_Await_ReturnContext) BreakableStatement_Yield_Await_Return() IBreakableStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakableStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakableStatement_Yield_Await_ReturnContext)
}

func (s *Statement_Yield_Await_ReturnContext) ContinueStatement_Yield_Await() IContinueStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_Await_ReturnContext) BreakStatement_Yield_Await() IBreakStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_Await_ReturnContext) ReturnStatement_Yield_Await() IReturnStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_Await_ReturnContext) WithStatement_Yield_Await_Return() IWithStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithStatement_Yield_Await_ReturnContext)
}

func (s *Statement_Yield_Await_ReturnContext) LabelledStatement_Yield_Await_Return() ILabelledStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledStatement_Yield_Await_ReturnContext)
}

func (s *Statement_Yield_Await_ReturnContext) ThrowStatement_Yield_Await() IThrowStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatement_Yield_AwaitContext)
}

func (s *Statement_Yield_Await_ReturnContext) TryStatement_Yield_Await_Return() ITryStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryStatement_Yield_Await_ReturnContext)
}

func (s *Statement_Yield_Await_ReturnContext) DebuggerStatement() IDebuggerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDebuggerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDebuggerStatementContext)
}

func (s *Statement_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatement_Yield_Await_Return(s)
	}
}

func (s *Statement_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatement_Yield_Await_Return(s)
	}
}

func (s *Statement_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatement_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Statement_Yield_Await_Return() (localctx IStatement_Yield_Await_ReturnContext) {
	localctx = NewStatement_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, ECMAScriptParserRULE_statement_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4117)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 287, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4103)
			p.BlockStatement_Yield_Await_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4104)
			p.VariableStatement_Yield_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4105)
			p.TheEmptyStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4106)
			p.ExpressionStatement_Yield_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4107)
			p.IfStatement_Yield_Await_Return()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4108)
			p.BreakableStatement_Yield_Await_Return()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4109)
			p.ContinueStatement_Yield_Await()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4110)
			p.BreakStatement_Yield_Await()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4111)
			p.ReturnStatement_Yield_Await()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4112)
			p.WithStatement_Yield_Await_Return()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4113)
			p.LabelledStatement_Yield_Await_Return()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4114)
			p.ThrowStatement_Yield_Await()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4115)
			p.TryStatement_Yield_Await_Return()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(4116)
			p.DebuggerStatement()
		}

	}

	return localctx
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) HoistableDeclaration() IHoistableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHoistableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHoistableDeclarationContext)
}

func (s *DeclarationContext) ClassDeclaration() IClassDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassDeclarationContext)
}

func (s *DeclarationContext) LexicalDeclaration_In() ILexicalDeclaration_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclaration_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclaration_InContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDeclaration(s)
	}
}

func (s *DeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, ECMAScriptParserRULE_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4122)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__80, ECMAScriptParserT__85:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4119)
			p.HoistableDeclaration()
		}

	case ECMAScriptParserT__86:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4120)
			p.ClassDeclaration()
		}

	case ECMAScriptParserT__59, ECMAScriptParserT__60:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4121)
			p.LexicalDeclaration_In()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclaration_YieldContext is an interface to support dynamic dispatch.
type IDeclaration_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclaration_YieldContext differentiates from other interfaces.
	IsDeclaration_YieldContext()
}

type Declaration_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclaration_YieldContext() *Declaration_YieldContext {
	var p = new(Declaration_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_declaration_Yield
	return p
}

func (*Declaration_YieldContext) IsDeclaration_YieldContext() {}

func NewDeclaration_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declaration_YieldContext {
	var p = new(Declaration_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_declaration_Yield

	return p
}

func (s *Declaration_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Declaration_YieldContext) HoistableDeclaration_Yield() IHoistableDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHoistableDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHoistableDeclaration_YieldContext)
}

func (s *Declaration_YieldContext) ClassDeclaration_Yield() IClassDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassDeclaration_YieldContext)
}

func (s *Declaration_YieldContext) LexicalDeclaration_In_Yield() ILexicalDeclaration_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclaration_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclaration_In_YieldContext)
}

func (s *Declaration_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declaration_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declaration_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDeclaration_Yield(s)
	}
}

func (s *Declaration_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDeclaration_Yield(s)
	}
}

func (s *Declaration_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDeclaration_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Declaration_Yield() (localctx IDeclaration_YieldContext) {
	localctx = NewDeclaration_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, ECMAScriptParserRULE_declaration_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4127)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__80, ECMAScriptParserT__85:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4124)
			p.HoistableDeclaration_Yield()
		}

	case ECMAScriptParserT__86:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4125)
			p.ClassDeclaration_Yield()
		}

	case ECMAScriptParserT__59, ECMAScriptParserT__60:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4126)
			p.LexicalDeclaration_In_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclaration_AwaitContext is an interface to support dynamic dispatch.
type IDeclaration_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclaration_AwaitContext differentiates from other interfaces.
	IsDeclaration_AwaitContext()
}

type Declaration_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclaration_AwaitContext() *Declaration_AwaitContext {
	var p = new(Declaration_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_declaration_Await
	return p
}

func (*Declaration_AwaitContext) IsDeclaration_AwaitContext() {}

func NewDeclaration_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declaration_AwaitContext {
	var p = new(Declaration_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_declaration_Await

	return p
}

func (s *Declaration_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Declaration_AwaitContext) HoistableDeclaration_Await() IHoistableDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHoistableDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHoistableDeclaration_AwaitContext)
}

func (s *Declaration_AwaitContext) ClassDeclaration_Await() IClassDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassDeclaration_AwaitContext)
}

func (s *Declaration_AwaitContext) LexicalDeclaration_In_Await() ILexicalDeclaration_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclaration_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclaration_In_AwaitContext)
}

func (s *Declaration_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declaration_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declaration_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDeclaration_Await(s)
	}
}

func (s *Declaration_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDeclaration_Await(s)
	}
}

func (s *Declaration_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDeclaration_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Declaration_Await() (localctx IDeclaration_AwaitContext) {
	localctx = NewDeclaration_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, ECMAScriptParserRULE_declaration_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4132)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__80, ECMAScriptParserT__85:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4129)
			p.HoistableDeclaration_Await()
		}

	case ECMAScriptParserT__86:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4130)
			p.ClassDeclaration_Await()
		}

	case ECMAScriptParserT__59, ECMAScriptParserT__60:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4131)
			p.LexicalDeclaration_In_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclaration_Yield_AwaitContext is an interface to support dynamic dispatch.
type IDeclaration_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclaration_Yield_AwaitContext differentiates from other interfaces.
	IsDeclaration_Yield_AwaitContext()
}

type Declaration_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclaration_Yield_AwaitContext() *Declaration_Yield_AwaitContext {
	var p = new(Declaration_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_declaration_Yield_Await
	return p
}

func (*Declaration_Yield_AwaitContext) IsDeclaration_Yield_AwaitContext() {}

func NewDeclaration_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declaration_Yield_AwaitContext {
	var p = new(Declaration_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_declaration_Yield_Await

	return p
}

func (s *Declaration_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Declaration_Yield_AwaitContext) HoistableDeclaration_Yield_Await() IHoistableDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHoistableDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHoistableDeclaration_Yield_AwaitContext)
}

func (s *Declaration_Yield_AwaitContext) ClassDeclaration_Yield_Await() IClassDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassDeclaration_Yield_AwaitContext)
}

func (s *Declaration_Yield_AwaitContext) LexicalDeclaration_In_Yield_Await() ILexicalDeclaration_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclaration_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclaration_In_Yield_AwaitContext)
}

func (s *Declaration_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declaration_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declaration_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDeclaration_Yield_Await(s)
	}
}

func (s *Declaration_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDeclaration_Yield_Await(s)
	}
}

func (s *Declaration_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDeclaration_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Declaration_Yield_Await() (localctx IDeclaration_Yield_AwaitContext) {
	localctx = NewDeclaration_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, ECMAScriptParserRULE_declaration_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4137)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__80, ECMAScriptParserT__85:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4134)
			p.HoistableDeclaration_Yield_Await()
		}

	case ECMAScriptParserT__86:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4135)
			p.ClassDeclaration_Yield_Await()
		}

	case ECMAScriptParserT__59, ECMAScriptParserT__60:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4136)
			p.LexicalDeclaration_In_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IHoistableDeclarationContext is an interface to support dynamic dispatch.
type IHoistableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHoistableDeclarationContext differentiates from other interfaces.
	IsHoistableDeclarationContext()
}

type HoistableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHoistableDeclarationContext() *HoistableDeclarationContext {
	var p = new(HoistableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration
	return p
}

func (*HoistableDeclarationContext) IsHoistableDeclarationContext() {}

func NewHoistableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HoistableDeclarationContext {
	var p = new(HoistableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration

	return p
}

func (s *HoistableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *HoistableDeclarationContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *HoistableDeclarationContext) GeneratorDeclaration() IGeneratorDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorDeclarationContext)
}

func (s *HoistableDeclarationContext) AsyncFunctionDeclaration() IAsyncFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionDeclarationContext)
}

func (s *HoistableDeclarationContext) AsyncGeneratorDeclaration() IAsyncGeneratorDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorDeclarationContext)
}

func (s *HoistableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HoistableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HoistableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterHoistableDeclaration(s)
	}
}

func (s *HoistableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitHoistableDeclaration(s)
	}
}

func (s *HoistableDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitHoistableDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) HoistableDeclaration() (localctx IHoistableDeclarationContext) {
	localctx = NewHoistableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, ECMAScriptParserRULE_hoistableDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4143)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 292, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4139)
			p.FunctionDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4140)
			p.GeneratorDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4141)
			p.AsyncFunctionDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4142)
			p.AsyncGeneratorDeclaration()
		}

	}

	return localctx
}

// IHoistableDeclaration_YieldContext is an interface to support dynamic dispatch.
type IHoistableDeclaration_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHoistableDeclaration_YieldContext differentiates from other interfaces.
	IsHoistableDeclaration_YieldContext()
}

type HoistableDeclaration_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHoistableDeclaration_YieldContext() *HoistableDeclaration_YieldContext {
	var p = new(HoistableDeclaration_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Yield
	return p
}

func (*HoistableDeclaration_YieldContext) IsHoistableDeclaration_YieldContext() {}

func NewHoistableDeclaration_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HoistableDeclaration_YieldContext {
	var p = new(HoistableDeclaration_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Yield

	return p
}

func (s *HoistableDeclaration_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *HoistableDeclaration_YieldContext) FunctionDeclaration_Yield() IFunctionDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_YieldContext)
}

func (s *HoistableDeclaration_YieldContext) GeneratorDeclaration_Yield() IGeneratorDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorDeclaration_YieldContext)
}

func (s *HoistableDeclaration_YieldContext) AsyncFunctionDeclaration_Yield() IAsyncFunctionDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionDeclaration_YieldContext)
}

func (s *HoistableDeclaration_YieldContext) AsyncGeneratorDeclaration_Yield() IAsyncGeneratorDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorDeclaration_YieldContext)
}

func (s *HoistableDeclaration_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HoistableDeclaration_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HoistableDeclaration_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterHoistableDeclaration_Yield(s)
	}
}

func (s *HoistableDeclaration_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitHoistableDeclaration_Yield(s)
	}
}

func (s *HoistableDeclaration_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitHoistableDeclaration_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) HoistableDeclaration_Yield() (localctx IHoistableDeclaration_YieldContext) {
	localctx = NewHoistableDeclaration_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, ECMAScriptParserRULE_hoistableDeclaration_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4149)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 293, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4145)
			p.FunctionDeclaration_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4146)
			p.GeneratorDeclaration_Yield()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4147)
			p.AsyncFunctionDeclaration_Yield()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4148)
			p.AsyncGeneratorDeclaration_Yield()
		}

	}

	return localctx
}

// IHoistableDeclaration_AwaitContext is an interface to support dynamic dispatch.
type IHoistableDeclaration_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHoistableDeclaration_AwaitContext differentiates from other interfaces.
	IsHoistableDeclaration_AwaitContext()
}

type HoistableDeclaration_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHoistableDeclaration_AwaitContext() *HoistableDeclaration_AwaitContext {
	var p = new(HoistableDeclaration_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Await
	return p
}

func (*HoistableDeclaration_AwaitContext) IsHoistableDeclaration_AwaitContext() {}

func NewHoistableDeclaration_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HoistableDeclaration_AwaitContext {
	var p = new(HoistableDeclaration_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Await

	return p
}

func (s *HoistableDeclaration_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *HoistableDeclaration_AwaitContext) FunctionDeclaration_Await() IFunctionDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_AwaitContext)
}

func (s *HoistableDeclaration_AwaitContext) GeneratorDeclaration_Await() IGeneratorDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorDeclaration_AwaitContext)
}

func (s *HoistableDeclaration_AwaitContext) AsyncFunctionDeclaration_Await() IAsyncFunctionDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionDeclaration_AwaitContext)
}

func (s *HoistableDeclaration_AwaitContext) AsyncGeneratorDeclaration_Await() IAsyncGeneratorDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorDeclaration_AwaitContext)
}

func (s *HoistableDeclaration_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HoistableDeclaration_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HoistableDeclaration_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterHoistableDeclaration_Await(s)
	}
}

func (s *HoistableDeclaration_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitHoistableDeclaration_Await(s)
	}
}

func (s *HoistableDeclaration_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitHoistableDeclaration_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) HoistableDeclaration_Await() (localctx IHoistableDeclaration_AwaitContext) {
	localctx = NewHoistableDeclaration_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, ECMAScriptParserRULE_hoistableDeclaration_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4155)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 294, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4151)
			p.FunctionDeclaration_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4152)
			p.GeneratorDeclaration_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4153)
			p.AsyncFunctionDeclaration_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4154)
			p.AsyncGeneratorDeclaration_Await()
		}

	}

	return localctx
}

// IHoistableDeclaration_Yield_AwaitContext is an interface to support dynamic dispatch.
type IHoistableDeclaration_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHoistableDeclaration_Yield_AwaitContext differentiates from other interfaces.
	IsHoistableDeclaration_Yield_AwaitContext()
}

type HoistableDeclaration_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHoistableDeclaration_Yield_AwaitContext() *HoistableDeclaration_Yield_AwaitContext {
	var p = new(HoistableDeclaration_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Yield_Await
	return p
}

func (*HoistableDeclaration_Yield_AwaitContext) IsHoistableDeclaration_Yield_AwaitContext() {}

func NewHoistableDeclaration_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HoistableDeclaration_Yield_AwaitContext {
	var p = new(HoistableDeclaration_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Yield_Await

	return p
}

func (s *HoistableDeclaration_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *HoistableDeclaration_Yield_AwaitContext) FunctionDeclaration_Yield_Await() IFunctionDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_Yield_AwaitContext)
}

func (s *HoistableDeclaration_Yield_AwaitContext) GeneratorDeclaration_Yield_Await() IGeneratorDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorDeclaration_Yield_AwaitContext)
}

func (s *HoistableDeclaration_Yield_AwaitContext) AsyncFunctionDeclaration_Yield_Await() IAsyncFunctionDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionDeclaration_Yield_AwaitContext)
}

func (s *HoistableDeclaration_Yield_AwaitContext) AsyncGeneratorDeclaration_Yield_Await() IAsyncGeneratorDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorDeclaration_Yield_AwaitContext)
}

func (s *HoistableDeclaration_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HoistableDeclaration_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HoistableDeclaration_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterHoistableDeclaration_Yield_Await(s)
	}
}

func (s *HoistableDeclaration_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitHoistableDeclaration_Yield_Await(s)
	}
}

func (s *HoistableDeclaration_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitHoistableDeclaration_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) HoistableDeclaration_Yield_Await() (localctx IHoistableDeclaration_Yield_AwaitContext) {
	localctx = NewHoistableDeclaration_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, ECMAScriptParserRULE_hoistableDeclaration_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4161)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 295, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4157)
			p.FunctionDeclaration_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4158)
			p.GeneratorDeclaration_Yield_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4159)
			p.AsyncFunctionDeclaration_Yield_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4160)
			p.AsyncGeneratorDeclaration_Yield_Await()
		}

	}

	return localctx
}

// IHoistableDeclaration_DefaultContext is an interface to support dynamic dispatch.
type IHoistableDeclaration_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHoistableDeclaration_DefaultContext differentiates from other interfaces.
	IsHoistableDeclaration_DefaultContext()
}

type HoistableDeclaration_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHoistableDeclaration_DefaultContext() *HoistableDeclaration_DefaultContext {
	var p = new(HoistableDeclaration_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Default
	return p
}

func (*HoistableDeclaration_DefaultContext) IsHoistableDeclaration_DefaultContext() {}

func NewHoistableDeclaration_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HoistableDeclaration_DefaultContext {
	var p = new(HoistableDeclaration_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Default

	return p
}

func (s *HoistableDeclaration_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *HoistableDeclaration_DefaultContext) FunctionDeclaration_Default() IFunctionDeclaration_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_DefaultContext)
}

func (s *HoistableDeclaration_DefaultContext) GeneratorDeclaration_Default() IGeneratorDeclaration_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorDeclaration_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorDeclaration_DefaultContext)
}

func (s *HoistableDeclaration_DefaultContext) AsyncFunctionDeclaration_Default() IAsyncFunctionDeclaration_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionDeclaration_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionDeclaration_DefaultContext)
}

func (s *HoistableDeclaration_DefaultContext) AsyncGeneratorDeclaration_Default() IAsyncGeneratorDeclaration_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorDeclaration_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorDeclaration_DefaultContext)
}

func (s *HoistableDeclaration_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HoistableDeclaration_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HoistableDeclaration_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterHoistableDeclaration_Default(s)
	}
}

func (s *HoistableDeclaration_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitHoistableDeclaration_Default(s)
	}
}

func (s *HoistableDeclaration_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitHoistableDeclaration_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) HoistableDeclaration_Default() (localctx IHoistableDeclaration_DefaultContext) {
	localctx = NewHoistableDeclaration_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, ECMAScriptParserRULE_hoistableDeclaration_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4167)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 296, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4163)
			p.FunctionDeclaration_Default()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4164)
			p.GeneratorDeclaration_Default()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4165)
			p.AsyncFunctionDeclaration_Default()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4166)
			p.AsyncGeneratorDeclaration_Default()
		}

	}

	return localctx
}

// IHoistableDeclaration_Yield_DefaultContext is an interface to support dynamic dispatch.
type IHoistableDeclaration_Yield_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHoistableDeclaration_Yield_DefaultContext differentiates from other interfaces.
	IsHoistableDeclaration_Yield_DefaultContext()
}

type HoistableDeclaration_Yield_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHoistableDeclaration_Yield_DefaultContext() *HoistableDeclaration_Yield_DefaultContext {
	var p = new(HoistableDeclaration_Yield_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Yield_Default
	return p
}

func (*HoistableDeclaration_Yield_DefaultContext) IsHoistableDeclaration_Yield_DefaultContext() {}

func NewHoistableDeclaration_Yield_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HoistableDeclaration_Yield_DefaultContext {
	var p = new(HoistableDeclaration_Yield_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Yield_Default

	return p
}

func (s *HoistableDeclaration_Yield_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *HoistableDeclaration_Yield_DefaultContext) FunctionDeclaration_Yield_Default() IFunctionDeclaration_Yield_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_Yield_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_Yield_DefaultContext)
}

func (s *HoistableDeclaration_Yield_DefaultContext) GeneratorDeclaration_Yield_Default() IGeneratorDeclaration_Yield_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorDeclaration_Yield_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorDeclaration_Yield_DefaultContext)
}

func (s *HoistableDeclaration_Yield_DefaultContext) AsyncFunctionDeclaration_Yield_Default() IAsyncFunctionDeclaration_Yield_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionDeclaration_Yield_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionDeclaration_Yield_DefaultContext)
}

func (s *HoistableDeclaration_Yield_DefaultContext) AsyncGeneratorDeclaration_Yield_Default() IAsyncGeneratorDeclaration_Yield_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorDeclaration_Yield_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorDeclaration_Yield_DefaultContext)
}

func (s *HoistableDeclaration_Yield_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HoistableDeclaration_Yield_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HoistableDeclaration_Yield_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterHoistableDeclaration_Yield_Default(s)
	}
}

func (s *HoistableDeclaration_Yield_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitHoistableDeclaration_Yield_Default(s)
	}
}

func (s *HoistableDeclaration_Yield_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitHoistableDeclaration_Yield_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) HoistableDeclaration_Yield_Default() (localctx IHoistableDeclaration_Yield_DefaultContext) {
	localctx = NewHoistableDeclaration_Yield_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, ECMAScriptParserRULE_hoistableDeclaration_Yield_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4173)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 297, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4169)
			p.FunctionDeclaration_Yield_Default()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4170)
			p.GeneratorDeclaration_Yield_Default()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4171)
			p.AsyncFunctionDeclaration_Yield_Default()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4172)
			p.AsyncGeneratorDeclaration_Yield_Default()
		}

	}

	return localctx
}

// IHoistableDeclaration_Await_DefaultContext is an interface to support dynamic dispatch.
type IHoistableDeclaration_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHoistableDeclaration_Await_DefaultContext differentiates from other interfaces.
	IsHoistableDeclaration_Await_DefaultContext()
}

type HoistableDeclaration_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHoistableDeclaration_Await_DefaultContext() *HoistableDeclaration_Await_DefaultContext {
	var p = new(HoistableDeclaration_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Await_Default
	return p
}

func (*HoistableDeclaration_Await_DefaultContext) IsHoistableDeclaration_Await_DefaultContext() {}

func NewHoistableDeclaration_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HoistableDeclaration_Await_DefaultContext {
	var p = new(HoistableDeclaration_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Await_Default

	return p
}

func (s *HoistableDeclaration_Await_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *HoistableDeclaration_Await_DefaultContext) FunctionDeclaration_Await_Default() IFunctionDeclaration_Await_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_Await_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_Await_DefaultContext)
}

func (s *HoistableDeclaration_Await_DefaultContext) GeneratorDeclaration_Await_Default() IGeneratorDeclaration_Await_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorDeclaration_Await_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorDeclaration_Await_DefaultContext)
}

func (s *HoistableDeclaration_Await_DefaultContext) AsyncFunctionDeclaration_Await_Default() IAsyncFunctionDeclaration_Await_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionDeclaration_Await_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionDeclaration_Await_DefaultContext)
}

func (s *HoistableDeclaration_Await_DefaultContext) AsyncGeneratorDeclaration_Await_Default() IAsyncGeneratorDeclaration_Await_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorDeclaration_Await_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorDeclaration_Await_DefaultContext)
}

func (s *HoistableDeclaration_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HoistableDeclaration_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HoistableDeclaration_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterHoistableDeclaration_Await_Default(s)
	}
}

func (s *HoistableDeclaration_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitHoistableDeclaration_Await_Default(s)
	}
}

func (s *HoistableDeclaration_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitHoistableDeclaration_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) HoistableDeclaration_Await_Default() (localctx IHoistableDeclaration_Await_DefaultContext) {
	localctx = NewHoistableDeclaration_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, ECMAScriptParserRULE_hoistableDeclaration_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4179)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 298, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4175)
			p.FunctionDeclaration_Await_Default()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4176)
			p.GeneratorDeclaration_Await_Default()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4177)
			p.AsyncFunctionDeclaration_Await_Default()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4178)
			p.AsyncGeneratorDeclaration_Await_Default()
		}

	}

	return localctx
}

// IHoistableDeclaration_Yield_Await_DefaultContext is an interface to support dynamic dispatch.
type IHoistableDeclaration_Yield_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHoistableDeclaration_Yield_Await_DefaultContext differentiates from other interfaces.
	IsHoistableDeclaration_Yield_Await_DefaultContext()
}

type HoistableDeclaration_Yield_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHoistableDeclaration_Yield_Await_DefaultContext() *HoistableDeclaration_Yield_Await_DefaultContext {
	var p = new(HoistableDeclaration_Yield_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Yield_Await_Default
	return p
}

func (*HoistableDeclaration_Yield_Await_DefaultContext) IsHoistableDeclaration_Yield_Await_DefaultContext() {
}

func NewHoistableDeclaration_Yield_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HoistableDeclaration_Yield_Await_DefaultContext {
	var p = new(HoistableDeclaration_Yield_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_hoistableDeclaration_Yield_Await_Default

	return p
}

func (s *HoistableDeclaration_Yield_Await_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *HoistableDeclaration_Yield_Await_DefaultContext) FunctionDeclaration_Yield_Await_Default() IFunctionDeclaration_Yield_Await_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_Yield_Await_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_Yield_Await_DefaultContext)
}

func (s *HoistableDeclaration_Yield_Await_DefaultContext) GeneratorDeclaration_Yield_Await_Default() IGeneratorDeclaration_Yield_Await_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorDeclaration_Yield_Await_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorDeclaration_Yield_Await_DefaultContext)
}

func (s *HoistableDeclaration_Yield_Await_DefaultContext) AsyncFunctionDeclaration_Yield_Await_Default() IAsyncFunctionDeclaration_Yield_Await_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionDeclaration_Yield_Await_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionDeclaration_Yield_Await_DefaultContext)
}

func (s *HoistableDeclaration_Yield_Await_DefaultContext) AsyncGeneratorDeclaration_Yield_Await_Default() IAsyncGeneratorDeclaration_Yield_Await_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorDeclaration_Yield_Await_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorDeclaration_Yield_Await_DefaultContext)
}

func (s *HoistableDeclaration_Yield_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HoistableDeclaration_Yield_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HoistableDeclaration_Yield_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterHoistableDeclaration_Yield_Await_Default(s)
	}
}

func (s *HoistableDeclaration_Yield_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitHoistableDeclaration_Yield_Await_Default(s)
	}
}

func (s *HoistableDeclaration_Yield_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitHoistableDeclaration_Yield_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) HoistableDeclaration_Yield_Await_Default() (localctx IHoistableDeclaration_Yield_Await_DefaultContext) {
	localctx = NewHoistableDeclaration_Yield_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, ECMAScriptParserRULE_hoistableDeclaration_Yield_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4185)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 299, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4181)
			p.FunctionDeclaration_Yield_Await_Default()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4182)
			p.GeneratorDeclaration_Yield_Await_Default()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4183)
			p.AsyncFunctionDeclaration_Yield_Await_Default()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4184)
			p.AsyncGeneratorDeclaration_Yield_Await_Default()
		}

	}

	return localctx
}

// IBreakableStatementContext is an interface to support dynamic dispatch.
type IBreakableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakableStatementContext differentiates from other interfaces.
	IsBreakableStatementContext()
}

type BreakableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakableStatementContext() *BreakableStatementContext {
	var p = new(BreakableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement
	return p
}

func (*BreakableStatementContext) IsBreakableStatementContext() {}

func NewBreakableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakableStatementContext {
	var p = new(BreakableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement

	return p
}

func (s *BreakableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakableStatementContext) IterationStatement() IIterationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationStatementContext)
}

func (s *BreakableStatementContext) SwitchStatement() ISwitchStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchStatementContext)
}

func (s *BreakableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakableStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakableStatement(s)
	}
}

func (s *BreakableStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakableStatement(s)
	}
}

func (s *BreakableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakableStatement() (localctx IBreakableStatementContext) {
	localctx = NewBreakableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, ECMAScriptParserRULE_breakableStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4189)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__64, ECMAScriptParserT__65, ECMAScriptParserT__66:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4187)
			p.IterationStatement()
		}

	case ECMAScriptParserT__72:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4188)
			p.SwitchStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBreakableStatement_YieldContext is an interface to support dynamic dispatch.
type IBreakableStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakableStatement_YieldContext differentiates from other interfaces.
	IsBreakableStatement_YieldContext()
}

type BreakableStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakableStatement_YieldContext() *BreakableStatement_YieldContext {
	var p = new(BreakableStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Yield
	return p
}

func (*BreakableStatement_YieldContext) IsBreakableStatement_YieldContext() {}

func NewBreakableStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakableStatement_YieldContext {
	var p = new(BreakableStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Yield

	return p
}

func (s *BreakableStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakableStatement_YieldContext) IterationStatement_Yield() IIterationStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationStatement_YieldContext)
}

func (s *BreakableStatement_YieldContext) SwitchStatement_Yield() ISwitchStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchStatement_YieldContext)
}

func (s *BreakableStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakableStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakableStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakableStatement_Yield(s)
	}
}

func (s *BreakableStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakableStatement_Yield(s)
	}
}

func (s *BreakableStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakableStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakableStatement_Yield() (localctx IBreakableStatement_YieldContext) {
	localctx = NewBreakableStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, ECMAScriptParserRULE_breakableStatement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4193)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__64, ECMAScriptParserT__65, ECMAScriptParserT__66:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4191)
			p.IterationStatement_Yield()
		}

	case ECMAScriptParserT__72:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4192)
			p.SwitchStatement_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBreakableStatement_AwaitContext is an interface to support dynamic dispatch.
type IBreakableStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakableStatement_AwaitContext differentiates from other interfaces.
	IsBreakableStatement_AwaitContext()
}

type BreakableStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakableStatement_AwaitContext() *BreakableStatement_AwaitContext {
	var p = new(BreakableStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Await
	return p
}

func (*BreakableStatement_AwaitContext) IsBreakableStatement_AwaitContext() {}

func NewBreakableStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakableStatement_AwaitContext {
	var p = new(BreakableStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Await

	return p
}

func (s *BreakableStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakableStatement_AwaitContext) IterationStatement_Await() IIterationStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationStatement_AwaitContext)
}

func (s *BreakableStatement_AwaitContext) SwitchStatement_Await() ISwitchStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchStatement_AwaitContext)
}

func (s *BreakableStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakableStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakableStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakableStatement_Await(s)
	}
}

func (s *BreakableStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakableStatement_Await(s)
	}
}

func (s *BreakableStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakableStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakableStatement_Await() (localctx IBreakableStatement_AwaitContext) {
	localctx = NewBreakableStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, ECMAScriptParserRULE_breakableStatement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4197)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__64, ECMAScriptParserT__65, ECMAScriptParserT__66:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4195)
			p.IterationStatement_Await()
		}

	case ECMAScriptParserT__72:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4196)
			p.SwitchStatement_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBreakableStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBreakableStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakableStatement_Yield_AwaitContext differentiates from other interfaces.
	IsBreakableStatement_Yield_AwaitContext()
}

type BreakableStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakableStatement_Yield_AwaitContext() *BreakableStatement_Yield_AwaitContext {
	var p = new(BreakableStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Yield_Await
	return p
}

func (*BreakableStatement_Yield_AwaitContext) IsBreakableStatement_Yield_AwaitContext() {}

func NewBreakableStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakableStatement_Yield_AwaitContext {
	var p = new(BreakableStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Yield_Await

	return p
}

func (s *BreakableStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakableStatement_Yield_AwaitContext) IterationStatement_Yield_Await() IIterationStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationStatement_Yield_AwaitContext)
}

func (s *BreakableStatement_Yield_AwaitContext) SwitchStatement_Yield_Await() ISwitchStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchStatement_Yield_AwaitContext)
}

func (s *BreakableStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakableStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakableStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakableStatement_Yield_Await(s)
	}
}

func (s *BreakableStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakableStatement_Yield_Await(s)
	}
}

func (s *BreakableStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakableStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakableStatement_Yield_Await() (localctx IBreakableStatement_Yield_AwaitContext) {
	localctx = NewBreakableStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, ECMAScriptParserRULE_breakableStatement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4201)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__64, ECMAScriptParserT__65, ECMAScriptParserT__66:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4199)
			p.IterationStatement_Yield_Await()
		}

	case ECMAScriptParserT__72:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4200)
			p.SwitchStatement_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBreakableStatement_ReturnContext is an interface to support dynamic dispatch.
type IBreakableStatement_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakableStatement_ReturnContext differentiates from other interfaces.
	IsBreakableStatement_ReturnContext()
}

type BreakableStatement_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakableStatement_ReturnContext() *BreakableStatement_ReturnContext {
	var p = new(BreakableStatement_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Return
	return p
}

func (*BreakableStatement_ReturnContext) IsBreakableStatement_ReturnContext() {}

func NewBreakableStatement_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakableStatement_ReturnContext {
	var p = new(BreakableStatement_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Return

	return p
}

func (s *BreakableStatement_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakableStatement_ReturnContext) IterationStatement_Return() IIterationStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationStatement_ReturnContext)
}

func (s *BreakableStatement_ReturnContext) SwitchStatement_Return() ISwitchStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchStatement_ReturnContext)
}

func (s *BreakableStatement_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakableStatement_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakableStatement_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakableStatement_Return(s)
	}
}

func (s *BreakableStatement_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakableStatement_Return(s)
	}
}

func (s *BreakableStatement_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakableStatement_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakableStatement_Return() (localctx IBreakableStatement_ReturnContext) {
	localctx = NewBreakableStatement_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, ECMAScriptParserRULE_breakableStatement_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4205)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__64, ECMAScriptParserT__65, ECMAScriptParserT__66:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4203)
			p.IterationStatement_Return()
		}

	case ECMAScriptParserT__72:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4204)
			p.SwitchStatement_Return()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBreakableStatement_Yield_ReturnContext is an interface to support dynamic dispatch.
type IBreakableStatement_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakableStatement_Yield_ReturnContext differentiates from other interfaces.
	IsBreakableStatement_Yield_ReturnContext()
}

type BreakableStatement_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakableStatement_Yield_ReturnContext() *BreakableStatement_Yield_ReturnContext {
	var p = new(BreakableStatement_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Yield_Return
	return p
}

func (*BreakableStatement_Yield_ReturnContext) IsBreakableStatement_Yield_ReturnContext() {}

func NewBreakableStatement_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakableStatement_Yield_ReturnContext {
	var p = new(BreakableStatement_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Yield_Return

	return p
}

func (s *BreakableStatement_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakableStatement_Yield_ReturnContext) IterationStatement_Yield_Return() IIterationStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationStatement_Yield_ReturnContext)
}

func (s *BreakableStatement_Yield_ReturnContext) SwitchStatement_Yield_Return() ISwitchStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchStatement_Yield_ReturnContext)
}

func (s *BreakableStatement_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakableStatement_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakableStatement_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakableStatement_Yield_Return(s)
	}
}

func (s *BreakableStatement_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakableStatement_Yield_Return(s)
	}
}

func (s *BreakableStatement_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakableStatement_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakableStatement_Yield_Return() (localctx IBreakableStatement_Yield_ReturnContext) {
	localctx = NewBreakableStatement_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, ECMAScriptParserRULE_breakableStatement_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4209)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__64, ECMAScriptParserT__65, ECMAScriptParserT__66:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4207)
			p.IterationStatement_Yield_Return()
		}

	case ECMAScriptParserT__72:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4208)
			p.SwitchStatement_Yield_Return()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBreakableStatement_Await_ReturnContext is an interface to support dynamic dispatch.
type IBreakableStatement_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakableStatement_Await_ReturnContext differentiates from other interfaces.
	IsBreakableStatement_Await_ReturnContext()
}

type BreakableStatement_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakableStatement_Await_ReturnContext() *BreakableStatement_Await_ReturnContext {
	var p = new(BreakableStatement_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Await_Return
	return p
}

func (*BreakableStatement_Await_ReturnContext) IsBreakableStatement_Await_ReturnContext() {}

func NewBreakableStatement_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakableStatement_Await_ReturnContext {
	var p = new(BreakableStatement_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Await_Return

	return p
}

func (s *BreakableStatement_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakableStatement_Await_ReturnContext) IterationStatement_Await_Return() IIterationStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationStatement_Await_ReturnContext)
}

func (s *BreakableStatement_Await_ReturnContext) SwitchStatement_Await_Return() ISwitchStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchStatement_Await_ReturnContext)
}

func (s *BreakableStatement_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakableStatement_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakableStatement_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakableStatement_Await_Return(s)
	}
}

func (s *BreakableStatement_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakableStatement_Await_Return(s)
	}
}

func (s *BreakableStatement_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakableStatement_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakableStatement_Await_Return() (localctx IBreakableStatement_Await_ReturnContext) {
	localctx = NewBreakableStatement_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, ECMAScriptParserRULE_breakableStatement_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4213)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__64, ECMAScriptParserT__65, ECMAScriptParserT__66:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4211)
			p.IterationStatement_Await_Return()
		}

	case ECMAScriptParserT__72:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4212)
			p.SwitchStatement_Await_Return()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBreakableStatement_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type IBreakableStatement_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakableStatement_Yield_Await_ReturnContext differentiates from other interfaces.
	IsBreakableStatement_Yield_Await_ReturnContext()
}

type BreakableStatement_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakableStatement_Yield_Await_ReturnContext() *BreakableStatement_Yield_Await_ReturnContext {
	var p = new(BreakableStatement_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Yield_Await_Return
	return p
}

func (*BreakableStatement_Yield_Await_ReturnContext) IsBreakableStatement_Yield_Await_ReturnContext() {
}

func NewBreakableStatement_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakableStatement_Yield_Await_ReturnContext {
	var p = new(BreakableStatement_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakableStatement_Yield_Await_Return

	return p
}

func (s *BreakableStatement_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakableStatement_Yield_Await_ReturnContext) IterationStatement_Yield_Await_Return() IIterationStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationStatement_Yield_Await_ReturnContext)
}

func (s *BreakableStatement_Yield_Await_ReturnContext) SwitchStatement_Yield_Await_Return() ISwitchStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchStatement_Yield_Await_ReturnContext)
}

func (s *BreakableStatement_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakableStatement_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakableStatement_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakableStatement_Yield_Await_Return(s)
	}
}

func (s *BreakableStatement_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakableStatement_Yield_Await_Return(s)
	}
}

func (s *BreakableStatement_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakableStatement_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakableStatement_Yield_Await_Return() (localctx IBreakableStatement_Yield_Await_ReturnContext) {
	localctx = NewBreakableStatement_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, ECMAScriptParserRULE_breakableStatement_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4217)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__64, ECMAScriptParserT__65, ECMAScriptParserT__66:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4215)
			p.IterationStatement_Yield_Await_Return()
		}

	case ECMAScriptParserT__72:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4216)
			p.SwitchStatement_Yield_Await_Return()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBlockStatementContext is an interface to support dynamic dispatch.
type IBlockStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockStatementContext differentiates from other interfaces.
	IsBlockStatementContext()
}

type BlockStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatementContext() *BlockStatementContext {
	var p = new(BlockStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_blockStatement
	return p
}

func (*BlockStatementContext) IsBlockStatementContext() {}

func NewBlockStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatementContext {
	var p = new(BlockStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_blockStatement

	return p
}

func (s *BlockStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *BlockStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlockStatement(s)
	}
}

func (s *BlockStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlockStatement(s)
	}
}

func (s *BlockStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlockStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BlockStatement() (localctx IBlockStatementContext) {
	localctx = NewBlockStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, ECMAScriptParserRULE_blockStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4219)
		p.Block()
	}

	return localctx
}

// IBlockStatement_YieldContext is an interface to support dynamic dispatch.
type IBlockStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockStatement_YieldContext differentiates from other interfaces.
	IsBlockStatement_YieldContext()
}

type BlockStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatement_YieldContext() *BlockStatement_YieldContext {
	var p = new(BlockStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Yield
	return p
}

func (*BlockStatement_YieldContext) IsBlockStatement_YieldContext() {}

func NewBlockStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatement_YieldContext {
	var p = new(BlockStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Yield

	return p
}

func (s *BlockStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatement_YieldContext) Block_Yield() IBlock_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_YieldContext)
}

func (s *BlockStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlockStatement_Yield(s)
	}
}

func (s *BlockStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlockStatement_Yield(s)
	}
}

func (s *BlockStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlockStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BlockStatement_Yield() (localctx IBlockStatement_YieldContext) {
	localctx = NewBlockStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 544, ECMAScriptParserRULE_blockStatement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4221)
		p.Block_Yield()
	}

	return localctx
}

// IBlockStatement_AwaitContext is an interface to support dynamic dispatch.
type IBlockStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockStatement_AwaitContext differentiates from other interfaces.
	IsBlockStatement_AwaitContext()
}

type BlockStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatement_AwaitContext() *BlockStatement_AwaitContext {
	var p = new(BlockStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Await
	return p
}

func (*BlockStatement_AwaitContext) IsBlockStatement_AwaitContext() {}

func NewBlockStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatement_AwaitContext {
	var p = new(BlockStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Await

	return p
}

func (s *BlockStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatement_AwaitContext) Block_Await() IBlock_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_AwaitContext)
}

func (s *BlockStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlockStatement_Await(s)
	}
}

func (s *BlockStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlockStatement_Await(s)
	}
}

func (s *BlockStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlockStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BlockStatement_Await() (localctx IBlockStatement_AwaitContext) {
	localctx = NewBlockStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 546, ECMAScriptParserRULE_blockStatement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4223)
		p.Block_Await()
	}

	return localctx
}

// IBlockStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBlockStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockStatement_Yield_AwaitContext differentiates from other interfaces.
	IsBlockStatement_Yield_AwaitContext()
}

type BlockStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatement_Yield_AwaitContext() *BlockStatement_Yield_AwaitContext {
	var p = new(BlockStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Yield_Await
	return p
}

func (*BlockStatement_Yield_AwaitContext) IsBlockStatement_Yield_AwaitContext() {}

func NewBlockStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatement_Yield_AwaitContext {
	var p = new(BlockStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Yield_Await

	return p
}

func (s *BlockStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatement_Yield_AwaitContext) Block_Yield_Await() IBlock_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_AwaitContext)
}

func (s *BlockStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlockStatement_Yield_Await(s)
	}
}

func (s *BlockStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlockStatement_Yield_Await(s)
	}
}

func (s *BlockStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlockStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BlockStatement_Yield_Await() (localctx IBlockStatement_Yield_AwaitContext) {
	localctx = NewBlockStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 548, ECMAScriptParserRULE_blockStatement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4225)
		p.Block_Yield_Await()
	}

	return localctx
}

// IBlockStatement_ReturnContext is an interface to support dynamic dispatch.
type IBlockStatement_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockStatement_ReturnContext differentiates from other interfaces.
	IsBlockStatement_ReturnContext()
}

type BlockStatement_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatement_ReturnContext() *BlockStatement_ReturnContext {
	var p = new(BlockStatement_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Return
	return p
}

func (*BlockStatement_ReturnContext) IsBlockStatement_ReturnContext() {}

func NewBlockStatement_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatement_ReturnContext {
	var p = new(BlockStatement_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Return

	return p
}

func (s *BlockStatement_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatement_ReturnContext) Block_Return() IBlock_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_ReturnContext)
}

func (s *BlockStatement_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatement_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatement_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlockStatement_Return(s)
	}
}

func (s *BlockStatement_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlockStatement_Return(s)
	}
}

func (s *BlockStatement_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlockStatement_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BlockStatement_Return() (localctx IBlockStatement_ReturnContext) {
	localctx = NewBlockStatement_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, ECMAScriptParserRULE_blockStatement_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4227)
		p.Block_Return()
	}

	return localctx
}

// IBlockStatement_Yield_ReturnContext is an interface to support dynamic dispatch.
type IBlockStatement_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockStatement_Yield_ReturnContext differentiates from other interfaces.
	IsBlockStatement_Yield_ReturnContext()
}

type BlockStatement_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatement_Yield_ReturnContext() *BlockStatement_Yield_ReturnContext {
	var p = new(BlockStatement_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Yield_Return
	return p
}

func (*BlockStatement_Yield_ReturnContext) IsBlockStatement_Yield_ReturnContext() {}

func NewBlockStatement_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatement_Yield_ReturnContext {
	var p = new(BlockStatement_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Yield_Return

	return p
}

func (s *BlockStatement_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatement_Yield_ReturnContext) Block_Yield_Return() IBlock_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_ReturnContext)
}

func (s *BlockStatement_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatement_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatement_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlockStatement_Yield_Return(s)
	}
}

func (s *BlockStatement_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlockStatement_Yield_Return(s)
	}
}

func (s *BlockStatement_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlockStatement_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BlockStatement_Yield_Return() (localctx IBlockStatement_Yield_ReturnContext) {
	localctx = NewBlockStatement_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 552, ECMAScriptParserRULE_blockStatement_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4229)
		p.Block_Yield_Return()
	}

	return localctx
}

// IBlockStatement_Await_ReturnContext is an interface to support dynamic dispatch.
type IBlockStatement_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockStatement_Await_ReturnContext differentiates from other interfaces.
	IsBlockStatement_Await_ReturnContext()
}

type BlockStatement_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatement_Await_ReturnContext() *BlockStatement_Await_ReturnContext {
	var p = new(BlockStatement_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Await_Return
	return p
}

func (*BlockStatement_Await_ReturnContext) IsBlockStatement_Await_ReturnContext() {}

func NewBlockStatement_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatement_Await_ReturnContext {
	var p = new(BlockStatement_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Await_Return

	return p
}

func (s *BlockStatement_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatement_Await_ReturnContext) Block_Await_Return() IBlock_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Await_ReturnContext)
}

func (s *BlockStatement_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatement_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatement_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlockStatement_Await_Return(s)
	}
}

func (s *BlockStatement_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlockStatement_Await_Return(s)
	}
}

func (s *BlockStatement_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlockStatement_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BlockStatement_Await_Return() (localctx IBlockStatement_Await_ReturnContext) {
	localctx = NewBlockStatement_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, ECMAScriptParserRULE_blockStatement_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4231)
		p.Block_Await_Return()
	}

	return localctx
}

// IBlockStatement_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type IBlockStatement_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockStatement_Yield_Await_ReturnContext differentiates from other interfaces.
	IsBlockStatement_Yield_Await_ReturnContext()
}

type BlockStatement_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatement_Yield_Await_ReturnContext() *BlockStatement_Yield_Await_ReturnContext {
	var p = new(BlockStatement_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Yield_Await_Return
	return p
}

func (*BlockStatement_Yield_Await_ReturnContext) IsBlockStatement_Yield_Await_ReturnContext() {}

func NewBlockStatement_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatement_Yield_Await_ReturnContext {
	var p = new(BlockStatement_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_blockStatement_Yield_Await_Return

	return p
}

func (s *BlockStatement_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatement_Yield_Await_ReturnContext) Block_Yield_Await_Return() IBlock_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_Await_ReturnContext)
}

func (s *BlockStatement_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatement_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatement_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlockStatement_Yield_Await_Return(s)
	}
}

func (s *BlockStatement_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlockStatement_Yield_Await_Return(s)
	}
}

func (s *BlockStatement_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlockStatement_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BlockStatement_Yield_Await_Return() (localctx IBlockStatement_Yield_Await_ReturnContext) {
	localctx = NewBlockStatement_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, ECMAScriptParserRULE_blockStatement_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4233)
		p.Block_Yield_Await_Return()
	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *BlockContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (s *BlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, ECMAScriptParserRULE_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4235)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(4237)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4236)
			p.StatementList()
		}

	}
	{
		p.SetState(4239)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IBlock_YieldContext is an interface to support dynamic dispatch.
type IBlock_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlock_YieldContext differentiates from other interfaces.
	IsBlock_YieldContext()
}

type Block_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlock_YieldContext() *Block_YieldContext {
	var p = new(Block_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_block_Yield
	return p
}

func (*Block_YieldContext) IsBlock_YieldContext() {}

func NewBlock_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Block_YieldContext {
	var p = new(Block_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_block_Yield

	return p
}

func (s *Block_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Block_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *Block_YieldContext) StatementList_Yield() IStatementList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_YieldContext)
}

func (s *Block_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Block_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlock_Yield(s)
	}
}

func (s *Block_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlock_Yield(s)
	}
}

func (s *Block_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlock_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Block_Yield() (localctx IBlock_YieldContext) {
	localctx = NewBlock_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, ECMAScriptParserRULE_block_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4241)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(4243)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4242)
			p.StatementList_Yield()
		}

	}
	{
		p.SetState(4245)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IBlock_AwaitContext is an interface to support dynamic dispatch.
type IBlock_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlock_AwaitContext differentiates from other interfaces.
	IsBlock_AwaitContext()
}

type Block_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlock_AwaitContext() *Block_AwaitContext {
	var p = new(Block_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_block_Await
	return p
}

func (*Block_AwaitContext) IsBlock_AwaitContext() {}

func NewBlock_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Block_AwaitContext {
	var p = new(Block_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_block_Await

	return p
}

func (s *Block_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Block_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *Block_AwaitContext) StatementList_Await() IStatementList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_AwaitContext)
}

func (s *Block_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Block_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlock_Await(s)
	}
}

func (s *Block_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlock_Await(s)
	}
}

func (s *Block_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlock_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Block_Await() (localctx IBlock_AwaitContext) {
	localctx = NewBlock_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, ECMAScriptParserRULE_block_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4247)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(4249)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4248)
			p.StatementList_Await()
		}

	}
	{
		p.SetState(4251)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IBlock_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBlock_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlock_Yield_AwaitContext differentiates from other interfaces.
	IsBlock_Yield_AwaitContext()
}

type Block_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlock_Yield_AwaitContext() *Block_Yield_AwaitContext {
	var p = new(Block_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_block_Yield_Await
	return p
}

func (*Block_Yield_AwaitContext) IsBlock_Yield_AwaitContext() {}

func NewBlock_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Block_Yield_AwaitContext {
	var p = new(Block_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_block_Yield_Await

	return p
}

func (s *Block_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Block_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *Block_Yield_AwaitContext) StatementList_Yield_Await() IStatementList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Yield_AwaitContext)
}

func (s *Block_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Block_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlock_Yield_Await(s)
	}
}

func (s *Block_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlock_Yield_Await(s)
	}
}

func (s *Block_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlock_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Block_Yield_Await() (localctx IBlock_Yield_AwaitContext) {
	localctx = NewBlock_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, ECMAScriptParserRULE_block_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4253)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(4255)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4254)
			p.StatementList_Yield_Await()
		}

	}
	{
		p.SetState(4257)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IBlock_ReturnContext is an interface to support dynamic dispatch.
type IBlock_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlock_ReturnContext differentiates from other interfaces.
	IsBlock_ReturnContext()
}

type Block_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlock_ReturnContext() *Block_ReturnContext {
	var p = new(Block_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_block_Return
	return p
}

func (*Block_ReturnContext) IsBlock_ReturnContext() {}

func NewBlock_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Block_ReturnContext {
	var p = new(Block_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_block_Return

	return p
}

func (s *Block_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Block_ReturnContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *Block_ReturnContext) StatementList_Return() IStatementList_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_ReturnContext)
}

func (s *Block_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Block_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlock_Return(s)
	}
}

func (s *Block_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlock_Return(s)
	}
}

func (s *Block_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlock_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Block_Return() (localctx IBlock_ReturnContext) {
	localctx = NewBlock_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, ECMAScriptParserRULE_block_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4259)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(4261)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4260)
			p.StatementList_Return()
		}

	}
	{
		p.SetState(4263)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IBlock_Yield_ReturnContext is an interface to support dynamic dispatch.
type IBlock_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlock_Yield_ReturnContext differentiates from other interfaces.
	IsBlock_Yield_ReturnContext()
}

type Block_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlock_Yield_ReturnContext() *Block_Yield_ReturnContext {
	var p = new(Block_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_block_Yield_Return
	return p
}

func (*Block_Yield_ReturnContext) IsBlock_Yield_ReturnContext() {}

func NewBlock_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Block_Yield_ReturnContext {
	var p = new(Block_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_block_Yield_Return

	return p
}

func (s *Block_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Block_Yield_ReturnContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *Block_Yield_ReturnContext) StatementList_Yield_Return() IStatementList_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Yield_ReturnContext)
}

func (s *Block_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Block_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlock_Yield_Return(s)
	}
}

func (s *Block_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlock_Yield_Return(s)
	}
}

func (s *Block_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlock_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Block_Yield_Return() (localctx IBlock_Yield_ReturnContext) {
	localctx = NewBlock_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, ECMAScriptParserRULE_block_Yield_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4265)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(4267)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4266)
			p.StatementList_Yield_Return()
		}

	}
	{
		p.SetState(4269)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IBlock_Await_ReturnContext is an interface to support dynamic dispatch.
type IBlock_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlock_Await_ReturnContext differentiates from other interfaces.
	IsBlock_Await_ReturnContext()
}

type Block_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlock_Await_ReturnContext() *Block_Await_ReturnContext {
	var p = new(Block_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_block_Await_Return
	return p
}

func (*Block_Await_ReturnContext) IsBlock_Await_ReturnContext() {}

func NewBlock_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Block_Await_ReturnContext {
	var p = new(Block_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_block_Await_Return

	return p
}

func (s *Block_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Block_Await_ReturnContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *Block_Await_ReturnContext) StatementList_Await_Return() IStatementList_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Await_ReturnContext)
}

func (s *Block_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Block_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlock_Await_Return(s)
	}
}

func (s *Block_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlock_Await_Return(s)
	}
}

func (s *Block_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlock_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Block_Await_Return() (localctx IBlock_Await_ReturnContext) {
	localctx = NewBlock_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, ECMAScriptParserRULE_block_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4271)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(4273)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4272)
			p.StatementList_Await_Return()
		}

	}
	{
		p.SetState(4275)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IBlock_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type IBlock_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlock_Yield_Await_ReturnContext differentiates from other interfaces.
	IsBlock_Yield_Await_ReturnContext()
}

type Block_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlock_Yield_Await_ReturnContext() *Block_Yield_Await_ReturnContext {
	var p = new(Block_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_block_Yield_Await_Return
	return p
}

func (*Block_Yield_Await_ReturnContext) IsBlock_Yield_Await_ReturnContext() {}

func NewBlock_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Block_Yield_Await_ReturnContext {
	var p = new(Block_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_block_Yield_Await_Return

	return p
}

func (s *Block_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Block_Yield_Await_ReturnContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *Block_Yield_Await_ReturnContext) StatementList_Yield_Await_Return() IStatementList_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Yield_Await_ReturnContext)
}

func (s *Block_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Block_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBlock_Yield_Await_Return(s)
	}
}

func (s *Block_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBlock_Yield_Await_Return(s)
	}
}

func (s *Block_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBlock_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Block_Yield_Await_Return() (localctx IBlock_Yield_Await_ReturnContext) {
	localctx = NewBlock_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, ECMAScriptParserRULE_block_Yield_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4277)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(4279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4278)
			p.StatementList_Yield_Await_Return()
		}

	}
	{
		p.SetState(4281)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IStatementListContext is an interface to support dynamic dispatch.
type IStatementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListContext differentiates from other interfaces.
	IsStatementListContext()
}

type StatementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListContext() *StatementListContext {
	var p = new(StatementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementList
	return p
}

func (*StatementListContext) IsStatementListContext() {}

func NewStatementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListContext {
	var p = new(StatementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementList

	return p
}

func (s *StatementListContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListContext) AllStatementListItem() []IStatementListItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementListItemContext)(nil)).Elem())
	var tst = make([]IStatementListItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementListItemContext)
		}
	}

	return tst
}

func (s *StatementListContext) StatementListItem(i int) IStatementListItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementListItemContext)
}

func (s *StatementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementList(s)
	}
}

func (s *StatementListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementList(s)
	}
}

func (s *StatementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementList() (localctx IStatementListContext) {
	localctx = NewStatementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 574, ECMAScriptParserRULE_statementList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4284)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4283)
			p.StatementListItem()
		}

		p.SetState(4286)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementList_YieldContext is an interface to support dynamic dispatch.
type IStatementList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementList_YieldContext differentiates from other interfaces.
	IsStatementList_YieldContext()
}

type StatementList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementList_YieldContext() *StatementList_YieldContext {
	var p = new(StatementList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementList_Yield
	return p
}

func (*StatementList_YieldContext) IsStatementList_YieldContext() {}

func NewStatementList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementList_YieldContext {
	var p = new(StatementList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementList_Yield

	return p
}

func (s *StatementList_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementList_YieldContext) AllStatementListItem_Yield() []IStatementListItem_YieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementListItem_YieldContext)(nil)).Elem())
	var tst = make([]IStatementListItem_YieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementListItem_YieldContext)
		}
	}

	return tst
}

func (s *StatementList_YieldContext) StatementListItem_Yield(i int) IStatementListItem_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListItem_YieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementListItem_YieldContext)
}

func (s *StatementList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementList_Yield(s)
	}
}

func (s *StatementList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementList_Yield(s)
	}
}

func (s *StatementList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementList_Yield() (localctx IStatementList_YieldContext) {
	localctx = NewStatementList_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 576, ECMAScriptParserRULE_statementList_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4289)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4288)
			p.StatementListItem_Yield()
		}

		p.SetState(4291)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementList_AwaitContext is an interface to support dynamic dispatch.
type IStatementList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementList_AwaitContext differentiates from other interfaces.
	IsStatementList_AwaitContext()
}

type StatementList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementList_AwaitContext() *StatementList_AwaitContext {
	var p = new(StatementList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementList_Await
	return p
}

func (*StatementList_AwaitContext) IsStatementList_AwaitContext() {}

func NewStatementList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementList_AwaitContext {
	var p = new(StatementList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementList_Await

	return p
}

func (s *StatementList_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementList_AwaitContext) AllStatementListItem_Await() []IStatementListItem_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementListItem_AwaitContext)(nil)).Elem())
	var tst = make([]IStatementListItem_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementListItem_AwaitContext)
		}
	}

	return tst
}

func (s *StatementList_AwaitContext) StatementListItem_Await(i int) IStatementListItem_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListItem_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementListItem_AwaitContext)
}

func (s *StatementList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementList_Await(s)
	}
}

func (s *StatementList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementList_Await(s)
	}
}

func (s *StatementList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementList_Await() (localctx IStatementList_AwaitContext) {
	localctx = NewStatementList_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 578, ECMAScriptParserRULE_statementList_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4294)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4293)
			p.StatementListItem_Await()
		}

		p.SetState(4296)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementList_Yield_AwaitContext is an interface to support dynamic dispatch.
type IStatementList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementList_Yield_AwaitContext differentiates from other interfaces.
	IsStatementList_Yield_AwaitContext()
}

type StatementList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementList_Yield_AwaitContext() *StatementList_Yield_AwaitContext {
	var p = new(StatementList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementList_Yield_Await
	return p
}

func (*StatementList_Yield_AwaitContext) IsStatementList_Yield_AwaitContext() {}

func NewStatementList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementList_Yield_AwaitContext {
	var p = new(StatementList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementList_Yield_Await

	return p
}

func (s *StatementList_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementList_Yield_AwaitContext) AllStatementListItem_Yield_Await() []IStatementListItem_Yield_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementListItem_Yield_AwaitContext)(nil)).Elem())
	var tst = make([]IStatementListItem_Yield_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementListItem_Yield_AwaitContext)
		}
	}

	return tst
}

func (s *StatementList_Yield_AwaitContext) StatementListItem_Yield_Await(i int) IStatementListItem_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListItem_Yield_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementListItem_Yield_AwaitContext)
}

func (s *StatementList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementList_Yield_Await(s)
	}
}

func (s *StatementList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementList_Yield_Await(s)
	}
}

func (s *StatementList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementList_Yield_Await() (localctx IStatementList_Yield_AwaitContext) {
	localctx = NewStatementList_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 580, ECMAScriptParserRULE_statementList_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4299)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4298)
			p.StatementListItem_Yield_Await()
		}

		p.SetState(4301)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementList_ReturnContext is an interface to support dynamic dispatch.
type IStatementList_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementList_ReturnContext differentiates from other interfaces.
	IsStatementList_ReturnContext()
}

type StatementList_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementList_ReturnContext() *StatementList_ReturnContext {
	var p = new(StatementList_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementList_Return
	return p
}

func (*StatementList_ReturnContext) IsStatementList_ReturnContext() {}

func NewStatementList_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementList_ReturnContext {
	var p = new(StatementList_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementList_Return

	return p
}

func (s *StatementList_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementList_ReturnContext) AllStatementListItem_Return() []IStatementListItem_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementListItem_ReturnContext)(nil)).Elem())
	var tst = make([]IStatementListItem_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementListItem_ReturnContext)
		}
	}

	return tst
}

func (s *StatementList_ReturnContext) StatementListItem_Return(i int) IStatementListItem_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListItem_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementListItem_ReturnContext)
}

func (s *StatementList_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementList_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementList_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementList_Return(s)
	}
}

func (s *StatementList_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementList_Return(s)
	}
}

func (s *StatementList_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementList_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementList_Return() (localctx IStatementList_ReturnContext) {
	localctx = NewStatementList_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 582, ECMAScriptParserRULE_statementList_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4304)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4303)
			p.StatementListItem_Return()
		}

		p.SetState(4306)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementList_Yield_ReturnContext is an interface to support dynamic dispatch.
type IStatementList_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementList_Yield_ReturnContext differentiates from other interfaces.
	IsStatementList_Yield_ReturnContext()
}

type StatementList_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementList_Yield_ReturnContext() *StatementList_Yield_ReturnContext {
	var p = new(StatementList_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementList_Yield_Return
	return p
}

func (*StatementList_Yield_ReturnContext) IsStatementList_Yield_ReturnContext() {}

func NewStatementList_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementList_Yield_ReturnContext {
	var p = new(StatementList_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementList_Yield_Return

	return p
}

func (s *StatementList_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementList_Yield_ReturnContext) AllStatementListItem_Yield_Return() []IStatementListItem_Yield_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementListItem_Yield_ReturnContext)(nil)).Elem())
	var tst = make([]IStatementListItem_Yield_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementListItem_Yield_ReturnContext)
		}
	}

	return tst
}

func (s *StatementList_Yield_ReturnContext) StatementListItem_Yield_Return(i int) IStatementListItem_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListItem_Yield_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementListItem_Yield_ReturnContext)
}

func (s *StatementList_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementList_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementList_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementList_Yield_Return(s)
	}
}

func (s *StatementList_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementList_Yield_Return(s)
	}
}

func (s *StatementList_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementList_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementList_Yield_Return() (localctx IStatementList_Yield_ReturnContext) {
	localctx = NewStatementList_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 584, ECMAScriptParserRULE_statementList_Yield_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4309)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4308)
			p.StatementListItem_Yield_Return()
		}

		p.SetState(4311)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementList_Await_ReturnContext is an interface to support dynamic dispatch.
type IStatementList_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementList_Await_ReturnContext differentiates from other interfaces.
	IsStatementList_Await_ReturnContext()
}

type StatementList_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementList_Await_ReturnContext() *StatementList_Await_ReturnContext {
	var p = new(StatementList_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementList_Await_Return
	return p
}

func (*StatementList_Await_ReturnContext) IsStatementList_Await_ReturnContext() {}

func NewStatementList_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementList_Await_ReturnContext {
	var p = new(StatementList_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementList_Await_Return

	return p
}

func (s *StatementList_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementList_Await_ReturnContext) AllStatementListItem_Await_Return() []IStatementListItem_Await_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementListItem_Await_ReturnContext)(nil)).Elem())
	var tst = make([]IStatementListItem_Await_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementListItem_Await_ReturnContext)
		}
	}

	return tst
}

func (s *StatementList_Await_ReturnContext) StatementListItem_Await_Return(i int) IStatementListItem_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListItem_Await_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementListItem_Await_ReturnContext)
}

func (s *StatementList_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementList_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementList_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementList_Await_Return(s)
	}
}

func (s *StatementList_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementList_Await_Return(s)
	}
}

func (s *StatementList_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementList_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementList_Await_Return() (localctx IStatementList_Await_ReturnContext) {
	localctx = NewStatementList_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 586, ECMAScriptParserRULE_statementList_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4313)
			p.StatementListItem_Await_Return()
		}

		p.SetState(4316)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementList_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type IStatementList_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementList_Yield_Await_ReturnContext differentiates from other interfaces.
	IsStatementList_Yield_Await_ReturnContext()
}

type StatementList_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementList_Yield_Await_ReturnContext() *StatementList_Yield_Await_ReturnContext {
	var p = new(StatementList_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementList_Yield_Await_Return
	return p
}

func (*StatementList_Yield_Await_ReturnContext) IsStatementList_Yield_Await_ReturnContext() {}

func NewStatementList_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementList_Yield_Await_ReturnContext {
	var p = new(StatementList_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementList_Yield_Await_Return

	return p
}

func (s *StatementList_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementList_Yield_Await_ReturnContext) AllStatementListItem_Yield_Await_Return() []IStatementListItem_Yield_Await_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementListItem_Yield_Await_ReturnContext)(nil)).Elem())
	var tst = make([]IStatementListItem_Yield_Await_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementListItem_Yield_Await_ReturnContext)
		}
	}

	return tst
}

func (s *StatementList_Yield_Await_ReturnContext) StatementListItem_Yield_Await_Return(i int) IStatementListItem_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListItem_Yield_Await_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementListItem_Yield_Await_ReturnContext)
}

func (s *StatementList_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementList_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementList_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementList_Yield_Await_Return(s)
	}
}

func (s *StatementList_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementList_Yield_Await_Return(s)
	}
}

func (s *StatementList_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementList_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementList_Yield_Await_Return() (localctx IStatementList_Yield_Await_ReturnContext) {
	localctx = NewStatementList_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 588, ECMAScriptParserRULE_statementList_Yield_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4319)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(4318)
			p.StatementListItem_Yield_Await_Return()
		}

		p.SetState(4321)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementListItemContext is an interface to support dynamic dispatch.
type IStatementListItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListItemContext differentiates from other interfaces.
	IsStatementListItemContext()
}

type StatementListItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListItemContext() *StatementListItemContext {
	var p = new(StatementListItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementListItem
	return p
}

func (*StatementListItemContext) IsStatementListItemContext() {}

func NewStatementListItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListItemContext {
	var p = new(StatementListItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementListItem

	return p
}

func (s *StatementListItemContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListItemContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementListItemContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *StatementListItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementListItem(s)
	}
}

func (s *StatementListItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementListItem(s)
	}
}

func (s *StatementListItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementListItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementListItem() (localctx IStatementListItemContext) {
	localctx = NewStatementListItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 590, ECMAScriptParserRULE_statementListItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4325)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 324, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4323)
			p.Statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4324)
			p.Declaration()
		}

	}

	return localctx
}

// IStatementListItem_YieldContext is an interface to support dynamic dispatch.
type IStatementListItem_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListItem_YieldContext differentiates from other interfaces.
	IsStatementListItem_YieldContext()
}

type StatementListItem_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListItem_YieldContext() *StatementListItem_YieldContext {
	var p = new(StatementListItem_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Yield
	return p
}

func (*StatementListItem_YieldContext) IsStatementListItem_YieldContext() {}

func NewStatementListItem_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListItem_YieldContext {
	var p = new(StatementListItem_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Yield

	return p
}

func (s *StatementListItem_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListItem_YieldContext) Statement_Yield() IStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_YieldContext)
}

func (s *StatementListItem_YieldContext) Declaration_Yield() IDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaration_YieldContext)
}

func (s *StatementListItem_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListItem_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListItem_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementListItem_Yield(s)
	}
}

func (s *StatementListItem_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementListItem_Yield(s)
	}
}

func (s *StatementListItem_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementListItem_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementListItem_Yield() (localctx IStatementListItem_YieldContext) {
	localctx = NewStatementListItem_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 592, ECMAScriptParserRULE_statementListItem_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4329)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 325, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4327)
			p.Statement_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4328)
			p.Declaration_Yield()
		}

	}

	return localctx
}

// IStatementListItem_AwaitContext is an interface to support dynamic dispatch.
type IStatementListItem_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListItem_AwaitContext differentiates from other interfaces.
	IsStatementListItem_AwaitContext()
}

type StatementListItem_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListItem_AwaitContext() *StatementListItem_AwaitContext {
	var p = new(StatementListItem_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Await
	return p
}

func (*StatementListItem_AwaitContext) IsStatementListItem_AwaitContext() {}

func NewStatementListItem_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListItem_AwaitContext {
	var p = new(StatementListItem_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Await

	return p
}

func (s *StatementListItem_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListItem_AwaitContext) Statement_Await() IStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_AwaitContext)
}

func (s *StatementListItem_AwaitContext) Declaration_Await() IDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaration_AwaitContext)
}

func (s *StatementListItem_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListItem_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListItem_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementListItem_Await(s)
	}
}

func (s *StatementListItem_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementListItem_Await(s)
	}
}

func (s *StatementListItem_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementListItem_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementListItem_Await() (localctx IStatementListItem_AwaitContext) {
	localctx = NewStatementListItem_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 594, ECMAScriptParserRULE_statementListItem_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4333)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 326, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4331)
			p.Statement_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4332)
			p.Declaration_Await()
		}

	}

	return localctx
}

// IStatementListItem_Yield_AwaitContext is an interface to support dynamic dispatch.
type IStatementListItem_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListItem_Yield_AwaitContext differentiates from other interfaces.
	IsStatementListItem_Yield_AwaitContext()
}

type StatementListItem_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListItem_Yield_AwaitContext() *StatementListItem_Yield_AwaitContext {
	var p = new(StatementListItem_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Yield_Await
	return p
}

func (*StatementListItem_Yield_AwaitContext) IsStatementListItem_Yield_AwaitContext() {}

func NewStatementListItem_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListItem_Yield_AwaitContext {
	var p = new(StatementListItem_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Yield_Await

	return p
}

func (s *StatementListItem_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListItem_Yield_AwaitContext) Statement_Yield_Await() IStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_AwaitContext)
}

func (s *StatementListItem_Yield_AwaitContext) Declaration_Yield_Await() IDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaration_Yield_AwaitContext)
}

func (s *StatementListItem_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListItem_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListItem_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementListItem_Yield_Await(s)
	}
}

func (s *StatementListItem_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementListItem_Yield_Await(s)
	}
}

func (s *StatementListItem_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementListItem_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementListItem_Yield_Await() (localctx IStatementListItem_Yield_AwaitContext) {
	localctx = NewStatementListItem_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 596, ECMAScriptParserRULE_statementListItem_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4337)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 327, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4335)
			p.Statement_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4336)
			p.Declaration_Yield_Await()
		}

	}

	return localctx
}

// IStatementListItem_ReturnContext is an interface to support dynamic dispatch.
type IStatementListItem_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListItem_ReturnContext differentiates from other interfaces.
	IsStatementListItem_ReturnContext()
}

type StatementListItem_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListItem_ReturnContext() *StatementListItem_ReturnContext {
	var p = new(StatementListItem_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Return
	return p
}

func (*StatementListItem_ReturnContext) IsStatementListItem_ReturnContext() {}

func NewStatementListItem_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListItem_ReturnContext {
	var p = new(StatementListItem_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Return

	return p
}

func (s *StatementListItem_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListItem_ReturnContext) Statement_Return() IStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_ReturnContext)
}

func (s *StatementListItem_ReturnContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *StatementListItem_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListItem_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListItem_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementListItem_Return(s)
	}
}

func (s *StatementListItem_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementListItem_Return(s)
	}
}

func (s *StatementListItem_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementListItem_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementListItem_Return() (localctx IStatementListItem_ReturnContext) {
	localctx = NewStatementListItem_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 598, ECMAScriptParserRULE_statementListItem_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4341)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 328, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4339)
			p.Statement_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4340)
			p.Declaration()
		}

	}

	return localctx
}

// IStatementListItem_Yield_ReturnContext is an interface to support dynamic dispatch.
type IStatementListItem_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListItem_Yield_ReturnContext differentiates from other interfaces.
	IsStatementListItem_Yield_ReturnContext()
}

type StatementListItem_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListItem_Yield_ReturnContext() *StatementListItem_Yield_ReturnContext {
	var p = new(StatementListItem_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Yield_Return
	return p
}

func (*StatementListItem_Yield_ReturnContext) IsStatementListItem_Yield_ReturnContext() {}

func NewStatementListItem_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListItem_Yield_ReturnContext {
	var p = new(StatementListItem_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Yield_Return

	return p
}

func (s *StatementListItem_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListItem_Yield_ReturnContext) Statement_Yield_Return() IStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_ReturnContext)
}

func (s *StatementListItem_Yield_ReturnContext) Declaration_Yield() IDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaration_YieldContext)
}

func (s *StatementListItem_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListItem_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListItem_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementListItem_Yield_Return(s)
	}
}

func (s *StatementListItem_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementListItem_Yield_Return(s)
	}
}

func (s *StatementListItem_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementListItem_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementListItem_Yield_Return() (localctx IStatementListItem_Yield_ReturnContext) {
	localctx = NewStatementListItem_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 600, ECMAScriptParserRULE_statementListItem_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4345)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 329, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4343)
			p.Statement_Yield_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4344)
			p.Declaration_Yield()
		}

	}

	return localctx
}

// IStatementListItem_Await_ReturnContext is an interface to support dynamic dispatch.
type IStatementListItem_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListItem_Await_ReturnContext differentiates from other interfaces.
	IsStatementListItem_Await_ReturnContext()
}

type StatementListItem_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListItem_Await_ReturnContext() *StatementListItem_Await_ReturnContext {
	var p = new(StatementListItem_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Await_Return
	return p
}

func (*StatementListItem_Await_ReturnContext) IsStatementListItem_Await_ReturnContext() {}

func NewStatementListItem_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListItem_Await_ReturnContext {
	var p = new(StatementListItem_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Await_Return

	return p
}

func (s *StatementListItem_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListItem_Await_ReturnContext) Statement_Await_Return() IStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Await_ReturnContext)
}

func (s *StatementListItem_Await_ReturnContext) Declaration_Await() IDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaration_AwaitContext)
}

func (s *StatementListItem_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListItem_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListItem_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementListItem_Await_Return(s)
	}
}

func (s *StatementListItem_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementListItem_Await_Return(s)
	}
}

func (s *StatementListItem_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementListItem_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementListItem_Await_Return() (localctx IStatementListItem_Await_ReturnContext) {
	localctx = NewStatementListItem_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 602, ECMAScriptParserRULE_statementListItem_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4349)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 330, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4347)
			p.Statement_Await_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4348)
			p.Declaration_Await()
		}

	}

	return localctx
}

// IStatementListItem_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type IStatementListItem_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListItem_Yield_Await_ReturnContext differentiates from other interfaces.
	IsStatementListItem_Yield_Await_ReturnContext()
}

type StatementListItem_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListItem_Yield_Await_ReturnContext() *StatementListItem_Yield_Await_ReturnContext {
	var p = new(StatementListItem_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Yield_Await_Return
	return p
}

func (*StatementListItem_Yield_Await_ReturnContext) IsStatementListItem_Yield_Await_ReturnContext() {}

func NewStatementListItem_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListItem_Yield_Await_ReturnContext {
	var p = new(StatementListItem_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_statementListItem_Yield_Await_Return

	return p
}

func (s *StatementListItem_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListItem_Yield_Await_ReturnContext) Statement_Yield_Await_Return() IStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_Await_ReturnContext)
}

func (s *StatementListItem_Yield_Await_ReturnContext) Declaration_Yield_Await() IDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaration_Yield_AwaitContext)
}

func (s *StatementListItem_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListItem_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListItem_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterStatementListItem_Yield_Await_Return(s)
	}
}

func (s *StatementListItem_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitStatementListItem_Yield_Await_Return(s)
	}
}

func (s *StatementListItem_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitStatementListItem_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) StatementListItem_Yield_Await_Return() (localctx IStatementListItem_Yield_Await_ReturnContext) {
	localctx = NewStatementListItem_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 604, ECMAScriptParserRULE_statementListItem_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4353)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 331, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4351)
			p.Statement_Yield_Await_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4352)
			p.Declaration_Yield_Await()
		}

	}

	return localctx
}

// ILexicalDeclarationContext is an interface to support dynamic dispatch.
type ILexicalDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalDeclarationContext differentiates from other interfaces.
	IsLexicalDeclarationContext()
}

type LexicalDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalDeclarationContext() *LexicalDeclarationContext {
	var p = new(LexicalDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration
	return p
}

func (*LexicalDeclarationContext) IsLexicalDeclarationContext() {}

func NewLexicalDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalDeclarationContext {
	var p = new(LexicalDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration

	return p
}

func (s *LexicalDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalDeclarationContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *LexicalDeclarationContext) BindingList() IBindingListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingListContext)
}

func (s *LexicalDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalDeclaration(s)
	}
}

func (s *LexicalDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalDeclaration(s)
	}
}

func (s *LexicalDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalDeclaration() (localctx ILexicalDeclarationContext) {
	localctx = NewLexicalDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 606, ECMAScriptParserRULE_lexicalDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4355)
		p.LetOrConst()
	}
	{
		p.SetState(4356)
		p.bindingList(0)
	}
	{
		p.SetState(4357)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// ILexicalDeclaration_InContext is an interface to support dynamic dispatch.
type ILexicalDeclaration_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalDeclaration_InContext differentiates from other interfaces.
	IsLexicalDeclaration_InContext()
}

type LexicalDeclaration_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalDeclaration_InContext() *LexicalDeclaration_InContext {
	var p = new(LexicalDeclaration_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_In
	return p
}

func (*LexicalDeclaration_InContext) IsLexicalDeclaration_InContext() {}

func NewLexicalDeclaration_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalDeclaration_InContext {
	var p = new(LexicalDeclaration_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_In

	return p
}

func (s *LexicalDeclaration_InContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalDeclaration_InContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *LexicalDeclaration_InContext) BindingList_In() IBindingList_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_InContext)
}

func (s *LexicalDeclaration_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalDeclaration_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalDeclaration_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalDeclaration_In(s)
	}
}

func (s *LexicalDeclaration_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalDeclaration_In(s)
	}
}

func (s *LexicalDeclaration_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalDeclaration_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalDeclaration_In() (localctx ILexicalDeclaration_InContext) {
	localctx = NewLexicalDeclaration_InContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 608, ECMAScriptParserRULE_lexicalDeclaration_In)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4359)
		p.LetOrConst()
	}
	{
		p.SetState(4360)
		p.bindingList_In(0)
	}
	{
		p.SetState(4361)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// ILexicalDeclaration_YieldContext is an interface to support dynamic dispatch.
type ILexicalDeclaration_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalDeclaration_YieldContext differentiates from other interfaces.
	IsLexicalDeclaration_YieldContext()
}

type LexicalDeclaration_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalDeclaration_YieldContext() *LexicalDeclaration_YieldContext {
	var p = new(LexicalDeclaration_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_Yield
	return p
}

func (*LexicalDeclaration_YieldContext) IsLexicalDeclaration_YieldContext() {}

func NewLexicalDeclaration_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalDeclaration_YieldContext {
	var p = new(LexicalDeclaration_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_Yield

	return p
}

func (s *LexicalDeclaration_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalDeclaration_YieldContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *LexicalDeclaration_YieldContext) BindingList_Yield() IBindingList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_YieldContext)
}

func (s *LexicalDeclaration_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalDeclaration_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalDeclaration_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalDeclaration_Yield(s)
	}
}

func (s *LexicalDeclaration_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalDeclaration_Yield(s)
	}
}

func (s *LexicalDeclaration_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalDeclaration_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalDeclaration_Yield() (localctx ILexicalDeclaration_YieldContext) {
	localctx = NewLexicalDeclaration_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 610, ECMAScriptParserRULE_lexicalDeclaration_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4363)
		p.LetOrConst()
	}
	{
		p.SetState(4364)
		p.bindingList_Yield(0)
	}
	{
		p.SetState(4365)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// ILexicalDeclaration_In_YieldContext is an interface to support dynamic dispatch.
type ILexicalDeclaration_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalDeclaration_In_YieldContext differentiates from other interfaces.
	IsLexicalDeclaration_In_YieldContext()
}

type LexicalDeclaration_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalDeclaration_In_YieldContext() *LexicalDeclaration_In_YieldContext {
	var p = new(LexicalDeclaration_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_In_Yield
	return p
}

func (*LexicalDeclaration_In_YieldContext) IsLexicalDeclaration_In_YieldContext() {}

func NewLexicalDeclaration_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalDeclaration_In_YieldContext {
	var p = new(LexicalDeclaration_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_In_Yield

	return p
}

func (s *LexicalDeclaration_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalDeclaration_In_YieldContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *LexicalDeclaration_In_YieldContext) BindingList_In_Yield() IBindingList_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_In_YieldContext)
}

func (s *LexicalDeclaration_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalDeclaration_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalDeclaration_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalDeclaration_In_Yield(s)
	}
}

func (s *LexicalDeclaration_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalDeclaration_In_Yield(s)
	}
}

func (s *LexicalDeclaration_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalDeclaration_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalDeclaration_In_Yield() (localctx ILexicalDeclaration_In_YieldContext) {
	localctx = NewLexicalDeclaration_In_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 612, ECMAScriptParserRULE_lexicalDeclaration_In_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4367)
		p.LetOrConst()
	}
	{
		p.SetState(4368)
		p.bindingList_In_Yield(0)
	}
	{
		p.SetState(4369)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// ILexicalDeclaration_AwaitContext is an interface to support dynamic dispatch.
type ILexicalDeclaration_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalDeclaration_AwaitContext differentiates from other interfaces.
	IsLexicalDeclaration_AwaitContext()
}

type LexicalDeclaration_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalDeclaration_AwaitContext() *LexicalDeclaration_AwaitContext {
	var p = new(LexicalDeclaration_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_Await
	return p
}

func (*LexicalDeclaration_AwaitContext) IsLexicalDeclaration_AwaitContext() {}

func NewLexicalDeclaration_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalDeclaration_AwaitContext {
	var p = new(LexicalDeclaration_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_Await

	return p
}

func (s *LexicalDeclaration_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalDeclaration_AwaitContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *LexicalDeclaration_AwaitContext) BindingList_Await() IBindingList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_AwaitContext)
}

func (s *LexicalDeclaration_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalDeclaration_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalDeclaration_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalDeclaration_Await(s)
	}
}

func (s *LexicalDeclaration_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalDeclaration_Await(s)
	}
}

func (s *LexicalDeclaration_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalDeclaration_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalDeclaration_Await() (localctx ILexicalDeclaration_AwaitContext) {
	localctx = NewLexicalDeclaration_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 614, ECMAScriptParserRULE_lexicalDeclaration_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4371)
		p.LetOrConst()
	}
	{
		p.SetState(4372)
		p.bindingList_Await(0)
	}
	{
		p.SetState(4373)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// ILexicalDeclaration_In_AwaitContext is an interface to support dynamic dispatch.
type ILexicalDeclaration_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalDeclaration_In_AwaitContext differentiates from other interfaces.
	IsLexicalDeclaration_In_AwaitContext()
}

type LexicalDeclaration_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalDeclaration_In_AwaitContext() *LexicalDeclaration_In_AwaitContext {
	var p = new(LexicalDeclaration_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_In_Await
	return p
}

func (*LexicalDeclaration_In_AwaitContext) IsLexicalDeclaration_In_AwaitContext() {}

func NewLexicalDeclaration_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalDeclaration_In_AwaitContext {
	var p = new(LexicalDeclaration_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_In_Await

	return p
}

func (s *LexicalDeclaration_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalDeclaration_In_AwaitContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *LexicalDeclaration_In_AwaitContext) BindingList_In_Await() IBindingList_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_In_AwaitContext)
}

func (s *LexicalDeclaration_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalDeclaration_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalDeclaration_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalDeclaration_In_Await(s)
	}
}

func (s *LexicalDeclaration_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalDeclaration_In_Await(s)
	}
}

func (s *LexicalDeclaration_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalDeclaration_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalDeclaration_In_Await() (localctx ILexicalDeclaration_In_AwaitContext) {
	localctx = NewLexicalDeclaration_In_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 616, ECMAScriptParserRULE_lexicalDeclaration_In_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4375)
		p.LetOrConst()
	}
	{
		p.SetState(4376)
		p.bindingList_In_Await(0)
	}
	{
		p.SetState(4377)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// ILexicalDeclaration_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILexicalDeclaration_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalDeclaration_Yield_AwaitContext differentiates from other interfaces.
	IsLexicalDeclaration_Yield_AwaitContext()
}

type LexicalDeclaration_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalDeclaration_Yield_AwaitContext() *LexicalDeclaration_Yield_AwaitContext {
	var p = new(LexicalDeclaration_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_Yield_Await
	return p
}

func (*LexicalDeclaration_Yield_AwaitContext) IsLexicalDeclaration_Yield_AwaitContext() {}

func NewLexicalDeclaration_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalDeclaration_Yield_AwaitContext {
	var p = new(LexicalDeclaration_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_Yield_Await

	return p
}

func (s *LexicalDeclaration_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalDeclaration_Yield_AwaitContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *LexicalDeclaration_Yield_AwaitContext) BindingList_Yield_Await() IBindingList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_Yield_AwaitContext)
}

func (s *LexicalDeclaration_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalDeclaration_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalDeclaration_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalDeclaration_Yield_Await(s)
	}
}

func (s *LexicalDeclaration_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalDeclaration_Yield_Await(s)
	}
}

func (s *LexicalDeclaration_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalDeclaration_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalDeclaration_Yield_Await() (localctx ILexicalDeclaration_Yield_AwaitContext) {
	localctx = NewLexicalDeclaration_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 618, ECMAScriptParserRULE_lexicalDeclaration_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4379)
		p.LetOrConst()
	}
	{
		p.SetState(4380)
		p.bindingList_Yield_Await(0)
	}
	{
		p.SetState(4381)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// ILexicalDeclaration_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILexicalDeclaration_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalDeclaration_In_Yield_AwaitContext differentiates from other interfaces.
	IsLexicalDeclaration_In_Yield_AwaitContext()
}

type LexicalDeclaration_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalDeclaration_In_Yield_AwaitContext() *LexicalDeclaration_In_Yield_AwaitContext {
	var p = new(LexicalDeclaration_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_In_Yield_Await
	return p
}

func (*LexicalDeclaration_In_Yield_AwaitContext) IsLexicalDeclaration_In_Yield_AwaitContext() {}

func NewLexicalDeclaration_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalDeclaration_In_Yield_AwaitContext {
	var p = new(LexicalDeclaration_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalDeclaration_In_Yield_Await

	return p
}

func (s *LexicalDeclaration_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalDeclaration_In_Yield_AwaitContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *LexicalDeclaration_In_Yield_AwaitContext) BindingList_In_Yield_Await() IBindingList_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_In_Yield_AwaitContext)
}

func (s *LexicalDeclaration_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalDeclaration_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalDeclaration_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalDeclaration_In_Yield_Await(s)
	}
}

func (s *LexicalDeclaration_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalDeclaration_In_Yield_Await(s)
	}
}

func (s *LexicalDeclaration_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalDeclaration_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalDeclaration_In_Yield_Await() (localctx ILexicalDeclaration_In_Yield_AwaitContext) {
	localctx = NewLexicalDeclaration_In_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 620, ECMAScriptParserRULE_lexicalDeclaration_In_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4383)
		p.LetOrConst()
	}
	{
		p.SetState(4384)
		p.bindingList_In_Yield_Await(0)
	}
	{
		p.SetState(4385)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// ILetOrConstContext is an interface to support dynamic dispatch.
type ILetOrConstContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLetOrConstContext differentiates from other interfaces.
	IsLetOrConstContext()
}

type LetOrConstContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLetOrConstContext() *LetOrConstContext {
	var p = new(LetOrConstContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_letOrConst
	return p
}

func (*LetOrConstContext) IsLetOrConstContext() {}

func NewLetOrConstContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LetOrConstContext {
	var p = new(LetOrConstContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_letOrConst

	return p
}

func (s *LetOrConstContext) GetParser() antlr.Parser { return s.parser }
func (s *LetOrConstContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LetOrConstContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LetOrConstContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLetOrConst(s)
	}
}

func (s *LetOrConstContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLetOrConst(s)
	}
}

func (s *LetOrConstContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLetOrConst(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LetOrConst() (localctx ILetOrConstContext) {
	localctx = NewLetOrConstContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 622, ECMAScriptParserRULE_letOrConst)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4387)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ECMAScriptParserT__59 || _la == ECMAScriptParserT__60) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBindingListContext is an interface to support dynamic dispatch.
type IBindingListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingListContext differentiates from other interfaces.
	IsBindingListContext()
}

type BindingListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingListContext() *BindingListContext {
	var p = new(BindingListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingList
	return p
}

func (*BindingListContext) IsBindingListContext() {}

func NewBindingListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingListContext {
	var p = new(BindingListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingList

	return p
}

func (s *BindingListContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingListContext) LexicalBinding() ILexicalBindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalBindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalBindingContext)
}

func (s *BindingListContext) BindingList() IBindingListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingListContext)
}

func (s *BindingListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingList(s)
	}
}

func (s *BindingListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingList(s)
	}
}

func (s *BindingListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingList() (localctx IBindingListContext) {
	return p.bindingList(0)
}

func (p *ECMAScriptParser) bindingList(_p int) (localctx IBindingListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 624
	p.EnterRecursionRule(localctx, 624, ECMAScriptParserRULE_bindingList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4390)
		p.LexicalBinding()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4397)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 332, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingList)
			p.SetState(4392)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4393)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4394)
				p.LexicalBinding()
			}

		}
		p.SetState(4399)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 332, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingList_InContext is an interface to support dynamic dispatch.
type IBindingList_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingList_InContext differentiates from other interfaces.
	IsBindingList_InContext()
}

type BindingList_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingList_InContext() *BindingList_InContext {
	var p = new(BindingList_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingList_In
	return p
}

func (*BindingList_InContext) IsBindingList_InContext() {}

func NewBindingList_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingList_InContext {
	var p = new(BindingList_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingList_In

	return p
}

func (s *BindingList_InContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingList_InContext) LexicalBinding_In() ILexicalBinding_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalBinding_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalBinding_InContext)
}

func (s *BindingList_InContext) BindingList_In() IBindingList_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_InContext)
}

func (s *BindingList_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingList_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingList_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingList_In(s)
	}
}

func (s *BindingList_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingList_In(s)
	}
}

func (s *BindingList_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingList_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingList_In() (localctx IBindingList_InContext) {
	return p.bindingList_In(0)
}

func (p *ECMAScriptParser) bindingList_In(_p int) (localctx IBindingList_InContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingList_InContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingList_InContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 626
	p.EnterRecursionRule(localctx, 626, ECMAScriptParserRULE_bindingList_In, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4401)
		p.LexicalBinding_In()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4408)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 333, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingList_InContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingList_In)
			p.SetState(4403)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4404)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4405)
				p.LexicalBinding_In()
			}

		}
		p.SetState(4410)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 333, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingList_YieldContext is an interface to support dynamic dispatch.
type IBindingList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingList_YieldContext differentiates from other interfaces.
	IsBindingList_YieldContext()
}

type BindingList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingList_YieldContext() *BindingList_YieldContext {
	var p = new(BindingList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingList_Yield
	return p
}

func (*BindingList_YieldContext) IsBindingList_YieldContext() {}

func NewBindingList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingList_YieldContext {
	var p = new(BindingList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingList_Yield

	return p
}

func (s *BindingList_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingList_YieldContext) LexicalBinding_Yield() ILexicalBinding_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalBinding_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalBinding_YieldContext)
}

func (s *BindingList_YieldContext) BindingList_Yield() IBindingList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_YieldContext)
}

func (s *BindingList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingList_Yield(s)
	}
}

func (s *BindingList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingList_Yield(s)
	}
}

func (s *BindingList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingList_Yield() (localctx IBindingList_YieldContext) {
	return p.bindingList_Yield(0)
}

func (p *ECMAScriptParser) bindingList_Yield(_p int) (localctx IBindingList_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingList_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingList_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 628
	p.EnterRecursionRule(localctx, 628, ECMAScriptParserRULE_bindingList_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4412)
		p.LexicalBinding_Yield()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4419)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 334, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingList_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingList_Yield)
			p.SetState(4414)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4415)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4416)
				p.LexicalBinding_Yield()
			}

		}
		p.SetState(4421)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 334, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingList_In_YieldContext is an interface to support dynamic dispatch.
type IBindingList_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingList_In_YieldContext differentiates from other interfaces.
	IsBindingList_In_YieldContext()
}

type BindingList_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingList_In_YieldContext() *BindingList_In_YieldContext {
	var p = new(BindingList_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingList_In_Yield
	return p
}

func (*BindingList_In_YieldContext) IsBindingList_In_YieldContext() {}

func NewBindingList_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingList_In_YieldContext {
	var p = new(BindingList_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingList_In_Yield

	return p
}

func (s *BindingList_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingList_In_YieldContext) LexicalBinding_In_Yield() ILexicalBinding_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalBinding_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalBinding_In_YieldContext)
}

func (s *BindingList_In_YieldContext) BindingList_In_Yield() IBindingList_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_In_YieldContext)
}

func (s *BindingList_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingList_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingList_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingList_In_Yield(s)
	}
}

func (s *BindingList_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingList_In_Yield(s)
	}
}

func (s *BindingList_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingList_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingList_In_Yield() (localctx IBindingList_In_YieldContext) {
	return p.bindingList_In_Yield(0)
}

func (p *ECMAScriptParser) bindingList_In_Yield(_p int) (localctx IBindingList_In_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingList_In_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingList_In_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 630
	p.EnterRecursionRule(localctx, 630, ECMAScriptParserRULE_bindingList_In_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4423)
		p.LexicalBinding_In_Yield()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4430)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 335, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingList_In_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingList_In_Yield)
			p.SetState(4425)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4426)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4427)
				p.LexicalBinding_In_Yield()
			}

		}
		p.SetState(4432)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 335, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingList_AwaitContext is an interface to support dynamic dispatch.
type IBindingList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingList_AwaitContext differentiates from other interfaces.
	IsBindingList_AwaitContext()
}

type BindingList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingList_AwaitContext() *BindingList_AwaitContext {
	var p = new(BindingList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingList_Await
	return p
}

func (*BindingList_AwaitContext) IsBindingList_AwaitContext() {}

func NewBindingList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingList_AwaitContext {
	var p = new(BindingList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingList_Await

	return p
}

func (s *BindingList_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingList_AwaitContext) LexicalBinding_Await() ILexicalBinding_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalBinding_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalBinding_AwaitContext)
}

func (s *BindingList_AwaitContext) BindingList_Await() IBindingList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_AwaitContext)
}

func (s *BindingList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingList_Await(s)
	}
}

func (s *BindingList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingList_Await(s)
	}
}

func (s *BindingList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingList_Await() (localctx IBindingList_AwaitContext) {
	return p.bindingList_Await(0)
}

func (p *ECMAScriptParser) bindingList_Await(_p int) (localctx IBindingList_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingList_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingList_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 632
	p.EnterRecursionRule(localctx, 632, ECMAScriptParserRULE_bindingList_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4434)
		p.LexicalBinding_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4441)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 336, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingList_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingList_Await)
			p.SetState(4436)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4437)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4438)
				p.LexicalBinding_Await()
			}

		}
		p.SetState(4443)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 336, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingList_In_AwaitContext is an interface to support dynamic dispatch.
type IBindingList_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingList_In_AwaitContext differentiates from other interfaces.
	IsBindingList_In_AwaitContext()
}

type BindingList_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingList_In_AwaitContext() *BindingList_In_AwaitContext {
	var p = new(BindingList_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingList_In_Await
	return p
}

func (*BindingList_In_AwaitContext) IsBindingList_In_AwaitContext() {}

func NewBindingList_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingList_In_AwaitContext {
	var p = new(BindingList_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingList_In_Await

	return p
}

func (s *BindingList_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingList_In_AwaitContext) LexicalBinding_In_Await() ILexicalBinding_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalBinding_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalBinding_In_AwaitContext)
}

func (s *BindingList_In_AwaitContext) BindingList_In_Await() IBindingList_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_In_AwaitContext)
}

func (s *BindingList_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingList_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingList_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingList_In_Await(s)
	}
}

func (s *BindingList_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingList_In_Await(s)
	}
}

func (s *BindingList_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingList_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingList_In_Await() (localctx IBindingList_In_AwaitContext) {
	return p.bindingList_In_Await(0)
}

func (p *ECMAScriptParser) bindingList_In_Await(_p int) (localctx IBindingList_In_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingList_In_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingList_In_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 634
	p.EnterRecursionRule(localctx, 634, ECMAScriptParserRULE_bindingList_In_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4445)
		p.LexicalBinding_In_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4452)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 337, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingList_In_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingList_In_Await)
			p.SetState(4447)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4448)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4449)
				p.LexicalBinding_In_Await()
			}

		}
		p.SetState(4454)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 337, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingList_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBindingList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingList_Yield_AwaitContext differentiates from other interfaces.
	IsBindingList_Yield_AwaitContext()
}

type BindingList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingList_Yield_AwaitContext() *BindingList_Yield_AwaitContext {
	var p = new(BindingList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingList_Yield_Await
	return p
}

func (*BindingList_Yield_AwaitContext) IsBindingList_Yield_AwaitContext() {}

func NewBindingList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingList_Yield_AwaitContext {
	var p = new(BindingList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingList_Yield_Await

	return p
}

func (s *BindingList_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingList_Yield_AwaitContext) LexicalBinding_Yield_Await() ILexicalBinding_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalBinding_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalBinding_Yield_AwaitContext)
}

func (s *BindingList_Yield_AwaitContext) BindingList_Yield_Await() IBindingList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_Yield_AwaitContext)
}

func (s *BindingList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingList_Yield_Await(s)
	}
}

func (s *BindingList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingList_Yield_Await(s)
	}
}

func (s *BindingList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingList_Yield_Await() (localctx IBindingList_Yield_AwaitContext) {
	return p.bindingList_Yield_Await(0)
}

func (p *ECMAScriptParser) bindingList_Yield_Await(_p int) (localctx IBindingList_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingList_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingList_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 636
	p.EnterRecursionRule(localctx, 636, ECMAScriptParserRULE_bindingList_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4456)
		p.LexicalBinding_Yield_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4463)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 338, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingList_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingList_Yield_Await)
			p.SetState(4458)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4459)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4460)
				p.LexicalBinding_Yield_Await()
			}

		}
		p.SetState(4465)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 338, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingList_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBindingList_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingList_In_Yield_AwaitContext differentiates from other interfaces.
	IsBindingList_In_Yield_AwaitContext()
}

type BindingList_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingList_In_Yield_AwaitContext() *BindingList_In_Yield_AwaitContext {
	var p = new(BindingList_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingList_In_Yield_Await
	return p
}

func (*BindingList_In_Yield_AwaitContext) IsBindingList_In_Yield_AwaitContext() {}

func NewBindingList_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingList_In_Yield_AwaitContext {
	var p = new(BindingList_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingList_In_Yield_Await

	return p
}

func (s *BindingList_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingList_In_Yield_AwaitContext) LexicalBinding_In_Yield_Await() ILexicalBinding_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalBinding_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalBinding_In_Yield_AwaitContext)
}

func (s *BindingList_In_Yield_AwaitContext) BindingList_In_Yield_Await() IBindingList_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingList_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingList_In_Yield_AwaitContext)
}

func (s *BindingList_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingList_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingList_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingList_In_Yield_Await(s)
	}
}

func (s *BindingList_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingList_In_Yield_Await(s)
	}
}

func (s *BindingList_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingList_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingList_In_Yield_Await() (localctx IBindingList_In_Yield_AwaitContext) {
	return p.bindingList_In_Yield_Await(0)
}

func (p *ECMAScriptParser) bindingList_In_Yield_Await(_p int) (localctx IBindingList_In_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingList_In_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingList_In_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 638
	p.EnterRecursionRule(localctx, 638, ECMAScriptParserRULE_bindingList_In_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4467)
		p.LexicalBinding_In_Yield_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4474)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 339, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingList_In_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingList_In_Yield_Await)
			p.SetState(4469)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4470)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4471)
				p.LexicalBinding_In_Yield_Await()
			}

		}
		p.SetState(4476)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 339, p.GetParserRuleContext())
	}

	return localctx
}

// ILexicalBindingContext is an interface to support dynamic dispatch.
type ILexicalBindingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalBindingContext differentiates from other interfaces.
	IsLexicalBindingContext()
}

type LexicalBindingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalBindingContext() *LexicalBindingContext {
	var p = new(LexicalBindingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding
	return p
}

func (*LexicalBindingContext) IsLexicalBindingContext() {}

func NewLexicalBindingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalBindingContext {
	var p = new(LexicalBindingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding

	return p
}

func (s *LexicalBindingContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalBindingContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *LexicalBindingContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *LexicalBindingContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *LexicalBindingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalBindingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalBindingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalBinding(s)
	}
}

func (s *LexicalBindingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalBinding(s)
	}
}

func (s *LexicalBindingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalBinding(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalBinding() (localctx ILexicalBindingContext) {
	localctx = NewLexicalBindingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 640, ECMAScriptParserRULE_lexicalBinding)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4484)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4477)
			p.BindingIdentifier()
		}
		p.SetState(4479)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 340, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4478)
				p.Initializer()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4481)
			p.BindingPattern()
		}
		{
			p.SetState(4482)
			p.Initializer()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILexicalBinding_InContext is an interface to support dynamic dispatch.
type ILexicalBinding_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalBinding_InContext differentiates from other interfaces.
	IsLexicalBinding_InContext()
}

type LexicalBinding_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalBinding_InContext() *LexicalBinding_InContext {
	var p = new(LexicalBinding_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_In
	return p
}

func (*LexicalBinding_InContext) IsLexicalBinding_InContext() {}

func NewLexicalBinding_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalBinding_InContext {
	var p = new(LexicalBinding_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_In

	return p
}

func (s *LexicalBinding_InContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalBinding_InContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *LexicalBinding_InContext) Initializer_In() IInitializer_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_InContext)
}

func (s *LexicalBinding_InContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *LexicalBinding_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalBinding_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalBinding_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalBinding_In(s)
	}
}

func (s *LexicalBinding_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalBinding_In(s)
	}
}

func (s *LexicalBinding_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalBinding_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalBinding_In() (localctx ILexicalBinding_InContext) {
	localctx = NewLexicalBinding_InContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 642, ECMAScriptParserRULE_lexicalBinding_In)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4493)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4486)
			p.BindingIdentifier()
		}
		p.SetState(4488)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 342, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4487)
				p.Initializer_In()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4490)
			p.BindingPattern()
		}
		{
			p.SetState(4491)
			p.Initializer_In()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILexicalBinding_YieldContext is an interface to support dynamic dispatch.
type ILexicalBinding_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalBinding_YieldContext differentiates from other interfaces.
	IsLexicalBinding_YieldContext()
}

type LexicalBinding_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalBinding_YieldContext() *LexicalBinding_YieldContext {
	var p = new(LexicalBinding_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_Yield
	return p
}

func (*LexicalBinding_YieldContext) IsLexicalBinding_YieldContext() {}

func NewLexicalBinding_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalBinding_YieldContext {
	var p = new(LexicalBinding_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_Yield

	return p
}

func (s *LexicalBinding_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalBinding_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *LexicalBinding_YieldContext) Initializer_Yield() IInitializer_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_YieldContext)
}

func (s *LexicalBinding_YieldContext) BindingPattern_Yield() IBindingPattern_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_YieldContext)
}

func (s *LexicalBinding_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalBinding_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalBinding_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalBinding_Yield(s)
	}
}

func (s *LexicalBinding_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalBinding_Yield(s)
	}
}

func (s *LexicalBinding_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalBinding_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalBinding_Yield() (localctx ILexicalBinding_YieldContext) {
	localctx = NewLexicalBinding_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 644, ECMAScriptParserRULE_lexicalBinding_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4502)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4495)
			p.BindingIdentifier_Yield()
		}
		p.SetState(4497)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 344, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4496)
				p.Initializer_Yield()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4499)
			p.BindingPattern_Yield()
		}
		{
			p.SetState(4500)
			p.Initializer_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILexicalBinding_In_YieldContext is an interface to support dynamic dispatch.
type ILexicalBinding_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalBinding_In_YieldContext differentiates from other interfaces.
	IsLexicalBinding_In_YieldContext()
}

type LexicalBinding_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalBinding_In_YieldContext() *LexicalBinding_In_YieldContext {
	var p = new(LexicalBinding_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_In_Yield
	return p
}

func (*LexicalBinding_In_YieldContext) IsLexicalBinding_In_YieldContext() {}

func NewLexicalBinding_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalBinding_In_YieldContext {
	var p = new(LexicalBinding_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_In_Yield

	return p
}

func (s *LexicalBinding_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalBinding_In_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *LexicalBinding_In_YieldContext) Initializer_In_Yield() IInitializer_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_YieldContext)
}

func (s *LexicalBinding_In_YieldContext) BindingPattern_Yield() IBindingPattern_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_YieldContext)
}

func (s *LexicalBinding_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalBinding_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalBinding_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalBinding_In_Yield(s)
	}
}

func (s *LexicalBinding_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalBinding_In_Yield(s)
	}
}

func (s *LexicalBinding_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalBinding_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalBinding_In_Yield() (localctx ILexicalBinding_In_YieldContext) {
	localctx = NewLexicalBinding_In_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 646, ECMAScriptParserRULE_lexicalBinding_In_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4511)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4504)
			p.BindingIdentifier_Yield()
		}
		p.SetState(4506)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 346, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4505)
				p.Initializer_In_Yield()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4508)
			p.BindingPattern_Yield()
		}
		{
			p.SetState(4509)
			p.Initializer_In_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILexicalBinding_AwaitContext is an interface to support dynamic dispatch.
type ILexicalBinding_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalBinding_AwaitContext differentiates from other interfaces.
	IsLexicalBinding_AwaitContext()
}

type LexicalBinding_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalBinding_AwaitContext() *LexicalBinding_AwaitContext {
	var p = new(LexicalBinding_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_Await
	return p
}

func (*LexicalBinding_AwaitContext) IsLexicalBinding_AwaitContext() {}

func NewLexicalBinding_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalBinding_AwaitContext {
	var p = new(LexicalBinding_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_Await

	return p
}

func (s *LexicalBinding_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalBinding_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *LexicalBinding_AwaitContext) Initializer_Await() IInitializer_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_AwaitContext)
}

func (s *LexicalBinding_AwaitContext) BindingPattern_Await() IBindingPattern_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_AwaitContext)
}

func (s *LexicalBinding_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalBinding_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalBinding_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalBinding_Await(s)
	}
}

func (s *LexicalBinding_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalBinding_Await(s)
	}
}

func (s *LexicalBinding_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalBinding_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalBinding_Await() (localctx ILexicalBinding_AwaitContext) {
	localctx = NewLexicalBinding_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 648, ECMAScriptParserRULE_lexicalBinding_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4520)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4513)
			p.BindingIdentifier_Await()
		}
		p.SetState(4515)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 348, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4514)
				p.Initializer_Await()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4517)
			p.BindingPattern_Await()
		}
		{
			p.SetState(4518)
			p.Initializer_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILexicalBinding_In_AwaitContext is an interface to support dynamic dispatch.
type ILexicalBinding_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalBinding_In_AwaitContext differentiates from other interfaces.
	IsLexicalBinding_In_AwaitContext()
}

type LexicalBinding_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalBinding_In_AwaitContext() *LexicalBinding_In_AwaitContext {
	var p = new(LexicalBinding_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_In_Await
	return p
}

func (*LexicalBinding_In_AwaitContext) IsLexicalBinding_In_AwaitContext() {}

func NewLexicalBinding_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalBinding_In_AwaitContext {
	var p = new(LexicalBinding_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_In_Await

	return p
}

func (s *LexicalBinding_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalBinding_In_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *LexicalBinding_In_AwaitContext) Initializer_In_Await() IInitializer_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_AwaitContext)
}

func (s *LexicalBinding_In_AwaitContext) BindingPattern_Await() IBindingPattern_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_AwaitContext)
}

func (s *LexicalBinding_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalBinding_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalBinding_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalBinding_In_Await(s)
	}
}

func (s *LexicalBinding_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalBinding_In_Await(s)
	}
}

func (s *LexicalBinding_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalBinding_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalBinding_In_Await() (localctx ILexicalBinding_In_AwaitContext) {
	localctx = NewLexicalBinding_In_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 650, ECMAScriptParserRULE_lexicalBinding_In_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4529)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4522)
			p.BindingIdentifier_Await()
		}
		p.SetState(4524)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 350, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4523)
				p.Initializer_In_Await()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4526)
			p.BindingPattern_Await()
		}
		{
			p.SetState(4527)
			p.Initializer_In_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILexicalBinding_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILexicalBinding_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalBinding_Yield_AwaitContext differentiates from other interfaces.
	IsLexicalBinding_Yield_AwaitContext()
}

type LexicalBinding_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalBinding_Yield_AwaitContext() *LexicalBinding_Yield_AwaitContext {
	var p = new(LexicalBinding_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_Yield_Await
	return p
}

func (*LexicalBinding_Yield_AwaitContext) IsLexicalBinding_Yield_AwaitContext() {}

func NewLexicalBinding_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalBinding_Yield_AwaitContext {
	var p = new(LexicalBinding_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_Yield_Await

	return p
}

func (s *LexicalBinding_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalBinding_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *LexicalBinding_Yield_AwaitContext) Initializer_Yield_Await() IInitializer_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_Yield_AwaitContext)
}

func (s *LexicalBinding_Yield_AwaitContext) BindingPattern_Yield_Await() IBindingPattern_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_Yield_AwaitContext)
}

func (s *LexicalBinding_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalBinding_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalBinding_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalBinding_Yield_Await(s)
	}
}

func (s *LexicalBinding_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalBinding_Yield_Await(s)
	}
}

func (s *LexicalBinding_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalBinding_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalBinding_Yield_Await() (localctx ILexicalBinding_Yield_AwaitContext) {
	localctx = NewLexicalBinding_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 652, ECMAScriptParserRULE_lexicalBinding_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4538)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4531)
			p.BindingIdentifier_Yield_Await()
		}
		p.SetState(4533)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 352, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4532)
				p.Initializer_Yield_Await()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4535)
			p.BindingPattern_Yield_Await()
		}
		{
			p.SetState(4536)
			p.Initializer_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILexicalBinding_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILexicalBinding_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLexicalBinding_In_Yield_AwaitContext differentiates from other interfaces.
	IsLexicalBinding_In_Yield_AwaitContext()
}

type LexicalBinding_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLexicalBinding_In_Yield_AwaitContext() *LexicalBinding_In_Yield_AwaitContext {
	var p = new(LexicalBinding_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_In_Yield_Await
	return p
}

func (*LexicalBinding_In_Yield_AwaitContext) IsLexicalBinding_In_Yield_AwaitContext() {}

func NewLexicalBinding_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LexicalBinding_In_Yield_AwaitContext {
	var p = new(LexicalBinding_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_lexicalBinding_In_Yield_Await

	return p
}

func (s *LexicalBinding_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LexicalBinding_In_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *LexicalBinding_In_Yield_AwaitContext) Initializer_In_Yield_Await() IInitializer_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_Yield_AwaitContext)
}

func (s *LexicalBinding_In_Yield_AwaitContext) BindingPattern_Yield_Await() IBindingPattern_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_Yield_AwaitContext)
}

func (s *LexicalBinding_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LexicalBinding_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LexicalBinding_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLexicalBinding_In_Yield_Await(s)
	}
}

func (s *LexicalBinding_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLexicalBinding_In_Yield_Await(s)
	}
}

func (s *LexicalBinding_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLexicalBinding_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LexicalBinding_In_Yield_Await() (localctx ILexicalBinding_In_Yield_AwaitContext) {
	localctx = NewLexicalBinding_In_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 654, ECMAScriptParserRULE_lexicalBinding_In_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4547)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4540)
			p.BindingIdentifier_Yield_Await()
		}
		p.SetState(4542)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 354, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4541)
				p.Initializer_In_Yield_Await()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4544)
			p.BindingPattern_Yield_Await()
		}
		{
			p.SetState(4545)
			p.Initializer_In_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariableStatementContext is an interface to support dynamic dispatch.
type IVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableStatementContext differentiates from other interfaces.
	IsVariableStatementContext()
}

type VariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableStatementContext() *VariableStatementContext {
	var p = new(VariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableStatement
	return p
}

func (*VariableStatementContext) IsVariableStatementContext() {}

func NewVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableStatementContext {
	var p = new(VariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableStatement

	return p
}

func (s *VariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableStatementContext) VariableDeclarationList_In() IVariableDeclarationList_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_InContext)
}

func (s *VariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableStatement(s)
	}
}

func (s *VariableStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableStatement(s)
	}
}

func (s *VariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableStatement() (localctx IVariableStatementContext) {
	localctx = NewVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 656, ECMAScriptParserRULE_variableStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4549)
		p.Match(ECMAScriptParserT__61)
	}
	{
		p.SetState(4550)
		p.variableDeclarationList_In(0)
	}
	{
		p.SetState(4551)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IVariableStatement_YieldContext is an interface to support dynamic dispatch.
type IVariableStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableStatement_YieldContext differentiates from other interfaces.
	IsVariableStatement_YieldContext()
}

type VariableStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableStatement_YieldContext() *VariableStatement_YieldContext {
	var p = new(VariableStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableStatement_Yield
	return p
}

func (*VariableStatement_YieldContext) IsVariableStatement_YieldContext() {}

func NewVariableStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableStatement_YieldContext {
	var p = new(VariableStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableStatement_Yield

	return p
}

func (s *VariableStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableStatement_YieldContext) VariableDeclarationList_In_Yield() IVariableDeclarationList_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_In_YieldContext)
}

func (s *VariableStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableStatement_Yield(s)
	}
}

func (s *VariableStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableStatement_Yield(s)
	}
}

func (s *VariableStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableStatement_Yield() (localctx IVariableStatement_YieldContext) {
	localctx = NewVariableStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 658, ECMAScriptParserRULE_variableStatement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4553)
		p.Match(ECMAScriptParserT__61)
	}
	{
		p.SetState(4554)
		p.variableDeclarationList_In_Yield(0)
	}
	{
		p.SetState(4555)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IVariableStatement_AwaitContext is an interface to support dynamic dispatch.
type IVariableStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableStatement_AwaitContext differentiates from other interfaces.
	IsVariableStatement_AwaitContext()
}

type VariableStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableStatement_AwaitContext() *VariableStatement_AwaitContext {
	var p = new(VariableStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableStatement_Await
	return p
}

func (*VariableStatement_AwaitContext) IsVariableStatement_AwaitContext() {}

func NewVariableStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableStatement_AwaitContext {
	var p = new(VariableStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableStatement_Await

	return p
}

func (s *VariableStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableStatement_AwaitContext) VariableDeclarationList_In_Await() IVariableDeclarationList_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_In_AwaitContext)
}

func (s *VariableStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableStatement_Await(s)
	}
}

func (s *VariableStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableStatement_Await(s)
	}
}

func (s *VariableStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableStatement_Await() (localctx IVariableStatement_AwaitContext) {
	localctx = NewVariableStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 660, ECMAScriptParserRULE_variableStatement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4557)
		p.Match(ECMAScriptParserT__61)
	}
	{
		p.SetState(4558)
		p.variableDeclarationList_In_Await(0)
	}
	{
		p.SetState(4559)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IVariableStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IVariableStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableStatement_Yield_AwaitContext differentiates from other interfaces.
	IsVariableStatement_Yield_AwaitContext()
}

type VariableStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableStatement_Yield_AwaitContext() *VariableStatement_Yield_AwaitContext {
	var p = new(VariableStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableStatement_Yield_Await
	return p
}

func (*VariableStatement_Yield_AwaitContext) IsVariableStatement_Yield_AwaitContext() {}

func NewVariableStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableStatement_Yield_AwaitContext {
	var p = new(VariableStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableStatement_Yield_Await

	return p
}

func (s *VariableStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableStatement_Yield_AwaitContext) VariableDeclarationList_In_Yield_Await() IVariableDeclarationList_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_In_Yield_AwaitContext)
}

func (s *VariableStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableStatement_Yield_Await(s)
	}
}

func (s *VariableStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableStatement_Yield_Await(s)
	}
}

func (s *VariableStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableStatement_Yield_Await() (localctx IVariableStatement_Yield_AwaitContext) {
	localctx = NewVariableStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 662, ECMAScriptParserRULE_variableStatement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4561)
		p.Match(ECMAScriptParserT__61)
	}
	{
		p.SetState(4562)
		p.variableDeclarationList_In_Yield_Await(0)
	}
	{
		p.SetState(4563)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IVariableDeclarationListContext is an interface to support dynamic dispatch.
type IVariableDeclarationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationListContext differentiates from other interfaces.
	IsVariableDeclarationListContext()
}

type VariableDeclarationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationListContext() *VariableDeclarationListContext {
	var p = new(VariableDeclarationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList
	return p
}

func (*VariableDeclarationListContext) IsVariableDeclarationListContext() {}

func NewVariableDeclarationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationListContext {
	var p = new(VariableDeclarationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList

	return p
}

func (s *VariableDeclarationListContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationListContext) VariableDeclaration() IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *VariableDeclarationListContext) VariableDeclarationList() IVariableDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationListContext)
}

func (s *VariableDeclarationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclarationList(s)
	}
}

func (s *VariableDeclarationListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclarationList(s)
	}
}

func (s *VariableDeclarationListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclarationList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclarationList() (localctx IVariableDeclarationListContext) {
	return p.variableDeclarationList(0)
}

func (p *ECMAScriptParser) variableDeclarationList(_p int) (localctx IVariableDeclarationListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVariableDeclarationListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVariableDeclarationListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 664
	p.EnterRecursionRule(localctx, 664, ECMAScriptParserRULE_variableDeclarationList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4566)
		p.VariableDeclaration()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4573)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 356, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewVariableDeclarationListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_variableDeclarationList)
			p.SetState(4568)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4569)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4570)
				p.VariableDeclaration()
			}

		}
		p.SetState(4575)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 356, p.GetParserRuleContext())
	}

	return localctx
}

// IVariableDeclarationList_InContext is an interface to support dynamic dispatch.
type IVariableDeclarationList_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationList_InContext differentiates from other interfaces.
	IsVariableDeclarationList_InContext()
}

type VariableDeclarationList_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationList_InContext() *VariableDeclarationList_InContext {
	var p = new(VariableDeclarationList_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_In
	return p
}

func (*VariableDeclarationList_InContext) IsVariableDeclarationList_InContext() {}

func NewVariableDeclarationList_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationList_InContext {
	var p = new(VariableDeclarationList_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_In

	return p
}

func (s *VariableDeclarationList_InContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationList_InContext) VariableDeclaration_In() IVariableDeclaration_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclaration_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaration_InContext)
}

func (s *VariableDeclarationList_InContext) VariableDeclarationList_In() IVariableDeclarationList_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_InContext)
}

func (s *VariableDeclarationList_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationList_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationList_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclarationList_In(s)
	}
}

func (s *VariableDeclarationList_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclarationList_In(s)
	}
}

func (s *VariableDeclarationList_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclarationList_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_In() (localctx IVariableDeclarationList_InContext) {
	return p.variableDeclarationList_In(0)
}

func (p *ECMAScriptParser) variableDeclarationList_In(_p int) (localctx IVariableDeclarationList_InContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVariableDeclarationList_InContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVariableDeclarationList_InContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 666
	p.EnterRecursionRule(localctx, 666, ECMAScriptParserRULE_variableDeclarationList_In, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4577)
		p.VariableDeclaration_In()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4584)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 357, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewVariableDeclarationList_InContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_variableDeclarationList_In)
			p.SetState(4579)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4580)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4581)
				p.VariableDeclaration_In()
			}

		}
		p.SetState(4586)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 357, p.GetParserRuleContext())
	}

	return localctx
}

// IVariableDeclarationList_YieldContext is an interface to support dynamic dispatch.
type IVariableDeclarationList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationList_YieldContext differentiates from other interfaces.
	IsVariableDeclarationList_YieldContext()
}

type VariableDeclarationList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationList_YieldContext() *VariableDeclarationList_YieldContext {
	var p = new(VariableDeclarationList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_Yield
	return p
}

func (*VariableDeclarationList_YieldContext) IsVariableDeclarationList_YieldContext() {}

func NewVariableDeclarationList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationList_YieldContext {
	var p = new(VariableDeclarationList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_Yield

	return p
}

func (s *VariableDeclarationList_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationList_YieldContext) VariableDeclaration_Yield() IVariableDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaration_YieldContext)
}

func (s *VariableDeclarationList_YieldContext) VariableDeclarationList_Yield() IVariableDeclarationList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_YieldContext)
}

func (s *VariableDeclarationList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclarationList_Yield(s)
	}
}

func (s *VariableDeclarationList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclarationList_Yield(s)
	}
}

func (s *VariableDeclarationList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclarationList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_Yield() (localctx IVariableDeclarationList_YieldContext) {
	return p.variableDeclarationList_Yield(0)
}

func (p *ECMAScriptParser) variableDeclarationList_Yield(_p int) (localctx IVariableDeclarationList_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVariableDeclarationList_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVariableDeclarationList_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 668
	p.EnterRecursionRule(localctx, 668, ECMAScriptParserRULE_variableDeclarationList_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4588)
		p.VariableDeclaration_Yield()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4595)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 358, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewVariableDeclarationList_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_variableDeclarationList_Yield)
			p.SetState(4590)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4591)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4592)
				p.VariableDeclaration_Yield()
			}

		}
		p.SetState(4597)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 358, p.GetParserRuleContext())
	}

	return localctx
}

// IVariableDeclarationList_In_YieldContext is an interface to support dynamic dispatch.
type IVariableDeclarationList_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationList_In_YieldContext differentiates from other interfaces.
	IsVariableDeclarationList_In_YieldContext()
}

type VariableDeclarationList_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationList_In_YieldContext() *VariableDeclarationList_In_YieldContext {
	var p = new(VariableDeclarationList_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_In_Yield
	return p
}

func (*VariableDeclarationList_In_YieldContext) IsVariableDeclarationList_In_YieldContext() {}

func NewVariableDeclarationList_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationList_In_YieldContext {
	var p = new(VariableDeclarationList_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_In_Yield

	return p
}

func (s *VariableDeclarationList_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationList_In_YieldContext) VariableDeclaration_In_Yield() IVariableDeclaration_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclaration_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaration_In_YieldContext)
}

func (s *VariableDeclarationList_In_YieldContext) VariableDeclarationList_In_Yield() IVariableDeclarationList_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_In_YieldContext)
}

func (s *VariableDeclarationList_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationList_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationList_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclarationList_In_Yield(s)
	}
}

func (s *VariableDeclarationList_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclarationList_In_Yield(s)
	}
}

func (s *VariableDeclarationList_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclarationList_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_In_Yield() (localctx IVariableDeclarationList_In_YieldContext) {
	return p.variableDeclarationList_In_Yield(0)
}

func (p *ECMAScriptParser) variableDeclarationList_In_Yield(_p int) (localctx IVariableDeclarationList_In_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVariableDeclarationList_In_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVariableDeclarationList_In_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 670
	p.EnterRecursionRule(localctx, 670, ECMAScriptParserRULE_variableDeclarationList_In_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4599)
		p.VariableDeclaration_In_Yield()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4606)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 359, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewVariableDeclarationList_In_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_variableDeclarationList_In_Yield)
			p.SetState(4601)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4602)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4603)
				p.VariableDeclaration_In_Yield()
			}

		}
		p.SetState(4608)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 359, p.GetParserRuleContext())
	}

	return localctx
}

// IVariableDeclarationList_AwaitContext is an interface to support dynamic dispatch.
type IVariableDeclarationList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationList_AwaitContext differentiates from other interfaces.
	IsVariableDeclarationList_AwaitContext()
}

type VariableDeclarationList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationList_AwaitContext() *VariableDeclarationList_AwaitContext {
	var p = new(VariableDeclarationList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_Await
	return p
}

func (*VariableDeclarationList_AwaitContext) IsVariableDeclarationList_AwaitContext() {}

func NewVariableDeclarationList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationList_AwaitContext {
	var p = new(VariableDeclarationList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_Await

	return p
}

func (s *VariableDeclarationList_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationList_AwaitContext) VariableDeclaration_Await() IVariableDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaration_AwaitContext)
}

func (s *VariableDeclarationList_AwaitContext) VariableDeclarationList_Await() IVariableDeclarationList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_AwaitContext)
}

func (s *VariableDeclarationList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclarationList_Await(s)
	}
}

func (s *VariableDeclarationList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclarationList_Await(s)
	}
}

func (s *VariableDeclarationList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclarationList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_Await() (localctx IVariableDeclarationList_AwaitContext) {
	return p.variableDeclarationList_Await(0)
}

func (p *ECMAScriptParser) variableDeclarationList_Await(_p int) (localctx IVariableDeclarationList_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVariableDeclarationList_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVariableDeclarationList_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 672
	p.EnterRecursionRule(localctx, 672, ECMAScriptParserRULE_variableDeclarationList_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4610)
		p.VariableDeclaration_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4617)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 360, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewVariableDeclarationList_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_variableDeclarationList_Await)
			p.SetState(4612)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4613)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4614)
				p.VariableDeclaration_Await()
			}

		}
		p.SetState(4619)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 360, p.GetParserRuleContext())
	}

	return localctx
}

// IVariableDeclarationList_In_AwaitContext is an interface to support dynamic dispatch.
type IVariableDeclarationList_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationList_In_AwaitContext differentiates from other interfaces.
	IsVariableDeclarationList_In_AwaitContext()
}

type VariableDeclarationList_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationList_In_AwaitContext() *VariableDeclarationList_In_AwaitContext {
	var p = new(VariableDeclarationList_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_In_Await
	return p
}

func (*VariableDeclarationList_In_AwaitContext) IsVariableDeclarationList_In_AwaitContext() {}

func NewVariableDeclarationList_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationList_In_AwaitContext {
	var p = new(VariableDeclarationList_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_In_Await

	return p
}

func (s *VariableDeclarationList_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationList_In_AwaitContext) VariableDeclaration_In_Await() IVariableDeclaration_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclaration_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaration_In_AwaitContext)
}

func (s *VariableDeclarationList_In_AwaitContext) VariableDeclarationList_In_Await() IVariableDeclarationList_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_In_AwaitContext)
}

func (s *VariableDeclarationList_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationList_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationList_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclarationList_In_Await(s)
	}
}

func (s *VariableDeclarationList_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclarationList_In_Await(s)
	}
}

func (s *VariableDeclarationList_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclarationList_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_In_Await() (localctx IVariableDeclarationList_In_AwaitContext) {
	return p.variableDeclarationList_In_Await(0)
}

func (p *ECMAScriptParser) variableDeclarationList_In_Await(_p int) (localctx IVariableDeclarationList_In_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVariableDeclarationList_In_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVariableDeclarationList_In_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 674
	p.EnterRecursionRule(localctx, 674, ECMAScriptParserRULE_variableDeclarationList_In_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4621)
		p.VariableDeclaration_In_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4628)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 361, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewVariableDeclarationList_In_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_variableDeclarationList_In_Await)
			p.SetState(4623)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4624)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4625)
				p.VariableDeclaration_In_Await()
			}

		}
		p.SetState(4630)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 361, p.GetParserRuleContext())
	}

	return localctx
}

// IVariableDeclarationList_Yield_AwaitContext is an interface to support dynamic dispatch.
type IVariableDeclarationList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationList_Yield_AwaitContext differentiates from other interfaces.
	IsVariableDeclarationList_Yield_AwaitContext()
}

type VariableDeclarationList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationList_Yield_AwaitContext() *VariableDeclarationList_Yield_AwaitContext {
	var p = new(VariableDeclarationList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_Yield_Await
	return p
}

func (*VariableDeclarationList_Yield_AwaitContext) IsVariableDeclarationList_Yield_AwaitContext() {}

func NewVariableDeclarationList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationList_Yield_AwaitContext {
	var p = new(VariableDeclarationList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_Yield_Await

	return p
}

func (s *VariableDeclarationList_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationList_Yield_AwaitContext) VariableDeclaration_Yield_Await() IVariableDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaration_Yield_AwaitContext)
}

func (s *VariableDeclarationList_Yield_AwaitContext) VariableDeclarationList_Yield_Await() IVariableDeclarationList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_Yield_AwaitContext)
}

func (s *VariableDeclarationList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclarationList_Yield_Await(s)
	}
}

func (s *VariableDeclarationList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclarationList_Yield_Await(s)
	}
}

func (s *VariableDeclarationList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclarationList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_Yield_Await() (localctx IVariableDeclarationList_Yield_AwaitContext) {
	return p.variableDeclarationList_Yield_Await(0)
}

func (p *ECMAScriptParser) variableDeclarationList_Yield_Await(_p int) (localctx IVariableDeclarationList_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVariableDeclarationList_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVariableDeclarationList_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 676
	p.EnterRecursionRule(localctx, 676, ECMAScriptParserRULE_variableDeclarationList_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4632)
		p.VariableDeclaration_Yield_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4639)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 362, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewVariableDeclarationList_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_variableDeclarationList_Yield_Await)
			p.SetState(4634)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4635)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4636)
				p.VariableDeclaration_Yield_Await()
			}

		}
		p.SetState(4641)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 362, p.GetParserRuleContext())
	}

	return localctx
}

// IVariableDeclarationList_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IVariableDeclarationList_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationList_In_Yield_AwaitContext differentiates from other interfaces.
	IsVariableDeclarationList_In_Yield_AwaitContext()
}

type VariableDeclarationList_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationList_In_Yield_AwaitContext() *VariableDeclarationList_In_Yield_AwaitContext {
	var p = new(VariableDeclarationList_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_In_Yield_Await
	return p
}

func (*VariableDeclarationList_In_Yield_AwaitContext) IsVariableDeclarationList_In_Yield_AwaitContext() {
}

func NewVariableDeclarationList_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationList_In_Yield_AwaitContext {
	var p = new(VariableDeclarationList_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclarationList_In_Yield_Await

	return p
}

func (s *VariableDeclarationList_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationList_In_Yield_AwaitContext) VariableDeclaration_In_Yield_Await() IVariableDeclaration_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclaration_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaration_In_Yield_AwaitContext)
}

func (s *VariableDeclarationList_In_Yield_AwaitContext) VariableDeclarationList_In_Yield_Await() IVariableDeclarationList_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_In_Yield_AwaitContext)
}

func (s *VariableDeclarationList_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationList_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationList_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclarationList_In_Yield_Await(s)
	}
}

func (s *VariableDeclarationList_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclarationList_In_Yield_Await(s)
	}
}

func (s *VariableDeclarationList_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclarationList_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_In_Yield_Await() (localctx IVariableDeclarationList_In_Yield_AwaitContext) {
	return p.variableDeclarationList_In_Yield_Await(0)
}

func (p *ECMAScriptParser) variableDeclarationList_In_Yield_Await(_p int) (localctx IVariableDeclarationList_In_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVariableDeclarationList_In_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVariableDeclarationList_In_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 678
	p.EnterRecursionRule(localctx, 678, ECMAScriptParserRULE_variableDeclarationList_In_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4643)
		p.VariableDeclaration_In_Yield_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4650)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 363, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewVariableDeclarationList_In_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_variableDeclarationList_In_Yield_Await)
			p.SetState(4645)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4646)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4647)
				p.VariableDeclaration_In_Yield_Await()
			}

		}
		p.SetState(4652)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 363, p.GetParserRuleContext())
	}

	return localctx
}

// IVariableDeclarationContext is an interface to support dynamic dispatch.
type IVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationContext differentiates from other interfaces.
	IsVariableDeclarationContext()
}

type VariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationContext() *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration
	return p
}

func (*VariableDeclarationContext) IsVariableDeclarationContext() {}

func NewVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration

	return p
}

func (s *VariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *VariableDeclarationContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *VariableDeclarationContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *VariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclaration(s)
	}
}

func (s *VariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclaration(s)
	}
}

func (s *VariableDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclaration() (localctx IVariableDeclarationContext) {
	localctx = NewVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 680, ECMAScriptParserRULE_variableDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4660)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4653)
			p.BindingIdentifier()
		}
		p.SetState(4655)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 364, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4654)
				p.Initializer()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4657)
			p.BindingPattern()
		}
		{
			p.SetState(4658)
			p.Initializer()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariableDeclaration_InContext is an interface to support dynamic dispatch.
type IVariableDeclaration_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclaration_InContext differentiates from other interfaces.
	IsVariableDeclaration_InContext()
}

type VariableDeclaration_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaration_InContext() *VariableDeclaration_InContext {
	var p = new(VariableDeclaration_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_In
	return p
}

func (*VariableDeclaration_InContext) IsVariableDeclaration_InContext() {}

func NewVariableDeclaration_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaration_InContext {
	var p = new(VariableDeclaration_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_In

	return p
}

func (s *VariableDeclaration_InContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaration_InContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *VariableDeclaration_InContext) Initializer_In() IInitializer_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_InContext)
}

func (s *VariableDeclaration_InContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *VariableDeclaration_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaration_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaration_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclaration_In(s)
	}
}

func (s *VariableDeclaration_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclaration_In(s)
	}
}

func (s *VariableDeclaration_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclaration_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclaration_In() (localctx IVariableDeclaration_InContext) {
	localctx = NewVariableDeclaration_InContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 682, ECMAScriptParserRULE_variableDeclaration_In)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4669)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4662)
			p.BindingIdentifier()
		}
		p.SetState(4664)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 366, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4663)
				p.Initializer_In()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4666)
			p.BindingPattern()
		}
		{
			p.SetState(4667)
			p.Initializer_In()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariableDeclaration_YieldContext is an interface to support dynamic dispatch.
type IVariableDeclaration_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclaration_YieldContext differentiates from other interfaces.
	IsVariableDeclaration_YieldContext()
}

type VariableDeclaration_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaration_YieldContext() *VariableDeclaration_YieldContext {
	var p = new(VariableDeclaration_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_Yield
	return p
}

func (*VariableDeclaration_YieldContext) IsVariableDeclaration_YieldContext() {}

func NewVariableDeclaration_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaration_YieldContext {
	var p = new(VariableDeclaration_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_Yield

	return p
}

func (s *VariableDeclaration_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaration_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *VariableDeclaration_YieldContext) Initializer_Yield() IInitializer_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_YieldContext)
}

func (s *VariableDeclaration_YieldContext) BindingPattern_Yield() IBindingPattern_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_YieldContext)
}

func (s *VariableDeclaration_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaration_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaration_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclaration_Yield(s)
	}
}

func (s *VariableDeclaration_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclaration_Yield(s)
	}
}

func (s *VariableDeclaration_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclaration_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclaration_Yield() (localctx IVariableDeclaration_YieldContext) {
	localctx = NewVariableDeclaration_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 684, ECMAScriptParserRULE_variableDeclaration_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4678)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4671)
			p.BindingIdentifier_Yield()
		}
		p.SetState(4673)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 368, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4672)
				p.Initializer_Yield()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4675)
			p.BindingPattern_Yield()
		}
		{
			p.SetState(4676)
			p.Initializer_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariableDeclaration_In_YieldContext is an interface to support dynamic dispatch.
type IVariableDeclaration_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclaration_In_YieldContext differentiates from other interfaces.
	IsVariableDeclaration_In_YieldContext()
}

type VariableDeclaration_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaration_In_YieldContext() *VariableDeclaration_In_YieldContext {
	var p = new(VariableDeclaration_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_In_Yield
	return p
}

func (*VariableDeclaration_In_YieldContext) IsVariableDeclaration_In_YieldContext() {}

func NewVariableDeclaration_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaration_In_YieldContext {
	var p = new(VariableDeclaration_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_In_Yield

	return p
}

func (s *VariableDeclaration_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaration_In_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *VariableDeclaration_In_YieldContext) Initializer_In_Yield() IInitializer_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_YieldContext)
}

func (s *VariableDeclaration_In_YieldContext) BindingPattern_Yield() IBindingPattern_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_YieldContext)
}

func (s *VariableDeclaration_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaration_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaration_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclaration_In_Yield(s)
	}
}

func (s *VariableDeclaration_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclaration_In_Yield(s)
	}
}

func (s *VariableDeclaration_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclaration_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclaration_In_Yield() (localctx IVariableDeclaration_In_YieldContext) {
	localctx = NewVariableDeclaration_In_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 686, ECMAScriptParserRULE_variableDeclaration_In_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4687)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4680)
			p.BindingIdentifier_Yield()
		}
		p.SetState(4682)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 370, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4681)
				p.Initializer_In_Yield()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4684)
			p.BindingPattern_Yield()
		}
		{
			p.SetState(4685)
			p.Initializer_In_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariableDeclaration_AwaitContext is an interface to support dynamic dispatch.
type IVariableDeclaration_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclaration_AwaitContext differentiates from other interfaces.
	IsVariableDeclaration_AwaitContext()
}

type VariableDeclaration_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaration_AwaitContext() *VariableDeclaration_AwaitContext {
	var p = new(VariableDeclaration_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_Await
	return p
}

func (*VariableDeclaration_AwaitContext) IsVariableDeclaration_AwaitContext() {}

func NewVariableDeclaration_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaration_AwaitContext {
	var p = new(VariableDeclaration_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_Await

	return p
}

func (s *VariableDeclaration_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaration_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *VariableDeclaration_AwaitContext) Initializer_Await() IInitializer_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_AwaitContext)
}

func (s *VariableDeclaration_AwaitContext) BindingPattern_Await() IBindingPattern_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_AwaitContext)
}

func (s *VariableDeclaration_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaration_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaration_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclaration_Await(s)
	}
}

func (s *VariableDeclaration_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclaration_Await(s)
	}
}

func (s *VariableDeclaration_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclaration_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclaration_Await() (localctx IVariableDeclaration_AwaitContext) {
	localctx = NewVariableDeclaration_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 688, ECMAScriptParserRULE_variableDeclaration_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4696)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4689)
			p.BindingIdentifier_Await()
		}
		p.SetState(4691)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 372, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4690)
				p.Initializer_Await()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4693)
			p.BindingPattern_Await()
		}
		{
			p.SetState(4694)
			p.Initializer_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariableDeclaration_In_AwaitContext is an interface to support dynamic dispatch.
type IVariableDeclaration_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclaration_In_AwaitContext differentiates from other interfaces.
	IsVariableDeclaration_In_AwaitContext()
}

type VariableDeclaration_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaration_In_AwaitContext() *VariableDeclaration_In_AwaitContext {
	var p = new(VariableDeclaration_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_In_Await
	return p
}

func (*VariableDeclaration_In_AwaitContext) IsVariableDeclaration_In_AwaitContext() {}

func NewVariableDeclaration_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaration_In_AwaitContext {
	var p = new(VariableDeclaration_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_In_Await

	return p
}

func (s *VariableDeclaration_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaration_In_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *VariableDeclaration_In_AwaitContext) Initializer_In_Await() IInitializer_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_AwaitContext)
}

func (s *VariableDeclaration_In_AwaitContext) BindingPattern_Await() IBindingPattern_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_AwaitContext)
}

func (s *VariableDeclaration_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaration_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaration_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclaration_In_Await(s)
	}
}

func (s *VariableDeclaration_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclaration_In_Await(s)
	}
}

func (s *VariableDeclaration_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclaration_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclaration_In_Await() (localctx IVariableDeclaration_In_AwaitContext) {
	localctx = NewVariableDeclaration_In_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 690, ECMAScriptParserRULE_variableDeclaration_In_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4705)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4698)
			p.BindingIdentifier_Await()
		}
		p.SetState(4700)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 374, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4699)
				p.Initializer_In_Await()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4702)
			p.BindingPattern_Await()
		}
		{
			p.SetState(4703)
			p.Initializer_In_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariableDeclaration_Yield_AwaitContext is an interface to support dynamic dispatch.
type IVariableDeclaration_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclaration_Yield_AwaitContext differentiates from other interfaces.
	IsVariableDeclaration_Yield_AwaitContext()
}

type VariableDeclaration_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaration_Yield_AwaitContext() *VariableDeclaration_Yield_AwaitContext {
	var p = new(VariableDeclaration_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_Yield_Await
	return p
}

func (*VariableDeclaration_Yield_AwaitContext) IsVariableDeclaration_Yield_AwaitContext() {}

func NewVariableDeclaration_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaration_Yield_AwaitContext {
	var p = new(VariableDeclaration_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_Yield_Await

	return p
}

func (s *VariableDeclaration_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaration_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *VariableDeclaration_Yield_AwaitContext) Initializer_Yield_Await() IInitializer_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_Yield_AwaitContext)
}

func (s *VariableDeclaration_Yield_AwaitContext) BindingPattern_Yield_Await() IBindingPattern_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_Yield_AwaitContext)
}

func (s *VariableDeclaration_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaration_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaration_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclaration_Yield_Await(s)
	}
}

func (s *VariableDeclaration_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclaration_Yield_Await(s)
	}
}

func (s *VariableDeclaration_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclaration_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclaration_Yield_Await() (localctx IVariableDeclaration_Yield_AwaitContext) {
	localctx = NewVariableDeclaration_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 692, ECMAScriptParserRULE_variableDeclaration_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4714)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4707)
			p.BindingIdentifier_Yield_Await()
		}
		p.SetState(4709)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 376, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4708)
				p.Initializer_Yield_Await()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4711)
			p.BindingPattern_Yield_Await()
		}
		{
			p.SetState(4712)
			p.Initializer_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariableDeclaration_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IVariableDeclaration_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclaration_In_Yield_AwaitContext differentiates from other interfaces.
	IsVariableDeclaration_In_Yield_AwaitContext()
}

type VariableDeclaration_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaration_In_Yield_AwaitContext() *VariableDeclaration_In_Yield_AwaitContext {
	var p = new(VariableDeclaration_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_In_Yield_Await
	return p
}

func (*VariableDeclaration_In_Yield_AwaitContext) IsVariableDeclaration_In_Yield_AwaitContext() {}

func NewVariableDeclaration_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaration_In_Yield_AwaitContext {
	var p = new(VariableDeclaration_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_variableDeclaration_In_Yield_Await

	return p
}

func (s *VariableDeclaration_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaration_In_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *VariableDeclaration_In_Yield_AwaitContext) Initializer_In_Yield_Await() IInitializer_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_Yield_AwaitContext)
}

func (s *VariableDeclaration_In_Yield_AwaitContext) BindingPattern_Yield_Await() IBindingPattern_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_Yield_AwaitContext)
}

func (s *VariableDeclaration_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaration_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaration_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterVariableDeclaration_In_Yield_Await(s)
	}
}

func (s *VariableDeclaration_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitVariableDeclaration_In_Yield_Await(s)
	}
}

func (s *VariableDeclaration_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitVariableDeclaration_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) VariableDeclaration_In_Yield_Await() (localctx IVariableDeclaration_In_Yield_AwaitContext) {
	localctx = NewVariableDeclaration_In_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 694, ECMAScriptParserRULE_variableDeclaration_In_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4723)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4716)
			p.BindingIdentifier_Yield_Await()
		}
		p.SetState(4718)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 378, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4717)
				p.Initializer_In_Yield_Await()
			}

		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4720)
			p.BindingPattern_Yield_Await()
		}
		{
			p.SetState(4721)
			p.Initializer_In_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBindingPatternContext is an interface to support dynamic dispatch.
type IBindingPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingPatternContext differentiates from other interfaces.
	IsBindingPatternContext()
}

type BindingPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingPatternContext() *BindingPatternContext {
	var p = new(BindingPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingPattern
	return p
}

func (*BindingPatternContext) IsBindingPatternContext() {}

func NewBindingPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingPatternContext {
	var p = new(BindingPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingPattern

	return p
}

func (s *BindingPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingPatternContext) ObjectBindingPattern() IObjectBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectBindingPatternContext)
}

func (s *BindingPatternContext) ArrayBindingPattern() IArrayBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayBindingPatternContext)
}

func (s *BindingPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingPatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingPattern(s)
	}
}

func (s *BindingPatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingPattern(s)
	}
}

func (s *BindingPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingPattern() (localctx IBindingPatternContext) {
	localctx = NewBindingPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 696, ECMAScriptParserRULE_bindingPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4727)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4725)
			p.ObjectBindingPattern()
		}

	case ECMAScriptParserT__8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4726)
			p.ArrayBindingPattern()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBindingPattern_YieldContext is an interface to support dynamic dispatch.
type IBindingPattern_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingPattern_YieldContext differentiates from other interfaces.
	IsBindingPattern_YieldContext()
}

type BindingPattern_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingPattern_YieldContext() *BindingPattern_YieldContext {
	var p = new(BindingPattern_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingPattern_Yield
	return p
}

func (*BindingPattern_YieldContext) IsBindingPattern_YieldContext() {}

func NewBindingPattern_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingPattern_YieldContext {
	var p = new(BindingPattern_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingPattern_Yield

	return p
}

func (s *BindingPattern_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingPattern_YieldContext) ObjectBindingPattern_Yield() IObjectBindingPattern_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectBindingPattern_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectBindingPattern_YieldContext)
}

func (s *BindingPattern_YieldContext) ArrayBindingPattern_Yield() IArrayBindingPattern_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayBindingPattern_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayBindingPattern_YieldContext)
}

func (s *BindingPattern_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingPattern_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingPattern_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingPattern_Yield(s)
	}
}

func (s *BindingPattern_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingPattern_Yield(s)
	}
}

func (s *BindingPattern_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingPattern_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingPattern_Yield() (localctx IBindingPattern_YieldContext) {
	localctx = NewBindingPattern_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 698, ECMAScriptParserRULE_bindingPattern_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4731)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4729)
			p.ObjectBindingPattern_Yield()
		}

	case ECMAScriptParserT__8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4730)
			p.ArrayBindingPattern_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBindingPattern_AwaitContext is an interface to support dynamic dispatch.
type IBindingPattern_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingPattern_AwaitContext differentiates from other interfaces.
	IsBindingPattern_AwaitContext()
}

type BindingPattern_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingPattern_AwaitContext() *BindingPattern_AwaitContext {
	var p = new(BindingPattern_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingPattern_Await
	return p
}

func (*BindingPattern_AwaitContext) IsBindingPattern_AwaitContext() {}

func NewBindingPattern_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingPattern_AwaitContext {
	var p = new(BindingPattern_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingPattern_Await

	return p
}

func (s *BindingPattern_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingPattern_AwaitContext) ObjectBindingPattern_Await() IObjectBindingPattern_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectBindingPattern_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectBindingPattern_AwaitContext)
}

func (s *BindingPattern_AwaitContext) ArrayBindingPattern_Await() IArrayBindingPattern_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayBindingPattern_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayBindingPattern_AwaitContext)
}

func (s *BindingPattern_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingPattern_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingPattern_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingPattern_Await(s)
	}
}

func (s *BindingPattern_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingPattern_Await(s)
	}
}

func (s *BindingPattern_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingPattern_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingPattern_Await() (localctx IBindingPattern_AwaitContext) {
	localctx = NewBindingPattern_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 700, ECMAScriptParserRULE_bindingPattern_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4735)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4733)
			p.ObjectBindingPattern_Await()
		}

	case ECMAScriptParserT__8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4734)
			p.ArrayBindingPattern_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBindingPattern_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBindingPattern_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingPattern_Yield_AwaitContext differentiates from other interfaces.
	IsBindingPattern_Yield_AwaitContext()
}

type BindingPattern_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingPattern_Yield_AwaitContext() *BindingPattern_Yield_AwaitContext {
	var p = new(BindingPattern_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingPattern_Yield_Await
	return p
}

func (*BindingPattern_Yield_AwaitContext) IsBindingPattern_Yield_AwaitContext() {}

func NewBindingPattern_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingPattern_Yield_AwaitContext {
	var p = new(BindingPattern_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingPattern_Yield_Await

	return p
}

func (s *BindingPattern_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingPattern_Yield_AwaitContext) ObjectBindingPattern_Yield_Await() IObjectBindingPattern_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectBindingPattern_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectBindingPattern_Yield_AwaitContext)
}

func (s *BindingPattern_Yield_AwaitContext) ArrayBindingPattern_Yield_Await() IArrayBindingPattern_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayBindingPattern_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayBindingPattern_Yield_AwaitContext)
}

func (s *BindingPattern_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingPattern_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingPattern_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingPattern_Yield_Await(s)
	}
}

func (s *BindingPattern_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingPattern_Yield_Await(s)
	}
}

func (s *BindingPattern_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingPattern_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingPattern_Yield_Await() (localctx IBindingPattern_Yield_AwaitContext) {
	localctx = NewBindingPattern_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 702, ECMAScriptParserRULE_bindingPattern_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4739)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4737)
			p.ObjectBindingPattern_Yield_Await()
		}

	case ECMAScriptParserT__8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4738)
			p.ArrayBindingPattern_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IObjectBindingPatternContext is an interface to support dynamic dispatch.
type IObjectBindingPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectBindingPatternContext differentiates from other interfaces.
	IsObjectBindingPatternContext()
}

type ObjectBindingPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectBindingPatternContext() *ObjectBindingPatternContext {
	var p = new(ObjectBindingPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_objectBindingPattern
	return p
}

func (*ObjectBindingPatternContext) IsObjectBindingPatternContext() {}

func NewObjectBindingPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectBindingPatternContext {
	var p = new(ObjectBindingPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_objectBindingPattern

	return p
}

func (s *ObjectBindingPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectBindingPatternContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ObjectBindingPatternContext) BindingRestProperty() IBindingRestPropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestPropertyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestPropertyContext)
}

func (s *ObjectBindingPatternContext) BindingPropertyList() IBindingPropertyListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPropertyListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPropertyListContext)
}

func (s *ObjectBindingPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectBindingPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectBindingPatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterObjectBindingPattern(s)
	}
}

func (s *ObjectBindingPatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitObjectBindingPattern(s)
	}
}

func (s *ObjectBindingPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitObjectBindingPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ObjectBindingPattern() (localctx IObjectBindingPatternContext) {
	localctx = NewObjectBindingPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 704, ECMAScriptParserRULE_objectBindingPattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4759)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 385, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4741)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4742)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4743)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4744)
			p.BindingRestProperty()
		}
		{
			p.SetState(4745)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4747)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4748)
			p.bindingPropertyList(0)
		}
		{
			p.SetState(4749)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4751)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4752)
			p.bindingPropertyList(0)
		}
		{
			p.SetState(4753)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(4755)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4754)
				p.BindingRestProperty()
			}

		}
		{
			p.SetState(4757)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IObjectBindingPattern_YieldContext is an interface to support dynamic dispatch.
type IObjectBindingPattern_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectBindingPattern_YieldContext differentiates from other interfaces.
	IsObjectBindingPattern_YieldContext()
}

type ObjectBindingPattern_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectBindingPattern_YieldContext() *ObjectBindingPattern_YieldContext {
	var p = new(ObjectBindingPattern_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_objectBindingPattern_Yield
	return p
}

func (*ObjectBindingPattern_YieldContext) IsObjectBindingPattern_YieldContext() {}

func NewObjectBindingPattern_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectBindingPattern_YieldContext {
	var p = new(ObjectBindingPattern_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_objectBindingPattern_Yield

	return p
}

func (s *ObjectBindingPattern_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectBindingPattern_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ObjectBindingPattern_YieldContext) BindingRestProperty_Yield() IBindingRestProperty_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestProperty_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestProperty_YieldContext)
}

func (s *ObjectBindingPattern_YieldContext) BindingPropertyList_Yield() IBindingPropertyList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPropertyList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPropertyList_YieldContext)
}

func (s *ObjectBindingPattern_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectBindingPattern_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectBindingPattern_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterObjectBindingPattern_Yield(s)
	}
}

func (s *ObjectBindingPattern_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitObjectBindingPattern_Yield(s)
	}
}

func (s *ObjectBindingPattern_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitObjectBindingPattern_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ObjectBindingPattern_Yield() (localctx IObjectBindingPattern_YieldContext) {
	localctx = NewObjectBindingPattern_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 706, ECMAScriptParserRULE_objectBindingPattern_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4779)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 387, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4761)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4762)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4763)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4764)
			p.BindingRestProperty_Yield()
		}
		{
			p.SetState(4765)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4767)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4768)
			p.bindingPropertyList_Yield(0)
		}
		{
			p.SetState(4769)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4771)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4772)
			p.bindingPropertyList_Yield(0)
		}
		{
			p.SetState(4773)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(4775)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4774)
				p.BindingRestProperty_Yield()
			}

		}
		{
			p.SetState(4777)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IObjectBindingPattern_AwaitContext is an interface to support dynamic dispatch.
type IObjectBindingPattern_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectBindingPattern_AwaitContext differentiates from other interfaces.
	IsObjectBindingPattern_AwaitContext()
}

type ObjectBindingPattern_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectBindingPattern_AwaitContext() *ObjectBindingPattern_AwaitContext {
	var p = new(ObjectBindingPattern_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_objectBindingPattern_Await
	return p
}

func (*ObjectBindingPattern_AwaitContext) IsObjectBindingPattern_AwaitContext() {}

func NewObjectBindingPattern_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectBindingPattern_AwaitContext {
	var p = new(ObjectBindingPattern_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_objectBindingPattern_Await

	return p
}

func (s *ObjectBindingPattern_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectBindingPattern_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ObjectBindingPattern_AwaitContext) BindingRestProperty_Await() IBindingRestProperty_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestProperty_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestProperty_AwaitContext)
}

func (s *ObjectBindingPattern_AwaitContext) BindingPropertyList_Await() IBindingPropertyList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPropertyList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPropertyList_AwaitContext)
}

func (s *ObjectBindingPattern_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectBindingPattern_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectBindingPattern_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterObjectBindingPattern_Await(s)
	}
}

func (s *ObjectBindingPattern_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitObjectBindingPattern_Await(s)
	}
}

func (s *ObjectBindingPattern_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitObjectBindingPattern_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ObjectBindingPattern_Await() (localctx IObjectBindingPattern_AwaitContext) {
	localctx = NewObjectBindingPattern_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 708, ECMAScriptParserRULE_objectBindingPattern_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4799)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 389, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4781)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4782)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4783)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4784)
			p.BindingRestProperty_Await()
		}
		{
			p.SetState(4785)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4787)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4788)
			p.bindingPropertyList_Await(0)
		}
		{
			p.SetState(4789)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4791)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4792)
			p.bindingPropertyList_Await(0)
		}
		{
			p.SetState(4793)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(4795)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4794)
				p.BindingRestProperty_Await()
			}

		}
		{
			p.SetState(4797)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IObjectBindingPattern_Yield_AwaitContext is an interface to support dynamic dispatch.
type IObjectBindingPattern_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectBindingPattern_Yield_AwaitContext differentiates from other interfaces.
	IsObjectBindingPattern_Yield_AwaitContext()
}

type ObjectBindingPattern_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectBindingPattern_Yield_AwaitContext() *ObjectBindingPattern_Yield_AwaitContext {
	var p = new(ObjectBindingPattern_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_objectBindingPattern_Yield_Await
	return p
}

func (*ObjectBindingPattern_Yield_AwaitContext) IsObjectBindingPattern_Yield_AwaitContext() {}

func NewObjectBindingPattern_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectBindingPattern_Yield_AwaitContext {
	var p = new(ObjectBindingPattern_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_objectBindingPattern_Yield_Await

	return p
}

func (s *ObjectBindingPattern_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectBindingPattern_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ObjectBindingPattern_Yield_AwaitContext) BindingRestProperty_Yield_Await() IBindingRestProperty_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestProperty_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestProperty_Yield_AwaitContext)
}

func (s *ObjectBindingPattern_Yield_AwaitContext) BindingPropertyList_Yield_Await() IBindingPropertyList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPropertyList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPropertyList_Yield_AwaitContext)
}

func (s *ObjectBindingPattern_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectBindingPattern_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectBindingPattern_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterObjectBindingPattern_Yield_Await(s)
	}
}

func (s *ObjectBindingPattern_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitObjectBindingPattern_Yield_Await(s)
	}
}

func (s *ObjectBindingPattern_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitObjectBindingPattern_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ObjectBindingPattern_Yield_Await() (localctx IObjectBindingPattern_Yield_AwaitContext) {
	localctx = NewObjectBindingPattern_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 710, ECMAScriptParserRULE_objectBindingPattern_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4819)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 391, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4801)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4802)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4803)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4804)
			p.BindingRestProperty_Yield_Await()
		}
		{
			p.SetState(4805)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4807)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4808)
			p.bindingPropertyList_Yield_Await(0)
		}
		{
			p.SetState(4809)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4811)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(4812)
			p.bindingPropertyList_Yield_Await(0)
		}
		{
			p.SetState(4813)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(4815)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4814)
				p.BindingRestProperty_Yield_Await()
			}

		}
		{
			p.SetState(4817)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IArrayBindingPatternContext is an interface to support dynamic dispatch.
type IArrayBindingPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayBindingPatternContext differentiates from other interfaces.
	IsArrayBindingPatternContext()
}

type ArrayBindingPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayBindingPatternContext() *ArrayBindingPatternContext {
	var p = new(ArrayBindingPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrayBindingPattern
	return p
}

func (*ArrayBindingPatternContext) IsArrayBindingPatternContext() {}

func NewArrayBindingPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayBindingPatternContext {
	var p = new(ArrayBindingPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrayBindingPattern

	return p
}

func (s *ArrayBindingPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayBindingPatternContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ArrayBindingPatternContext) BindingRestElement() IBindingRestElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestElementContext)
}

func (s *ArrayBindingPatternContext) BindingElementList() IBindingElementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElementListContext)
}

func (s *ArrayBindingPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayBindingPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayBindingPatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrayBindingPattern(s)
	}
}

func (s *ArrayBindingPatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrayBindingPattern(s)
	}
}

func (s *ArrayBindingPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrayBindingPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrayBindingPattern() (localctx IArrayBindingPatternContext) {
	localctx = NewArrayBindingPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 712, ECMAScriptParserRULE_arrayBindingPattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4844)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4821)
			p.Match(ECMAScriptParserT__8)
		}
		p.SetState(4823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(4822)
				p.elision(0)
			}

		}
		p.SetState(4826)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4825)
				p.BindingRestElement()
			}

		}
		{
			p.SetState(4828)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4829)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(4830)
			p.bindingElementList(0)
		}
		{
			p.SetState(4831)
			p.Match(ECMAScriptParserT__9)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4833)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(4834)
			p.bindingElementList(0)
		}
		{
			p.SetState(4835)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(4837)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(4836)
				p.elision(0)
			}

		}
		p.SetState(4840)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4839)
				p.BindingRestElement()
			}

		}
		{
			p.SetState(4842)
			p.Match(ECMAScriptParserT__9)
		}

	}

	return localctx
}

// IArrayBindingPattern_YieldContext is an interface to support dynamic dispatch.
type IArrayBindingPattern_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayBindingPattern_YieldContext differentiates from other interfaces.
	IsArrayBindingPattern_YieldContext()
}

type ArrayBindingPattern_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayBindingPattern_YieldContext() *ArrayBindingPattern_YieldContext {
	var p = new(ArrayBindingPattern_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrayBindingPattern_Yield
	return p
}

func (*ArrayBindingPattern_YieldContext) IsArrayBindingPattern_YieldContext() {}

func NewArrayBindingPattern_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayBindingPattern_YieldContext {
	var p = new(ArrayBindingPattern_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrayBindingPattern_Yield

	return p
}

func (s *ArrayBindingPattern_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayBindingPattern_YieldContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ArrayBindingPattern_YieldContext) BindingRestElement_Yield() IBindingRestElement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestElement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestElement_YieldContext)
}

func (s *ArrayBindingPattern_YieldContext) BindingElementList_Yield() IBindingElementList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElementList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElementList_YieldContext)
}

func (s *ArrayBindingPattern_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayBindingPattern_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayBindingPattern_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrayBindingPattern_Yield(s)
	}
}

func (s *ArrayBindingPattern_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrayBindingPattern_Yield(s)
	}
}

func (s *ArrayBindingPattern_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrayBindingPattern_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrayBindingPattern_Yield() (localctx IArrayBindingPattern_YieldContext) {
	localctx = NewArrayBindingPattern_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 714, ECMAScriptParserRULE_arrayBindingPattern_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4869)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 401, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4846)
			p.Match(ECMAScriptParserT__8)
		}
		p.SetState(4848)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(4847)
				p.elision(0)
			}

		}
		p.SetState(4851)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4850)
				p.BindingRestElement_Yield()
			}

		}
		{
			p.SetState(4853)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4854)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(4855)
			p.bindingElementList_Yield(0)
		}
		{
			p.SetState(4856)
			p.Match(ECMAScriptParserT__9)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4858)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(4859)
			p.bindingElementList_Yield(0)
		}
		{
			p.SetState(4860)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(4862)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(4861)
				p.elision(0)
			}

		}
		p.SetState(4865)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4864)
				p.BindingRestElement_Yield()
			}

		}
		{
			p.SetState(4867)
			p.Match(ECMAScriptParserT__9)
		}

	}

	return localctx
}

// IArrayBindingPattern_AwaitContext is an interface to support dynamic dispatch.
type IArrayBindingPattern_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayBindingPattern_AwaitContext differentiates from other interfaces.
	IsArrayBindingPattern_AwaitContext()
}

type ArrayBindingPattern_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayBindingPattern_AwaitContext() *ArrayBindingPattern_AwaitContext {
	var p = new(ArrayBindingPattern_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrayBindingPattern_Await
	return p
}

func (*ArrayBindingPattern_AwaitContext) IsArrayBindingPattern_AwaitContext() {}

func NewArrayBindingPattern_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayBindingPattern_AwaitContext {
	var p = new(ArrayBindingPattern_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrayBindingPattern_Await

	return p
}

func (s *ArrayBindingPattern_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayBindingPattern_AwaitContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ArrayBindingPattern_AwaitContext) BindingRestElement_Await() IBindingRestElement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestElement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestElement_AwaitContext)
}

func (s *ArrayBindingPattern_AwaitContext) BindingElementList_Await() IBindingElementList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElementList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElementList_AwaitContext)
}

func (s *ArrayBindingPattern_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayBindingPattern_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayBindingPattern_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrayBindingPattern_Await(s)
	}
}

func (s *ArrayBindingPattern_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrayBindingPattern_Await(s)
	}
}

func (s *ArrayBindingPattern_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrayBindingPattern_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrayBindingPattern_Await() (localctx IArrayBindingPattern_AwaitContext) {
	localctx = NewArrayBindingPattern_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 716, ECMAScriptParserRULE_arrayBindingPattern_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4894)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 406, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4871)
			p.Match(ECMAScriptParserT__8)
		}
		p.SetState(4873)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(4872)
				p.elision(0)
			}

		}
		p.SetState(4876)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4875)
				p.BindingRestElement_Await()
			}

		}
		{
			p.SetState(4878)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4879)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(4880)
			p.bindingElementList_Await(0)
		}
		{
			p.SetState(4881)
			p.Match(ECMAScriptParserT__9)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4883)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(4884)
			p.bindingElementList_Await(0)
		}
		{
			p.SetState(4885)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(4887)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(4886)
				p.elision(0)
			}

		}
		p.SetState(4890)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4889)
				p.BindingRestElement_Await()
			}

		}
		{
			p.SetState(4892)
			p.Match(ECMAScriptParserT__9)
		}

	}

	return localctx
}

// IArrayBindingPattern_Yield_AwaitContext is an interface to support dynamic dispatch.
type IArrayBindingPattern_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayBindingPattern_Yield_AwaitContext differentiates from other interfaces.
	IsArrayBindingPattern_Yield_AwaitContext()
}

type ArrayBindingPattern_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayBindingPattern_Yield_AwaitContext() *ArrayBindingPattern_Yield_AwaitContext {
	var p = new(ArrayBindingPattern_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrayBindingPattern_Yield_Await
	return p
}

func (*ArrayBindingPattern_Yield_AwaitContext) IsArrayBindingPattern_Yield_AwaitContext() {}

func NewArrayBindingPattern_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayBindingPattern_Yield_AwaitContext {
	var p = new(ArrayBindingPattern_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrayBindingPattern_Yield_Await

	return p
}

func (s *ArrayBindingPattern_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayBindingPattern_Yield_AwaitContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *ArrayBindingPattern_Yield_AwaitContext) BindingRestElement_Yield_Await() IBindingRestElement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestElement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestElement_Yield_AwaitContext)
}

func (s *ArrayBindingPattern_Yield_AwaitContext) BindingElementList_Yield_Await() IBindingElementList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElementList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElementList_Yield_AwaitContext)
}

func (s *ArrayBindingPattern_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayBindingPattern_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayBindingPattern_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrayBindingPattern_Yield_Await(s)
	}
}

func (s *ArrayBindingPattern_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrayBindingPattern_Yield_Await(s)
	}
}

func (s *ArrayBindingPattern_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrayBindingPattern_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrayBindingPattern_Yield_Await() (localctx IArrayBindingPattern_Yield_AwaitContext) {
	localctx = NewArrayBindingPattern_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 718, ECMAScriptParserRULE_arrayBindingPattern_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4919)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 411, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4896)
			p.Match(ECMAScriptParserT__8)
		}
		p.SetState(4898)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(4897)
				p.elision(0)
			}

		}
		p.SetState(4901)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4900)
				p.BindingRestElement_Yield_Await()
			}

		}
		{
			p.SetState(4903)
			p.Match(ECMAScriptParserT__9)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4904)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(4905)
			p.bindingElementList_Yield_Await(0)
		}
		{
			p.SetState(4906)
			p.Match(ECMAScriptParserT__9)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4908)
			p.Match(ECMAScriptParserT__8)
		}
		{
			p.SetState(4909)
			p.bindingElementList_Yield_Await(0)
		}
		{
			p.SetState(4910)
			p.Match(ECMAScriptParserT__7)
		}
		p.SetState(4912)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(4911)
				p.elision(0)
			}

		}
		p.SetState(4915)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__6 {
			{
				p.SetState(4914)
				p.BindingRestElement_Yield_Await()
			}

		}
		{
			p.SetState(4917)
			p.Match(ECMAScriptParserT__9)
		}

	}

	return localctx
}

// IBindingRestPropertyContext is an interface to support dynamic dispatch.
type IBindingRestPropertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingRestPropertyContext differentiates from other interfaces.
	IsBindingRestPropertyContext()
}

type BindingRestPropertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingRestPropertyContext() *BindingRestPropertyContext {
	var p = new(BindingRestPropertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingRestProperty
	return p
}

func (*BindingRestPropertyContext) IsBindingRestPropertyContext() {}

func NewBindingRestPropertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingRestPropertyContext {
	var p = new(BindingRestPropertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingRestProperty

	return p
}

func (s *BindingRestPropertyContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingRestPropertyContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *BindingRestPropertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingRestPropertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingRestPropertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingRestProperty(s)
	}
}

func (s *BindingRestPropertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingRestProperty(s)
	}
}

func (s *BindingRestPropertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingRestProperty(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingRestProperty() (localctx IBindingRestPropertyContext) {
	localctx = NewBindingRestPropertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 720, ECMAScriptParserRULE_bindingRestProperty)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4921)
		p.Match(ECMAScriptParserT__6)
	}
	{
		p.SetState(4922)
		p.BindingIdentifier()
	}

	return localctx
}

// IBindingRestProperty_YieldContext is an interface to support dynamic dispatch.
type IBindingRestProperty_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingRestProperty_YieldContext differentiates from other interfaces.
	IsBindingRestProperty_YieldContext()
}

type BindingRestProperty_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingRestProperty_YieldContext() *BindingRestProperty_YieldContext {
	var p = new(BindingRestProperty_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingRestProperty_Yield
	return p
}

func (*BindingRestProperty_YieldContext) IsBindingRestProperty_YieldContext() {}

func NewBindingRestProperty_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingRestProperty_YieldContext {
	var p = new(BindingRestProperty_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingRestProperty_Yield

	return p
}

func (s *BindingRestProperty_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingRestProperty_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *BindingRestProperty_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingRestProperty_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingRestProperty_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingRestProperty_Yield(s)
	}
}

func (s *BindingRestProperty_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingRestProperty_Yield(s)
	}
}

func (s *BindingRestProperty_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingRestProperty_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingRestProperty_Yield() (localctx IBindingRestProperty_YieldContext) {
	localctx = NewBindingRestProperty_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 722, ECMAScriptParserRULE_bindingRestProperty_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4924)
		p.Match(ECMAScriptParserT__6)
	}
	{
		p.SetState(4925)
		p.BindingIdentifier_Yield()
	}

	return localctx
}

// IBindingRestProperty_AwaitContext is an interface to support dynamic dispatch.
type IBindingRestProperty_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingRestProperty_AwaitContext differentiates from other interfaces.
	IsBindingRestProperty_AwaitContext()
}

type BindingRestProperty_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingRestProperty_AwaitContext() *BindingRestProperty_AwaitContext {
	var p = new(BindingRestProperty_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingRestProperty_Await
	return p
}

func (*BindingRestProperty_AwaitContext) IsBindingRestProperty_AwaitContext() {}

func NewBindingRestProperty_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingRestProperty_AwaitContext {
	var p = new(BindingRestProperty_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingRestProperty_Await

	return p
}

func (s *BindingRestProperty_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingRestProperty_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *BindingRestProperty_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingRestProperty_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingRestProperty_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingRestProperty_Await(s)
	}
}

func (s *BindingRestProperty_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingRestProperty_Await(s)
	}
}

func (s *BindingRestProperty_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingRestProperty_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingRestProperty_Await() (localctx IBindingRestProperty_AwaitContext) {
	localctx = NewBindingRestProperty_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 724, ECMAScriptParserRULE_bindingRestProperty_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4927)
		p.Match(ECMAScriptParserT__6)
	}
	{
		p.SetState(4928)
		p.BindingIdentifier_Await()
	}

	return localctx
}

// IBindingRestProperty_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBindingRestProperty_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingRestProperty_Yield_AwaitContext differentiates from other interfaces.
	IsBindingRestProperty_Yield_AwaitContext()
}

type BindingRestProperty_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingRestProperty_Yield_AwaitContext() *BindingRestProperty_Yield_AwaitContext {
	var p = new(BindingRestProperty_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingRestProperty_Yield_Await
	return p
}

func (*BindingRestProperty_Yield_AwaitContext) IsBindingRestProperty_Yield_AwaitContext() {}

func NewBindingRestProperty_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingRestProperty_Yield_AwaitContext {
	var p = new(BindingRestProperty_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingRestProperty_Yield_Await

	return p
}

func (s *BindingRestProperty_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingRestProperty_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *BindingRestProperty_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingRestProperty_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingRestProperty_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingRestProperty_Yield_Await(s)
	}
}

func (s *BindingRestProperty_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingRestProperty_Yield_Await(s)
	}
}

func (s *BindingRestProperty_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingRestProperty_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingRestProperty_Yield_Await() (localctx IBindingRestProperty_Yield_AwaitContext) {
	localctx = NewBindingRestProperty_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 726, ECMAScriptParserRULE_bindingRestProperty_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4930)
		p.Match(ECMAScriptParserT__6)
	}
	{
		p.SetState(4931)
		p.BindingIdentifier_Yield_Await()
	}

	return localctx
}

// IBindingPropertyListContext is an interface to support dynamic dispatch.
type IBindingPropertyListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingPropertyListContext differentiates from other interfaces.
	IsBindingPropertyListContext()
}

type BindingPropertyListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingPropertyListContext() *BindingPropertyListContext {
	var p = new(BindingPropertyListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingPropertyList
	return p
}

func (*BindingPropertyListContext) IsBindingPropertyListContext() {}

func NewBindingPropertyListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingPropertyListContext {
	var p = new(BindingPropertyListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingPropertyList

	return p
}

func (s *BindingPropertyListContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingPropertyListContext) BindingProperty() IBindingPropertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPropertyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPropertyContext)
}

func (s *BindingPropertyListContext) BindingPropertyList() IBindingPropertyListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPropertyListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPropertyListContext)
}

func (s *BindingPropertyListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingPropertyListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingPropertyListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingPropertyList(s)
	}
}

func (s *BindingPropertyListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingPropertyList(s)
	}
}

func (s *BindingPropertyListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingPropertyList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingPropertyList() (localctx IBindingPropertyListContext) {
	return p.bindingPropertyList(0)
}

func (p *ECMAScriptParser) bindingPropertyList(_p int) (localctx IBindingPropertyListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingPropertyListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingPropertyListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 728
	p.EnterRecursionRule(localctx, 728, ECMAScriptParserRULE_bindingPropertyList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4934)
		p.BindingProperty()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4941)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 412, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingPropertyListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingPropertyList)
			p.SetState(4936)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4937)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4938)
				p.BindingProperty()
			}

		}
		p.SetState(4943)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 412, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingPropertyList_YieldContext is an interface to support dynamic dispatch.
type IBindingPropertyList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingPropertyList_YieldContext differentiates from other interfaces.
	IsBindingPropertyList_YieldContext()
}

type BindingPropertyList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingPropertyList_YieldContext() *BindingPropertyList_YieldContext {
	var p = new(BindingPropertyList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingPropertyList_Yield
	return p
}

func (*BindingPropertyList_YieldContext) IsBindingPropertyList_YieldContext() {}

func NewBindingPropertyList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingPropertyList_YieldContext {
	var p = new(BindingPropertyList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingPropertyList_Yield

	return p
}

func (s *BindingPropertyList_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingPropertyList_YieldContext) BindingProperty_Yield() IBindingProperty_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingProperty_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingProperty_YieldContext)
}

func (s *BindingPropertyList_YieldContext) BindingPropertyList_Yield() IBindingPropertyList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPropertyList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPropertyList_YieldContext)
}

func (s *BindingPropertyList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingPropertyList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingPropertyList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingPropertyList_Yield(s)
	}
}

func (s *BindingPropertyList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingPropertyList_Yield(s)
	}
}

func (s *BindingPropertyList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingPropertyList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingPropertyList_Yield() (localctx IBindingPropertyList_YieldContext) {
	return p.bindingPropertyList_Yield(0)
}

func (p *ECMAScriptParser) bindingPropertyList_Yield(_p int) (localctx IBindingPropertyList_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingPropertyList_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingPropertyList_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 730
	p.EnterRecursionRule(localctx, 730, ECMAScriptParserRULE_bindingPropertyList_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4945)
		p.BindingProperty_Yield()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4952)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 413, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingPropertyList_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingPropertyList_Yield)
			p.SetState(4947)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4948)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4949)
				p.BindingProperty_Yield()
			}

		}
		p.SetState(4954)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 413, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingPropertyList_AwaitContext is an interface to support dynamic dispatch.
type IBindingPropertyList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingPropertyList_AwaitContext differentiates from other interfaces.
	IsBindingPropertyList_AwaitContext()
}

type BindingPropertyList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingPropertyList_AwaitContext() *BindingPropertyList_AwaitContext {
	var p = new(BindingPropertyList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingPropertyList_Await
	return p
}

func (*BindingPropertyList_AwaitContext) IsBindingPropertyList_AwaitContext() {}

func NewBindingPropertyList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingPropertyList_AwaitContext {
	var p = new(BindingPropertyList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingPropertyList_Await

	return p
}

func (s *BindingPropertyList_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingPropertyList_AwaitContext) BindingProperty_Await() IBindingProperty_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingProperty_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingProperty_AwaitContext)
}

func (s *BindingPropertyList_AwaitContext) BindingPropertyList_Await() IBindingPropertyList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPropertyList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPropertyList_AwaitContext)
}

func (s *BindingPropertyList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingPropertyList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingPropertyList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingPropertyList_Await(s)
	}
}

func (s *BindingPropertyList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingPropertyList_Await(s)
	}
}

func (s *BindingPropertyList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingPropertyList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingPropertyList_Await() (localctx IBindingPropertyList_AwaitContext) {
	return p.bindingPropertyList_Await(0)
}

func (p *ECMAScriptParser) bindingPropertyList_Await(_p int) (localctx IBindingPropertyList_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingPropertyList_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingPropertyList_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 732
	p.EnterRecursionRule(localctx, 732, ECMAScriptParserRULE_bindingPropertyList_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4956)
		p.BindingProperty_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4963)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 414, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingPropertyList_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingPropertyList_Await)
			p.SetState(4958)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4959)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4960)
				p.BindingProperty_Await()
			}

		}
		p.SetState(4965)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 414, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingPropertyList_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBindingPropertyList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingPropertyList_Yield_AwaitContext differentiates from other interfaces.
	IsBindingPropertyList_Yield_AwaitContext()
}

type BindingPropertyList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingPropertyList_Yield_AwaitContext() *BindingPropertyList_Yield_AwaitContext {
	var p = new(BindingPropertyList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingPropertyList_Yield_Await
	return p
}

func (*BindingPropertyList_Yield_AwaitContext) IsBindingPropertyList_Yield_AwaitContext() {}

func NewBindingPropertyList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingPropertyList_Yield_AwaitContext {
	var p = new(BindingPropertyList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingPropertyList_Yield_Await

	return p
}

func (s *BindingPropertyList_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingPropertyList_Yield_AwaitContext) BindingProperty_Yield_Await() IBindingProperty_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingProperty_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingProperty_Yield_AwaitContext)
}

func (s *BindingPropertyList_Yield_AwaitContext) BindingPropertyList_Yield_Await() IBindingPropertyList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPropertyList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPropertyList_Yield_AwaitContext)
}

func (s *BindingPropertyList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingPropertyList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingPropertyList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingPropertyList_Yield_Await(s)
	}
}

func (s *BindingPropertyList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingPropertyList_Yield_Await(s)
	}
}

func (s *BindingPropertyList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingPropertyList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingPropertyList_Yield_Await() (localctx IBindingPropertyList_Yield_AwaitContext) {
	return p.bindingPropertyList_Yield_Await(0)
}

func (p *ECMAScriptParser) bindingPropertyList_Yield_Await(_p int) (localctx IBindingPropertyList_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingPropertyList_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingPropertyList_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 734
	p.EnterRecursionRule(localctx, 734, ECMAScriptParserRULE_bindingPropertyList_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4967)
		p.BindingProperty_Yield_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4974)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 415, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingPropertyList_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingPropertyList_Yield_Await)
			p.SetState(4969)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4970)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4971)
				p.BindingProperty_Yield_Await()
			}

		}
		p.SetState(4976)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 415, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingElementListContext is an interface to support dynamic dispatch.
type IBindingElementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElementListContext differentiates from other interfaces.
	IsBindingElementListContext()
}

type BindingElementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElementListContext() *BindingElementListContext {
	var p = new(BindingElementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElementList
	return p
}

func (*BindingElementListContext) IsBindingElementListContext() {}

func NewBindingElementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElementListContext {
	var p = new(BindingElementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElementList

	return p
}

func (s *BindingElementListContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElementListContext) BindingElisionElement() IBindingElisionElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElisionElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElisionElementContext)
}

func (s *BindingElementListContext) BindingElementList() IBindingElementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElementListContext)
}

func (s *BindingElementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElementListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElementList(s)
	}
}

func (s *BindingElementListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElementList(s)
	}
}

func (s *BindingElementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElementList() (localctx IBindingElementListContext) {
	return p.bindingElementList(0)
}

func (p *ECMAScriptParser) bindingElementList(_p int) (localctx IBindingElementListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingElementListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingElementListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 736
	p.EnterRecursionRule(localctx, 736, ECMAScriptParserRULE_bindingElementList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4978)
		p.BindingElisionElement()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4985)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 416, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingElementListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingElementList)
			p.SetState(4980)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4981)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4982)
				p.BindingElisionElement()
			}

		}
		p.SetState(4987)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 416, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingElementList_YieldContext is an interface to support dynamic dispatch.
type IBindingElementList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElementList_YieldContext differentiates from other interfaces.
	IsBindingElementList_YieldContext()
}

type BindingElementList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElementList_YieldContext() *BindingElementList_YieldContext {
	var p = new(BindingElementList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElementList_Yield
	return p
}

func (*BindingElementList_YieldContext) IsBindingElementList_YieldContext() {}

func NewBindingElementList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElementList_YieldContext {
	var p = new(BindingElementList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElementList_Yield

	return p
}

func (s *BindingElementList_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElementList_YieldContext) BindingElisionElement_Yield() IBindingElisionElement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElisionElement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElisionElement_YieldContext)
}

func (s *BindingElementList_YieldContext) BindingElementList_Yield() IBindingElementList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElementList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElementList_YieldContext)
}

func (s *BindingElementList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElementList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElementList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElementList_Yield(s)
	}
}

func (s *BindingElementList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElementList_Yield(s)
	}
}

func (s *BindingElementList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElementList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElementList_Yield() (localctx IBindingElementList_YieldContext) {
	return p.bindingElementList_Yield(0)
}

func (p *ECMAScriptParser) bindingElementList_Yield(_p int) (localctx IBindingElementList_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingElementList_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingElementList_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 738
	p.EnterRecursionRule(localctx, 738, ECMAScriptParserRULE_bindingElementList_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4989)
		p.BindingElisionElement_Yield()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4996)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 417, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingElementList_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingElementList_Yield)
			p.SetState(4991)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(4992)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(4993)
				p.BindingElisionElement_Yield()
			}

		}
		p.SetState(4998)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 417, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingElementList_AwaitContext is an interface to support dynamic dispatch.
type IBindingElementList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElementList_AwaitContext differentiates from other interfaces.
	IsBindingElementList_AwaitContext()
}

type BindingElementList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElementList_AwaitContext() *BindingElementList_AwaitContext {
	var p = new(BindingElementList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElementList_Await
	return p
}

func (*BindingElementList_AwaitContext) IsBindingElementList_AwaitContext() {}

func NewBindingElementList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElementList_AwaitContext {
	var p = new(BindingElementList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElementList_Await

	return p
}

func (s *BindingElementList_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElementList_AwaitContext) BindingElisionElement_Await() IBindingElisionElement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElisionElement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElisionElement_AwaitContext)
}

func (s *BindingElementList_AwaitContext) BindingElementList_Await() IBindingElementList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElementList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElementList_AwaitContext)
}

func (s *BindingElementList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElementList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElementList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElementList_Await(s)
	}
}

func (s *BindingElementList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElementList_Await(s)
	}
}

func (s *BindingElementList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElementList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElementList_Await() (localctx IBindingElementList_AwaitContext) {
	return p.bindingElementList_Await(0)
}

func (p *ECMAScriptParser) bindingElementList_Await(_p int) (localctx IBindingElementList_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingElementList_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingElementList_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 740
	p.EnterRecursionRule(localctx, 740, ECMAScriptParserRULE_bindingElementList_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5000)
		p.BindingElisionElement_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5007)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 418, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingElementList_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingElementList_Await)
			p.SetState(5002)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(5003)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(5004)
				p.BindingElisionElement_Await()
			}

		}
		p.SetState(5009)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 418, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingElementList_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBindingElementList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElementList_Yield_AwaitContext differentiates from other interfaces.
	IsBindingElementList_Yield_AwaitContext()
}

type BindingElementList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElementList_Yield_AwaitContext() *BindingElementList_Yield_AwaitContext {
	var p = new(BindingElementList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElementList_Yield_Await
	return p
}

func (*BindingElementList_Yield_AwaitContext) IsBindingElementList_Yield_AwaitContext() {}

func NewBindingElementList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElementList_Yield_AwaitContext {
	var p = new(BindingElementList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElementList_Yield_Await

	return p
}

func (s *BindingElementList_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElementList_Yield_AwaitContext) BindingElisionElement_Yield_Await() IBindingElisionElement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElisionElement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElisionElement_Yield_AwaitContext)
}

func (s *BindingElementList_Yield_AwaitContext) BindingElementList_Yield_Await() IBindingElementList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElementList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElementList_Yield_AwaitContext)
}

func (s *BindingElementList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElementList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElementList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElementList_Yield_Await(s)
	}
}

func (s *BindingElementList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElementList_Yield_Await(s)
	}
}

func (s *BindingElementList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElementList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElementList_Yield_Await() (localctx IBindingElementList_Yield_AwaitContext) {
	return p.bindingElementList_Yield_Await(0)
}

func (p *ECMAScriptParser) bindingElementList_Yield_Await(_p int) (localctx IBindingElementList_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBindingElementList_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBindingElementList_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 742
	p.EnterRecursionRule(localctx, 742, ECMAScriptParserRULE_bindingElementList_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5011)
		p.BindingElisionElement_Yield_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5018)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 419, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBindingElementList_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_bindingElementList_Yield_Await)
			p.SetState(5013)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(5014)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(5015)
				p.BindingElisionElement_Yield_Await()
			}

		}
		p.SetState(5020)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 419, p.GetParserRuleContext())
	}

	return localctx
}

// IBindingElisionElementContext is an interface to support dynamic dispatch.
type IBindingElisionElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElisionElementContext differentiates from other interfaces.
	IsBindingElisionElementContext()
}

type BindingElisionElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElisionElementContext() *BindingElisionElementContext {
	var p = new(BindingElisionElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElisionElement
	return p
}

func (*BindingElisionElementContext) IsBindingElisionElementContext() {}

func NewBindingElisionElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElisionElementContext {
	var p = new(BindingElisionElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElisionElement

	return p
}

func (s *BindingElisionElementContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElisionElementContext) BindingElement() IBindingElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElementContext)
}

func (s *BindingElisionElementContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *BindingElisionElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElisionElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElisionElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElisionElement(s)
	}
}

func (s *BindingElisionElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElisionElement(s)
	}
}

func (s *BindingElisionElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElisionElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElisionElement() (localctx IBindingElisionElementContext) {
	localctx = NewBindingElisionElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 744, ECMAScriptParserRULE_bindingElisionElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5022)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__7 {
		{
			p.SetState(5021)
			p.elision(0)
		}

	}
	{
		p.SetState(5024)
		p.BindingElement()
	}

	return localctx
}

// IBindingElisionElement_YieldContext is an interface to support dynamic dispatch.
type IBindingElisionElement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElisionElement_YieldContext differentiates from other interfaces.
	IsBindingElisionElement_YieldContext()
}

type BindingElisionElement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElisionElement_YieldContext() *BindingElisionElement_YieldContext {
	var p = new(BindingElisionElement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElisionElement_Yield
	return p
}

func (*BindingElisionElement_YieldContext) IsBindingElisionElement_YieldContext() {}

func NewBindingElisionElement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElisionElement_YieldContext {
	var p = new(BindingElisionElement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElisionElement_Yield

	return p
}

func (s *BindingElisionElement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElisionElement_YieldContext) BindingElement_Yield() IBindingElement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElement_YieldContext)
}

func (s *BindingElisionElement_YieldContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *BindingElisionElement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElisionElement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElisionElement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElisionElement_Yield(s)
	}
}

func (s *BindingElisionElement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElisionElement_Yield(s)
	}
}

func (s *BindingElisionElement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElisionElement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElisionElement_Yield() (localctx IBindingElisionElement_YieldContext) {
	localctx = NewBindingElisionElement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 746, ECMAScriptParserRULE_bindingElisionElement_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5027)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__7 {
		{
			p.SetState(5026)
			p.elision(0)
		}

	}
	{
		p.SetState(5029)
		p.BindingElement_Yield()
	}

	return localctx
}

// IBindingElisionElement_AwaitContext is an interface to support dynamic dispatch.
type IBindingElisionElement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElisionElement_AwaitContext differentiates from other interfaces.
	IsBindingElisionElement_AwaitContext()
}

type BindingElisionElement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElisionElement_AwaitContext() *BindingElisionElement_AwaitContext {
	var p = new(BindingElisionElement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElisionElement_Await
	return p
}

func (*BindingElisionElement_AwaitContext) IsBindingElisionElement_AwaitContext() {}

func NewBindingElisionElement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElisionElement_AwaitContext {
	var p = new(BindingElisionElement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElisionElement_Await

	return p
}

func (s *BindingElisionElement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElisionElement_AwaitContext) BindingElement_Await() IBindingElement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElement_AwaitContext)
}

func (s *BindingElisionElement_AwaitContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *BindingElisionElement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElisionElement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElisionElement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElisionElement_Await(s)
	}
}

func (s *BindingElisionElement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElisionElement_Await(s)
	}
}

func (s *BindingElisionElement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElisionElement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElisionElement_Await() (localctx IBindingElisionElement_AwaitContext) {
	localctx = NewBindingElisionElement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 748, ECMAScriptParserRULE_bindingElisionElement_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5032)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__7 {
		{
			p.SetState(5031)
			p.elision(0)
		}

	}
	{
		p.SetState(5034)
		p.BindingElement_Await()
	}

	return localctx
}

// IBindingElisionElement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBindingElisionElement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElisionElement_Yield_AwaitContext differentiates from other interfaces.
	IsBindingElisionElement_Yield_AwaitContext()
}

type BindingElisionElement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElisionElement_Yield_AwaitContext() *BindingElisionElement_Yield_AwaitContext {
	var p = new(BindingElisionElement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElisionElement_Yield_Await
	return p
}

func (*BindingElisionElement_Yield_AwaitContext) IsBindingElisionElement_Yield_AwaitContext() {}

func NewBindingElisionElement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElisionElement_Yield_AwaitContext {
	var p = new(BindingElisionElement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElisionElement_Yield_Await

	return p
}

func (s *BindingElisionElement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElisionElement_Yield_AwaitContext) BindingElement_Yield_Await() IBindingElement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElement_Yield_AwaitContext)
}

func (s *BindingElisionElement_Yield_AwaitContext) Elision() IElisionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElisionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElisionContext)
}

func (s *BindingElisionElement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElisionElement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElisionElement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElisionElement_Yield_Await(s)
	}
}

func (s *BindingElisionElement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElisionElement_Yield_Await(s)
	}
}

func (s *BindingElisionElement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElisionElement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElisionElement_Yield_Await() (localctx IBindingElisionElement_Yield_AwaitContext) {
	localctx = NewBindingElisionElement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 750, ECMAScriptParserRULE_bindingElisionElement_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5037)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__7 {
		{
			p.SetState(5036)
			p.elision(0)
		}

	}
	{
		p.SetState(5039)
		p.BindingElement_Yield_Await()
	}

	return localctx
}

// IBindingPropertyContext is an interface to support dynamic dispatch.
type IBindingPropertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingPropertyContext differentiates from other interfaces.
	IsBindingPropertyContext()
}

type BindingPropertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingPropertyContext() *BindingPropertyContext {
	var p = new(BindingPropertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingProperty
	return p
}

func (*BindingPropertyContext) IsBindingPropertyContext() {}

func NewBindingPropertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingPropertyContext {
	var p = new(BindingPropertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingProperty

	return p
}

func (s *BindingPropertyContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingPropertyContext) SingleNameBinding() ISingleNameBindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleNameBindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleNameBindingContext)
}

func (s *BindingPropertyContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *BindingPropertyContext) BindingElement() IBindingElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElementContext)
}

func (s *BindingPropertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingPropertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingPropertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingProperty(s)
	}
}

func (s *BindingPropertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingProperty(s)
	}
}

func (s *BindingPropertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingProperty(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingProperty() (localctx IBindingPropertyContext) {
	localctx = NewBindingPropertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 752, ECMAScriptParserRULE_bindingProperty)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5046)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5041)
			p.SingleNameBinding()
		}

	case ECMAScriptParserT__8, ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5042)
			p.PropertyName()
		}
		{
			p.SetState(5043)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(5044)
			p.BindingElement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBindingProperty_YieldContext is an interface to support dynamic dispatch.
type IBindingProperty_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingProperty_YieldContext differentiates from other interfaces.
	IsBindingProperty_YieldContext()
}

type BindingProperty_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingProperty_YieldContext() *BindingProperty_YieldContext {
	var p = new(BindingProperty_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingProperty_Yield
	return p
}

func (*BindingProperty_YieldContext) IsBindingProperty_YieldContext() {}

func NewBindingProperty_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingProperty_YieldContext {
	var p = new(BindingProperty_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingProperty_Yield

	return p
}

func (s *BindingProperty_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingProperty_YieldContext) SingleNameBinding_Yield() ISingleNameBinding_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleNameBinding_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleNameBinding_YieldContext)
}

func (s *BindingProperty_YieldContext) PropertyName_Yield() IPropertyName_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_YieldContext)
}

func (s *BindingProperty_YieldContext) BindingElement_Yield() IBindingElement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElement_YieldContext)
}

func (s *BindingProperty_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingProperty_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingProperty_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingProperty_Yield(s)
	}
}

func (s *BindingProperty_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingProperty_Yield(s)
	}
}

func (s *BindingProperty_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingProperty_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingProperty_Yield() (localctx IBindingProperty_YieldContext) {
	localctx = NewBindingProperty_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 754, ECMAScriptParserRULE_bindingProperty_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5053)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5048)
			p.SingleNameBinding_Yield()
		}

	case ECMAScriptParserT__8, ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5049)
			p.PropertyName_Yield()
		}
		{
			p.SetState(5050)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(5051)
			p.BindingElement_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBindingProperty_AwaitContext is an interface to support dynamic dispatch.
type IBindingProperty_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingProperty_AwaitContext differentiates from other interfaces.
	IsBindingProperty_AwaitContext()
}

type BindingProperty_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingProperty_AwaitContext() *BindingProperty_AwaitContext {
	var p = new(BindingProperty_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingProperty_Await
	return p
}

func (*BindingProperty_AwaitContext) IsBindingProperty_AwaitContext() {}

func NewBindingProperty_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingProperty_AwaitContext {
	var p = new(BindingProperty_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingProperty_Await

	return p
}

func (s *BindingProperty_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingProperty_AwaitContext) SingleNameBinding_Await() ISingleNameBinding_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleNameBinding_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleNameBinding_AwaitContext)
}

func (s *BindingProperty_AwaitContext) PropertyName_Await() IPropertyName_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_AwaitContext)
}

func (s *BindingProperty_AwaitContext) BindingElement_Await() IBindingElement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElement_AwaitContext)
}

func (s *BindingProperty_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingProperty_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingProperty_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingProperty_Await(s)
	}
}

func (s *BindingProperty_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingProperty_Await(s)
	}
}

func (s *BindingProperty_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingProperty_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingProperty_Await() (localctx IBindingProperty_AwaitContext) {
	localctx = NewBindingProperty_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 756, ECMAScriptParserRULE_bindingProperty_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5060)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5055)
			p.SingleNameBinding_Await()
		}

	case ECMAScriptParserT__8, ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5056)
			p.PropertyName_Await()
		}
		{
			p.SetState(5057)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(5058)
			p.BindingElement_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBindingProperty_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBindingProperty_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingProperty_Yield_AwaitContext differentiates from other interfaces.
	IsBindingProperty_Yield_AwaitContext()
}

type BindingProperty_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingProperty_Yield_AwaitContext() *BindingProperty_Yield_AwaitContext {
	var p = new(BindingProperty_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingProperty_Yield_Await
	return p
}

func (*BindingProperty_Yield_AwaitContext) IsBindingProperty_Yield_AwaitContext() {}

func NewBindingProperty_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingProperty_Yield_AwaitContext {
	var p = new(BindingProperty_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingProperty_Yield_Await

	return p
}

func (s *BindingProperty_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingProperty_Yield_AwaitContext) SingleNameBinding_Yield_Await() ISingleNameBinding_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleNameBinding_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleNameBinding_Yield_AwaitContext)
}

func (s *BindingProperty_Yield_AwaitContext) PropertyName_Yield_Await() IPropertyName_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_Yield_AwaitContext)
}

func (s *BindingProperty_Yield_AwaitContext) BindingElement_Yield_Await() IBindingElement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElement_Yield_AwaitContext)
}

func (s *BindingProperty_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingProperty_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingProperty_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingProperty_Yield_Await(s)
	}
}

func (s *BindingProperty_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingProperty_Yield_Await(s)
	}
}

func (s *BindingProperty_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingProperty_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingProperty_Yield_Await() (localctx IBindingProperty_Yield_AwaitContext) {
	localctx = NewBindingProperty_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 758, ECMAScriptParserRULE_bindingProperty_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5067)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5062)
			p.SingleNameBinding_Yield_Await()
		}

	case ECMAScriptParserT__8, ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5063)
			p.PropertyName_Yield_Await()
		}
		{
			p.SetState(5064)
			p.Match(ECMAScriptParserT__11)
		}
		{
			p.SetState(5065)
			p.BindingElement_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBindingElementContext is an interface to support dynamic dispatch.
type IBindingElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElementContext differentiates from other interfaces.
	IsBindingElementContext()
}

type BindingElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElementContext() *BindingElementContext {
	var p = new(BindingElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElement
	return p
}

func (*BindingElementContext) IsBindingElementContext() {}

func NewBindingElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElementContext {
	var p = new(BindingElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElement

	return p
}

func (s *BindingElementContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElementContext) SingleNameBinding() ISingleNameBindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleNameBindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleNameBindingContext)
}

func (s *BindingElementContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *BindingElementContext) Initializer_In() IInitializer_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_InContext)
}

func (s *BindingElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElement(s)
	}
}

func (s *BindingElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElement(s)
	}
}

func (s *BindingElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElement() (localctx IBindingElementContext) {
	localctx = NewBindingElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 760, ECMAScriptParserRULE_bindingElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5074)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5069)
			p.SingleNameBinding()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5070)
			p.BindingPattern()
		}
		p.SetState(5072)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 428, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5071)
				p.Initializer_In()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBindingElement_YieldContext is an interface to support dynamic dispatch.
type IBindingElement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElement_YieldContext differentiates from other interfaces.
	IsBindingElement_YieldContext()
}

type BindingElement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElement_YieldContext() *BindingElement_YieldContext {
	var p = new(BindingElement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElement_Yield
	return p
}

func (*BindingElement_YieldContext) IsBindingElement_YieldContext() {}

func NewBindingElement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElement_YieldContext {
	var p = new(BindingElement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElement_Yield

	return p
}

func (s *BindingElement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElement_YieldContext) SingleNameBinding_Yield() ISingleNameBinding_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleNameBinding_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleNameBinding_YieldContext)
}

func (s *BindingElement_YieldContext) BindingPattern_Yield() IBindingPattern_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_YieldContext)
}

func (s *BindingElement_YieldContext) Initializer_In_Yield() IInitializer_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_YieldContext)
}

func (s *BindingElement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElement_Yield(s)
	}
}

func (s *BindingElement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElement_Yield(s)
	}
}

func (s *BindingElement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElement_Yield() (localctx IBindingElement_YieldContext) {
	localctx = NewBindingElement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 762, ECMAScriptParserRULE_bindingElement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5081)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5076)
			p.SingleNameBinding_Yield()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5077)
			p.BindingPattern_Yield()
		}
		p.SetState(5079)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 430, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5078)
				p.Initializer_In_Yield()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBindingElement_AwaitContext is an interface to support dynamic dispatch.
type IBindingElement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElement_AwaitContext differentiates from other interfaces.
	IsBindingElement_AwaitContext()
}

type BindingElement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElement_AwaitContext() *BindingElement_AwaitContext {
	var p = new(BindingElement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElement_Await
	return p
}

func (*BindingElement_AwaitContext) IsBindingElement_AwaitContext() {}

func NewBindingElement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElement_AwaitContext {
	var p = new(BindingElement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElement_Await

	return p
}

func (s *BindingElement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElement_AwaitContext) SingleNameBinding_Await() ISingleNameBinding_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleNameBinding_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleNameBinding_AwaitContext)
}

func (s *BindingElement_AwaitContext) BindingPattern_Await() IBindingPattern_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_AwaitContext)
}

func (s *BindingElement_AwaitContext) Initializer_In_Await() IInitializer_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_AwaitContext)
}

func (s *BindingElement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElement_Await(s)
	}
}

func (s *BindingElement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElement_Await(s)
	}
}

func (s *BindingElement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElement_Await() (localctx IBindingElement_AwaitContext) {
	localctx = NewBindingElement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 764, ECMAScriptParserRULE_bindingElement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5088)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5083)
			p.SingleNameBinding_Await()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5084)
			p.BindingPattern_Await()
		}
		p.SetState(5086)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 432, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5085)
				p.Initializer_In_Await()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBindingElement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBindingElement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingElement_Yield_AwaitContext differentiates from other interfaces.
	IsBindingElement_Yield_AwaitContext()
}

type BindingElement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingElement_Yield_AwaitContext() *BindingElement_Yield_AwaitContext {
	var p = new(BindingElement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingElement_Yield_Await
	return p
}

func (*BindingElement_Yield_AwaitContext) IsBindingElement_Yield_AwaitContext() {}

func NewBindingElement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingElement_Yield_AwaitContext {
	var p = new(BindingElement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingElement_Yield_Await

	return p
}

func (s *BindingElement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingElement_Yield_AwaitContext) SingleNameBinding_Yield_Await() ISingleNameBinding_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleNameBinding_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleNameBinding_Yield_AwaitContext)
}

func (s *BindingElement_Yield_AwaitContext) BindingPattern_Yield_Await() IBindingPattern_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_Yield_AwaitContext)
}

func (s *BindingElement_Yield_AwaitContext) Initializer_In_Yield_Await() IInitializer_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_Yield_AwaitContext)
}

func (s *BindingElement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingElement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingElement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingElement_Yield_Await(s)
	}
}

func (s *BindingElement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingElement_Yield_Await(s)
	}
}

func (s *BindingElement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingElement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingElement_Yield_Await() (localctx IBindingElement_Yield_AwaitContext) {
	localctx = NewBindingElement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 766, ECMAScriptParserRULE_bindingElement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5095)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5090)
			p.SingleNameBinding_Yield_Await()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5091)
			p.BindingPattern_Yield_Await()
		}
		p.SetState(5093)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 434, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5092)
				p.Initializer_In_Yield_Await()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISingleNameBindingContext is an interface to support dynamic dispatch.
type ISingleNameBindingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingleNameBindingContext differentiates from other interfaces.
	IsSingleNameBindingContext()
}

type SingleNameBindingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleNameBindingContext() *SingleNameBindingContext {
	var p = new(SingleNameBindingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_singleNameBinding
	return p
}

func (*SingleNameBindingContext) IsSingleNameBindingContext() {}

func NewSingleNameBindingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleNameBindingContext {
	var p = new(SingleNameBindingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_singleNameBinding

	return p
}

func (s *SingleNameBindingContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleNameBindingContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *SingleNameBindingContext) Initializer_In() IInitializer_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_InContext)
}

func (s *SingleNameBindingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleNameBindingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleNameBindingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSingleNameBinding(s)
	}
}

func (s *SingleNameBindingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSingleNameBinding(s)
	}
}

func (s *SingleNameBindingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSingleNameBinding(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SingleNameBinding() (localctx ISingleNameBindingContext) {
	localctx = NewSingleNameBindingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 768, ECMAScriptParserRULE_singleNameBinding)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5097)
		p.BindingIdentifier()
	}
	p.SetState(5099)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 436, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5098)
			p.Initializer_In()
		}

	}

	return localctx
}

// ISingleNameBinding_YieldContext is an interface to support dynamic dispatch.
type ISingleNameBinding_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingleNameBinding_YieldContext differentiates from other interfaces.
	IsSingleNameBinding_YieldContext()
}

type SingleNameBinding_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleNameBinding_YieldContext() *SingleNameBinding_YieldContext {
	var p = new(SingleNameBinding_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_singleNameBinding_Yield
	return p
}

func (*SingleNameBinding_YieldContext) IsSingleNameBinding_YieldContext() {}

func NewSingleNameBinding_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleNameBinding_YieldContext {
	var p = new(SingleNameBinding_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_singleNameBinding_Yield

	return p
}

func (s *SingleNameBinding_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleNameBinding_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *SingleNameBinding_YieldContext) Initializer_In_Yield() IInitializer_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_YieldContext)
}

func (s *SingleNameBinding_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleNameBinding_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleNameBinding_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSingleNameBinding_Yield(s)
	}
}

func (s *SingleNameBinding_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSingleNameBinding_Yield(s)
	}
}

func (s *SingleNameBinding_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSingleNameBinding_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SingleNameBinding_Yield() (localctx ISingleNameBinding_YieldContext) {
	localctx = NewSingleNameBinding_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 770, ECMAScriptParserRULE_singleNameBinding_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5101)
		p.BindingIdentifier_Yield()
	}
	p.SetState(5103)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 437, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5102)
			p.Initializer_In_Yield()
		}

	}

	return localctx
}

// ISingleNameBinding_AwaitContext is an interface to support dynamic dispatch.
type ISingleNameBinding_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingleNameBinding_AwaitContext differentiates from other interfaces.
	IsSingleNameBinding_AwaitContext()
}

type SingleNameBinding_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleNameBinding_AwaitContext() *SingleNameBinding_AwaitContext {
	var p = new(SingleNameBinding_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_singleNameBinding_Await
	return p
}

func (*SingleNameBinding_AwaitContext) IsSingleNameBinding_AwaitContext() {}

func NewSingleNameBinding_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleNameBinding_AwaitContext {
	var p = new(SingleNameBinding_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_singleNameBinding_Await

	return p
}

func (s *SingleNameBinding_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleNameBinding_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *SingleNameBinding_AwaitContext) Initializer_In_Await() IInitializer_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_AwaitContext)
}

func (s *SingleNameBinding_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleNameBinding_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleNameBinding_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSingleNameBinding_Await(s)
	}
}

func (s *SingleNameBinding_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSingleNameBinding_Await(s)
	}
}

func (s *SingleNameBinding_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSingleNameBinding_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SingleNameBinding_Await() (localctx ISingleNameBinding_AwaitContext) {
	localctx = NewSingleNameBinding_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 772, ECMAScriptParserRULE_singleNameBinding_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5105)
		p.BindingIdentifier_Await()
	}
	p.SetState(5107)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 438, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5106)
			p.Initializer_In_Await()
		}

	}

	return localctx
}

// ISingleNameBinding_Yield_AwaitContext is an interface to support dynamic dispatch.
type ISingleNameBinding_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingleNameBinding_Yield_AwaitContext differentiates from other interfaces.
	IsSingleNameBinding_Yield_AwaitContext()
}

type SingleNameBinding_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleNameBinding_Yield_AwaitContext() *SingleNameBinding_Yield_AwaitContext {
	var p = new(SingleNameBinding_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_singleNameBinding_Yield_Await
	return p
}

func (*SingleNameBinding_Yield_AwaitContext) IsSingleNameBinding_Yield_AwaitContext() {}

func NewSingleNameBinding_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleNameBinding_Yield_AwaitContext {
	var p = new(SingleNameBinding_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_singleNameBinding_Yield_Await

	return p
}

func (s *SingleNameBinding_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleNameBinding_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *SingleNameBinding_Yield_AwaitContext) Initializer_In_Yield_Await() IInitializer_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializer_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializer_In_Yield_AwaitContext)
}

func (s *SingleNameBinding_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleNameBinding_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleNameBinding_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSingleNameBinding_Yield_Await(s)
	}
}

func (s *SingleNameBinding_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSingleNameBinding_Yield_Await(s)
	}
}

func (s *SingleNameBinding_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSingleNameBinding_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SingleNameBinding_Yield_Await() (localctx ISingleNameBinding_Yield_AwaitContext) {
	localctx = NewSingleNameBinding_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 774, ECMAScriptParserRULE_singleNameBinding_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5109)
		p.BindingIdentifier_Yield_Await()
	}
	p.SetState(5111)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 439, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5110)
			p.Initializer_In_Yield_Await()
		}

	}

	return localctx
}

// IBindingRestElementContext is an interface to support dynamic dispatch.
type IBindingRestElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingRestElementContext differentiates from other interfaces.
	IsBindingRestElementContext()
}

type BindingRestElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingRestElementContext() *BindingRestElementContext {
	var p = new(BindingRestElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingRestElement
	return p
}

func (*BindingRestElementContext) IsBindingRestElementContext() {}

func NewBindingRestElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingRestElementContext {
	var p = new(BindingRestElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingRestElement

	return p
}

func (s *BindingRestElementContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingRestElementContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *BindingRestElementContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *BindingRestElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingRestElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingRestElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingRestElement(s)
	}
}

func (s *BindingRestElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingRestElement(s)
	}
}

func (s *BindingRestElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingRestElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingRestElement() (localctx IBindingRestElementContext) {
	localctx = NewBindingRestElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 776, ECMAScriptParserRULE_bindingRestElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5117)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 440, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5113)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(5114)
			p.BindingIdentifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5115)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(5116)
			p.BindingPattern()
		}

	}

	return localctx
}

// IBindingRestElement_YieldContext is an interface to support dynamic dispatch.
type IBindingRestElement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingRestElement_YieldContext differentiates from other interfaces.
	IsBindingRestElement_YieldContext()
}

type BindingRestElement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingRestElement_YieldContext() *BindingRestElement_YieldContext {
	var p = new(BindingRestElement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingRestElement_Yield
	return p
}

func (*BindingRestElement_YieldContext) IsBindingRestElement_YieldContext() {}

func NewBindingRestElement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingRestElement_YieldContext {
	var p = new(BindingRestElement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingRestElement_Yield

	return p
}

func (s *BindingRestElement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingRestElement_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *BindingRestElement_YieldContext) BindingPattern_Yield() IBindingPattern_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_YieldContext)
}

func (s *BindingRestElement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingRestElement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingRestElement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingRestElement_Yield(s)
	}
}

func (s *BindingRestElement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingRestElement_Yield(s)
	}
}

func (s *BindingRestElement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingRestElement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingRestElement_Yield() (localctx IBindingRestElement_YieldContext) {
	localctx = NewBindingRestElement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 778, ECMAScriptParserRULE_bindingRestElement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5123)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 441, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5119)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(5120)
			p.BindingIdentifier_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5121)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(5122)
			p.BindingPattern_Yield()
		}

	}

	return localctx
}

// IBindingRestElement_AwaitContext is an interface to support dynamic dispatch.
type IBindingRestElement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingRestElement_AwaitContext differentiates from other interfaces.
	IsBindingRestElement_AwaitContext()
}

type BindingRestElement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingRestElement_AwaitContext() *BindingRestElement_AwaitContext {
	var p = new(BindingRestElement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingRestElement_Await
	return p
}

func (*BindingRestElement_AwaitContext) IsBindingRestElement_AwaitContext() {}

func NewBindingRestElement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingRestElement_AwaitContext {
	var p = new(BindingRestElement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingRestElement_Await

	return p
}

func (s *BindingRestElement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingRestElement_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *BindingRestElement_AwaitContext) BindingPattern_Await() IBindingPattern_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_AwaitContext)
}

func (s *BindingRestElement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingRestElement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingRestElement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingRestElement_Await(s)
	}
}

func (s *BindingRestElement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingRestElement_Await(s)
	}
}

func (s *BindingRestElement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingRestElement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingRestElement_Await() (localctx IBindingRestElement_AwaitContext) {
	localctx = NewBindingRestElement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 780, ECMAScriptParserRULE_bindingRestElement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5129)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 442, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5125)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(5126)
			p.BindingIdentifier_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5127)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(5128)
			p.BindingPattern_Await()
		}

	}

	return localctx
}

// IBindingRestElement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBindingRestElement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindingRestElement_Yield_AwaitContext differentiates from other interfaces.
	IsBindingRestElement_Yield_AwaitContext()
}

type BindingRestElement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindingRestElement_Yield_AwaitContext() *BindingRestElement_Yield_AwaitContext {
	var p = new(BindingRestElement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_bindingRestElement_Yield_Await
	return p
}

func (*BindingRestElement_Yield_AwaitContext) IsBindingRestElement_Yield_AwaitContext() {}

func NewBindingRestElement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindingRestElement_Yield_AwaitContext {
	var p = new(BindingRestElement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_bindingRestElement_Yield_Await

	return p
}

func (s *BindingRestElement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BindingRestElement_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *BindingRestElement_Yield_AwaitContext) BindingPattern_Yield_Await() IBindingPattern_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_Yield_AwaitContext)
}

func (s *BindingRestElement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingRestElement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindingRestElement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBindingRestElement_Yield_Await(s)
	}
}

func (s *BindingRestElement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBindingRestElement_Yield_Await(s)
	}
}

func (s *BindingRestElement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBindingRestElement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BindingRestElement_Yield_Await() (localctx IBindingRestElement_Yield_AwaitContext) {
	localctx = NewBindingRestElement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 782, ECMAScriptParserRULE_bindingRestElement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5135)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 443, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5131)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(5132)
			p.BindingIdentifier_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5133)
			p.Match(ECMAScriptParserT__6)
		}
		{
			p.SetState(5134)
			p.BindingPattern_Yield_Await()
		}

	}

	return localctx
}

// ITheEmptyStatementContext is an interface to support dynamic dispatch.
type ITheEmptyStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTheEmptyStatementContext differentiates from other interfaces.
	IsTheEmptyStatementContext()
}

type TheEmptyStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheEmptyStatementContext() *TheEmptyStatementContext {
	var p = new(TheEmptyStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_theEmptyStatement
	return p
}

func (*TheEmptyStatementContext) IsTheEmptyStatementContext() {}

func NewTheEmptyStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheEmptyStatementContext {
	var p = new(TheEmptyStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_theEmptyStatement

	return p
}

func (s *TheEmptyStatementContext) GetParser() antlr.Parser { return s.parser }
func (s *TheEmptyStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheEmptyStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TheEmptyStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTheEmptyStatement(s)
	}
}

func (s *TheEmptyStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTheEmptyStatement(s)
	}
}

func (s *TheEmptyStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTheEmptyStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TheEmptyStatement() (localctx ITheEmptyStatementContext) {
	localctx = NewTheEmptyStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 784, ECMAScriptParserRULE_theEmptyStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5137)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpressionStatement(s)
	}
}

func (s *ExpressionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpressionStatement(s)
	}
}

func (s *ExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 786, ECMAScriptParserRULE_expressionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5139)
		p.expression_In(0)
	}
	p.SetState(5140)

	if !(negativeLookahead("{", "function", "async function", "class", "let [")) {
		panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"{\", \"function\", \"async function\", \"class\", \"let [\") ", ""))
	}
	{
		p.SetState(5141)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IExpressionStatement_YieldContext is an interface to support dynamic dispatch.
type IExpressionStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatement_YieldContext differentiates from other interfaces.
	IsExpressionStatement_YieldContext()
}

type ExpressionStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatement_YieldContext() *ExpressionStatement_YieldContext {
	var p = new(ExpressionStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expressionStatement_Yield
	return p
}

func (*ExpressionStatement_YieldContext) IsExpressionStatement_YieldContext() {}

func NewExpressionStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatement_YieldContext {
	var p = new(ExpressionStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expressionStatement_Yield

	return p
}

func (s *ExpressionStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatement_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *ExpressionStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpressionStatement_Yield(s)
	}
}

func (s *ExpressionStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpressionStatement_Yield(s)
	}
}

func (s *ExpressionStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpressionStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExpressionStatement_Yield() (localctx IExpressionStatement_YieldContext) {
	localctx = NewExpressionStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 788, ECMAScriptParserRULE_expressionStatement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5143)
		p.expression_In_Yield(0)
	}
	p.SetState(5144)

	if !(negativeLookahead("{", "function", "async function", "class", "let [")) {
		panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"{\", \"function\", \"async function\", \"class\", \"let [\") ", ""))
	}
	{
		p.SetState(5145)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IExpressionStatement_AwaitContext is an interface to support dynamic dispatch.
type IExpressionStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatement_AwaitContext differentiates from other interfaces.
	IsExpressionStatement_AwaitContext()
}

type ExpressionStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatement_AwaitContext() *ExpressionStatement_AwaitContext {
	var p = new(ExpressionStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expressionStatement_Await
	return p
}

func (*ExpressionStatement_AwaitContext) IsExpressionStatement_AwaitContext() {}

func NewExpressionStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatement_AwaitContext {
	var p = new(ExpressionStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expressionStatement_Await

	return p
}

func (s *ExpressionStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatement_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *ExpressionStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpressionStatement_Await(s)
	}
}

func (s *ExpressionStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpressionStatement_Await(s)
	}
}

func (s *ExpressionStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpressionStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExpressionStatement_Await() (localctx IExpressionStatement_AwaitContext) {
	localctx = NewExpressionStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 790, ECMAScriptParserRULE_expressionStatement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5147)
		p.expression_In_Await(0)
	}
	p.SetState(5148)

	if !(negativeLookahead("{", "function", "async function", "class", "let [")) {
		panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"{\", \"function\", \"async function\", \"class\", \"let [\") ", ""))
	}
	{
		p.SetState(5149)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IExpressionStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IExpressionStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatement_Yield_AwaitContext differentiates from other interfaces.
	IsExpressionStatement_Yield_AwaitContext()
}

type ExpressionStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatement_Yield_AwaitContext() *ExpressionStatement_Yield_AwaitContext {
	var p = new(ExpressionStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_expressionStatement_Yield_Await
	return p
}

func (*ExpressionStatement_Yield_AwaitContext) IsExpressionStatement_Yield_AwaitContext() {}

func NewExpressionStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatement_Yield_AwaitContext {
	var p = new(ExpressionStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_expressionStatement_Yield_Await

	return p
}

func (s *ExpressionStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatement_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *ExpressionStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExpressionStatement_Yield_Await(s)
	}
}

func (s *ExpressionStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExpressionStatement_Yield_Await(s)
	}
}

func (s *ExpressionStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExpressionStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExpressionStatement_Yield_Await() (localctx IExpressionStatement_Yield_AwaitContext) {
	localctx = NewExpressionStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 792, ECMAScriptParserRULE_expressionStatement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5151)
		p.expression_In_Yield_Await(0)
	}
	p.SetState(5152)

	if !(negativeLookahead("{", "function", "async function", "class", "let [")) {
		panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"{\", \"function\", \"async function\", \"class\", \"let [\") ", ""))
	}
	{
		p.SetState(5153)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *IfStatementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *IfStatementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIfStatement(s)
	}
}

func (s *IfStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIfStatement(s)
	}
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IfStatement() (localctx IIfStatementContext) {
	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 794, ECMAScriptParserRULE_ifStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5169)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 444, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5155)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5156)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5157)
			p.expression_In(0)
		}
		{
			p.SetState(5158)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5159)
			p.Statement()
		}
		{
			p.SetState(5160)
			p.Match(ECMAScriptParserT__63)
		}
		{
			p.SetState(5161)
			p.Statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5163)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5164)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5165)
			p.expression_In(0)
		}
		{
			p.SetState(5166)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5167)
			p.Statement()
		}

	}

	return localctx
}

// IIfStatement_YieldContext is an interface to support dynamic dispatch.
type IIfStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatement_YieldContext differentiates from other interfaces.
	IsIfStatement_YieldContext()
}

type IfStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatement_YieldContext() *IfStatement_YieldContext {
	var p = new(IfStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Yield
	return p
}

func (*IfStatement_YieldContext) IsIfStatement_YieldContext() {}

func NewIfStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatement_YieldContext {
	var p = new(IfStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Yield

	return p
}

func (s *IfStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatement_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *IfStatement_YieldContext) AllStatement_Yield() []IStatement_YieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_YieldContext)(nil)).Elem())
	var tst = make([]IStatement_YieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_YieldContext)
		}
	}

	return tst
}

func (s *IfStatement_YieldContext) Statement_Yield(i int) IStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_YieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_YieldContext)
}

func (s *IfStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIfStatement_Yield(s)
	}
}

func (s *IfStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIfStatement_Yield(s)
	}
}

func (s *IfStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIfStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IfStatement_Yield() (localctx IIfStatement_YieldContext) {
	localctx = NewIfStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 796, ECMAScriptParserRULE_ifStatement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5185)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 445, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5171)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5172)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5173)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5174)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5175)
			p.Statement_Yield()
		}
		{
			p.SetState(5176)
			p.Match(ECMAScriptParserT__63)
		}
		{
			p.SetState(5177)
			p.Statement_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5179)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5180)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5181)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5182)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5183)
			p.Statement_Yield()
		}

	}

	return localctx
}

// IIfStatement_AwaitContext is an interface to support dynamic dispatch.
type IIfStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatement_AwaitContext differentiates from other interfaces.
	IsIfStatement_AwaitContext()
}

type IfStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatement_AwaitContext() *IfStatement_AwaitContext {
	var p = new(IfStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Await
	return p
}

func (*IfStatement_AwaitContext) IsIfStatement_AwaitContext() {}

func NewIfStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatement_AwaitContext {
	var p = new(IfStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Await

	return p
}

func (s *IfStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatement_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *IfStatement_AwaitContext) AllStatement_Await() []IStatement_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_AwaitContext)(nil)).Elem())
	var tst = make([]IStatement_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_AwaitContext)
		}
	}

	return tst
}

func (s *IfStatement_AwaitContext) Statement_Await(i int) IStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_AwaitContext)
}

func (s *IfStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIfStatement_Await(s)
	}
}

func (s *IfStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIfStatement_Await(s)
	}
}

func (s *IfStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIfStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IfStatement_Await() (localctx IIfStatement_AwaitContext) {
	localctx = NewIfStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 798, ECMAScriptParserRULE_ifStatement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5201)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 446, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5187)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5188)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5189)
			p.expression_In_Await(0)
		}
		{
			p.SetState(5190)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5191)
			p.Statement_Await()
		}
		{
			p.SetState(5192)
			p.Match(ECMAScriptParserT__63)
		}
		{
			p.SetState(5193)
			p.Statement_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5195)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5196)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5197)
			p.expression_In_Await(0)
		}
		{
			p.SetState(5198)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5199)
			p.Statement_Await()
		}

	}

	return localctx
}

// IIfStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IIfStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatement_Yield_AwaitContext differentiates from other interfaces.
	IsIfStatement_Yield_AwaitContext()
}

type IfStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatement_Yield_AwaitContext() *IfStatement_Yield_AwaitContext {
	var p = new(IfStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Yield_Await
	return p
}

func (*IfStatement_Yield_AwaitContext) IsIfStatement_Yield_AwaitContext() {}

func NewIfStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatement_Yield_AwaitContext {
	var p = new(IfStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Yield_Await

	return p
}

func (s *IfStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatement_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *IfStatement_Yield_AwaitContext) AllStatement_Yield_Await() []IStatement_Yield_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_Yield_AwaitContext)(nil)).Elem())
	var tst = make([]IStatement_Yield_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_Yield_AwaitContext)
		}
	}

	return tst
}

func (s *IfStatement_Yield_AwaitContext) Statement_Yield_Await(i int) IStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_AwaitContext)
}

func (s *IfStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIfStatement_Yield_Await(s)
	}
}

func (s *IfStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIfStatement_Yield_Await(s)
	}
}

func (s *IfStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIfStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IfStatement_Yield_Await() (localctx IIfStatement_Yield_AwaitContext) {
	localctx = NewIfStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 800, ECMAScriptParserRULE_ifStatement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5217)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 447, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5203)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5204)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5205)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(5206)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5207)
			p.Statement_Yield_Await()
		}
		{
			p.SetState(5208)
			p.Match(ECMAScriptParserT__63)
		}
		{
			p.SetState(5209)
			p.Statement_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5211)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5212)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5213)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(5214)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5215)
			p.Statement_Yield_Await()
		}

	}

	return localctx
}

// IIfStatement_ReturnContext is an interface to support dynamic dispatch.
type IIfStatement_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatement_ReturnContext differentiates from other interfaces.
	IsIfStatement_ReturnContext()
}

type IfStatement_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatement_ReturnContext() *IfStatement_ReturnContext {
	var p = new(IfStatement_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Return
	return p
}

func (*IfStatement_ReturnContext) IsIfStatement_ReturnContext() {}

func NewIfStatement_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatement_ReturnContext {
	var p = new(IfStatement_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Return

	return p
}

func (s *IfStatement_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatement_ReturnContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *IfStatement_ReturnContext) AllStatement_Return() []IStatement_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_ReturnContext)(nil)).Elem())
	var tst = make([]IStatement_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_ReturnContext)
		}
	}

	return tst
}

func (s *IfStatement_ReturnContext) Statement_Return(i int) IStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_ReturnContext)
}

func (s *IfStatement_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatement_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatement_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIfStatement_Return(s)
	}
}

func (s *IfStatement_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIfStatement_Return(s)
	}
}

func (s *IfStatement_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIfStatement_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IfStatement_Return() (localctx IIfStatement_ReturnContext) {
	localctx = NewIfStatement_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 802, ECMAScriptParserRULE_ifStatement_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5233)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 448, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5219)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5220)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5221)
			p.expression_In(0)
		}
		{
			p.SetState(5222)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5223)
			p.Statement_Return()
		}
		{
			p.SetState(5224)
			p.Match(ECMAScriptParserT__63)
		}
		{
			p.SetState(5225)
			p.Statement_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5227)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5228)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5229)
			p.expression_In(0)
		}
		{
			p.SetState(5230)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5231)
			p.Statement_Return()
		}

	}

	return localctx
}

// IIfStatement_Yield_ReturnContext is an interface to support dynamic dispatch.
type IIfStatement_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatement_Yield_ReturnContext differentiates from other interfaces.
	IsIfStatement_Yield_ReturnContext()
}

type IfStatement_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatement_Yield_ReturnContext() *IfStatement_Yield_ReturnContext {
	var p = new(IfStatement_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Yield_Return
	return p
}

func (*IfStatement_Yield_ReturnContext) IsIfStatement_Yield_ReturnContext() {}

func NewIfStatement_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatement_Yield_ReturnContext {
	var p = new(IfStatement_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Yield_Return

	return p
}

func (s *IfStatement_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatement_Yield_ReturnContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *IfStatement_Yield_ReturnContext) AllStatement_Yield_Return() []IStatement_Yield_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_Yield_ReturnContext)(nil)).Elem())
	var tst = make([]IStatement_Yield_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_Yield_ReturnContext)
		}
	}

	return tst
}

func (s *IfStatement_Yield_ReturnContext) Statement_Yield_Return(i int) IStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_ReturnContext)
}

func (s *IfStatement_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatement_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatement_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIfStatement_Yield_Return(s)
	}
}

func (s *IfStatement_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIfStatement_Yield_Return(s)
	}
}

func (s *IfStatement_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIfStatement_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IfStatement_Yield_Return() (localctx IIfStatement_Yield_ReturnContext) {
	localctx = NewIfStatement_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 804, ECMAScriptParserRULE_ifStatement_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5249)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 449, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5235)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5236)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5237)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5238)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5239)
			p.Statement_Yield_Return()
		}
		{
			p.SetState(5240)
			p.Match(ECMAScriptParserT__63)
		}
		{
			p.SetState(5241)
			p.Statement_Yield_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5243)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5244)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5245)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5246)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5247)
			p.Statement_Yield_Return()
		}

	}

	return localctx
}

// IIfStatement_Await_ReturnContext is an interface to support dynamic dispatch.
type IIfStatement_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatement_Await_ReturnContext differentiates from other interfaces.
	IsIfStatement_Await_ReturnContext()
}

type IfStatement_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatement_Await_ReturnContext() *IfStatement_Await_ReturnContext {
	var p = new(IfStatement_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Await_Return
	return p
}

func (*IfStatement_Await_ReturnContext) IsIfStatement_Await_ReturnContext() {}

func NewIfStatement_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatement_Await_ReturnContext {
	var p = new(IfStatement_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Await_Return

	return p
}

func (s *IfStatement_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatement_Await_ReturnContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *IfStatement_Await_ReturnContext) AllStatement_Await_Return() []IStatement_Await_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_Await_ReturnContext)(nil)).Elem())
	var tst = make([]IStatement_Await_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_Await_ReturnContext)
		}
	}

	return tst
}

func (s *IfStatement_Await_ReturnContext) Statement_Await_Return(i int) IStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Await_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_Await_ReturnContext)
}

func (s *IfStatement_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatement_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatement_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIfStatement_Await_Return(s)
	}
}

func (s *IfStatement_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIfStatement_Await_Return(s)
	}
}

func (s *IfStatement_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIfStatement_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IfStatement_Await_Return() (localctx IIfStatement_Await_ReturnContext) {
	localctx = NewIfStatement_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 806, ECMAScriptParserRULE_ifStatement_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5265)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 450, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5251)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5252)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5253)
			p.expression_In_Await(0)
		}
		{
			p.SetState(5254)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5255)
			p.Statement_Await_Return()
		}
		{
			p.SetState(5256)
			p.Match(ECMAScriptParserT__63)
		}
		{
			p.SetState(5257)
			p.Statement_Await_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5259)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5260)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5261)
			p.expression_In_Await(0)
		}
		{
			p.SetState(5262)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5263)
			p.Statement_Await_Return()
		}

	}

	return localctx
}

// IIfStatement_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type IIfStatement_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatement_Yield_Await_ReturnContext differentiates from other interfaces.
	IsIfStatement_Yield_Await_ReturnContext()
}

type IfStatement_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatement_Yield_Await_ReturnContext() *IfStatement_Yield_Await_ReturnContext {
	var p = new(IfStatement_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Yield_Await_Return
	return p
}

func (*IfStatement_Yield_Await_ReturnContext) IsIfStatement_Yield_Await_ReturnContext() {}

func NewIfStatement_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatement_Yield_Await_ReturnContext {
	var p = new(IfStatement_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_ifStatement_Yield_Await_Return

	return p
}

func (s *IfStatement_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatement_Yield_Await_ReturnContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *IfStatement_Yield_Await_ReturnContext) AllStatement_Yield_Await_Return() []IStatement_Yield_Await_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatement_Yield_Await_ReturnContext)(nil)).Elem())
	var tst = make([]IStatement_Yield_Await_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatement_Yield_Await_ReturnContext)
		}
	}

	return tst
}

func (s *IfStatement_Yield_Await_ReturnContext) Statement_Yield_Await_Return(i int) IStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_Await_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_Await_ReturnContext)
}

func (s *IfStatement_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatement_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatement_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIfStatement_Yield_Await_Return(s)
	}
}

func (s *IfStatement_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIfStatement_Yield_Await_Return(s)
	}
}

func (s *IfStatement_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIfStatement_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IfStatement_Yield_Await_Return() (localctx IIfStatement_Yield_Await_ReturnContext) {
	localctx = NewIfStatement_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 808, ECMAScriptParserRULE_ifStatement_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5281)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 451, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5267)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5268)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5269)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(5270)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5271)
			p.Statement_Yield_Await_Return()
		}
		{
			p.SetState(5272)
			p.Match(ECMAScriptParserT__63)
		}
		{
			p.SetState(5273)
			p.Statement_Yield_Await_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5275)
			p.Match(ECMAScriptParserT__62)
		}
		{
			p.SetState(5276)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5277)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(5278)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5279)
			p.Statement_Yield_Await_Return()
		}

	}

	return localctx
}

// IIterationStatementContext is an interface to support dynamic dispatch.
type IIterationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationStatementContext differentiates from other interfaces.
	IsIterationStatementContext()
}

type IterationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatementContext() *IterationStatementContext {
	var p = new(IterationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement
	return p
}

func (*IterationStatementContext) IsIterationStatementContext() {}

func NewIterationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatementContext {
	var p = new(IterationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement

	return p
}

func (s *IterationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IterationStatementContext) AllExpression_In() []IExpression_InContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_InContext)(nil)).Elem())
	var tst = make([]IExpression_InContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_InContext)
		}
	}

	return tst
}

func (s *IterationStatementContext) Expression_In(i int) IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *IterationStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IterationStatementContext) VariableDeclarationList() IVariableDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationListContext)
}

func (s *IterationStatementContext) LexicalDeclaration() ILexicalDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclarationContext)
}

func (s *IterationStatementContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *IterationStatementContext) ForBinding() IForBindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBindingContext)
}

func (s *IterationStatementContext) ForDeclaration() IForDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForDeclarationContext)
}

func (s *IterationStatementContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *IterationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIterationStatement(s)
	}
}

func (s *IterationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIterationStatement(s)
	}
}

func (s *IterationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIterationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IterationStatement() (localctx IIterationStatementContext) {
	localctx = NewIterationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 810, ECMAScriptParserRULE_iterationStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5393)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 459, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5283)
			p.Match(ECMAScriptParserT__64)
		}
		{
			p.SetState(5284)
			p.Statement()
		}
		{
			p.SetState(5285)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5286)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5287)
			p.expression_In(0)
		}
		{
			p.SetState(5288)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5289)
			p.Match(ECMAScriptParserT__58)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5291)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5292)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5293)
			p.expression_In(0)
		}
		{
			p.SetState(5294)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5295)
			p.Statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5297)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5298)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5299)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		p.SetState(5301)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5300)
				p.expression(0)
			}

		}
		{
			p.SetState(5303)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5305)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5304)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5307)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5309)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5308)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5311)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5312)
			p.Statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5313)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5314)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5315)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5316)
			p.variableDeclarationList(0)
		}
		{
			p.SetState(5317)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5319)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5318)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5321)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5323)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5322)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5325)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5326)
			p.Statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5328)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5329)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5330)
			p.LexicalDeclaration()
		}
		p.SetState(5332)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5331)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5334)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5336)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5335)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5338)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5339)
			p.Statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5341)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5342)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5343)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		{
			p.SetState(5344)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(5345)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5346)
			p.expression_In(0)
		}
		{
			p.SetState(5347)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5348)
			p.Statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5350)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5351)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5352)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5353)
			p.ForBinding()
		}
		{
			p.SetState(5354)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5355)
			p.expression_In(0)
		}
		{
			p.SetState(5356)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5357)
			p.Statement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5359)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5360)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5361)
			p.ForDeclaration()
		}
		{
			p.SetState(5362)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5363)
			p.expression_In(0)
		}
		{
			p.SetState(5364)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5365)
			p.Statement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5367)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5368)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5369)

		if !(negativeLookahead("let")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let\") ", ""))
		}
		{
			p.SetState(5370)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(5371)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5372)
			p.AssignmentExpression_In()
		}
		{
			p.SetState(5373)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5374)
			p.Statement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5376)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5377)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5378)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5379)
			p.ForBinding()
		}
		{
			p.SetState(5380)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5381)
			p.AssignmentExpression_In()
		}
		{
			p.SetState(5382)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5383)
			p.Statement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5385)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5386)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5387)
			p.ForDeclaration()
		}
		{
			p.SetState(5388)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5389)
			p.AssignmentExpression_In()
		}
		{
			p.SetState(5390)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5391)
			p.Statement()
		}

	}

	return localctx
}

// IIterationStatement_YieldContext is an interface to support dynamic dispatch.
type IIterationStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationStatement_YieldContext differentiates from other interfaces.
	IsIterationStatement_YieldContext()
}

type IterationStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatement_YieldContext() *IterationStatement_YieldContext {
	var p = new(IterationStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Yield
	return p
}

func (*IterationStatement_YieldContext) IsIterationStatement_YieldContext() {}

func NewIterationStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatement_YieldContext {
	var p = new(IterationStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Yield

	return p
}

func (s *IterationStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatement_YieldContext) Statement_Yield() IStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_YieldContext)
}

func (s *IterationStatement_YieldContext) AllExpression_In_Yield() []IExpression_In_YieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem())
	var tst = make([]IExpression_In_YieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_YieldContext)
		}
	}

	return tst
}

func (s *IterationStatement_YieldContext) Expression_In_Yield(i int) IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *IterationStatement_YieldContext) Expression_Yield() IExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_YieldContext)
}

func (s *IterationStatement_YieldContext) VariableDeclarationList_Yield() IVariableDeclarationList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_YieldContext)
}

func (s *IterationStatement_YieldContext) LexicalDeclaration_Yield() ILexicalDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclaration_YieldContext)
}

func (s *IterationStatement_YieldContext) LeftHandSideExpression_Yield() ILeftHandSideExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_YieldContext)
}

func (s *IterationStatement_YieldContext) ForBinding_Yield() IForBinding_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBinding_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBinding_YieldContext)
}

func (s *IterationStatement_YieldContext) ForDeclaration_Yield() IForDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForDeclaration_YieldContext)
}

func (s *IterationStatement_YieldContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *IterationStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterationStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIterationStatement_Yield(s)
	}
}

func (s *IterationStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIterationStatement_Yield(s)
	}
}

func (s *IterationStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIterationStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IterationStatement_Yield() (localctx IIterationStatement_YieldContext) {
	localctx = NewIterationStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 812, ECMAScriptParserRULE_iterationStatement_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5505)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 467, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5395)
			p.Match(ECMAScriptParserT__64)
		}
		{
			p.SetState(5396)
			p.Statement_Yield()
		}
		{
			p.SetState(5397)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5398)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5399)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5400)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5401)
			p.Match(ECMAScriptParserT__58)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5403)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5404)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5405)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5406)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5407)
			p.Statement_Yield()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5409)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5410)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5411)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		p.SetState(5413)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5412)
				p.expression_Yield(0)
			}

		}
		{
			p.SetState(5415)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5417)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5416)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5419)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5421)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5420)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5423)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5424)
			p.Statement_Yield()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5425)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5426)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5427)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5428)
			p.variableDeclarationList_Yield(0)
		}
		{
			p.SetState(5429)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5430)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5433)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5435)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5434)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5437)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5438)
			p.Statement_Yield()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5440)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5441)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5442)
			p.LexicalDeclaration_Yield()
		}
		p.SetState(5444)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5443)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5446)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5448)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5447)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5450)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5451)
			p.Statement_Yield()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5453)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5454)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5455)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		{
			p.SetState(5456)
			p.LeftHandSideExpression_Yield()
		}
		{
			p.SetState(5457)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5458)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5459)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5460)
			p.Statement_Yield()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5462)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5463)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5464)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5465)
			p.ForBinding_Yield()
		}
		{
			p.SetState(5466)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5467)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5468)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5469)
			p.Statement_Yield()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5471)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5472)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5473)
			p.ForDeclaration_Yield()
		}
		{
			p.SetState(5474)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5475)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5476)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5477)
			p.Statement_Yield()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5479)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5480)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5481)

		if !(negativeLookahead("let")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let\") ", ""))
		}
		{
			p.SetState(5482)
			p.LeftHandSideExpression_Yield()
		}
		{
			p.SetState(5483)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5484)
			p.AssignmentExpression_In_Yield()
		}
		{
			p.SetState(5485)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5486)
			p.Statement_Yield()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5488)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5489)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5490)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5491)
			p.ForBinding_Yield()
		}
		{
			p.SetState(5492)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5493)
			p.AssignmentExpression_In_Yield()
		}
		{
			p.SetState(5494)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5495)
			p.Statement_Yield()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5497)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5498)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5499)
			p.ForDeclaration_Yield()
		}
		{
			p.SetState(5500)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5501)
			p.AssignmentExpression_In_Yield()
		}
		{
			p.SetState(5502)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5503)
			p.Statement_Yield()
		}

	}

	return localctx
}

// IIterationStatement_AwaitContext is an interface to support dynamic dispatch.
type IIterationStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationStatement_AwaitContext differentiates from other interfaces.
	IsIterationStatement_AwaitContext()
}

type IterationStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatement_AwaitContext() *IterationStatement_AwaitContext {
	var p = new(IterationStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Await
	return p
}

func (*IterationStatement_AwaitContext) IsIterationStatement_AwaitContext() {}

func NewIterationStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatement_AwaitContext {
	var p = new(IterationStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Await

	return p
}

func (s *IterationStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatement_AwaitContext) Statement_Await() IStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_AwaitContext)
}

func (s *IterationStatement_AwaitContext) AllExpression_In_Await() []IExpression_In_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem())
	var tst = make([]IExpression_In_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_AwaitContext)
		}
	}

	return tst
}

func (s *IterationStatement_AwaitContext) Expression_In_Await(i int) IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *IterationStatement_AwaitContext) Expression_Await() IExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_AwaitContext)
}

func (s *IterationStatement_AwaitContext) VariableDeclarationList_Await() IVariableDeclarationList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_AwaitContext)
}

func (s *IterationStatement_AwaitContext) LexicalDeclaration_Await() ILexicalDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclaration_AwaitContext)
}

func (s *IterationStatement_AwaitContext) LeftHandSideExpression_Await() ILeftHandSideExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_AwaitContext)
}

func (s *IterationStatement_AwaitContext) ForBinding_Await() IForBinding_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBinding_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBinding_AwaitContext)
}

func (s *IterationStatement_AwaitContext) ForDeclaration_Await() IForDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForDeclaration_AwaitContext)
}

func (s *IterationStatement_AwaitContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *IterationStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterationStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIterationStatement_Await(s)
	}
}

func (s *IterationStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIterationStatement_Await(s)
	}
}

func (s *IterationStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIterationStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IterationStatement_Await() (localctx IIterationStatement_AwaitContext) {
	localctx = NewIterationStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 814, ECMAScriptParserRULE_iterationStatement_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5617)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 475, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5507)
			p.Match(ECMAScriptParserT__64)
		}
		{
			p.SetState(5508)
			p.Statement_Await()
		}
		{
			p.SetState(5509)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5510)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5511)
			p.expression_In_Await(0)
		}
		{
			p.SetState(5512)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5513)
			p.Match(ECMAScriptParserT__58)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5515)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5516)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5517)
			p.expression_In_Await(0)
		}
		{
			p.SetState(5518)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5519)
			p.Statement_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5521)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5522)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5523)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		p.SetState(5525)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5524)
				p.expression_Await(0)
			}

		}
		{
			p.SetState(5527)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5529)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5528)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(5531)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5533)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5532)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(5535)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5536)
			p.Statement_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5537)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5538)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5539)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5540)
			p.variableDeclarationList_Await(0)
		}
		{
			p.SetState(5541)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5543)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5542)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(5545)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5547)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5546)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(5549)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5550)
			p.Statement_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5552)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5553)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5554)
			p.LexicalDeclaration_Await()
		}
		p.SetState(5556)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5555)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(5558)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5560)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5559)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(5562)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5563)
			p.Statement_Await()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5565)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5566)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5567)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		{
			p.SetState(5568)
			p.LeftHandSideExpression_Await()
		}
		{
			p.SetState(5569)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5570)
			p.expression_In_Await(0)
		}
		{
			p.SetState(5571)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5572)
			p.Statement_Await()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5574)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5575)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5576)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5577)
			p.ForBinding_Await()
		}
		{
			p.SetState(5578)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5579)
			p.expression_In_Await(0)
		}
		{
			p.SetState(5580)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5581)
			p.Statement_Await()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5583)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5584)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5585)
			p.ForDeclaration_Await()
		}
		{
			p.SetState(5586)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5587)
			p.expression_In_Await(0)
		}
		{
			p.SetState(5588)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5589)
			p.Statement_Await()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5591)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5592)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5593)

		if !(negativeLookahead("let")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let\") ", ""))
		}
		{
			p.SetState(5594)
			p.LeftHandSideExpression_Await()
		}
		{
			p.SetState(5595)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5596)
			p.AssignmentExpression_In_Await()
		}
		{
			p.SetState(5597)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5598)
			p.Statement_Await()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5600)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5601)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5602)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5603)
			p.ForBinding_Await()
		}
		{
			p.SetState(5604)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5605)
			p.AssignmentExpression_In_Await()
		}
		{
			p.SetState(5606)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5607)
			p.Statement_Await()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5609)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5610)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5611)
			p.ForDeclaration_Await()
		}
		{
			p.SetState(5612)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5613)
			p.AssignmentExpression_In_Await()
		}
		{
			p.SetState(5614)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5615)
			p.Statement_Await()
		}

	}

	return localctx
}

// IIterationStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IIterationStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationStatement_Yield_AwaitContext differentiates from other interfaces.
	IsIterationStatement_Yield_AwaitContext()
}

type IterationStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatement_Yield_AwaitContext() *IterationStatement_Yield_AwaitContext {
	var p = new(IterationStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Yield_Await
	return p
}

func (*IterationStatement_Yield_AwaitContext) IsIterationStatement_Yield_AwaitContext() {}

func NewIterationStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatement_Yield_AwaitContext {
	var p = new(IterationStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Yield_Await

	return p
}

func (s *IterationStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatement_Yield_AwaitContext) Statement_Yield_Await() IStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_AwaitContext) AllExpression_In_Yield_Await() []IExpression_In_Yield_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem())
	var tst = make([]IExpression_In_Yield_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_Yield_AwaitContext)
		}
	}

	return tst
}

func (s *IterationStatement_Yield_AwaitContext) Expression_In_Yield_Await(i int) IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_AwaitContext) Expression_Yield_Await() IExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_AwaitContext) VariableDeclarationList_Yield_Await() IVariableDeclarationList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_AwaitContext) LexicalDeclaration_Yield_Await() ILexicalDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclaration_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_AwaitContext) LeftHandSideExpression_Yield_Await() ILeftHandSideExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_AwaitContext) ForBinding_Yield_Await() IForBinding_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBinding_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBinding_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_AwaitContext) ForDeclaration_Yield_Await() IForDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForDeclaration_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_AwaitContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterationStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIterationStatement_Yield_Await(s)
	}
}

func (s *IterationStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIterationStatement_Yield_Await(s)
	}
}

func (s *IterationStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIterationStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IterationStatement_Yield_Await() (localctx IIterationStatement_Yield_AwaitContext) {
	localctx = NewIterationStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 816, ECMAScriptParserRULE_iterationStatement_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5729)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 483, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5619)
			p.Match(ECMAScriptParserT__64)
		}
		{
			p.SetState(5620)
			p.Statement_Yield_Await()
		}
		{
			p.SetState(5621)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5622)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5623)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(5624)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5625)
			p.Match(ECMAScriptParserT__58)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5627)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5628)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5629)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(5630)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5631)
			p.Statement_Yield_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5633)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5634)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5635)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		p.SetState(5637)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5636)
				p.expression_Yield_Await(0)
			}

		}
		{
			p.SetState(5639)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5641)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5640)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(5643)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5645)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5644)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(5647)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5648)
			p.Statement_Yield_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5649)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5650)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5651)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5652)
			p.variableDeclarationList_Yield_Await(0)
		}
		{
			p.SetState(5653)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5655)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5654)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(5657)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5659)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5658)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(5661)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5662)
			p.Statement_Yield_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5664)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5665)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5666)
			p.LexicalDeclaration_Yield_Await()
		}
		p.SetState(5668)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5667)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(5670)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5672)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5671)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(5674)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5675)
			p.Statement_Yield_Await()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5677)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5678)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5679)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		{
			p.SetState(5680)
			p.LeftHandSideExpression_Yield_Await()
		}
		{
			p.SetState(5681)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5682)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(5683)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5684)
			p.Statement_Yield_Await()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5686)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5687)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5688)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5689)
			p.ForBinding_Yield_Await()
		}
		{
			p.SetState(5690)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5691)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(5692)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5693)
			p.Statement_Yield_Await()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5695)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5696)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5697)
			p.ForDeclaration_Yield_Await()
		}
		{
			p.SetState(5698)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5699)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(5700)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5701)
			p.Statement_Yield_Await()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5703)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5704)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5705)

		if !(negativeLookahead("let")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let\") ", ""))
		}
		{
			p.SetState(5706)
			p.LeftHandSideExpression_Yield_Await()
		}
		{
			p.SetState(5707)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5708)
			p.AssignmentExpression_In_Yield_Await()
		}
		{
			p.SetState(5709)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5710)
			p.Statement_Yield_Await()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5712)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5713)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5714)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5715)
			p.ForBinding_Yield_Await()
		}
		{
			p.SetState(5716)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5717)
			p.AssignmentExpression_In_Yield_Await()
		}
		{
			p.SetState(5718)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5719)
			p.Statement_Yield_Await()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5721)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5722)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5723)
			p.ForDeclaration_Yield_Await()
		}
		{
			p.SetState(5724)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5725)
			p.AssignmentExpression_In_Yield_Await()
		}
		{
			p.SetState(5726)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5727)
			p.Statement_Yield_Await()
		}

	}

	return localctx
}

// IIterationStatement_ReturnContext is an interface to support dynamic dispatch.
type IIterationStatement_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationStatement_ReturnContext differentiates from other interfaces.
	IsIterationStatement_ReturnContext()
}

type IterationStatement_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatement_ReturnContext() *IterationStatement_ReturnContext {
	var p = new(IterationStatement_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Return
	return p
}

func (*IterationStatement_ReturnContext) IsIterationStatement_ReturnContext() {}

func NewIterationStatement_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatement_ReturnContext {
	var p = new(IterationStatement_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Return

	return p
}

func (s *IterationStatement_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatement_ReturnContext) Statement_Return() IStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_ReturnContext)
}

func (s *IterationStatement_ReturnContext) AllExpression_In() []IExpression_InContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_InContext)(nil)).Elem())
	var tst = make([]IExpression_InContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_InContext)
		}
	}

	return tst
}

func (s *IterationStatement_ReturnContext) Expression_In(i int) IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *IterationStatement_ReturnContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IterationStatement_ReturnContext) VariableDeclarationList() IVariableDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationListContext)
}

func (s *IterationStatement_ReturnContext) LexicalDeclaration() ILexicalDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclarationContext)
}

func (s *IterationStatement_ReturnContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *IterationStatement_ReturnContext) ForBinding() IForBindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBindingContext)
}

func (s *IterationStatement_ReturnContext) ForDeclaration() IForDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForDeclarationContext)
}

func (s *IterationStatement_ReturnContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *IterationStatement_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatement_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterationStatement_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIterationStatement_Return(s)
	}
}

func (s *IterationStatement_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIterationStatement_Return(s)
	}
}

func (s *IterationStatement_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIterationStatement_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IterationStatement_Return() (localctx IIterationStatement_ReturnContext) {
	localctx = NewIterationStatement_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 818, ECMAScriptParserRULE_iterationStatement_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5841)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 491, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5731)
			p.Match(ECMAScriptParserT__64)
		}
		{
			p.SetState(5732)
			p.Statement_Return()
		}
		{
			p.SetState(5733)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5734)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5735)
			p.expression_In(0)
		}
		{
			p.SetState(5736)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5737)
			p.Match(ECMAScriptParserT__58)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5739)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5740)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5741)
			p.expression_In(0)
		}
		{
			p.SetState(5742)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5743)
			p.Statement_Return()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5745)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5746)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5747)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		p.SetState(5749)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5748)
				p.expression(0)
			}

		}
		{
			p.SetState(5751)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5753)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5752)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5755)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5757)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5756)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5759)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5760)
			p.Statement_Return()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5761)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5762)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5763)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5764)
			p.variableDeclarationList(0)
		}
		{
			p.SetState(5765)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5767)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5766)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5769)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5771)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5770)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5773)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5774)
			p.Statement_Return()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5776)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5777)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5778)
			p.LexicalDeclaration()
		}
		p.SetState(5780)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5779)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5782)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5784)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5783)
				p.expression_In(0)
			}

		}
		{
			p.SetState(5786)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5787)
			p.Statement_Return()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5789)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5790)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5791)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		{
			p.SetState(5792)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(5793)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5794)
			p.expression_In(0)
		}
		{
			p.SetState(5795)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5796)
			p.Statement_Return()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5798)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5799)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5800)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5801)
			p.ForBinding()
		}
		{
			p.SetState(5802)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5803)
			p.expression_In(0)
		}
		{
			p.SetState(5804)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5805)
			p.Statement_Return()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5807)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5808)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5809)
			p.ForDeclaration()
		}
		{
			p.SetState(5810)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5811)
			p.expression_In(0)
		}
		{
			p.SetState(5812)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5813)
			p.Statement_Return()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5815)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5816)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5817)

		if !(negativeLookahead("let")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let\") ", ""))
		}
		{
			p.SetState(5818)
			p.LeftHandSideExpression()
		}
		{
			p.SetState(5819)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5820)
			p.AssignmentExpression_In()
		}
		{
			p.SetState(5821)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5822)
			p.Statement_Return()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5824)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5825)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5826)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5827)
			p.ForBinding()
		}
		{
			p.SetState(5828)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5829)
			p.AssignmentExpression_In()
		}
		{
			p.SetState(5830)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5831)
			p.Statement_Return()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5833)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5834)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5835)
			p.ForDeclaration()
		}
		{
			p.SetState(5836)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5837)
			p.AssignmentExpression_In()
		}
		{
			p.SetState(5838)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5839)
			p.Statement_Return()
		}

	}

	return localctx
}

// IIterationStatement_Yield_ReturnContext is an interface to support dynamic dispatch.
type IIterationStatement_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationStatement_Yield_ReturnContext differentiates from other interfaces.
	IsIterationStatement_Yield_ReturnContext()
}

type IterationStatement_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatement_Yield_ReturnContext() *IterationStatement_Yield_ReturnContext {
	var p = new(IterationStatement_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Yield_Return
	return p
}

func (*IterationStatement_Yield_ReturnContext) IsIterationStatement_Yield_ReturnContext() {}

func NewIterationStatement_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatement_Yield_ReturnContext {
	var p = new(IterationStatement_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Yield_Return

	return p
}

func (s *IterationStatement_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatement_Yield_ReturnContext) Statement_Yield_Return() IStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_ReturnContext)
}

func (s *IterationStatement_Yield_ReturnContext) AllExpression_In_Yield() []IExpression_In_YieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem())
	var tst = make([]IExpression_In_YieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_YieldContext)
		}
	}

	return tst
}

func (s *IterationStatement_Yield_ReturnContext) Expression_In_Yield(i int) IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *IterationStatement_Yield_ReturnContext) Expression_Yield() IExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_YieldContext)
}

func (s *IterationStatement_Yield_ReturnContext) VariableDeclarationList_Yield() IVariableDeclarationList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_YieldContext)
}

func (s *IterationStatement_Yield_ReturnContext) LexicalDeclaration_Yield() ILexicalDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclaration_YieldContext)
}

func (s *IterationStatement_Yield_ReturnContext) LeftHandSideExpression_Yield() ILeftHandSideExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_YieldContext)
}

func (s *IterationStatement_Yield_ReturnContext) ForBinding_Yield() IForBinding_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBinding_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBinding_YieldContext)
}

func (s *IterationStatement_Yield_ReturnContext) ForDeclaration_Yield() IForDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForDeclaration_YieldContext)
}

func (s *IterationStatement_Yield_ReturnContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *IterationStatement_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatement_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterationStatement_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIterationStatement_Yield_Return(s)
	}
}

func (s *IterationStatement_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIterationStatement_Yield_Return(s)
	}
}

func (s *IterationStatement_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIterationStatement_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IterationStatement_Yield_Return() (localctx IIterationStatement_Yield_ReturnContext) {
	localctx = NewIterationStatement_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 820, ECMAScriptParserRULE_iterationStatement_Yield_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5953)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 499, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5843)
			p.Match(ECMAScriptParserT__64)
		}
		{
			p.SetState(5844)
			p.Statement_Yield_Return()
		}
		{
			p.SetState(5845)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5846)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5847)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5848)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5849)
			p.Match(ECMAScriptParserT__58)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5851)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5852)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5853)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5854)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5855)
			p.Statement_Yield_Return()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5857)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5858)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5859)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		p.SetState(5861)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5860)
				p.expression_Yield(0)
			}

		}
		{
			p.SetState(5863)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5865)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5864)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5867)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5869)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5868)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5871)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5872)
			p.Statement_Yield_Return()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5873)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5874)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5875)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5876)
			p.variableDeclarationList_Yield(0)
		}
		{
			p.SetState(5877)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5879)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5878)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5881)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5882)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5885)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5886)
			p.Statement_Yield_Return()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5888)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5889)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5890)
			p.LexicalDeclaration_Yield()
		}
		p.SetState(5892)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5891)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5894)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5896)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5895)
				p.expression_In_Yield(0)
			}

		}
		{
			p.SetState(5898)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5899)
			p.Statement_Yield_Return()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5901)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5902)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5903)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		{
			p.SetState(5904)
			p.LeftHandSideExpression_Yield()
		}
		{
			p.SetState(5905)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5906)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5907)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5908)
			p.Statement_Yield_Return()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5910)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5911)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5912)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5913)
			p.ForBinding_Yield()
		}
		{
			p.SetState(5914)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5915)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5916)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5917)
			p.Statement_Yield_Return()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5919)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5920)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5921)
			p.ForDeclaration_Yield()
		}
		{
			p.SetState(5922)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(5923)
			p.expression_In_Yield(0)
		}
		{
			p.SetState(5924)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5925)
			p.Statement_Yield_Return()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5927)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5928)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5929)

		if !(negativeLookahead("let")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let\") ", ""))
		}
		{
			p.SetState(5930)
			p.LeftHandSideExpression_Yield()
		}
		{
			p.SetState(5931)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5932)
			p.AssignmentExpression_In_Yield()
		}
		{
			p.SetState(5933)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5934)
			p.Statement_Yield_Return()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5936)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5937)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5938)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5939)
			p.ForBinding_Yield()
		}
		{
			p.SetState(5940)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5941)
			p.AssignmentExpression_In_Yield()
		}
		{
			p.SetState(5942)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5943)
			p.Statement_Yield_Return()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5945)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5946)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5947)
			p.ForDeclaration_Yield()
		}
		{
			p.SetState(5948)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(5949)
			p.AssignmentExpression_In_Yield()
		}
		{
			p.SetState(5950)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5951)
			p.Statement_Yield_Return()
		}

	}

	return localctx
}

// IIterationStatement_Await_ReturnContext is an interface to support dynamic dispatch.
type IIterationStatement_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationStatement_Await_ReturnContext differentiates from other interfaces.
	IsIterationStatement_Await_ReturnContext()
}

type IterationStatement_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatement_Await_ReturnContext() *IterationStatement_Await_ReturnContext {
	var p = new(IterationStatement_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Await_Return
	return p
}

func (*IterationStatement_Await_ReturnContext) IsIterationStatement_Await_ReturnContext() {}

func NewIterationStatement_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatement_Await_ReturnContext {
	var p = new(IterationStatement_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Await_Return

	return p
}

func (s *IterationStatement_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatement_Await_ReturnContext) Statement_Await_Return() IStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Await_ReturnContext)
}

func (s *IterationStatement_Await_ReturnContext) AllExpression_In_Await() []IExpression_In_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem())
	var tst = make([]IExpression_In_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_AwaitContext)
		}
	}

	return tst
}

func (s *IterationStatement_Await_ReturnContext) Expression_In_Await(i int) IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *IterationStatement_Await_ReturnContext) Expression_Await() IExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_AwaitContext)
}

func (s *IterationStatement_Await_ReturnContext) VariableDeclarationList_Await() IVariableDeclarationList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_AwaitContext)
}

func (s *IterationStatement_Await_ReturnContext) LexicalDeclaration_Await() ILexicalDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclaration_AwaitContext)
}

func (s *IterationStatement_Await_ReturnContext) LeftHandSideExpression_Await() ILeftHandSideExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_AwaitContext)
}

func (s *IterationStatement_Await_ReturnContext) ForBinding_Await() IForBinding_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBinding_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBinding_AwaitContext)
}

func (s *IterationStatement_Await_ReturnContext) ForDeclaration_Await() IForDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForDeclaration_AwaitContext)
}

func (s *IterationStatement_Await_ReturnContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *IterationStatement_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatement_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterationStatement_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIterationStatement_Await_Return(s)
	}
}

func (s *IterationStatement_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIterationStatement_Await_Return(s)
	}
}

func (s *IterationStatement_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIterationStatement_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IterationStatement_Await_Return() (localctx IIterationStatement_Await_ReturnContext) {
	localctx = NewIterationStatement_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 822, ECMAScriptParserRULE_iterationStatement_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6065)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 507, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5955)
			p.Match(ECMAScriptParserT__64)
		}
		{
			p.SetState(5956)
			p.Statement_Await_Return()
		}
		{
			p.SetState(5957)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5958)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5959)
			p.expression_In_Await(0)
		}
		{
			p.SetState(5960)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5961)
			p.Match(ECMAScriptParserT__58)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5963)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(5964)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5965)
			p.expression_In_Await(0)
		}
		{
			p.SetState(5966)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5967)
			p.Statement_Await_Return()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5969)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5970)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(5971)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		p.SetState(5973)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5972)
				p.expression_Await(0)
			}

		}
		{
			p.SetState(5975)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5977)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5976)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(5979)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5981)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5980)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(5983)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5984)
			p.Statement_Await_Return()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5985)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(5986)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(5987)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(5988)
			p.variableDeclarationList_Await(0)
		}
		{
			p.SetState(5989)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5991)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5990)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(5993)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(5995)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(5994)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(5997)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(5998)
			p.Statement_Await_Return()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6000)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6001)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6002)
			p.LexicalDeclaration_Await()
		}
		p.SetState(6004)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(6003)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(6006)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(6008)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(6007)
				p.expression_In_Await(0)
			}

		}
		{
			p.SetState(6010)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6011)
			p.Statement_Await_Return()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6013)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6014)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(6015)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		{
			p.SetState(6016)
			p.LeftHandSideExpression_Await()
		}
		{
			p.SetState(6017)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(6018)
			p.expression_In_Await(0)
		}
		{
			p.SetState(6019)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6020)
			p.Statement_Await_Return()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6022)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6023)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6024)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(6025)
			p.ForBinding_Await()
		}
		{
			p.SetState(6026)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(6027)
			p.expression_In_Await(0)
		}
		{
			p.SetState(6028)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6029)
			p.Statement_Await_Return()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6031)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6032)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6033)
			p.ForDeclaration_Await()
		}
		{
			p.SetState(6034)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(6035)
			p.expression_In_Await(0)
		}
		{
			p.SetState(6036)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6037)
			p.Statement_Await_Return()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6039)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6040)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(6041)

		if !(negativeLookahead("let")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let\") ", ""))
		}
		{
			p.SetState(6042)
			p.LeftHandSideExpression_Await()
		}
		{
			p.SetState(6043)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(6044)
			p.AssignmentExpression_In_Await()
		}
		{
			p.SetState(6045)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6046)
			p.Statement_Await_Return()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6048)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6049)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6050)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(6051)
			p.ForBinding_Await()
		}
		{
			p.SetState(6052)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(6053)
			p.AssignmentExpression_In_Await()
		}
		{
			p.SetState(6054)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6055)
			p.Statement_Await_Return()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6057)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6058)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6059)
			p.ForDeclaration_Await()
		}
		{
			p.SetState(6060)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(6061)
			p.AssignmentExpression_In_Await()
		}
		{
			p.SetState(6062)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6063)
			p.Statement_Await_Return()
		}

	}

	return localctx
}

// IIterationStatement_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type IIterationStatement_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationStatement_Yield_Await_ReturnContext differentiates from other interfaces.
	IsIterationStatement_Yield_Await_ReturnContext()
}

type IterationStatement_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatement_Yield_Await_ReturnContext() *IterationStatement_Yield_Await_ReturnContext {
	var p = new(IterationStatement_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Yield_Await_Return
	return p
}

func (*IterationStatement_Yield_Await_ReturnContext) IsIterationStatement_Yield_Await_ReturnContext() {
}

func NewIterationStatement_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatement_Yield_Await_ReturnContext {
	var p = new(IterationStatement_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_iterationStatement_Yield_Await_Return

	return p
}

func (s *IterationStatement_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatement_Yield_Await_ReturnContext) Statement_Yield_Await_Return() IStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_Await_ReturnContext)
}

func (s *IterationStatement_Yield_Await_ReturnContext) AllExpression_In_Yield_Await() []IExpression_In_Yield_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem())
	var tst = make([]IExpression_In_Yield_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_In_Yield_AwaitContext)
		}
	}

	return tst
}

func (s *IterationStatement_Yield_Await_ReturnContext) Expression_In_Yield_Await(i int) IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_Await_ReturnContext) Expression_Yield_Await() IExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_Await_ReturnContext) VariableDeclarationList_Yield_Await() IVariableDeclarationList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationList_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_Await_ReturnContext) LexicalDeclaration_Yield_Await() ILexicalDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILexicalDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILexicalDeclaration_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_Await_ReturnContext) LeftHandSideExpression_Yield_Await() ILeftHandSideExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_Await_ReturnContext) ForBinding_Yield_Await() IForBinding_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBinding_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBinding_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_Await_ReturnContext) ForDeclaration_Yield_Await() IForDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForDeclaration_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_Await_ReturnContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *IterationStatement_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatement_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterationStatement_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterIterationStatement_Yield_Await_Return(s)
	}
}

func (s *IterationStatement_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitIterationStatement_Yield_Await_Return(s)
	}
}

func (s *IterationStatement_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitIterationStatement_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) IterationStatement_Yield_Await_Return() (localctx IIterationStatement_Yield_Await_ReturnContext) {
	localctx = NewIterationStatement_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 824, ECMAScriptParserRULE_iterationStatement_Yield_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6177)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 515, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6067)
			p.Match(ECMAScriptParserT__64)
		}
		{
			p.SetState(6068)
			p.Statement_Yield_Await_Return()
		}
		{
			p.SetState(6069)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(6070)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6071)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(6072)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6073)
			p.Match(ECMAScriptParserT__58)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6075)
			p.Match(ECMAScriptParserT__65)
		}
		{
			p.SetState(6076)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6077)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(6078)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6079)
			p.Statement_Yield_Await_Return()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6081)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6082)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(6083)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		p.SetState(6085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(6084)
				p.expression_Yield_Await(0)
			}

		}
		{
			p.SetState(6087)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(6089)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(6088)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(6091)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(6093)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(6092)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(6095)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6096)
			p.Statement_Yield_Await_Return()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6097)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6098)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6099)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(6100)
			p.variableDeclarationList_Yield_Await(0)
		}
		{
			p.SetState(6101)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(6103)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(6102)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(6105)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(6107)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(6106)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(6109)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6110)
			p.Statement_Yield_Await_Return()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6112)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6113)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6114)
			p.LexicalDeclaration_Yield_Await()
		}
		p.SetState(6116)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(6115)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(6118)
			p.Match(ECMAScriptParserT__58)
		}
		p.SetState(6120)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
			{
				p.SetState(6119)
				p.expression_In_Yield_Await(0)
			}

		}
		{
			p.SetState(6122)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6123)
			p.Statement_Yield_Await_Return()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6125)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6126)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(6127)

		if !(negativeLookahead("let [")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let [\") ", ""))
		}
		{
			p.SetState(6128)
			p.LeftHandSideExpression_Yield_Await()
		}
		{
			p.SetState(6129)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(6130)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(6131)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6132)
			p.Statement_Yield_Await_Return()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6134)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6135)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6136)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(6137)
			p.ForBinding_Yield_Await()
		}
		{
			p.SetState(6138)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(6139)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(6140)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6141)
			p.Statement_Yield_Await_Return()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6143)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6144)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6145)
			p.ForDeclaration_Yield_Await()
		}
		{
			p.SetState(6146)
			p.Match(ECMAScriptParserT__35)
		}
		{
			p.SetState(6147)
			p.expression_In_Yield_Await(0)
		}
		{
			p.SetState(6148)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6149)
			p.Statement_Yield_Await_Return()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6151)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6152)
			p.Match(ECMAScriptParserT__4)
		}
		p.SetState(6153)

		if !(negativeLookahead("let")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"let\") ", ""))
		}
		{
			p.SetState(6154)
			p.LeftHandSideExpression_Yield_Await()
		}
		{
			p.SetState(6155)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(6156)
			p.AssignmentExpression_In_Yield_Await()
		}
		{
			p.SetState(6157)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6158)
			p.Statement_Yield_Await_Return()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6160)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6161)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6162)
			p.Match(ECMAScriptParserT__61)
		}
		{
			p.SetState(6163)
			p.ForBinding_Yield_Await()
		}
		{
			p.SetState(6164)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(6165)
			p.AssignmentExpression_In_Yield_Await()
		}
		{
			p.SetState(6166)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6167)
			p.Statement_Yield_Await_Return()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6169)
			p.Match(ECMAScriptParserT__66)
		}
		{
			p.SetState(6170)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(6171)
			p.ForDeclaration_Yield_Await()
		}
		{
			p.SetState(6172)
			p.Match(ECMAScriptParserT__67)
		}
		{
			p.SetState(6173)
			p.AssignmentExpression_In_Yield_Await()
		}
		{
			p.SetState(6174)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(6175)
			p.Statement_Yield_Await_Return()
		}

	}

	return localctx
}

// IForDeclarationContext is an interface to support dynamic dispatch.
type IForDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForDeclarationContext differentiates from other interfaces.
	IsForDeclarationContext()
}

type ForDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForDeclarationContext() *ForDeclarationContext {
	var p = new(ForDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_forDeclaration
	return p
}

func (*ForDeclarationContext) IsForDeclarationContext() {}

func NewForDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForDeclarationContext {
	var p = new(ForDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_forDeclaration

	return p
}

func (s *ForDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ForDeclarationContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *ForDeclarationContext) ForBinding() IForBindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBindingContext)
}

func (s *ForDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterForDeclaration(s)
	}
}

func (s *ForDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitForDeclaration(s)
	}
}

func (s *ForDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitForDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ForDeclaration() (localctx IForDeclarationContext) {
	localctx = NewForDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 826, ECMAScriptParserRULE_forDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6179)
		p.LetOrConst()
	}
	{
		p.SetState(6180)
		p.ForBinding()
	}

	return localctx
}

// IForDeclaration_YieldContext is an interface to support dynamic dispatch.
type IForDeclaration_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForDeclaration_YieldContext differentiates from other interfaces.
	IsForDeclaration_YieldContext()
}

type ForDeclaration_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForDeclaration_YieldContext() *ForDeclaration_YieldContext {
	var p = new(ForDeclaration_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_forDeclaration_Yield
	return p
}

func (*ForDeclaration_YieldContext) IsForDeclaration_YieldContext() {}

func NewForDeclaration_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForDeclaration_YieldContext {
	var p = new(ForDeclaration_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_forDeclaration_Yield

	return p
}

func (s *ForDeclaration_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ForDeclaration_YieldContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *ForDeclaration_YieldContext) ForBinding_Yield() IForBinding_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBinding_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBinding_YieldContext)
}

func (s *ForDeclaration_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForDeclaration_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForDeclaration_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterForDeclaration_Yield(s)
	}
}

func (s *ForDeclaration_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitForDeclaration_Yield(s)
	}
}

func (s *ForDeclaration_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitForDeclaration_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ForDeclaration_Yield() (localctx IForDeclaration_YieldContext) {
	localctx = NewForDeclaration_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 828, ECMAScriptParserRULE_forDeclaration_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6182)
		p.LetOrConst()
	}
	{
		p.SetState(6183)
		p.ForBinding_Yield()
	}

	return localctx
}

// IForDeclaration_AwaitContext is an interface to support dynamic dispatch.
type IForDeclaration_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForDeclaration_AwaitContext differentiates from other interfaces.
	IsForDeclaration_AwaitContext()
}

type ForDeclaration_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForDeclaration_AwaitContext() *ForDeclaration_AwaitContext {
	var p = new(ForDeclaration_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_forDeclaration_Await
	return p
}

func (*ForDeclaration_AwaitContext) IsForDeclaration_AwaitContext() {}

func NewForDeclaration_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForDeclaration_AwaitContext {
	var p = new(ForDeclaration_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_forDeclaration_Await

	return p
}

func (s *ForDeclaration_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ForDeclaration_AwaitContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *ForDeclaration_AwaitContext) ForBinding_Await() IForBinding_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBinding_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBinding_AwaitContext)
}

func (s *ForDeclaration_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForDeclaration_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForDeclaration_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterForDeclaration_Await(s)
	}
}

func (s *ForDeclaration_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitForDeclaration_Await(s)
	}
}

func (s *ForDeclaration_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitForDeclaration_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ForDeclaration_Await() (localctx IForDeclaration_AwaitContext) {
	localctx = NewForDeclaration_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 830, ECMAScriptParserRULE_forDeclaration_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6185)
		p.LetOrConst()
	}
	{
		p.SetState(6186)
		p.ForBinding_Await()
	}

	return localctx
}

// IForDeclaration_Yield_AwaitContext is an interface to support dynamic dispatch.
type IForDeclaration_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForDeclaration_Yield_AwaitContext differentiates from other interfaces.
	IsForDeclaration_Yield_AwaitContext()
}

type ForDeclaration_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForDeclaration_Yield_AwaitContext() *ForDeclaration_Yield_AwaitContext {
	var p = new(ForDeclaration_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_forDeclaration_Yield_Await
	return p
}

func (*ForDeclaration_Yield_AwaitContext) IsForDeclaration_Yield_AwaitContext() {}

func NewForDeclaration_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForDeclaration_Yield_AwaitContext {
	var p = new(ForDeclaration_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_forDeclaration_Yield_Await

	return p
}

func (s *ForDeclaration_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ForDeclaration_Yield_AwaitContext) LetOrConst() ILetOrConstContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILetOrConstContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILetOrConstContext)
}

func (s *ForDeclaration_Yield_AwaitContext) ForBinding_Yield_Await() IForBinding_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForBinding_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForBinding_Yield_AwaitContext)
}

func (s *ForDeclaration_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForDeclaration_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForDeclaration_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterForDeclaration_Yield_Await(s)
	}
}

func (s *ForDeclaration_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitForDeclaration_Yield_Await(s)
	}
}

func (s *ForDeclaration_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitForDeclaration_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ForDeclaration_Yield_Await() (localctx IForDeclaration_Yield_AwaitContext) {
	localctx = NewForDeclaration_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 832, ECMAScriptParserRULE_forDeclaration_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6188)
		p.LetOrConst()
	}
	{
		p.SetState(6189)
		p.ForBinding_Yield_Await()
	}

	return localctx
}

// IForBindingContext is an interface to support dynamic dispatch.
type IForBindingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForBindingContext differentiates from other interfaces.
	IsForBindingContext()
}

type ForBindingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForBindingContext() *ForBindingContext {
	var p = new(ForBindingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_forBinding
	return p
}

func (*ForBindingContext) IsForBindingContext() {}

func NewForBindingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForBindingContext {
	var p = new(ForBindingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_forBinding

	return p
}

func (s *ForBindingContext) GetParser() antlr.Parser { return s.parser }

func (s *ForBindingContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *ForBindingContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *ForBindingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForBindingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForBindingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterForBinding(s)
	}
}

func (s *ForBindingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitForBinding(s)
	}
}

func (s *ForBindingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitForBinding(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ForBinding() (localctx IForBindingContext) {
	localctx = NewForBindingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 834, ECMAScriptParserRULE_forBinding)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6193)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6191)
			p.BindingIdentifier()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6192)
			p.BindingPattern()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IForBinding_YieldContext is an interface to support dynamic dispatch.
type IForBinding_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForBinding_YieldContext differentiates from other interfaces.
	IsForBinding_YieldContext()
}

type ForBinding_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForBinding_YieldContext() *ForBinding_YieldContext {
	var p = new(ForBinding_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_forBinding_Yield
	return p
}

func (*ForBinding_YieldContext) IsForBinding_YieldContext() {}

func NewForBinding_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForBinding_YieldContext {
	var p = new(ForBinding_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_forBinding_Yield

	return p
}

func (s *ForBinding_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ForBinding_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *ForBinding_YieldContext) BindingPattern_Yield() IBindingPattern_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_YieldContext)
}

func (s *ForBinding_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForBinding_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForBinding_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterForBinding_Yield(s)
	}
}

func (s *ForBinding_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitForBinding_Yield(s)
	}
}

func (s *ForBinding_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitForBinding_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ForBinding_Yield() (localctx IForBinding_YieldContext) {
	localctx = NewForBinding_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 836, ECMAScriptParserRULE_forBinding_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6197)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6195)
			p.BindingIdentifier_Yield()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6196)
			p.BindingPattern_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IForBinding_AwaitContext is an interface to support dynamic dispatch.
type IForBinding_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForBinding_AwaitContext differentiates from other interfaces.
	IsForBinding_AwaitContext()
}

type ForBinding_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForBinding_AwaitContext() *ForBinding_AwaitContext {
	var p = new(ForBinding_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_forBinding_Await
	return p
}

func (*ForBinding_AwaitContext) IsForBinding_AwaitContext() {}

func NewForBinding_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForBinding_AwaitContext {
	var p = new(ForBinding_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_forBinding_Await

	return p
}

func (s *ForBinding_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ForBinding_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *ForBinding_AwaitContext) BindingPattern_Await() IBindingPattern_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_AwaitContext)
}

func (s *ForBinding_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForBinding_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForBinding_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterForBinding_Await(s)
	}
}

func (s *ForBinding_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitForBinding_Await(s)
	}
}

func (s *ForBinding_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitForBinding_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ForBinding_Await() (localctx IForBinding_AwaitContext) {
	localctx = NewForBinding_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 838, ECMAScriptParserRULE_forBinding_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6201)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6199)
			p.BindingIdentifier_Await()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6200)
			p.BindingPattern_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IForBinding_Yield_AwaitContext is an interface to support dynamic dispatch.
type IForBinding_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForBinding_Yield_AwaitContext differentiates from other interfaces.
	IsForBinding_Yield_AwaitContext()
}

type ForBinding_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForBinding_Yield_AwaitContext() *ForBinding_Yield_AwaitContext {
	var p = new(ForBinding_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_forBinding_Yield_Await
	return p
}

func (*ForBinding_Yield_AwaitContext) IsForBinding_Yield_AwaitContext() {}

func NewForBinding_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForBinding_Yield_AwaitContext {
	var p = new(ForBinding_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_forBinding_Yield_Await

	return p
}

func (s *ForBinding_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ForBinding_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *ForBinding_Yield_AwaitContext) BindingPattern_Yield_Await() IBindingPattern_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_Yield_AwaitContext)
}

func (s *ForBinding_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForBinding_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForBinding_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterForBinding_Yield_Await(s)
	}
}

func (s *ForBinding_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitForBinding_Yield_Await(s)
	}
}

func (s *ForBinding_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitForBinding_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ForBinding_Yield_Await() (localctx IForBinding_Yield_AwaitContext) {
	localctx = NewForBinding_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 840, ECMAScriptParserRULE_forBinding_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6205)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6203)
			p.BindingIdentifier_Yield_Await()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6204)
			p.BindingPattern_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_continueStatement
	return p
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterContinueStatement(s)
	}
}

func (s *ContinueStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitContinueStatement(s)
	}
}

func (s *ContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ContinueStatement() (localctx IContinueStatementContext) {
	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 842, ECMAScriptParserRULE_continueStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6207)
		p.Match(ECMAScriptParserT__68)
	}
	p.SetState(6209)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(6208)
			p.LabelIdentifier()
		}

	}
	{
		p.SetState(6211)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IContinueStatement_YieldContext is an interface to support dynamic dispatch.
type IContinueStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatement_YieldContext differentiates from other interfaces.
	IsContinueStatement_YieldContext()
}

type ContinueStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatement_YieldContext() *ContinueStatement_YieldContext {
	var p = new(ContinueStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_continueStatement_Yield
	return p
}

func (*ContinueStatement_YieldContext) IsContinueStatement_YieldContext() {}

func NewContinueStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatement_YieldContext {
	var p = new(ContinueStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_continueStatement_Yield

	return p
}

func (s *ContinueStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatement_YieldContext) LabelIdentifier_Yield() ILabelIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_YieldContext)
}

func (s *ContinueStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterContinueStatement_Yield(s)
	}
}

func (s *ContinueStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitContinueStatement_Yield(s)
	}
}

func (s *ContinueStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitContinueStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ContinueStatement_Yield() (localctx IContinueStatement_YieldContext) {
	localctx = NewContinueStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 844, ECMAScriptParserRULE_continueStatement_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6213)
		p.Match(ECMAScriptParserT__68)
	}
	p.SetState(6215)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(6214)
			p.LabelIdentifier_Yield()
		}

	}
	{
		p.SetState(6217)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IContinueStatement_AwaitContext is an interface to support dynamic dispatch.
type IContinueStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatement_AwaitContext differentiates from other interfaces.
	IsContinueStatement_AwaitContext()
}

type ContinueStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatement_AwaitContext() *ContinueStatement_AwaitContext {
	var p = new(ContinueStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_continueStatement_Await
	return p
}

func (*ContinueStatement_AwaitContext) IsContinueStatement_AwaitContext() {}

func NewContinueStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatement_AwaitContext {
	var p = new(ContinueStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_continueStatement_Await

	return p
}

func (s *ContinueStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatement_AwaitContext) LabelIdentifier_Await() ILabelIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_AwaitContext)
}

func (s *ContinueStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterContinueStatement_Await(s)
	}
}

func (s *ContinueStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitContinueStatement_Await(s)
	}
}

func (s *ContinueStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitContinueStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ContinueStatement_Await() (localctx IContinueStatement_AwaitContext) {
	localctx = NewContinueStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 846, ECMAScriptParserRULE_continueStatement_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6219)
		p.Match(ECMAScriptParserT__68)
	}
	p.SetState(6221)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(6220)
			p.LabelIdentifier_Await()
		}

	}
	{
		p.SetState(6223)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IContinueStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IContinueStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatement_Yield_AwaitContext differentiates from other interfaces.
	IsContinueStatement_Yield_AwaitContext()
}

type ContinueStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatement_Yield_AwaitContext() *ContinueStatement_Yield_AwaitContext {
	var p = new(ContinueStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_continueStatement_Yield_Await
	return p
}

func (*ContinueStatement_Yield_AwaitContext) IsContinueStatement_Yield_AwaitContext() {}

func NewContinueStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatement_Yield_AwaitContext {
	var p = new(ContinueStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_continueStatement_Yield_Await

	return p
}

func (s *ContinueStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatement_Yield_AwaitContext) LabelIdentifier_Yield_Await() ILabelIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_Yield_AwaitContext)
}

func (s *ContinueStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterContinueStatement_Yield_Await(s)
	}
}

func (s *ContinueStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitContinueStatement_Yield_Await(s)
	}
}

func (s *ContinueStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitContinueStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ContinueStatement_Yield_Await() (localctx IContinueStatement_Yield_AwaitContext) {
	localctx = NewContinueStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 848, ECMAScriptParserRULE_continueStatement_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6225)
		p.Match(ECMAScriptParserT__68)
	}
	p.SetState(6227)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserIdentifier {
		{
			p.SetState(6226)
			p.LabelIdentifier_Yield_Await()
		}

	}
	{
		p.SetState(6229)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakStatement
	return p
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakStatement(s)
	}
}

func (s *BreakStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakStatement(s)
	}
}

func (s *BreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakStatement() (localctx IBreakStatementContext) {
	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 850, ECMAScriptParserRULE_breakStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6231)
		p.Match(ECMAScriptParserT__69)
	}
	p.SetState(6233)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(6232)
			p.LabelIdentifier()
		}

	}
	{
		p.SetState(6235)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IBreakStatement_YieldContext is an interface to support dynamic dispatch.
type IBreakStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatement_YieldContext differentiates from other interfaces.
	IsBreakStatement_YieldContext()
}

type BreakStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatement_YieldContext() *BreakStatement_YieldContext {
	var p = new(BreakStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakStatement_Yield
	return p
}

func (*BreakStatement_YieldContext) IsBreakStatement_YieldContext() {}

func NewBreakStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatement_YieldContext {
	var p = new(BreakStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakStatement_Yield

	return p
}

func (s *BreakStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatement_YieldContext) LabelIdentifier_Yield() ILabelIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_YieldContext)
}

func (s *BreakStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakStatement_Yield(s)
	}
}

func (s *BreakStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakStatement_Yield(s)
	}
}

func (s *BreakStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakStatement_Yield() (localctx IBreakStatement_YieldContext) {
	localctx = NewBreakStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 852, ECMAScriptParserRULE_breakStatement_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6237)
		p.Match(ECMAScriptParserT__69)
	}
	p.SetState(6239)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(6238)
			p.LabelIdentifier_Yield()
		}

	}
	{
		p.SetState(6241)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IBreakStatement_AwaitContext is an interface to support dynamic dispatch.
type IBreakStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatement_AwaitContext differentiates from other interfaces.
	IsBreakStatement_AwaitContext()
}

type BreakStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatement_AwaitContext() *BreakStatement_AwaitContext {
	var p = new(BreakStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakStatement_Await
	return p
}

func (*BreakStatement_AwaitContext) IsBreakStatement_AwaitContext() {}

func NewBreakStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatement_AwaitContext {
	var p = new(BreakStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakStatement_Await

	return p
}

func (s *BreakStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatement_AwaitContext) LabelIdentifier_Await() ILabelIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_AwaitContext)
}

func (s *BreakStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakStatement_Await(s)
	}
}

func (s *BreakStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakStatement_Await(s)
	}
}

func (s *BreakStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakStatement_Await() (localctx IBreakStatement_AwaitContext) {
	localctx = NewBreakStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 854, ECMAScriptParserRULE_breakStatement_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6243)
		p.Match(ECMAScriptParserT__69)
	}
	p.SetState(6245)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(6244)
			p.LabelIdentifier_Await()
		}

	}
	{
		p.SetState(6247)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IBreakStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IBreakStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatement_Yield_AwaitContext differentiates from other interfaces.
	IsBreakStatement_Yield_AwaitContext()
}

type BreakStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatement_Yield_AwaitContext() *BreakStatement_Yield_AwaitContext {
	var p = new(BreakStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_breakStatement_Yield_Await
	return p
}

func (*BreakStatement_Yield_AwaitContext) IsBreakStatement_Yield_AwaitContext() {}

func NewBreakStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatement_Yield_AwaitContext {
	var p = new(BreakStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_breakStatement_Yield_Await

	return p
}

func (s *BreakStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatement_Yield_AwaitContext) LabelIdentifier_Yield_Await() ILabelIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_Yield_AwaitContext)
}

func (s *BreakStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterBreakStatement_Yield_Await(s)
	}
}

func (s *BreakStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitBreakStatement_Yield_Await(s)
	}
}

func (s *BreakStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitBreakStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) BreakStatement_Yield_Await() (localctx IBreakStatement_Yield_AwaitContext) {
	localctx = NewBreakStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 856, ECMAScriptParserRULE_breakStatement_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6249)
		p.Match(ECMAScriptParserT__69)
	}
	p.SetState(6251)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserIdentifier {
		{
			p.SetState(6250)
			p.LabelIdentifier_Yield_Await()
		}

	}
	{
		p.SetState(6253)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterReturnStatement(s)
	}
}

func (s *ReturnStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitReturnStatement(s)
	}
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 858, ECMAScriptParserRULE_returnStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6255)
		p.Match(ECMAScriptParserT__70)
	}
	p.SetState(6257)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
		{
			p.SetState(6256)
			p.expression_In(0)
		}

	}
	{
		p.SetState(6259)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IReturnStatement_YieldContext is an interface to support dynamic dispatch.
type IReturnStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatement_YieldContext differentiates from other interfaces.
	IsReturnStatement_YieldContext()
}

type ReturnStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatement_YieldContext() *ReturnStatement_YieldContext {
	var p = new(ReturnStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_returnStatement_Yield
	return p
}

func (*ReturnStatement_YieldContext) IsReturnStatement_YieldContext() {}

func NewReturnStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatement_YieldContext {
	var p = new(ReturnStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_returnStatement_Yield

	return p
}

func (s *ReturnStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatement_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *ReturnStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterReturnStatement_Yield(s)
	}
}

func (s *ReturnStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitReturnStatement_Yield(s)
	}
}

func (s *ReturnStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitReturnStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ReturnStatement_Yield() (localctx IReturnStatement_YieldContext) {
	localctx = NewReturnStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 860, ECMAScriptParserRULE_returnStatement_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6261)
		p.Match(ECMAScriptParserT__70)
	}
	p.SetState(6263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
		{
			p.SetState(6262)
			p.expression_In_Yield(0)
		}

	}
	{
		p.SetState(6265)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IReturnStatement_AwaitContext is an interface to support dynamic dispatch.
type IReturnStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatement_AwaitContext differentiates from other interfaces.
	IsReturnStatement_AwaitContext()
}

type ReturnStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatement_AwaitContext() *ReturnStatement_AwaitContext {
	var p = new(ReturnStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_returnStatement_Await
	return p
}

func (*ReturnStatement_AwaitContext) IsReturnStatement_AwaitContext() {}

func NewReturnStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatement_AwaitContext {
	var p = new(ReturnStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_returnStatement_Await

	return p
}

func (s *ReturnStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatement_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *ReturnStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterReturnStatement_Await(s)
	}
}

func (s *ReturnStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitReturnStatement_Await(s)
	}
}

func (s *ReturnStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitReturnStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ReturnStatement_Await() (localctx IReturnStatement_AwaitContext) {
	localctx = NewReturnStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 862, ECMAScriptParserRULE_returnStatement_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6267)
		p.Match(ECMAScriptParserT__70)
	}
	p.SetState(6269)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
		{
			p.SetState(6268)
			p.expression_In_Await(0)
		}

	}
	{
		p.SetState(6271)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IReturnStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IReturnStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatement_Yield_AwaitContext differentiates from other interfaces.
	IsReturnStatement_Yield_AwaitContext()
}

type ReturnStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatement_Yield_AwaitContext() *ReturnStatement_Yield_AwaitContext {
	var p = new(ReturnStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_returnStatement_Yield_Await
	return p
}

func (*ReturnStatement_Yield_AwaitContext) IsReturnStatement_Yield_AwaitContext() {}

func NewReturnStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatement_Yield_AwaitContext {
	var p = new(ReturnStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_returnStatement_Yield_Await

	return p
}

func (s *ReturnStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatement_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *ReturnStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterReturnStatement_Yield_Await(s)
	}
}

func (s *ReturnStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitReturnStatement_Yield_Await(s)
	}
}

func (s *ReturnStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitReturnStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ReturnStatement_Yield_Await() (localctx IReturnStatement_Yield_AwaitContext) {
	localctx = NewReturnStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 864, ECMAScriptParserRULE_returnStatement_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6273)
		p.Match(ECMAScriptParserT__70)
	}
	p.SetState(6275)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(ECMAScriptParserT__80-81))|(1<<(ECMAScriptParserT__85-81))|(1<<(ECMAScriptParserT__86-81))|(1<<(ECMAScriptParserNullLiteral-81))|(1<<(ECMAScriptParserBooleanLiteral-81))|(1<<(ECMAScriptParserNumericLiteral-81)))) != 0) || (((_la-115)&-(0x1f+1)) == 0 && ((1<<uint((_la-115)))&((1<<(ECMAScriptParserStringLiteral-115))|(1<<(ECMAScriptParserNoSubstitutionTemplate-115))|(1<<(ECMAScriptParserTemplateHead-115))|(1<<(ECMAScriptParserIdentifier-115)))) != 0) {
		{
			p.SetState(6274)
			p.expression_In_Yield_Await(0)
		}

	}
	{
		p.SetState(6277)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IWithStatementContext is an interface to support dynamic dispatch.
type IWithStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithStatementContext differentiates from other interfaces.
	IsWithStatementContext()
}

type WithStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithStatementContext() *WithStatementContext {
	var p = new(WithStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_withStatement
	return p
}

func (*WithStatementContext) IsWithStatementContext() {}

func NewWithStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithStatementContext {
	var p = new(WithStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_withStatement

	return p
}

func (s *WithStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WithStatementContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *WithStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *WithStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterWithStatement(s)
	}
}

func (s *WithStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitWithStatement(s)
	}
}

func (s *WithStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitWithStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) WithStatement() (localctx IWithStatementContext) {
	localctx = NewWithStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 866, ECMAScriptParserRULE_withStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6279)
		p.Match(ECMAScriptParserT__71)
	}
	{
		p.SetState(6280)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6281)
		p.expression_In(0)
	}
	{
		p.SetState(6282)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6283)
		p.Statement()
	}

	return localctx
}

// IWithStatement_YieldContext is an interface to support dynamic dispatch.
type IWithStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithStatement_YieldContext differentiates from other interfaces.
	IsWithStatement_YieldContext()
}

type WithStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithStatement_YieldContext() *WithStatement_YieldContext {
	var p = new(WithStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Yield
	return p
}

func (*WithStatement_YieldContext) IsWithStatement_YieldContext() {}

func NewWithStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithStatement_YieldContext {
	var p = new(WithStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Yield

	return p
}

func (s *WithStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *WithStatement_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *WithStatement_YieldContext) Statement_Yield() IStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_YieldContext)
}

func (s *WithStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterWithStatement_Yield(s)
	}
}

func (s *WithStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitWithStatement_Yield(s)
	}
}

func (s *WithStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitWithStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) WithStatement_Yield() (localctx IWithStatement_YieldContext) {
	localctx = NewWithStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 868, ECMAScriptParserRULE_withStatement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6285)
		p.Match(ECMAScriptParserT__71)
	}
	{
		p.SetState(6286)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6287)
		p.expression_In_Yield(0)
	}
	{
		p.SetState(6288)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6289)
		p.Statement_Yield()
	}

	return localctx
}

// IWithStatement_AwaitContext is an interface to support dynamic dispatch.
type IWithStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithStatement_AwaitContext differentiates from other interfaces.
	IsWithStatement_AwaitContext()
}

type WithStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithStatement_AwaitContext() *WithStatement_AwaitContext {
	var p = new(WithStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Await
	return p
}

func (*WithStatement_AwaitContext) IsWithStatement_AwaitContext() {}

func NewWithStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithStatement_AwaitContext {
	var p = new(WithStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Await

	return p
}

func (s *WithStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *WithStatement_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *WithStatement_AwaitContext) Statement_Await() IStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_AwaitContext)
}

func (s *WithStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterWithStatement_Await(s)
	}
}

func (s *WithStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitWithStatement_Await(s)
	}
}

func (s *WithStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitWithStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) WithStatement_Await() (localctx IWithStatement_AwaitContext) {
	localctx = NewWithStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 870, ECMAScriptParserRULE_withStatement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6291)
		p.Match(ECMAScriptParserT__71)
	}
	{
		p.SetState(6292)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6293)
		p.expression_In_Await(0)
	}
	{
		p.SetState(6294)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6295)
		p.Statement_Await()
	}

	return localctx
}

// IWithStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IWithStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithStatement_Yield_AwaitContext differentiates from other interfaces.
	IsWithStatement_Yield_AwaitContext()
}

type WithStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithStatement_Yield_AwaitContext() *WithStatement_Yield_AwaitContext {
	var p = new(WithStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Yield_Await
	return p
}

func (*WithStatement_Yield_AwaitContext) IsWithStatement_Yield_AwaitContext() {}

func NewWithStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithStatement_Yield_AwaitContext {
	var p = new(WithStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Yield_Await

	return p
}

func (s *WithStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *WithStatement_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *WithStatement_Yield_AwaitContext) Statement_Yield_Await() IStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_AwaitContext)
}

func (s *WithStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterWithStatement_Yield_Await(s)
	}
}

func (s *WithStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitWithStatement_Yield_Await(s)
	}
}

func (s *WithStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitWithStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) WithStatement_Yield_Await() (localctx IWithStatement_Yield_AwaitContext) {
	localctx = NewWithStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 872, ECMAScriptParserRULE_withStatement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6297)
		p.Match(ECMAScriptParserT__71)
	}
	{
		p.SetState(6298)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6299)
		p.expression_In_Yield_Await(0)
	}
	{
		p.SetState(6300)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6301)
		p.Statement_Yield_Await()
	}

	return localctx
}

// IWithStatement_ReturnContext is an interface to support dynamic dispatch.
type IWithStatement_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithStatement_ReturnContext differentiates from other interfaces.
	IsWithStatement_ReturnContext()
}

type WithStatement_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithStatement_ReturnContext() *WithStatement_ReturnContext {
	var p = new(WithStatement_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Return
	return p
}

func (*WithStatement_ReturnContext) IsWithStatement_ReturnContext() {}

func NewWithStatement_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithStatement_ReturnContext {
	var p = new(WithStatement_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Return

	return p
}

func (s *WithStatement_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *WithStatement_ReturnContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *WithStatement_ReturnContext) Statement_Return() IStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_ReturnContext)
}

func (s *WithStatement_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithStatement_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithStatement_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterWithStatement_Return(s)
	}
}

func (s *WithStatement_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitWithStatement_Return(s)
	}
}

func (s *WithStatement_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitWithStatement_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) WithStatement_Return() (localctx IWithStatement_ReturnContext) {
	localctx = NewWithStatement_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 874, ECMAScriptParserRULE_withStatement_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6303)
		p.Match(ECMAScriptParserT__71)
	}
	{
		p.SetState(6304)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6305)
		p.expression_In(0)
	}
	{
		p.SetState(6306)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6307)
		p.Statement_Return()
	}

	return localctx
}

// IWithStatement_Yield_ReturnContext is an interface to support dynamic dispatch.
type IWithStatement_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithStatement_Yield_ReturnContext differentiates from other interfaces.
	IsWithStatement_Yield_ReturnContext()
}

type WithStatement_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithStatement_Yield_ReturnContext() *WithStatement_Yield_ReturnContext {
	var p = new(WithStatement_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Yield_Return
	return p
}

func (*WithStatement_Yield_ReturnContext) IsWithStatement_Yield_ReturnContext() {}

func NewWithStatement_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithStatement_Yield_ReturnContext {
	var p = new(WithStatement_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Yield_Return

	return p
}

func (s *WithStatement_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *WithStatement_Yield_ReturnContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *WithStatement_Yield_ReturnContext) Statement_Yield_Return() IStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_ReturnContext)
}

func (s *WithStatement_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithStatement_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithStatement_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterWithStatement_Yield_Return(s)
	}
}

func (s *WithStatement_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitWithStatement_Yield_Return(s)
	}
}

func (s *WithStatement_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitWithStatement_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) WithStatement_Yield_Return() (localctx IWithStatement_Yield_ReturnContext) {
	localctx = NewWithStatement_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 876, ECMAScriptParserRULE_withStatement_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6309)
		p.Match(ECMAScriptParserT__71)
	}
	{
		p.SetState(6310)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6311)
		p.expression_In_Yield(0)
	}
	{
		p.SetState(6312)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6313)
		p.Statement_Yield_Return()
	}

	return localctx
}

// IWithStatement_Await_ReturnContext is an interface to support dynamic dispatch.
type IWithStatement_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithStatement_Await_ReturnContext differentiates from other interfaces.
	IsWithStatement_Await_ReturnContext()
}

type WithStatement_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithStatement_Await_ReturnContext() *WithStatement_Await_ReturnContext {
	var p = new(WithStatement_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Await_Return
	return p
}

func (*WithStatement_Await_ReturnContext) IsWithStatement_Await_ReturnContext() {}

func NewWithStatement_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithStatement_Await_ReturnContext {
	var p = new(WithStatement_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Await_Return

	return p
}

func (s *WithStatement_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *WithStatement_Await_ReturnContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *WithStatement_Await_ReturnContext) Statement_Await_Return() IStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Await_ReturnContext)
}

func (s *WithStatement_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithStatement_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithStatement_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterWithStatement_Await_Return(s)
	}
}

func (s *WithStatement_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitWithStatement_Await_Return(s)
	}
}

func (s *WithStatement_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitWithStatement_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) WithStatement_Await_Return() (localctx IWithStatement_Await_ReturnContext) {
	localctx = NewWithStatement_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 878, ECMAScriptParserRULE_withStatement_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6315)
		p.Match(ECMAScriptParserT__71)
	}
	{
		p.SetState(6316)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6317)
		p.expression_In_Await(0)
	}
	{
		p.SetState(6318)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6319)
		p.Statement_Await_Return()
	}

	return localctx
}

// IWithStatement_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type IWithStatement_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithStatement_Yield_Await_ReturnContext differentiates from other interfaces.
	IsWithStatement_Yield_Await_ReturnContext()
}

type WithStatement_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithStatement_Yield_Await_ReturnContext() *WithStatement_Yield_Await_ReturnContext {
	var p = new(WithStatement_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Yield_Await_Return
	return p
}

func (*WithStatement_Yield_Await_ReturnContext) IsWithStatement_Yield_Await_ReturnContext() {}

func NewWithStatement_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithStatement_Yield_Await_ReturnContext {
	var p = new(WithStatement_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_withStatement_Yield_Await_Return

	return p
}

func (s *WithStatement_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *WithStatement_Yield_Await_ReturnContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *WithStatement_Yield_Await_ReturnContext) Statement_Yield_Await_Return() IStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_Await_ReturnContext)
}

func (s *WithStatement_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithStatement_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithStatement_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterWithStatement_Yield_Await_Return(s)
	}
}

func (s *WithStatement_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitWithStatement_Yield_Await_Return(s)
	}
}

func (s *WithStatement_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitWithStatement_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) WithStatement_Yield_Await_Return() (localctx IWithStatement_Yield_Await_ReturnContext) {
	localctx = NewWithStatement_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 880, ECMAScriptParserRULE_withStatement_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6321)
		p.Match(ECMAScriptParserT__71)
	}
	{
		p.SetState(6322)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6323)
		p.expression_In_Yield_Await(0)
	}
	{
		p.SetState(6324)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6325)
		p.Statement_Yield_Await_Return()
	}

	return localctx
}

// ISwitchStatementContext is an interface to support dynamic dispatch.
type ISwitchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStatementContext differentiates from other interfaces.
	IsSwitchStatementContext()
}

type SwitchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatementContext() *SwitchStatementContext {
	var p = new(SwitchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_switchStatement
	return p
}

func (*SwitchStatementContext) IsSwitchStatementContext() {}

func NewSwitchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatementContext {
	var p = new(SwitchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_switchStatement

	return p
}

func (s *SwitchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatementContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *SwitchStatementContext) CaseBlock() ICaseBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseBlockContext)
}

func (s *SwitchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSwitchStatement(s)
	}
}

func (s *SwitchStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSwitchStatement(s)
	}
}

func (s *SwitchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSwitchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SwitchStatement() (localctx ISwitchStatementContext) {
	localctx = NewSwitchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 882, ECMAScriptParserRULE_switchStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6327)
		p.Match(ECMAScriptParserT__72)
	}
	{
		p.SetState(6328)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6329)
		p.expression_In(0)
	}
	{
		p.SetState(6330)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6331)
		p.CaseBlock()
	}

	return localctx
}

// ISwitchStatement_YieldContext is an interface to support dynamic dispatch.
type ISwitchStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStatement_YieldContext differentiates from other interfaces.
	IsSwitchStatement_YieldContext()
}

type SwitchStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatement_YieldContext() *SwitchStatement_YieldContext {
	var p = new(SwitchStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Yield
	return p
}

func (*SwitchStatement_YieldContext) IsSwitchStatement_YieldContext() {}

func NewSwitchStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatement_YieldContext {
	var p = new(SwitchStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Yield

	return p
}

func (s *SwitchStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatement_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *SwitchStatement_YieldContext) CaseBlock_Yield() ICaseBlock_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseBlock_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseBlock_YieldContext)
}

func (s *SwitchStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSwitchStatement_Yield(s)
	}
}

func (s *SwitchStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSwitchStatement_Yield(s)
	}
}

func (s *SwitchStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSwitchStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SwitchStatement_Yield() (localctx ISwitchStatement_YieldContext) {
	localctx = NewSwitchStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 884, ECMAScriptParserRULE_switchStatement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6333)
		p.Match(ECMAScriptParserT__72)
	}
	{
		p.SetState(6334)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6335)
		p.expression_In_Yield(0)
	}
	{
		p.SetState(6336)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6337)
		p.CaseBlock_Yield()
	}

	return localctx
}

// ISwitchStatement_AwaitContext is an interface to support dynamic dispatch.
type ISwitchStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStatement_AwaitContext differentiates from other interfaces.
	IsSwitchStatement_AwaitContext()
}

type SwitchStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatement_AwaitContext() *SwitchStatement_AwaitContext {
	var p = new(SwitchStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Await
	return p
}

func (*SwitchStatement_AwaitContext) IsSwitchStatement_AwaitContext() {}

func NewSwitchStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatement_AwaitContext {
	var p = new(SwitchStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Await

	return p
}

func (s *SwitchStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatement_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *SwitchStatement_AwaitContext) CaseBlock_Await() ICaseBlock_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseBlock_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseBlock_AwaitContext)
}

func (s *SwitchStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSwitchStatement_Await(s)
	}
}

func (s *SwitchStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSwitchStatement_Await(s)
	}
}

func (s *SwitchStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSwitchStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SwitchStatement_Await() (localctx ISwitchStatement_AwaitContext) {
	localctx = NewSwitchStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 886, ECMAScriptParserRULE_switchStatement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6339)
		p.Match(ECMAScriptParserT__72)
	}
	{
		p.SetState(6340)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6341)
		p.expression_In_Await(0)
	}
	{
		p.SetState(6342)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6343)
		p.CaseBlock_Await()
	}

	return localctx
}

// ISwitchStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type ISwitchStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStatement_Yield_AwaitContext differentiates from other interfaces.
	IsSwitchStatement_Yield_AwaitContext()
}

type SwitchStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatement_Yield_AwaitContext() *SwitchStatement_Yield_AwaitContext {
	var p = new(SwitchStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Yield_Await
	return p
}

func (*SwitchStatement_Yield_AwaitContext) IsSwitchStatement_Yield_AwaitContext() {}

func NewSwitchStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatement_Yield_AwaitContext {
	var p = new(SwitchStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Yield_Await

	return p
}

func (s *SwitchStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatement_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *SwitchStatement_Yield_AwaitContext) CaseBlock_Yield_Await() ICaseBlock_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseBlock_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseBlock_Yield_AwaitContext)
}

func (s *SwitchStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSwitchStatement_Yield_Await(s)
	}
}

func (s *SwitchStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSwitchStatement_Yield_Await(s)
	}
}

func (s *SwitchStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSwitchStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SwitchStatement_Yield_Await() (localctx ISwitchStatement_Yield_AwaitContext) {
	localctx = NewSwitchStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 888, ECMAScriptParserRULE_switchStatement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6345)
		p.Match(ECMAScriptParserT__72)
	}
	{
		p.SetState(6346)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6347)
		p.expression_In_Yield_Await(0)
	}
	{
		p.SetState(6348)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6349)
		p.CaseBlock_Yield_Await()
	}

	return localctx
}

// ISwitchStatement_ReturnContext is an interface to support dynamic dispatch.
type ISwitchStatement_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStatement_ReturnContext differentiates from other interfaces.
	IsSwitchStatement_ReturnContext()
}

type SwitchStatement_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatement_ReturnContext() *SwitchStatement_ReturnContext {
	var p = new(SwitchStatement_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Return
	return p
}

func (*SwitchStatement_ReturnContext) IsSwitchStatement_ReturnContext() {}

func NewSwitchStatement_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatement_ReturnContext {
	var p = new(SwitchStatement_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Return

	return p
}

func (s *SwitchStatement_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatement_ReturnContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *SwitchStatement_ReturnContext) CaseBlock_Return() ICaseBlock_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseBlock_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseBlock_ReturnContext)
}

func (s *SwitchStatement_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatement_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatement_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSwitchStatement_Return(s)
	}
}

func (s *SwitchStatement_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSwitchStatement_Return(s)
	}
}

func (s *SwitchStatement_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSwitchStatement_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SwitchStatement_Return() (localctx ISwitchStatement_ReturnContext) {
	localctx = NewSwitchStatement_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 890, ECMAScriptParserRULE_switchStatement_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6351)
		p.Match(ECMAScriptParserT__72)
	}
	{
		p.SetState(6352)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6353)
		p.expression_In(0)
	}
	{
		p.SetState(6354)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6355)
		p.CaseBlock_Return()
	}

	return localctx
}

// ISwitchStatement_Yield_ReturnContext is an interface to support dynamic dispatch.
type ISwitchStatement_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStatement_Yield_ReturnContext differentiates from other interfaces.
	IsSwitchStatement_Yield_ReturnContext()
}

type SwitchStatement_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatement_Yield_ReturnContext() *SwitchStatement_Yield_ReturnContext {
	var p = new(SwitchStatement_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Yield_Return
	return p
}

func (*SwitchStatement_Yield_ReturnContext) IsSwitchStatement_Yield_ReturnContext() {}

func NewSwitchStatement_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatement_Yield_ReturnContext {
	var p = new(SwitchStatement_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Yield_Return

	return p
}

func (s *SwitchStatement_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatement_Yield_ReturnContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *SwitchStatement_Yield_ReturnContext) CaseBlock_Yield_Return() ICaseBlock_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseBlock_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseBlock_Yield_ReturnContext)
}

func (s *SwitchStatement_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatement_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatement_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSwitchStatement_Yield_Return(s)
	}
}

func (s *SwitchStatement_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSwitchStatement_Yield_Return(s)
	}
}

func (s *SwitchStatement_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSwitchStatement_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SwitchStatement_Yield_Return() (localctx ISwitchStatement_Yield_ReturnContext) {
	localctx = NewSwitchStatement_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 892, ECMAScriptParserRULE_switchStatement_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6357)
		p.Match(ECMAScriptParserT__72)
	}
	{
		p.SetState(6358)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6359)
		p.expression_In_Yield(0)
	}
	{
		p.SetState(6360)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6361)
		p.CaseBlock_Yield_Return()
	}

	return localctx
}

// ISwitchStatement_Await_ReturnContext is an interface to support dynamic dispatch.
type ISwitchStatement_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStatement_Await_ReturnContext differentiates from other interfaces.
	IsSwitchStatement_Await_ReturnContext()
}

type SwitchStatement_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatement_Await_ReturnContext() *SwitchStatement_Await_ReturnContext {
	var p = new(SwitchStatement_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Await_Return
	return p
}

func (*SwitchStatement_Await_ReturnContext) IsSwitchStatement_Await_ReturnContext() {}

func NewSwitchStatement_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatement_Await_ReturnContext {
	var p = new(SwitchStatement_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Await_Return

	return p
}

func (s *SwitchStatement_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatement_Await_ReturnContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *SwitchStatement_Await_ReturnContext) CaseBlock_Await_Return() ICaseBlock_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseBlock_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseBlock_Await_ReturnContext)
}

func (s *SwitchStatement_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatement_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatement_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSwitchStatement_Await_Return(s)
	}
}

func (s *SwitchStatement_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSwitchStatement_Await_Return(s)
	}
}

func (s *SwitchStatement_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSwitchStatement_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SwitchStatement_Await_Return() (localctx ISwitchStatement_Await_ReturnContext) {
	localctx = NewSwitchStatement_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 894, ECMAScriptParserRULE_switchStatement_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6363)
		p.Match(ECMAScriptParserT__72)
	}
	{
		p.SetState(6364)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6365)
		p.expression_In_Await(0)
	}
	{
		p.SetState(6366)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6367)
		p.CaseBlock_Await_Return()
	}

	return localctx
}

// ISwitchStatement_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type ISwitchStatement_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStatement_Yield_Await_ReturnContext differentiates from other interfaces.
	IsSwitchStatement_Yield_Await_ReturnContext()
}

type SwitchStatement_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatement_Yield_Await_ReturnContext() *SwitchStatement_Yield_Await_ReturnContext {
	var p = new(SwitchStatement_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Yield_Await_Return
	return p
}

func (*SwitchStatement_Yield_Await_ReturnContext) IsSwitchStatement_Yield_Await_ReturnContext() {}

func NewSwitchStatement_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatement_Yield_Await_ReturnContext {
	var p = new(SwitchStatement_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_switchStatement_Yield_Await_Return

	return p
}

func (s *SwitchStatement_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatement_Yield_Await_ReturnContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *SwitchStatement_Yield_Await_ReturnContext) CaseBlock_Yield_Await_Return() ICaseBlock_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseBlock_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseBlock_Yield_Await_ReturnContext)
}

func (s *SwitchStatement_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatement_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatement_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterSwitchStatement_Yield_Await_Return(s)
	}
}

func (s *SwitchStatement_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitSwitchStatement_Yield_Await_Return(s)
	}
}

func (s *SwitchStatement_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitSwitchStatement_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) SwitchStatement_Yield_Await_Return() (localctx ISwitchStatement_Yield_Await_ReturnContext) {
	localctx = NewSwitchStatement_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 896, ECMAScriptParserRULE_switchStatement_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6369)
		p.Match(ECMAScriptParserT__72)
	}
	{
		p.SetState(6370)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6371)
		p.expression_In_Yield_Await(0)
	}
	{
		p.SetState(6372)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6373)
		p.CaseBlock_Yield_Await_Return()
	}

	return localctx
}

// ICaseBlockContext is an interface to support dynamic dispatch.
type ICaseBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseBlockContext differentiates from other interfaces.
	IsCaseBlockContext()
}

type CaseBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseBlockContext() *CaseBlockContext {
	var p = new(CaseBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseBlock
	return p
}

func (*CaseBlockContext) IsCaseBlockContext() {}

func NewCaseBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseBlockContext {
	var p = new(CaseBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseBlock

	return p
}

func (s *CaseBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseBlockContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *CaseBlockContext) AllCaseClause() []ICaseClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseClauseContext)(nil)).Elem())
	var tst = make([]ICaseClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseClauseContext)
		}
	}

	return tst
}

func (s *CaseBlockContext) CaseClause(i int) ICaseClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseClauseContext)
}

func (s *CaseBlockContext) DefaultClause() IDefaultClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultClauseContext)
}

func (s *CaseBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseBlock(s)
	}
}

func (s *CaseBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseBlock(s)
	}
}

func (s *CaseBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseBlock() (localctx ICaseBlockContext) {
	localctx = NewCaseBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 898, ECMAScriptParserRULE_caseBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6399)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 535, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6375)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6376)
				p.CaseClause()
			}

			p.SetState(6381)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6382)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6383)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6387)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6384)
				p.CaseClause()
			}

			p.SetState(6389)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6390)
			p.DefaultClause()
		}
		p.SetState(6394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6391)
				p.CaseClause()
			}

			p.SetState(6396)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6397)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// ICaseBlock_YieldContext is an interface to support dynamic dispatch.
type ICaseBlock_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseBlock_YieldContext differentiates from other interfaces.
	IsCaseBlock_YieldContext()
}

type CaseBlock_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseBlock_YieldContext() *CaseBlock_YieldContext {
	var p = new(CaseBlock_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Yield
	return p
}

func (*CaseBlock_YieldContext) IsCaseBlock_YieldContext() {}

func NewCaseBlock_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseBlock_YieldContext {
	var p = new(CaseBlock_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Yield

	return p
}

func (s *CaseBlock_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseBlock_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *CaseBlock_YieldContext) AllCaseClause_Yield() []ICaseClause_YieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseClause_YieldContext)(nil)).Elem())
	var tst = make([]ICaseClause_YieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseClause_YieldContext)
		}
	}

	return tst
}

func (s *CaseBlock_YieldContext) CaseClause_Yield(i int) ICaseClause_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseClause_YieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseClause_YieldContext)
}

func (s *CaseBlock_YieldContext) DefaultClause_Yield() IDefaultClause_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultClause_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultClause_YieldContext)
}

func (s *CaseBlock_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseBlock_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseBlock_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseBlock_Yield(s)
	}
}

func (s *CaseBlock_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseBlock_Yield(s)
	}
}

func (s *CaseBlock_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseBlock_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseBlock_Yield() (localctx ICaseBlock_YieldContext) {
	localctx = NewCaseBlock_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 900, ECMAScriptParserRULE_caseBlock_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6425)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 539, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6401)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6405)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6402)
				p.CaseClause_Yield()
			}

			p.SetState(6407)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6408)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6409)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6413)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6410)
				p.CaseClause_Yield()
			}

			p.SetState(6415)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6416)
			p.DefaultClause_Yield()
		}
		p.SetState(6420)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6417)
				p.CaseClause_Yield()
			}

			p.SetState(6422)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6423)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// ICaseBlock_AwaitContext is an interface to support dynamic dispatch.
type ICaseBlock_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseBlock_AwaitContext differentiates from other interfaces.
	IsCaseBlock_AwaitContext()
}

type CaseBlock_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseBlock_AwaitContext() *CaseBlock_AwaitContext {
	var p = new(CaseBlock_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Await
	return p
}

func (*CaseBlock_AwaitContext) IsCaseBlock_AwaitContext() {}

func NewCaseBlock_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseBlock_AwaitContext {
	var p = new(CaseBlock_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Await

	return p
}

func (s *CaseBlock_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseBlock_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *CaseBlock_AwaitContext) AllCaseClause_Await() []ICaseClause_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseClause_AwaitContext)(nil)).Elem())
	var tst = make([]ICaseClause_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseClause_AwaitContext)
		}
	}

	return tst
}

func (s *CaseBlock_AwaitContext) CaseClause_Await(i int) ICaseClause_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseClause_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseClause_AwaitContext)
}

func (s *CaseBlock_AwaitContext) DefaultClause_Await() IDefaultClause_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultClause_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultClause_AwaitContext)
}

func (s *CaseBlock_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseBlock_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseBlock_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseBlock_Await(s)
	}
}

func (s *CaseBlock_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseBlock_Await(s)
	}
}

func (s *CaseBlock_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseBlock_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseBlock_Await() (localctx ICaseBlock_AwaitContext) {
	localctx = NewCaseBlock_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 902, ECMAScriptParserRULE_caseBlock_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6451)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 543, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6427)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6428)
				p.CaseClause_Await()
			}

			p.SetState(6433)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6434)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6435)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6439)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6436)
				p.CaseClause_Await()
			}

			p.SetState(6441)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6442)
			p.DefaultClause_Await()
		}
		p.SetState(6446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6443)
				p.CaseClause_Await()
			}

			p.SetState(6448)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6449)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// ICaseBlock_Yield_AwaitContext is an interface to support dynamic dispatch.
type ICaseBlock_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseBlock_Yield_AwaitContext differentiates from other interfaces.
	IsCaseBlock_Yield_AwaitContext()
}

type CaseBlock_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseBlock_Yield_AwaitContext() *CaseBlock_Yield_AwaitContext {
	var p = new(CaseBlock_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Yield_Await
	return p
}

func (*CaseBlock_Yield_AwaitContext) IsCaseBlock_Yield_AwaitContext() {}

func NewCaseBlock_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseBlock_Yield_AwaitContext {
	var p = new(CaseBlock_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Yield_Await

	return p
}

func (s *CaseBlock_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseBlock_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *CaseBlock_Yield_AwaitContext) AllCaseClause_Yield_Await() []ICaseClause_Yield_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseClause_Yield_AwaitContext)(nil)).Elem())
	var tst = make([]ICaseClause_Yield_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseClause_Yield_AwaitContext)
		}
	}

	return tst
}

func (s *CaseBlock_Yield_AwaitContext) CaseClause_Yield_Await(i int) ICaseClause_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseClause_Yield_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseClause_Yield_AwaitContext)
}

func (s *CaseBlock_Yield_AwaitContext) DefaultClause_Yield_Await() IDefaultClause_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultClause_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultClause_Yield_AwaitContext)
}

func (s *CaseBlock_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseBlock_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseBlock_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseBlock_Yield_Await(s)
	}
}

func (s *CaseBlock_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseBlock_Yield_Await(s)
	}
}

func (s *CaseBlock_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseBlock_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseBlock_Yield_Await() (localctx ICaseBlock_Yield_AwaitContext) {
	localctx = NewCaseBlock_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 904, ECMAScriptParserRULE_caseBlock_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6477)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 547, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6453)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6457)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6454)
				p.CaseClause_Yield_Await()
			}

			p.SetState(6459)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6460)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6461)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6465)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6462)
				p.CaseClause_Yield_Await()
			}

			p.SetState(6467)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6468)
			p.DefaultClause_Yield_Await()
		}
		p.SetState(6472)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6469)
				p.CaseClause_Yield_Await()
			}

			p.SetState(6474)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6475)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// ICaseBlock_ReturnContext is an interface to support dynamic dispatch.
type ICaseBlock_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseBlock_ReturnContext differentiates from other interfaces.
	IsCaseBlock_ReturnContext()
}

type CaseBlock_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseBlock_ReturnContext() *CaseBlock_ReturnContext {
	var p = new(CaseBlock_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Return
	return p
}

func (*CaseBlock_ReturnContext) IsCaseBlock_ReturnContext() {}

func NewCaseBlock_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseBlock_ReturnContext {
	var p = new(CaseBlock_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Return

	return p
}

func (s *CaseBlock_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseBlock_ReturnContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *CaseBlock_ReturnContext) AllCaseClause_Return() []ICaseClause_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseClause_ReturnContext)(nil)).Elem())
	var tst = make([]ICaseClause_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseClause_ReturnContext)
		}
	}

	return tst
}

func (s *CaseBlock_ReturnContext) CaseClause_Return(i int) ICaseClause_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseClause_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseClause_ReturnContext)
}

func (s *CaseBlock_ReturnContext) DefaultClause_Return() IDefaultClause_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultClause_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultClause_ReturnContext)
}

func (s *CaseBlock_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseBlock_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseBlock_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseBlock_Return(s)
	}
}

func (s *CaseBlock_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseBlock_Return(s)
	}
}

func (s *CaseBlock_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseBlock_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseBlock_Return() (localctx ICaseBlock_ReturnContext) {
	localctx = NewCaseBlock_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 906, ECMAScriptParserRULE_caseBlock_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6503)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 551, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6479)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6483)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6480)
				p.CaseClause_Return()
			}

			p.SetState(6485)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6486)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6487)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6491)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6488)
				p.CaseClause_Return()
			}

			p.SetState(6493)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6494)
			p.DefaultClause_Return()
		}
		p.SetState(6498)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6495)
				p.CaseClause_Return()
			}

			p.SetState(6500)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6501)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// ICaseBlock_Yield_ReturnContext is an interface to support dynamic dispatch.
type ICaseBlock_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseBlock_Yield_ReturnContext differentiates from other interfaces.
	IsCaseBlock_Yield_ReturnContext()
}

type CaseBlock_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseBlock_Yield_ReturnContext() *CaseBlock_Yield_ReturnContext {
	var p = new(CaseBlock_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Yield_Return
	return p
}

func (*CaseBlock_Yield_ReturnContext) IsCaseBlock_Yield_ReturnContext() {}

func NewCaseBlock_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseBlock_Yield_ReturnContext {
	var p = new(CaseBlock_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Yield_Return

	return p
}

func (s *CaseBlock_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseBlock_Yield_ReturnContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *CaseBlock_Yield_ReturnContext) AllCaseClause_Yield_Return() []ICaseClause_Yield_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseClause_Yield_ReturnContext)(nil)).Elem())
	var tst = make([]ICaseClause_Yield_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseClause_Yield_ReturnContext)
		}
	}

	return tst
}

func (s *CaseBlock_Yield_ReturnContext) CaseClause_Yield_Return(i int) ICaseClause_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseClause_Yield_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseClause_Yield_ReturnContext)
}

func (s *CaseBlock_Yield_ReturnContext) DefaultClause_Yield_Return() IDefaultClause_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultClause_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultClause_Yield_ReturnContext)
}

func (s *CaseBlock_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseBlock_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseBlock_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseBlock_Yield_Return(s)
	}
}

func (s *CaseBlock_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseBlock_Yield_Return(s)
	}
}

func (s *CaseBlock_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseBlock_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseBlock_Yield_Return() (localctx ICaseBlock_Yield_ReturnContext) {
	localctx = NewCaseBlock_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 908, ECMAScriptParserRULE_caseBlock_Yield_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6529)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 555, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6505)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6509)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6506)
				p.CaseClause_Yield_Return()
			}

			p.SetState(6511)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6512)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6513)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6517)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6514)
				p.CaseClause_Yield_Return()
			}

			p.SetState(6519)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6520)
			p.DefaultClause_Yield_Return()
		}
		p.SetState(6524)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6521)
				p.CaseClause_Yield_Return()
			}

			p.SetState(6526)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6527)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// ICaseBlock_Await_ReturnContext is an interface to support dynamic dispatch.
type ICaseBlock_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseBlock_Await_ReturnContext differentiates from other interfaces.
	IsCaseBlock_Await_ReturnContext()
}

type CaseBlock_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseBlock_Await_ReturnContext() *CaseBlock_Await_ReturnContext {
	var p = new(CaseBlock_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Await_Return
	return p
}

func (*CaseBlock_Await_ReturnContext) IsCaseBlock_Await_ReturnContext() {}

func NewCaseBlock_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseBlock_Await_ReturnContext {
	var p = new(CaseBlock_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Await_Return

	return p
}

func (s *CaseBlock_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseBlock_Await_ReturnContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *CaseBlock_Await_ReturnContext) AllCaseClause_Await_Return() []ICaseClause_Await_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseClause_Await_ReturnContext)(nil)).Elem())
	var tst = make([]ICaseClause_Await_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseClause_Await_ReturnContext)
		}
	}

	return tst
}

func (s *CaseBlock_Await_ReturnContext) CaseClause_Await_Return(i int) ICaseClause_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseClause_Await_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseClause_Await_ReturnContext)
}

func (s *CaseBlock_Await_ReturnContext) DefaultClause_Await_Return() IDefaultClause_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultClause_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultClause_Await_ReturnContext)
}

func (s *CaseBlock_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseBlock_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseBlock_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseBlock_Await_Return(s)
	}
}

func (s *CaseBlock_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseBlock_Await_Return(s)
	}
}

func (s *CaseBlock_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseBlock_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseBlock_Await_Return() (localctx ICaseBlock_Await_ReturnContext) {
	localctx = NewCaseBlock_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 910, ECMAScriptParserRULE_caseBlock_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6555)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 559, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6531)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6535)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6532)
				p.CaseClause_Await_Return()
			}

			p.SetState(6537)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6538)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6539)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6543)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6540)
				p.CaseClause_Await_Return()
			}

			p.SetState(6545)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6546)
			p.DefaultClause_Await_Return()
		}
		p.SetState(6550)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6547)
				p.CaseClause_Await_Return()
			}

			p.SetState(6552)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6553)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// ICaseBlock_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type ICaseBlock_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseBlock_Yield_Await_ReturnContext differentiates from other interfaces.
	IsCaseBlock_Yield_Await_ReturnContext()
}

type CaseBlock_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseBlock_Yield_Await_ReturnContext() *CaseBlock_Yield_Await_ReturnContext {
	var p = new(CaseBlock_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Yield_Await_Return
	return p
}

func (*CaseBlock_Yield_Await_ReturnContext) IsCaseBlock_Yield_Await_ReturnContext() {}

func NewCaseBlock_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseBlock_Yield_Await_ReturnContext {
	var p = new(CaseBlock_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseBlock_Yield_Await_Return

	return p
}

func (s *CaseBlock_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseBlock_Yield_Await_ReturnContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *CaseBlock_Yield_Await_ReturnContext) AllCaseClause_Yield_Await_Return() []ICaseClause_Yield_Await_ReturnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseClause_Yield_Await_ReturnContext)(nil)).Elem())
	var tst = make([]ICaseClause_Yield_Await_ReturnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseClause_Yield_Await_ReturnContext)
		}
	}

	return tst
}

func (s *CaseBlock_Yield_Await_ReturnContext) CaseClause_Yield_Await_Return(i int) ICaseClause_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseClause_Yield_Await_ReturnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseClause_Yield_Await_ReturnContext)
}

func (s *CaseBlock_Yield_Await_ReturnContext) DefaultClause_Yield_Await_Return() IDefaultClause_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultClause_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultClause_Yield_Await_ReturnContext)
}

func (s *CaseBlock_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseBlock_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseBlock_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseBlock_Yield_Await_Return(s)
	}
}

func (s *CaseBlock_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseBlock_Yield_Await_Return(s)
	}
}

func (s *CaseBlock_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseBlock_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseBlock_Yield_Await_Return() (localctx ICaseBlock_Yield_Await_ReturnContext) {
	localctx = NewCaseBlock_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 912, ECMAScriptParserRULE_caseBlock_Yield_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6581)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 563, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6557)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6561)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6558)
				p.CaseClause_Yield_Await_Return()
			}

			p.SetState(6563)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6564)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6565)
			p.Match(ECMAScriptParserT__10)
		}
		p.SetState(6569)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6566)
				p.CaseClause_Yield_Await_Return()
			}

			p.SetState(6571)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6572)
			p.DefaultClause_Yield_Await_Return()
		}
		p.SetState(6576)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == ECMAScriptParserT__73 {
			{
				p.SetState(6573)
				p.CaseClause_Yield_Await_Return()
			}

			p.SetState(6578)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6579)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// ICaseClauseContext is an interface to support dynamic dispatch.
type ICaseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseClauseContext differentiates from other interfaces.
	IsCaseClauseContext()
}

type CaseClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseClauseContext() *CaseClauseContext {
	var p = new(CaseClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseClause
	return p
}

func (*CaseClauseContext) IsCaseClauseContext() {}

func NewCaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseClauseContext {
	var p = new(CaseClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseClause

	return p
}

func (s *CaseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseClauseContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *CaseClauseContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *CaseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseClause(s)
	}
}

func (s *CaseClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseClause(s)
	}
}

func (s *CaseClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseClause() (localctx ICaseClauseContext) {
	localctx = NewCaseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 914, ECMAScriptParserRULE_caseClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6583)
		p.Match(ECMAScriptParserT__73)
	}
	{
		p.SetState(6584)
		p.expression_In(0)
	}
	{
		p.SetState(6585)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6587)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6586)
			p.StatementList()
		}

	}

	return localctx
}

// ICaseClause_YieldContext is an interface to support dynamic dispatch.
type ICaseClause_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseClause_YieldContext differentiates from other interfaces.
	IsCaseClause_YieldContext()
}

type CaseClause_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseClause_YieldContext() *CaseClause_YieldContext {
	var p = new(CaseClause_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Yield
	return p
}

func (*CaseClause_YieldContext) IsCaseClause_YieldContext() {}

func NewCaseClause_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseClause_YieldContext {
	var p = new(CaseClause_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Yield

	return p
}

func (s *CaseClause_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseClause_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *CaseClause_YieldContext) StatementList_Yield() IStatementList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_YieldContext)
}

func (s *CaseClause_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseClause_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseClause_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseClause_Yield(s)
	}
}

func (s *CaseClause_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseClause_Yield(s)
	}
}

func (s *CaseClause_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseClause_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseClause_Yield() (localctx ICaseClause_YieldContext) {
	localctx = NewCaseClause_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 916, ECMAScriptParserRULE_caseClause_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6589)
		p.Match(ECMAScriptParserT__73)
	}
	{
		p.SetState(6590)
		p.expression_In_Yield(0)
	}
	{
		p.SetState(6591)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6593)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6592)
			p.StatementList_Yield()
		}

	}

	return localctx
}

// ICaseClause_AwaitContext is an interface to support dynamic dispatch.
type ICaseClause_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseClause_AwaitContext differentiates from other interfaces.
	IsCaseClause_AwaitContext()
}

type CaseClause_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseClause_AwaitContext() *CaseClause_AwaitContext {
	var p = new(CaseClause_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Await
	return p
}

func (*CaseClause_AwaitContext) IsCaseClause_AwaitContext() {}

func NewCaseClause_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseClause_AwaitContext {
	var p = new(CaseClause_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Await

	return p
}

func (s *CaseClause_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseClause_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *CaseClause_AwaitContext) StatementList_Await() IStatementList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_AwaitContext)
}

func (s *CaseClause_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseClause_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseClause_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseClause_Await(s)
	}
}

func (s *CaseClause_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseClause_Await(s)
	}
}

func (s *CaseClause_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseClause_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseClause_Await() (localctx ICaseClause_AwaitContext) {
	localctx = NewCaseClause_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 918, ECMAScriptParserRULE_caseClause_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6595)
		p.Match(ECMAScriptParserT__73)
	}
	{
		p.SetState(6596)
		p.expression_In_Await(0)
	}
	{
		p.SetState(6597)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6599)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6598)
			p.StatementList_Await()
		}

	}

	return localctx
}

// ICaseClause_Yield_AwaitContext is an interface to support dynamic dispatch.
type ICaseClause_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseClause_Yield_AwaitContext differentiates from other interfaces.
	IsCaseClause_Yield_AwaitContext()
}

type CaseClause_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseClause_Yield_AwaitContext() *CaseClause_Yield_AwaitContext {
	var p = new(CaseClause_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Yield_Await
	return p
}

func (*CaseClause_Yield_AwaitContext) IsCaseClause_Yield_AwaitContext() {}

func NewCaseClause_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseClause_Yield_AwaitContext {
	var p = new(CaseClause_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Yield_Await

	return p
}

func (s *CaseClause_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseClause_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *CaseClause_Yield_AwaitContext) StatementList_Yield_Await() IStatementList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Yield_AwaitContext)
}

func (s *CaseClause_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseClause_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseClause_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseClause_Yield_Await(s)
	}
}

func (s *CaseClause_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseClause_Yield_Await(s)
	}
}

func (s *CaseClause_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseClause_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseClause_Yield_Await() (localctx ICaseClause_Yield_AwaitContext) {
	localctx = NewCaseClause_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 920, ECMAScriptParserRULE_caseClause_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6601)
		p.Match(ECMAScriptParserT__73)
	}
	{
		p.SetState(6602)
		p.expression_In_Yield_Await(0)
	}
	{
		p.SetState(6603)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6605)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6604)
			p.StatementList_Yield_Await()
		}

	}

	return localctx
}

// ICaseClause_ReturnContext is an interface to support dynamic dispatch.
type ICaseClause_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseClause_ReturnContext differentiates from other interfaces.
	IsCaseClause_ReturnContext()
}

type CaseClause_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseClause_ReturnContext() *CaseClause_ReturnContext {
	var p = new(CaseClause_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Return
	return p
}

func (*CaseClause_ReturnContext) IsCaseClause_ReturnContext() {}

func NewCaseClause_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseClause_ReturnContext {
	var p = new(CaseClause_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Return

	return p
}

func (s *CaseClause_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseClause_ReturnContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *CaseClause_ReturnContext) StatementList_Return() IStatementList_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_ReturnContext)
}

func (s *CaseClause_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseClause_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseClause_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseClause_Return(s)
	}
}

func (s *CaseClause_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseClause_Return(s)
	}
}

func (s *CaseClause_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseClause_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseClause_Return() (localctx ICaseClause_ReturnContext) {
	localctx = NewCaseClause_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 922, ECMAScriptParserRULE_caseClause_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6607)
		p.Match(ECMAScriptParserT__73)
	}
	{
		p.SetState(6608)
		p.expression_In(0)
	}
	{
		p.SetState(6609)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6611)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6610)
			p.StatementList_Return()
		}

	}

	return localctx
}

// ICaseClause_Yield_ReturnContext is an interface to support dynamic dispatch.
type ICaseClause_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseClause_Yield_ReturnContext differentiates from other interfaces.
	IsCaseClause_Yield_ReturnContext()
}

type CaseClause_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseClause_Yield_ReturnContext() *CaseClause_Yield_ReturnContext {
	var p = new(CaseClause_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Yield_Return
	return p
}

func (*CaseClause_Yield_ReturnContext) IsCaseClause_Yield_ReturnContext() {}

func NewCaseClause_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseClause_Yield_ReturnContext {
	var p = new(CaseClause_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Yield_Return

	return p
}

func (s *CaseClause_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseClause_Yield_ReturnContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *CaseClause_Yield_ReturnContext) StatementList_Yield_Return() IStatementList_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Yield_ReturnContext)
}

func (s *CaseClause_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseClause_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseClause_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseClause_Yield_Return(s)
	}
}

func (s *CaseClause_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseClause_Yield_Return(s)
	}
}

func (s *CaseClause_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseClause_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseClause_Yield_Return() (localctx ICaseClause_Yield_ReturnContext) {
	localctx = NewCaseClause_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 924, ECMAScriptParserRULE_caseClause_Yield_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6613)
		p.Match(ECMAScriptParserT__73)
	}
	{
		p.SetState(6614)
		p.expression_In_Yield(0)
	}
	{
		p.SetState(6615)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6617)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6616)
			p.StatementList_Yield_Return()
		}

	}

	return localctx
}

// ICaseClause_Await_ReturnContext is an interface to support dynamic dispatch.
type ICaseClause_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseClause_Await_ReturnContext differentiates from other interfaces.
	IsCaseClause_Await_ReturnContext()
}

type CaseClause_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseClause_Await_ReturnContext() *CaseClause_Await_ReturnContext {
	var p = new(CaseClause_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Await_Return
	return p
}

func (*CaseClause_Await_ReturnContext) IsCaseClause_Await_ReturnContext() {}

func NewCaseClause_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseClause_Await_ReturnContext {
	var p = new(CaseClause_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Await_Return

	return p
}

func (s *CaseClause_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseClause_Await_ReturnContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *CaseClause_Await_ReturnContext) StatementList_Await_Return() IStatementList_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Await_ReturnContext)
}

func (s *CaseClause_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseClause_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseClause_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseClause_Await_Return(s)
	}
}

func (s *CaseClause_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseClause_Await_Return(s)
	}
}

func (s *CaseClause_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseClause_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseClause_Await_Return() (localctx ICaseClause_Await_ReturnContext) {
	localctx = NewCaseClause_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 926, ECMAScriptParserRULE_caseClause_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6619)
		p.Match(ECMAScriptParserT__73)
	}
	{
		p.SetState(6620)
		p.expression_In_Await(0)
	}
	{
		p.SetState(6621)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6623)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6622)
			p.StatementList_Await_Return()
		}

	}

	return localctx
}

// ICaseClause_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type ICaseClause_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseClause_Yield_Await_ReturnContext differentiates from other interfaces.
	IsCaseClause_Yield_Await_ReturnContext()
}

type CaseClause_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseClause_Yield_Await_ReturnContext() *CaseClause_Yield_Await_ReturnContext {
	var p = new(CaseClause_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Yield_Await_Return
	return p
}

func (*CaseClause_Yield_Await_ReturnContext) IsCaseClause_Yield_Await_ReturnContext() {}

func NewCaseClause_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseClause_Yield_Await_ReturnContext {
	var p = new(CaseClause_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_caseClause_Yield_Await_Return

	return p
}

func (s *CaseClause_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseClause_Yield_Await_ReturnContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *CaseClause_Yield_Await_ReturnContext) StatementList_Yield_Await_Return() IStatementList_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Yield_Await_ReturnContext)
}

func (s *CaseClause_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseClause_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseClause_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCaseClause_Yield_Await_Return(s)
	}
}

func (s *CaseClause_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCaseClause_Yield_Await_Return(s)
	}
}

func (s *CaseClause_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCaseClause_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CaseClause_Yield_Await_Return() (localctx ICaseClause_Yield_Await_ReturnContext) {
	localctx = NewCaseClause_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 928, ECMAScriptParserRULE_caseClause_Yield_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6625)
		p.Match(ECMAScriptParserT__73)
	}
	{
		p.SetState(6626)
		p.expression_In_Yield_Await(0)
	}
	{
		p.SetState(6627)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6629)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6628)
			p.StatementList_Yield_Await_Return()
		}

	}

	return localctx
}

// IDefaultClauseContext is an interface to support dynamic dispatch.
type IDefaultClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultClauseContext differentiates from other interfaces.
	IsDefaultClauseContext()
}

type DefaultClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultClauseContext() *DefaultClauseContext {
	var p = new(DefaultClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_defaultClause
	return p
}

func (*DefaultClauseContext) IsDefaultClauseContext() {}

func NewDefaultClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultClauseContext {
	var p = new(DefaultClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_defaultClause

	return p
}

func (s *DefaultClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultClauseContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *DefaultClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDefaultClause(s)
	}
}

func (s *DefaultClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDefaultClause(s)
	}
}

func (s *DefaultClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDefaultClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) DefaultClause() (localctx IDefaultClauseContext) {
	localctx = NewDefaultClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 930, ECMAScriptParserRULE_defaultClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6631)
		p.Match(ECMAScriptParserT__74)
	}
	{
		p.SetState(6632)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6634)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6633)
			p.StatementList()
		}

	}

	return localctx
}

// IDefaultClause_YieldContext is an interface to support dynamic dispatch.
type IDefaultClause_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultClause_YieldContext differentiates from other interfaces.
	IsDefaultClause_YieldContext()
}

type DefaultClause_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultClause_YieldContext() *DefaultClause_YieldContext {
	var p = new(DefaultClause_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Yield
	return p
}

func (*DefaultClause_YieldContext) IsDefaultClause_YieldContext() {}

func NewDefaultClause_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultClause_YieldContext {
	var p = new(DefaultClause_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Yield

	return p
}

func (s *DefaultClause_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultClause_YieldContext) StatementList_Yield() IStatementList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_YieldContext)
}

func (s *DefaultClause_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultClause_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultClause_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDefaultClause_Yield(s)
	}
}

func (s *DefaultClause_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDefaultClause_Yield(s)
	}
}

func (s *DefaultClause_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDefaultClause_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) DefaultClause_Yield() (localctx IDefaultClause_YieldContext) {
	localctx = NewDefaultClause_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 932, ECMAScriptParserRULE_defaultClause_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6636)
		p.Match(ECMAScriptParserT__74)
	}
	{
		p.SetState(6637)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6639)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6638)
			p.StatementList_Yield()
		}

	}

	return localctx
}

// IDefaultClause_AwaitContext is an interface to support dynamic dispatch.
type IDefaultClause_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultClause_AwaitContext differentiates from other interfaces.
	IsDefaultClause_AwaitContext()
}

type DefaultClause_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultClause_AwaitContext() *DefaultClause_AwaitContext {
	var p = new(DefaultClause_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Await
	return p
}

func (*DefaultClause_AwaitContext) IsDefaultClause_AwaitContext() {}

func NewDefaultClause_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultClause_AwaitContext {
	var p = new(DefaultClause_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Await

	return p
}

func (s *DefaultClause_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultClause_AwaitContext) StatementList_Await() IStatementList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_AwaitContext)
}

func (s *DefaultClause_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultClause_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultClause_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDefaultClause_Await(s)
	}
}

func (s *DefaultClause_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDefaultClause_Await(s)
	}
}

func (s *DefaultClause_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDefaultClause_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) DefaultClause_Await() (localctx IDefaultClause_AwaitContext) {
	localctx = NewDefaultClause_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 934, ECMAScriptParserRULE_defaultClause_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6641)
		p.Match(ECMAScriptParserT__74)
	}
	{
		p.SetState(6642)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6644)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6643)
			p.StatementList_Await()
		}

	}

	return localctx
}

// IDefaultClause_Yield_AwaitContext is an interface to support dynamic dispatch.
type IDefaultClause_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultClause_Yield_AwaitContext differentiates from other interfaces.
	IsDefaultClause_Yield_AwaitContext()
}

type DefaultClause_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultClause_Yield_AwaitContext() *DefaultClause_Yield_AwaitContext {
	var p = new(DefaultClause_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Yield_Await
	return p
}

func (*DefaultClause_Yield_AwaitContext) IsDefaultClause_Yield_AwaitContext() {}

func NewDefaultClause_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultClause_Yield_AwaitContext {
	var p = new(DefaultClause_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Yield_Await

	return p
}

func (s *DefaultClause_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultClause_Yield_AwaitContext) StatementList_Yield_Await() IStatementList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Yield_AwaitContext)
}

func (s *DefaultClause_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultClause_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultClause_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDefaultClause_Yield_Await(s)
	}
}

func (s *DefaultClause_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDefaultClause_Yield_Await(s)
	}
}

func (s *DefaultClause_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDefaultClause_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) DefaultClause_Yield_Await() (localctx IDefaultClause_Yield_AwaitContext) {
	localctx = NewDefaultClause_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 936, ECMAScriptParserRULE_defaultClause_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6646)
		p.Match(ECMAScriptParserT__74)
	}
	{
		p.SetState(6647)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6649)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6648)
			p.StatementList_Yield_Await()
		}

	}

	return localctx
}

// IDefaultClause_ReturnContext is an interface to support dynamic dispatch.
type IDefaultClause_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultClause_ReturnContext differentiates from other interfaces.
	IsDefaultClause_ReturnContext()
}

type DefaultClause_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultClause_ReturnContext() *DefaultClause_ReturnContext {
	var p = new(DefaultClause_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Return
	return p
}

func (*DefaultClause_ReturnContext) IsDefaultClause_ReturnContext() {}

func NewDefaultClause_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultClause_ReturnContext {
	var p = new(DefaultClause_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Return

	return p
}

func (s *DefaultClause_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultClause_ReturnContext) StatementList_Return() IStatementList_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_ReturnContext)
}

func (s *DefaultClause_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultClause_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultClause_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDefaultClause_Return(s)
	}
}

func (s *DefaultClause_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDefaultClause_Return(s)
	}
}

func (s *DefaultClause_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDefaultClause_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) DefaultClause_Return() (localctx IDefaultClause_ReturnContext) {
	localctx = NewDefaultClause_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 938, ECMAScriptParserRULE_defaultClause_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6651)
		p.Match(ECMAScriptParserT__74)
	}
	{
		p.SetState(6652)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6654)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6653)
			p.StatementList_Return()
		}

	}

	return localctx
}

// IDefaultClause_Yield_ReturnContext is an interface to support dynamic dispatch.
type IDefaultClause_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultClause_Yield_ReturnContext differentiates from other interfaces.
	IsDefaultClause_Yield_ReturnContext()
}

type DefaultClause_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultClause_Yield_ReturnContext() *DefaultClause_Yield_ReturnContext {
	var p = new(DefaultClause_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Yield_Return
	return p
}

func (*DefaultClause_Yield_ReturnContext) IsDefaultClause_Yield_ReturnContext() {}

func NewDefaultClause_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultClause_Yield_ReturnContext {
	var p = new(DefaultClause_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Yield_Return

	return p
}

func (s *DefaultClause_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultClause_Yield_ReturnContext) StatementList_Yield_Return() IStatementList_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Yield_ReturnContext)
}

func (s *DefaultClause_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultClause_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultClause_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDefaultClause_Yield_Return(s)
	}
}

func (s *DefaultClause_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDefaultClause_Yield_Return(s)
	}
}

func (s *DefaultClause_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDefaultClause_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) DefaultClause_Yield_Return() (localctx IDefaultClause_Yield_ReturnContext) {
	localctx = NewDefaultClause_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 940, ECMAScriptParserRULE_defaultClause_Yield_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6656)
		p.Match(ECMAScriptParserT__74)
	}
	{
		p.SetState(6657)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6659)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6658)
			p.StatementList_Yield_Return()
		}

	}

	return localctx
}

// IDefaultClause_Await_ReturnContext is an interface to support dynamic dispatch.
type IDefaultClause_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultClause_Await_ReturnContext differentiates from other interfaces.
	IsDefaultClause_Await_ReturnContext()
}

type DefaultClause_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultClause_Await_ReturnContext() *DefaultClause_Await_ReturnContext {
	var p = new(DefaultClause_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Await_Return
	return p
}

func (*DefaultClause_Await_ReturnContext) IsDefaultClause_Await_ReturnContext() {}

func NewDefaultClause_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultClause_Await_ReturnContext {
	var p = new(DefaultClause_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Await_Return

	return p
}

func (s *DefaultClause_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultClause_Await_ReturnContext) StatementList_Await_Return() IStatementList_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Await_ReturnContext)
}

func (s *DefaultClause_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultClause_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultClause_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDefaultClause_Await_Return(s)
	}
}

func (s *DefaultClause_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDefaultClause_Await_Return(s)
	}
}

func (s *DefaultClause_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDefaultClause_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) DefaultClause_Await_Return() (localctx IDefaultClause_Await_ReturnContext) {
	localctx = NewDefaultClause_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 942, ECMAScriptParserRULE_defaultClause_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6661)
		p.Match(ECMAScriptParserT__74)
	}
	{
		p.SetState(6662)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6664)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6663)
			p.StatementList_Await_Return()
		}

	}

	return localctx
}

// IDefaultClause_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type IDefaultClause_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultClause_Yield_Await_ReturnContext differentiates from other interfaces.
	IsDefaultClause_Yield_Await_ReturnContext()
}

type DefaultClause_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultClause_Yield_Await_ReturnContext() *DefaultClause_Yield_Await_ReturnContext {
	var p = new(DefaultClause_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Yield_Await_Return
	return p
}

func (*DefaultClause_Yield_Await_ReturnContext) IsDefaultClause_Yield_Await_ReturnContext() {}

func NewDefaultClause_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultClause_Yield_Await_ReturnContext {
	var p = new(DefaultClause_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_defaultClause_Yield_Await_Return

	return p
}

func (s *DefaultClause_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultClause_Yield_Await_ReturnContext) StatementList_Yield_Await_Return() IStatementList_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Yield_Await_ReturnContext)
}

func (s *DefaultClause_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultClause_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultClause_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDefaultClause_Yield_Await_Return(s)
	}
}

func (s *DefaultClause_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDefaultClause_Yield_Await_Return(s)
	}
}

func (s *DefaultClause_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDefaultClause_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) DefaultClause_Yield_Await_Return() (localctx IDefaultClause_Yield_Await_ReturnContext) {
	localctx = NewDefaultClause_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 944, ECMAScriptParserRULE_defaultClause_Yield_Await_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6666)
		p.Match(ECMAScriptParserT__74)
	}
	{
		p.SetState(6667)
		p.Match(ECMAScriptParserT__11)
	}
	p.SetState(6669)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(6668)
			p.StatementList_Yield_Await_Return()
		}

	}

	return localctx
}

// ILabelledStatementContext is an interface to support dynamic dispatch.
type ILabelledStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledStatementContext differentiates from other interfaces.
	IsLabelledStatementContext()
}

type LabelledStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledStatementContext() *LabelledStatementContext {
	var p = new(LabelledStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement
	return p
}

func (*LabelledStatementContext) IsLabelledStatementContext() {}

func NewLabelledStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledStatementContext {
	var p = new(LabelledStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement

	return p
}

func (s *LabelledStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledStatementContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *LabelledStatementContext) LabelledItem() ILabelledItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledItemContext)
}

func (s *LabelledStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledStatement(s)
	}
}

func (s *LabelledStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledStatement(s)
	}
}

func (s *LabelledStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledStatement() (localctx ILabelledStatementContext) {
	localctx = NewLabelledStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 946, ECMAScriptParserRULE_labelledStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6671)
		p.LabelIdentifier()
	}
	{
		p.SetState(6672)
		p.Match(ECMAScriptParserT__11)
	}
	{
		p.SetState(6673)
		p.LabelledItem()
	}

	return localctx
}

// ILabelledStatement_YieldContext is an interface to support dynamic dispatch.
type ILabelledStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledStatement_YieldContext differentiates from other interfaces.
	IsLabelledStatement_YieldContext()
}

type LabelledStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledStatement_YieldContext() *LabelledStatement_YieldContext {
	var p = new(LabelledStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Yield
	return p
}

func (*LabelledStatement_YieldContext) IsLabelledStatement_YieldContext() {}

func NewLabelledStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledStatement_YieldContext {
	var p = new(LabelledStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Yield

	return p
}

func (s *LabelledStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledStatement_YieldContext) LabelIdentifier_Yield() ILabelIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_YieldContext)
}

func (s *LabelledStatement_YieldContext) LabelledItem_Yield() ILabelledItem_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledItem_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledItem_YieldContext)
}

func (s *LabelledStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledStatement_Yield(s)
	}
}

func (s *LabelledStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledStatement_Yield(s)
	}
}

func (s *LabelledStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledStatement_Yield() (localctx ILabelledStatement_YieldContext) {
	localctx = NewLabelledStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 948, ECMAScriptParserRULE_labelledStatement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6675)
		p.LabelIdentifier_Yield()
	}
	{
		p.SetState(6676)
		p.Match(ECMAScriptParserT__11)
	}
	{
		p.SetState(6677)
		p.LabelledItem_Yield()
	}

	return localctx
}

// ILabelledStatement_AwaitContext is an interface to support dynamic dispatch.
type ILabelledStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledStatement_AwaitContext differentiates from other interfaces.
	IsLabelledStatement_AwaitContext()
}

type LabelledStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledStatement_AwaitContext() *LabelledStatement_AwaitContext {
	var p = new(LabelledStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Await
	return p
}

func (*LabelledStatement_AwaitContext) IsLabelledStatement_AwaitContext() {}

func NewLabelledStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledStatement_AwaitContext {
	var p = new(LabelledStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Await

	return p
}

func (s *LabelledStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledStatement_AwaitContext) LabelIdentifier_Await() ILabelIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_AwaitContext)
}

func (s *LabelledStatement_AwaitContext) LabelledItem_Await() ILabelledItem_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledItem_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledItem_AwaitContext)
}

func (s *LabelledStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledStatement_Await(s)
	}
}

func (s *LabelledStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledStatement_Await(s)
	}
}

func (s *LabelledStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledStatement_Await() (localctx ILabelledStatement_AwaitContext) {
	localctx = NewLabelledStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 950, ECMAScriptParserRULE_labelledStatement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6679)
		p.LabelIdentifier_Await()
	}
	{
		p.SetState(6680)
		p.Match(ECMAScriptParserT__11)
	}
	{
		p.SetState(6681)
		p.LabelledItem_Await()
	}

	return localctx
}

// ILabelledStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILabelledStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledStatement_Yield_AwaitContext differentiates from other interfaces.
	IsLabelledStatement_Yield_AwaitContext()
}

type LabelledStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledStatement_Yield_AwaitContext() *LabelledStatement_Yield_AwaitContext {
	var p = new(LabelledStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Yield_Await
	return p
}

func (*LabelledStatement_Yield_AwaitContext) IsLabelledStatement_Yield_AwaitContext() {}

func NewLabelledStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledStatement_Yield_AwaitContext {
	var p = new(LabelledStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Yield_Await

	return p
}

func (s *LabelledStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledStatement_Yield_AwaitContext) LabelIdentifier_Yield_Await() ILabelIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_Yield_AwaitContext)
}

func (s *LabelledStatement_Yield_AwaitContext) LabelledItem_Yield_Await() ILabelledItem_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledItem_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledItem_Yield_AwaitContext)
}

func (s *LabelledStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledStatement_Yield_Await(s)
	}
}

func (s *LabelledStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledStatement_Yield_Await(s)
	}
}

func (s *LabelledStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledStatement_Yield_Await() (localctx ILabelledStatement_Yield_AwaitContext) {
	localctx = NewLabelledStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 952, ECMAScriptParserRULE_labelledStatement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6683)
		p.LabelIdentifier_Yield_Await()
	}
	{
		p.SetState(6684)
		p.Match(ECMAScriptParserT__11)
	}
	{
		p.SetState(6685)
		p.LabelledItem_Yield_Await()
	}

	return localctx
}

// ILabelledStatement_ReturnContext is an interface to support dynamic dispatch.
type ILabelledStatement_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledStatement_ReturnContext differentiates from other interfaces.
	IsLabelledStatement_ReturnContext()
}

type LabelledStatement_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledStatement_ReturnContext() *LabelledStatement_ReturnContext {
	var p = new(LabelledStatement_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Return
	return p
}

func (*LabelledStatement_ReturnContext) IsLabelledStatement_ReturnContext() {}

func NewLabelledStatement_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledStatement_ReturnContext {
	var p = new(LabelledStatement_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Return

	return p
}

func (s *LabelledStatement_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledStatement_ReturnContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *LabelledStatement_ReturnContext) LabelledItem_Return() ILabelledItem_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledItem_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledItem_ReturnContext)
}

func (s *LabelledStatement_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledStatement_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledStatement_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledStatement_Return(s)
	}
}

func (s *LabelledStatement_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledStatement_Return(s)
	}
}

func (s *LabelledStatement_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledStatement_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledStatement_Return() (localctx ILabelledStatement_ReturnContext) {
	localctx = NewLabelledStatement_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 954, ECMAScriptParserRULE_labelledStatement_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6687)
		p.LabelIdentifier()
	}
	{
		p.SetState(6688)
		p.Match(ECMAScriptParserT__11)
	}
	{
		p.SetState(6689)
		p.LabelledItem_Return()
	}

	return localctx
}

// ILabelledStatement_Yield_ReturnContext is an interface to support dynamic dispatch.
type ILabelledStatement_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledStatement_Yield_ReturnContext differentiates from other interfaces.
	IsLabelledStatement_Yield_ReturnContext()
}

type LabelledStatement_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledStatement_Yield_ReturnContext() *LabelledStatement_Yield_ReturnContext {
	var p = new(LabelledStatement_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Yield_Return
	return p
}

func (*LabelledStatement_Yield_ReturnContext) IsLabelledStatement_Yield_ReturnContext() {}

func NewLabelledStatement_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledStatement_Yield_ReturnContext {
	var p = new(LabelledStatement_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Yield_Return

	return p
}

func (s *LabelledStatement_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledStatement_Yield_ReturnContext) LabelIdentifier_Yield() ILabelIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_YieldContext)
}

func (s *LabelledStatement_Yield_ReturnContext) LabelledItem_Yield_Return() ILabelledItem_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledItem_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledItem_Yield_ReturnContext)
}

func (s *LabelledStatement_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledStatement_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledStatement_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledStatement_Yield_Return(s)
	}
}

func (s *LabelledStatement_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledStatement_Yield_Return(s)
	}
}

func (s *LabelledStatement_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledStatement_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledStatement_Yield_Return() (localctx ILabelledStatement_Yield_ReturnContext) {
	localctx = NewLabelledStatement_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 956, ECMAScriptParserRULE_labelledStatement_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6691)
		p.LabelIdentifier_Yield()
	}
	{
		p.SetState(6692)
		p.Match(ECMAScriptParserT__11)
	}
	{
		p.SetState(6693)
		p.LabelledItem_Yield_Return()
	}

	return localctx
}

// ILabelledStatement_Await_ReturnContext is an interface to support dynamic dispatch.
type ILabelledStatement_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledStatement_Await_ReturnContext differentiates from other interfaces.
	IsLabelledStatement_Await_ReturnContext()
}

type LabelledStatement_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledStatement_Await_ReturnContext() *LabelledStatement_Await_ReturnContext {
	var p = new(LabelledStatement_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Await_Return
	return p
}

func (*LabelledStatement_Await_ReturnContext) IsLabelledStatement_Await_ReturnContext() {}

func NewLabelledStatement_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledStatement_Await_ReturnContext {
	var p = new(LabelledStatement_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Await_Return

	return p
}

func (s *LabelledStatement_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledStatement_Await_ReturnContext) LabelIdentifier_Await() ILabelIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_AwaitContext)
}

func (s *LabelledStatement_Await_ReturnContext) LabelledItem_Await_Return() ILabelledItem_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledItem_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledItem_Await_ReturnContext)
}

func (s *LabelledStatement_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledStatement_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledStatement_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledStatement_Await_Return(s)
	}
}

func (s *LabelledStatement_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledStatement_Await_Return(s)
	}
}

func (s *LabelledStatement_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledStatement_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledStatement_Await_Return() (localctx ILabelledStatement_Await_ReturnContext) {
	localctx = NewLabelledStatement_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 958, ECMAScriptParserRULE_labelledStatement_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6695)
		p.LabelIdentifier_Await()
	}
	{
		p.SetState(6696)
		p.Match(ECMAScriptParserT__11)
	}
	{
		p.SetState(6697)
		p.LabelledItem_Await_Return()
	}

	return localctx
}

// ILabelledStatement_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type ILabelledStatement_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledStatement_Yield_Await_ReturnContext differentiates from other interfaces.
	IsLabelledStatement_Yield_Await_ReturnContext()
}

type LabelledStatement_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledStatement_Yield_Await_ReturnContext() *LabelledStatement_Yield_Await_ReturnContext {
	var p = new(LabelledStatement_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Yield_Await_Return
	return p
}

func (*LabelledStatement_Yield_Await_ReturnContext) IsLabelledStatement_Yield_Await_ReturnContext() {}

func NewLabelledStatement_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledStatement_Yield_Await_ReturnContext {
	var p = new(LabelledStatement_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledStatement_Yield_Await_Return

	return p
}

func (s *LabelledStatement_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledStatement_Yield_Await_ReturnContext) LabelIdentifier_Yield_Await() ILabelIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifier_Yield_AwaitContext)
}

func (s *LabelledStatement_Yield_Await_ReturnContext) LabelledItem_Yield_Await_Return() ILabelledItem_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelledItem_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelledItem_Yield_Await_ReturnContext)
}

func (s *LabelledStatement_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledStatement_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledStatement_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledStatement_Yield_Await_Return(s)
	}
}

func (s *LabelledStatement_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledStatement_Yield_Await_Return(s)
	}
}

func (s *LabelledStatement_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledStatement_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledStatement_Yield_Await_Return() (localctx ILabelledStatement_Yield_Await_ReturnContext) {
	localctx = NewLabelledStatement_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 960, ECMAScriptParserRULE_labelledStatement_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6699)
		p.LabelIdentifier_Yield_Await()
	}
	{
		p.SetState(6700)
		p.Match(ECMAScriptParserT__11)
	}
	{
		p.SetState(6701)
		p.LabelledItem_Yield_Await_Return()
	}

	return localctx
}

// ILabelledItemContext is an interface to support dynamic dispatch.
type ILabelledItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledItemContext differentiates from other interfaces.
	IsLabelledItemContext()
}

type LabelledItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledItemContext() *LabelledItemContext {
	var p = new(LabelledItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledItem
	return p
}

func (*LabelledItemContext) IsLabelledItemContext() {}

func NewLabelledItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledItemContext {
	var p = new(LabelledItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledItem

	return p
}

func (s *LabelledItemContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledItemContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *LabelledItemContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *LabelledItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledItem(s)
	}
}

func (s *LabelledItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledItem(s)
	}
}

func (s *LabelledItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledItem() (localctx ILabelledItemContext) {
	localctx = NewLabelledItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 962, ECMAScriptParserRULE_labelledItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6705)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 580, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6703)
			p.Statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6704)
			p.FunctionDeclaration()
		}

	}

	return localctx
}

// ILabelledItem_YieldContext is an interface to support dynamic dispatch.
type ILabelledItem_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledItem_YieldContext differentiates from other interfaces.
	IsLabelledItem_YieldContext()
}

type LabelledItem_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledItem_YieldContext() *LabelledItem_YieldContext {
	var p = new(LabelledItem_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Yield
	return p
}

func (*LabelledItem_YieldContext) IsLabelledItem_YieldContext() {}

func NewLabelledItem_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledItem_YieldContext {
	var p = new(LabelledItem_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Yield

	return p
}

func (s *LabelledItem_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledItem_YieldContext) Statement_Yield() IStatement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_YieldContext)
}

func (s *LabelledItem_YieldContext) FunctionDeclaration_Yield() IFunctionDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_YieldContext)
}

func (s *LabelledItem_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledItem_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledItem_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledItem_Yield(s)
	}
}

func (s *LabelledItem_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledItem_Yield(s)
	}
}

func (s *LabelledItem_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledItem_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledItem_Yield() (localctx ILabelledItem_YieldContext) {
	localctx = NewLabelledItem_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 964, ECMAScriptParserRULE_labelledItem_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6709)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 581, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6707)
			p.Statement_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6708)
			p.FunctionDeclaration_Yield()
		}

	}

	return localctx
}

// ILabelledItem_AwaitContext is an interface to support dynamic dispatch.
type ILabelledItem_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledItem_AwaitContext differentiates from other interfaces.
	IsLabelledItem_AwaitContext()
}

type LabelledItem_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledItem_AwaitContext() *LabelledItem_AwaitContext {
	var p = new(LabelledItem_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Await
	return p
}

func (*LabelledItem_AwaitContext) IsLabelledItem_AwaitContext() {}

func NewLabelledItem_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledItem_AwaitContext {
	var p = new(LabelledItem_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Await

	return p
}

func (s *LabelledItem_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledItem_AwaitContext) Statement_Await() IStatement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_AwaitContext)
}

func (s *LabelledItem_AwaitContext) FunctionDeclaration_Await() IFunctionDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_AwaitContext)
}

func (s *LabelledItem_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledItem_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledItem_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledItem_Await(s)
	}
}

func (s *LabelledItem_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledItem_Await(s)
	}
}

func (s *LabelledItem_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledItem_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledItem_Await() (localctx ILabelledItem_AwaitContext) {
	localctx = NewLabelledItem_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 966, ECMAScriptParserRULE_labelledItem_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6713)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 582, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6711)
			p.Statement_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6712)
			p.FunctionDeclaration_Await()
		}

	}

	return localctx
}

// ILabelledItem_Yield_AwaitContext is an interface to support dynamic dispatch.
type ILabelledItem_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledItem_Yield_AwaitContext differentiates from other interfaces.
	IsLabelledItem_Yield_AwaitContext()
}

type LabelledItem_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledItem_Yield_AwaitContext() *LabelledItem_Yield_AwaitContext {
	var p = new(LabelledItem_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Yield_Await
	return p
}

func (*LabelledItem_Yield_AwaitContext) IsLabelledItem_Yield_AwaitContext() {}

func NewLabelledItem_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledItem_Yield_AwaitContext {
	var p = new(LabelledItem_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Yield_Await

	return p
}

func (s *LabelledItem_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledItem_Yield_AwaitContext) Statement_Yield_Await() IStatement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_AwaitContext)
}

func (s *LabelledItem_Yield_AwaitContext) FunctionDeclaration_Yield_Await() IFunctionDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_Yield_AwaitContext)
}

func (s *LabelledItem_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledItem_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledItem_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledItem_Yield_Await(s)
	}
}

func (s *LabelledItem_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledItem_Yield_Await(s)
	}
}

func (s *LabelledItem_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledItem_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledItem_Yield_Await() (localctx ILabelledItem_Yield_AwaitContext) {
	localctx = NewLabelledItem_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 968, ECMAScriptParserRULE_labelledItem_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6717)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 583, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6715)
			p.Statement_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6716)
			p.FunctionDeclaration_Yield_Await()
		}

	}

	return localctx
}

// ILabelledItem_ReturnContext is an interface to support dynamic dispatch.
type ILabelledItem_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledItem_ReturnContext differentiates from other interfaces.
	IsLabelledItem_ReturnContext()
}

type LabelledItem_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledItem_ReturnContext() *LabelledItem_ReturnContext {
	var p = new(LabelledItem_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Return
	return p
}

func (*LabelledItem_ReturnContext) IsLabelledItem_ReturnContext() {}

func NewLabelledItem_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledItem_ReturnContext {
	var p = new(LabelledItem_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Return

	return p
}

func (s *LabelledItem_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledItem_ReturnContext) Statement_Return() IStatement_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_ReturnContext)
}

func (s *LabelledItem_ReturnContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *LabelledItem_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledItem_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledItem_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledItem_Return(s)
	}
}

func (s *LabelledItem_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledItem_Return(s)
	}
}

func (s *LabelledItem_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledItem_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledItem_Return() (localctx ILabelledItem_ReturnContext) {
	localctx = NewLabelledItem_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 970, ECMAScriptParserRULE_labelledItem_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6721)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 584, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6719)
			p.Statement_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6720)
			p.FunctionDeclaration()
		}

	}

	return localctx
}

// ILabelledItem_Yield_ReturnContext is an interface to support dynamic dispatch.
type ILabelledItem_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledItem_Yield_ReturnContext differentiates from other interfaces.
	IsLabelledItem_Yield_ReturnContext()
}

type LabelledItem_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledItem_Yield_ReturnContext() *LabelledItem_Yield_ReturnContext {
	var p = new(LabelledItem_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Yield_Return
	return p
}

func (*LabelledItem_Yield_ReturnContext) IsLabelledItem_Yield_ReturnContext() {}

func NewLabelledItem_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledItem_Yield_ReturnContext {
	var p = new(LabelledItem_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Yield_Return

	return p
}

func (s *LabelledItem_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledItem_Yield_ReturnContext) Statement_Yield_Return() IStatement_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_ReturnContext)
}

func (s *LabelledItem_Yield_ReturnContext) FunctionDeclaration_Yield() IFunctionDeclaration_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_YieldContext)
}

func (s *LabelledItem_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledItem_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledItem_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledItem_Yield_Return(s)
	}
}

func (s *LabelledItem_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledItem_Yield_Return(s)
	}
}

func (s *LabelledItem_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledItem_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledItem_Yield_Return() (localctx ILabelledItem_Yield_ReturnContext) {
	localctx = NewLabelledItem_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 972, ECMAScriptParserRULE_labelledItem_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6725)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 585, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6723)
			p.Statement_Yield_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6724)
			p.FunctionDeclaration_Yield()
		}

	}

	return localctx
}

// ILabelledItem_Await_ReturnContext is an interface to support dynamic dispatch.
type ILabelledItem_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledItem_Await_ReturnContext differentiates from other interfaces.
	IsLabelledItem_Await_ReturnContext()
}

type LabelledItem_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledItem_Await_ReturnContext() *LabelledItem_Await_ReturnContext {
	var p = new(LabelledItem_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Await_Return
	return p
}

func (*LabelledItem_Await_ReturnContext) IsLabelledItem_Await_ReturnContext() {}

func NewLabelledItem_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledItem_Await_ReturnContext {
	var p = new(LabelledItem_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Await_Return

	return p
}

func (s *LabelledItem_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledItem_Await_ReturnContext) Statement_Await_Return() IStatement_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Await_ReturnContext)
}

func (s *LabelledItem_Await_ReturnContext) FunctionDeclaration_Await() IFunctionDeclaration_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_AwaitContext)
}

func (s *LabelledItem_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledItem_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledItem_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledItem_Await_Return(s)
	}
}

func (s *LabelledItem_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledItem_Await_Return(s)
	}
}

func (s *LabelledItem_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledItem_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledItem_Await_Return() (localctx ILabelledItem_Await_ReturnContext) {
	localctx = NewLabelledItem_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 974, ECMAScriptParserRULE_labelledItem_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6729)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 586, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6727)
			p.Statement_Await_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6728)
			p.FunctionDeclaration_Await()
		}

	}

	return localctx
}

// ILabelledItem_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type ILabelledItem_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelledItem_Yield_Await_ReturnContext differentiates from other interfaces.
	IsLabelledItem_Yield_Await_ReturnContext()
}

type LabelledItem_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelledItem_Yield_Await_ReturnContext() *LabelledItem_Yield_Await_ReturnContext {
	var p = new(LabelledItem_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Yield_Await_Return
	return p
}

func (*LabelledItem_Yield_Await_ReturnContext) IsLabelledItem_Yield_Await_ReturnContext() {}

func NewLabelledItem_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelledItem_Yield_Await_ReturnContext {
	var p = new(LabelledItem_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_labelledItem_Yield_Await_Return

	return p
}

func (s *LabelledItem_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelledItem_Yield_Await_ReturnContext) Statement_Yield_Await_Return() IStatement_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_Yield_Await_ReturnContext)
}

func (s *LabelledItem_Yield_Await_ReturnContext) FunctionDeclaration_Yield_Await() IFunctionDeclaration_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclaration_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclaration_Yield_AwaitContext)
}

func (s *LabelledItem_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelledItem_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelledItem_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterLabelledItem_Yield_Await_Return(s)
	}
}

func (s *LabelledItem_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitLabelledItem_Yield_Await_Return(s)
	}
}

func (s *LabelledItem_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitLabelledItem_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) LabelledItem_Yield_Await_Return() (localctx ILabelledItem_Yield_Await_ReturnContext) {
	localctx = NewLabelledItem_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 976, ECMAScriptParserRULE_labelledItem_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6733)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 587, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6731)
			p.Statement_Yield_Await_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6732)
			p.FunctionDeclaration_Yield_Await()
		}

	}

	return localctx
}

// IThrowStatementContext is an interface to support dynamic dispatch.
type IThrowStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrowStatementContext differentiates from other interfaces.
	IsThrowStatementContext()
}

type ThrowStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowStatementContext() *ThrowStatementContext {
	var p = new(ThrowStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_throwStatement
	return p
}

func (*ThrowStatementContext) IsThrowStatementContext() {}

func NewThrowStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowStatementContext {
	var p = new(ThrowStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_throwStatement

	return p
}

func (s *ThrowStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ThrowStatementContext) Expression_In() IExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_InContext)
}

func (s *ThrowStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThrowStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterThrowStatement(s)
	}
}

func (s *ThrowStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitThrowStatement(s)
	}
}

func (s *ThrowStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitThrowStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ThrowStatement() (localctx IThrowStatementContext) {
	localctx = NewThrowStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 978, ECMAScriptParserRULE_throwStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6735)
		p.Match(ECMAScriptParserT__75)
	}
	{
		p.SetState(6736)
		p.expression_In(0)
	}
	{
		p.SetState(6737)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IThrowStatement_YieldContext is an interface to support dynamic dispatch.
type IThrowStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrowStatement_YieldContext differentiates from other interfaces.
	IsThrowStatement_YieldContext()
}

type ThrowStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowStatement_YieldContext() *ThrowStatement_YieldContext {
	var p = new(ThrowStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_throwStatement_Yield
	return p
}

func (*ThrowStatement_YieldContext) IsThrowStatement_YieldContext() {}

func NewThrowStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowStatement_YieldContext {
	var p = new(ThrowStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_throwStatement_Yield

	return p
}

func (s *ThrowStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ThrowStatement_YieldContext) Expression_In_Yield() IExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_YieldContext)
}

func (s *ThrowStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThrowStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterThrowStatement_Yield(s)
	}
}

func (s *ThrowStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitThrowStatement_Yield(s)
	}
}

func (s *ThrowStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitThrowStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ThrowStatement_Yield() (localctx IThrowStatement_YieldContext) {
	localctx = NewThrowStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 980, ECMAScriptParserRULE_throwStatement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6739)
		p.Match(ECMAScriptParserT__75)
	}
	{
		p.SetState(6740)
		p.expression_In_Yield(0)
	}
	{
		p.SetState(6741)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IThrowStatement_AwaitContext is an interface to support dynamic dispatch.
type IThrowStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrowStatement_AwaitContext differentiates from other interfaces.
	IsThrowStatement_AwaitContext()
}

type ThrowStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowStatement_AwaitContext() *ThrowStatement_AwaitContext {
	var p = new(ThrowStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_throwStatement_Await
	return p
}

func (*ThrowStatement_AwaitContext) IsThrowStatement_AwaitContext() {}

func NewThrowStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowStatement_AwaitContext {
	var p = new(ThrowStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_throwStatement_Await

	return p
}

func (s *ThrowStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ThrowStatement_AwaitContext) Expression_In_Await() IExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_AwaitContext)
}

func (s *ThrowStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThrowStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterThrowStatement_Await(s)
	}
}

func (s *ThrowStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitThrowStatement_Await(s)
	}
}

func (s *ThrowStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitThrowStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ThrowStatement_Await() (localctx IThrowStatement_AwaitContext) {
	localctx = NewThrowStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 982, ECMAScriptParserRULE_throwStatement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6743)
		p.Match(ECMAScriptParserT__75)
	}
	{
		p.SetState(6744)
		p.expression_In_Await(0)
	}
	{
		p.SetState(6745)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IThrowStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IThrowStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrowStatement_Yield_AwaitContext differentiates from other interfaces.
	IsThrowStatement_Yield_AwaitContext()
}

type ThrowStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowStatement_Yield_AwaitContext() *ThrowStatement_Yield_AwaitContext {
	var p = new(ThrowStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_throwStatement_Yield_Await
	return p
}

func (*ThrowStatement_Yield_AwaitContext) IsThrowStatement_Yield_AwaitContext() {}

func NewThrowStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowStatement_Yield_AwaitContext {
	var p = new(ThrowStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_throwStatement_Yield_Await

	return p
}

func (s *ThrowStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ThrowStatement_Yield_AwaitContext) Expression_In_Yield_Await() IExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_In_Yield_AwaitContext)
}

func (s *ThrowStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThrowStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterThrowStatement_Yield_Await(s)
	}
}

func (s *ThrowStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitThrowStatement_Yield_Await(s)
	}
}

func (s *ThrowStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitThrowStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ThrowStatement_Yield_Await() (localctx IThrowStatement_Yield_AwaitContext) {
	localctx = NewThrowStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 984, ECMAScriptParserRULE_throwStatement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6747)
		p.Match(ECMAScriptParserT__75)
	}
	{
		p.SetState(6748)
		p.expression_In_Yield_Await(0)
	}
	{
		p.SetState(6749)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// ITryStatementContext is an interface to support dynamic dispatch.
type ITryStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStatementContext differentiates from other interfaces.
	IsTryStatementContext()
}

type TryStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatementContext() *TryStatementContext {
	var p = new(TryStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_tryStatement
	return p
}

func (*TryStatementContext) IsTryStatementContext() {}

func NewTryStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatementContext {
	var p = new(TryStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_tryStatement

	return p
}

func (s *TryStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *TryStatementContext) Catch_() ICatch_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatch_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatch_Context)
}

func (s *TryStatementContext) Finally_() IFinally_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinally_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinally_Context)
}

func (s *TryStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTryStatement(s)
	}
}

func (s *TryStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTryStatement(s)
	}
}

func (s *TryStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTryStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TryStatement() (localctx ITryStatementContext) {
	localctx = NewTryStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 986, ECMAScriptParserRULE_tryStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6764)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 588, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6751)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6752)
			p.Block()
		}
		{
			p.SetState(6753)
			p.Catch_()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6755)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6756)
			p.Block()
		}
		{
			p.SetState(6757)
			p.Finally_()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6759)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6760)
			p.Block()
		}
		{
			p.SetState(6761)
			p.Catch_()
		}
		{
			p.SetState(6762)
			p.Finally_()
		}

	}

	return localctx
}

// ITryStatement_YieldContext is an interface to support dynamic dispatch.
type ITryStatement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStatement_YieldContext differentiates from other interfaces.
	IsTryStatement_YieldContext()
}

type TryStatement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatement_YieldContext() *TryStatement_YieldContext {
	var p = new(TryStatement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Yield
	return p
}

func (*TryStatement_YieldContext) IsTryStatement_YieldContext() {}

func NewTryStatement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatement_YieldContext {
	var p = new(TryStatement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Yield

	return p
}

func (s *TryStatement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatement_YieldContext) Block_Yield() IBlock_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_YieldContext)
}

func (s *TryStatement_YieldContext) Catch_Yield() ICatch_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatch_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatch_YieldContext)
}

func (s *TryStatement_YieldContext) Finally_Yield() IFinally_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinally_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinally_YieldContext)
}

func (s *TryStatement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTryStatement_Yield(s)
	}
}

func (s *TryStatement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTryStatement_Yield(s)
	}
}

func (s *TryStatement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTryStatement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TryStatement_Yield() (localctx ITryStatement_YieldContext) {
	localctx = NewTryStatement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 988, ECMAScriptParserRULE_tryStatement_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6779)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 589, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6766)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6767)
			p.Block_Yield()
		}
		{
			p.SetState(6768)
			p.Catch_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6770)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6771)
			p.Block_Yield()
		}
		{
			p.SetState(6772)
			p.Finally_Yield()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6774)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6775)
			p.Block_Yield()
		}
		{
			p.SetState(6776)
			p.Catch_Yield()
		}
		{
			p.SetState(6777)
			p.Finally_Yield()
		}

	}

	return localctx
}

// ITryStatement_AwaitContext is an interface to support dynamic dispatch.
type ITryStatement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStatement_AwaitContext differentiates from other interfaces.
	IsTryStatement_AwaitContext()
}

type TryStatement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatement_AwaitContext() *TryStatement_AwaitContext {
	var p = new(TryStatement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Await
	return p
}

func (*TryStatement_AwaitContext) IsTryStatement_AwaitContext() {}

func NewTryStatement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatement_AwaitContext {
	var p = new(TryStatement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Await

	return p
}

func (s *TryStatement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatement_AwaitContext) Block_Await() IBlock_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_AwaitContext)
}

func (s *TryStatement_AwaitContext) Catch_Await() ICatch_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatch_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatch_AwaitContext)
}

func (s *TryStatement_AwaitContext) Finally_Await() IFinally_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinally_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinally_AwaitContext)
}

func (s *TryStatement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTryStatement_Await(s)
	}
}

func (s *TryStatement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTryStatement_Await(s)
	}
}

func (s *TryStatement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTryStatement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TryStatement_Await() (localctx ITryStatement_AwaitContext) {
	localctx = NewTryStatement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 990, ECMAScriptParserRULE_tryStatement_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6794)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 590, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6781)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6782)
			p.Block_Await()
		}
		{
			p.SetState(6783)
			p.Catch_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6785)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6786)
			p.Block_Await()
		}
		{
			p.SetState(6787)
			p.Finally_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6789)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6790)
			p.Block_Await()
		}
		{
			p.SetState(6791)
			p.Catch_Await()
		}
		{
			p.SetState(6792)
			p.Finally_Await()
		}

	}

	return localctx
}

// ITryStatement_Yield_AwaitContext is an interface to support dynamic dispatch.
type ITryStatement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStatement_Yield_AwaitContext differentiates from other interfaces.
	IsTryStatement_Yield_AwaitContext()
}

type TryStatement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatement_Yield_AwaitContext() *TryStatement_Yield_AwaitContext {
	var p = new(TryStatement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Yield_Await
	return p
}

func (*TryStatement_Yield_AwaitContext) IsTryStatement_Yield_AwaitContext() {}

func NewTryStatement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatement_Yield_AwaitContext {
	var p = new(TryStatement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Yield_Await

	return p
}

func (s *TryStatement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatement_Yield_AwaitContext) Block_Yield_Await() IBlock_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_AwaitContext)
}

func (s *TryStatement_Yield_AwaitContext) Catch_Yield_Await() ICatch_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatch_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatch_Yield_AwaitContext)
}

func (s *TryStatement_Yield_AwaitContext) Finally_Yield_Await() IFinally_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinally_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinally_Yield_AwaitContext)
}

func (s *TryStatement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTryStatement_Yield_Await(s)
	}
}

func (s *TryStatement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTryStatement_Yield_Await(s)
	}
}

func (s *TryStatement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTryStatement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TryStatement_Yield_Await() (localctx ITryStatement_Yield_AwaitContext) {
	localctx = NewTryStatement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 992, ECMAScriptParserRULE_tryStatement_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6809)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 591, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6796)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6797)
			p.Block_Yield_Await()
		}
		{
			p.SetState(6798)
			p.Catch_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6800)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6801)
			p.Block_Yield_Await()
		}
		{
			p.SetState(6802)
			p.Finally_Yield_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6804)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6805)
			p.Block_Yield_Await()
		}
		{
			p.SetState(6806)
			p.Catch_Yield_Await()
		}
		{
			p.SetState(6807)
			p.Finally_Yield_Await()
		}

	}

	return localctx
}

// ITryStatement_ReturnContext is an interface to support dynamic dispatch.
type ITryStatement_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStatement_ReturnContext differentiates from other interfaces.
	IsTryStatement_ReturnContext()
}

type TryStatement_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatement_ReturnContext() *TryStatement_ReturnContext {
	var p = new(TryStatement_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Return
	return p
}

func (*TryStatement_ReturnContext) IsTryStatement_ReturnContext() {}

func NewTryStatement_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatement_ReturnContext {
	var p = new(TryStatement_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Return

	return p
}

func (s *TryStatement_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatement_ReturnContext) Block_Return() IBlock_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_ReturnContext)
}

func (s *TryStatement_ReturnContext) Catch_Return() ICatch_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatch_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatch_ReturnContext)
}

func (s *TryStatement_ReturnContext) Finally_Return() IFinally_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinally_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinally_ReturnContext)
}

func (s *TryStatement_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatement_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatement_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTryStatement_Return(s)
	}
}

func (s *TryStatement_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTryStatement_Return(s)
	}
}

func (s *TryStatement_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTryStatement_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TryStatement_Return() (localctx ITryStatement_ReturnContext) {
	localctx = NewTryStatement_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 994, ECMAScriptParserRULE_tryStatement_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6824)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 592, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6811)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6812)
			p.Block_Return()
		}
		{
			p.SetState(6813)
			p.Catch_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6815)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6816)
			p.Block_Return()
		}
		{
			p.SetState(6817)
			p.Finally_Return()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6819)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6820)
			p.Block_Return()
		}
		{
			p.SetState(6821)
			p.Catch_Return()
		}
		{
			p.SetState(6822)
			p.Finally_Return()
		}

	}

	return localctx
}

// ITryStatement_Yield_ReturnContext is an interface to support dynamic dispatch.
type ITryStatement_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStatement_Yield_ReturnContext differentiates from other interfaces.
	IsTryStatement_Yield_ReturnContext()
}

type TryStatement_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatement_Yield_ReturnContext() *TryStatement_Yield_ReturnContext {
	var p = new(TryStatement_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Yield_Return
	return p
}

func (*TryStatement_Yield_ReturnContext) IsTryStatement_Yield_ReturnContext() {}

func NewTryStatement_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatement_Yield_ReturnContext {
	var p = new(TryStatement_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Yield_Return

	return p
}

func (s *TryStatement_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatement_Yield_ReturnContext) Block_Yield_Return() IBlock_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_ReturnContext)
}

func (s *TryStatement_Yield_ReturnContext) Catch_Yield_Return() ICatch_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatch_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatch_Yield_ReturnContext)
}

func (s *TryStatement_Yield_ReturnContext) Finally_Yield_Return() IFinally_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinally_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinally_Yield_ReturnContext)
}

func (s *TryStatement_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatement_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatement_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTryStatement_Yield_Return(s)
	}
}

func (s *TryStatement_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTryStatement_Yield_Return(s)
	}
}

func (s *TryStatement_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTryStatement_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TryStatement_Yield_Return() (localctx ITryStatement_Yield_ReturnContext) {
	localctx = NewTryStatement_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 996, ECMAScriptParserRULE_tryStatement_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6839)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 593, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6826)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6827)
			p.Block_Yield_Return()
		}
		{
			p.SetState(6828)
			p.Catch_Yield_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6830)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6831)
			p.Block_Yield_Return()
		}
		{
			p.SetState(6832)
			p.Finally_Yield_Return()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6834)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6835)
			p.Block_Yield_Return()
		}
		{
			p.SetState(6836)
			p.Catch_Yield_Return()
		}
		{
			p.SetState(6837)
			p.Finally_Yield_Return()
		}

	}

	return localctx
}

// ITryStatement_Await_ReturnContext is an interface to support dynamic dispatch.
type ITryStatement_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStatement_Await_ReturnContext differentiates from other interfaces.
	IsTryStatement_Await_ReturnContext()
}

type TryStatement_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatement_Await_ReturnContext() *TryStatement_Await_ReturnContext {
	var p = new(TryStatement_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Await_Return
	return p
}

func (*TryStatement_Await_ReturnContext) IsTryStatement_Await_ReturnContext() {}

func NewTryStatement_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatement_Await_ReturnContext {
	var p = new(TryStatement_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Await_Return

	return p
}

func (s *TryStatement_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatement_Await_ReturnContext) Block_Await_Return() IBlock_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Await_ReturnContext)
}

func (s *TryStatement_Await_ReturnContext) Catch_Await_Return() ICatch_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatch_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatch_Await_ReturnContext)
}

func (s *TryStatement_Await_ReturnContext) Finally_Await_Return() IFinally_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinally_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinally_Await_ReturnContext)
}

func (s *TryStatement_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatement_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatement_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTryStatement_Await_Return(s)
	}
}

func (s *TryStatement_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTryStatement_Await_Return(s)
	}
}

func (s *TryStatement_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTryStatement_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TryStatement_Await_Return() (localctx ITryStatement_Await_ReturnContext) {
	localctx = NewTryStatement_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 998, ECMAScriptParserRULE_tryStatement_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6854)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 594, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6841)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6842)
			p.Block_Await_Return()
		}
		{
			p.SetState(6843)
			p.Catch_Await_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6845)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6846)
			p.Block_Await_Return()
		}
		{
			p.SetState(6847)
			p.Finally_Await_Return()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6849)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6850)
			p.Block_Await_Return()
		}
		{
			p.SetState(6851)
			p.Catch_Await_Return()
		}
		{
			p.SetState(6852)
			p.Finally_Await_Return()
		}

	}

	return localctx
}

// ITryStatement_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type ITryStatement_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStatement_Yield_Await_ReturnContext differentiates from other interfaces.
	IsTryStatement_Yield_Await_ReturnContext()
}

type TryStatement_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatement_Yield_Await_ReturnContext() *TryStatement_Yield_Await_ReturnContext {
	var p = new(TryStatement_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Yield_Await_Return
	return p
}

func (*TryStatement_Yield_Await_ReturnContext) IsTryStatement_Yield_Await_ReturnContext() {}

func NewTryStatement_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatement_Yield_Await_ReturnContext {
	var p = new(TryStatement_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_tryStatement_Yield_Await_Return

	return p
}

func (s *TryStatement_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatement_Yield_Await_ReturnContext) Block_Yield_Await_Return() IBlock_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_Await_ReturnContext)
}

func (s *TryStatement_Yield_Await_ReturnContext) Catch_Yield_Await_Return() ICatch_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatch_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatch_Yield_Await_ReturnContext)
}

func (s *TryStatement_Yield_Await_ReturnContext) Finally_Yield_Await_Return() IFinally_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinally_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinally_Yield_Await_ReturnContext)
}

func (s *TryStatement_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatement_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatement_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterTryStatement_Yield_Await_Return(s)
	}
}

func (s *TryStatement_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitTryStatement_Yield_Await_Return(s)
	}
}

func (s *TryStatement_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitTryStatement_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) TryStatement_Yield_Await_Return() (localctx ITryStatement_Yield_Await_ReturnContext) {
	localctx = NewTryStatement_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1000, ECMAScriptParserRULE_tryStatement_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6869)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 595, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6856)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6857)
			p.Block_Yield_Await_Return()
		}
		{
			p.SetState(6858)
			p.Catch_Yield_Await_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6860)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6861)
			p.Block_Yield_Await_Return()
		}
		{
			p.SetState(6862)
			p.Finally_Yield_Await_Return()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6864)
			p.Match(ECMAScriptParserT__76)
		}
		{
			p.SetState(6865)
			p.Block_Yield_Await_Return()
		}
		{
			p.SetState(6866)
			p.Catch_Yield_Await_Return()
		}
		{
			p.SetState(6867)
			p.Finally_Yield_Await_Return()
		}

	}

	return localctx
}

// ICatch_Context is an interface to support dynamic dispatch.
type ICatch_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatch_Context differentiates from other interfaces.
	IsCatch_Context()
}

type Catch_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatch_Context() *Catch_Context {
	var p = new(Catch_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catch_
	return p
}

func (*Catch_Context) IsCatch_Context() {}

func NewCatch_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Catch_Context {
	var p = new(Catch_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catch_

	return p
}

func (s *Catch_Context) GetParser() antlr.Parser { return s.parser }

func (s *Catch_Context) CatchParameter() ICatchParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatchParameterContext)
}

func (s *Catch_Context) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *Catch_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Catch_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Catch_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatch_(s)
	}
}

func (s *Catch_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatch_(s)
	}
}

func (s *Catch_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatch_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Catch_() (localctx ICatch_Context) {
	localctx = NewCatch_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1002, ECMAScriptParserRULE_catch_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6871)
		p.Match(ECMAScriptParserT__77)
	}
	{
		p.SetState(6872)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6873)
		p.CatchParameter()
	}
	{
		p.SetState(6874)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6875)
		p.Block()
	}

	return localctx
}

// ICatch_YieldContext is an interface to support dynamic dispatch.
type ICatch_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatch_YieldContext differentiates from other interfaces.
	IsCatch_YieldContext()
}

type Catch_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatch_YieldContext() *Catch_YieldContext {
	var p = new(Catch_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catch_Yield
	return p
}

func (*Catch_YieldContext) IsCatch_YieldContext() {}

func NewCatch_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Catch_YieldContext {
	var p = new(Catch_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catch_Yield

	return p
}

func (s *Catch_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Catch_YieldContext) CatchParameter_Yield() ICatchParameter_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchParameter_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatchParameter_YieldContext)
}

func (s *Catch_YieldContext) Block_Yield() IBlock_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_YieldContext)
}

func (s *Catch_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Catch_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Catch_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatch_Yield(s)
	}
}

func (s *Catch_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatch_Yield(s)
	}
}

func (s *Catch_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatch_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Catch_Yield() (localctx ICatch_YieldContext) {
	localctx = NewCatch_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1004, ECMAScriptParserRULE_catch_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6877)
		p.Match(ECMAScriptParserT__77)
	}
	{
		p.SetState(6878)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6879)
		p.CatchParameter_Yield()
	}
	{
		p.SetState(6880)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6881)
		p.Block_Yield()
	}

	return localctx
}

// ICatch_AwaitContext is an interface to support dynamic dispatch.
type ICatch_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatch_AwaitContext differentiates from other interfaces.
	IsCatch_AwaitContext()
}

type Catch_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatch_AwaitContext() *Catch_AwaitContext {
	var p = new(Catch_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catch_Await
	return p
}

func (*Catch_AwaitContext) IsCatch_AwaitContext() {}

func NewCatch_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Catch_AwaitContext {
	var p = new(Catch_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catch_Await

	return p
}

func (s *Catch_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Catch_AwaitContext) CatchParameter_Await() ICatchParameter_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchParameter_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatchParameter_AwaitContext)
}

func (s *Catch_AwaitContext) Block_Await() IBlock_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_AwaitContext)
}

func (s *Catch_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Catch_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Catch_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatch_Await(s)
	}
}

func (s *Catch_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatch_Await(s)
	}
}

func (s *Catch_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatch_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Catch_Await() (localctx ICatch_AwaitContext) {
	localctx = NewCatch_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1006, ECMAScriptParserRULE_catch_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6883)
		p.Match(ECMAScriptParserT__77)
	}
	{
		p.SetState(6884)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6885)
		p.CatchParameter_Await()
	}
	{
		p.SetState(6886)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6887)
		p.Block_Await()
	}

	return localctx
}

// ICatch_Yield_AwaitContext is an interface to support dynamic dispatch.
type ICatch_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatch_Yield_AwaitContext differentiates from other interfaces.
	IsCatch_Yield_AwaitContext()
}

type Catch_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatch_Yield_AwaitContext() *Catch_Yield_AwaitContext {
	var p = new(Catch_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catch_Yield_Await
	return p
}

func (*Catch_Yield_AwaitContext) IsCatch_Yield_AwaitContext() {}

func NewCatch_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Catch_Yield_AwaitContext {
	var p = new(Catch_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catch_Yield_Await

	return p
}

func (s *Catch_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Catch_Yield_AwaitContext) CatchParameter_Yield_Await() ICatchParameter_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchParameter_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatchParameter_Yield_AwaitContext)
}

func (s *Catch_Yield_AwaitContext) Block_Yield_Await() IBlock_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_AwaitContext)
}

func (s *Catch_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Catch_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Catch_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatch_Yield_Await(s)
	}
}

func (s *Catch_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatch_Yield_Await(s)
	}
}

func (s *Catch_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatch_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Catch_Yield_Await() (localctx ICatch_Yield_AwaitContext) {
	localctx = NewCatch_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1008, ECMAScriptParserRULE_catch_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6889)
		p.Match(ECMAScriptParserT__77)
	}
	{
		p.SetState(6890)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6891)
		p.CatchParameter_Yield_Await()
	}
	{
		p.SetState(6892)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6893)
		p.Block_Yield_Await()
	}

	return localctx
}

// ICatch_ReturnContext is an interface to support dynamic dispatch.
type ICatch_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatch_ReturnContext differentiates from other interfaces.
	IsCatch_ReturnContext()
}

type Catch_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatch_ReturnContext() *Catch_ReturnContext {
	var p = new(Catch_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catch_Return
	return p
}

func (*Catch_ReturnContext) IsCatch_ReturnContext() {}

func NewCatch_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Catch_ReturnContext {
	var p = new(Catch_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catch_Return

	return p
}

func (s *Catch_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Catch_ReturnContext) CatchParameter() ICatchParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatchParameterContext)
}

func (s *Catch_ReturnContext) Block_Return() IBlock_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_ReturnContext)
}

func (s *Catch_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Catch_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Catch_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatch_Return(s)
	}
}

func (s *Catch_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatch_Return(s)
	}
}

func (s *Catch_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatch_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Catch_Return() (localctx ICatch_ReturnContext) {
	localctx = NewCatch_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1010, ECMAScriptParserRULE_catch_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6895)
		p.Match(ECMAScriptParserT__77)
	}
	{
		p.SetState(6896)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6897)
		p.CatchParameter()
	}
	{
		p.SetState(6898)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6899)
		p.Block_Return()
	}

	return localctx
}

// ICatch_Yield_ReturnContext is an interface to support dynamic dispatch.
type ICatch_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatch_Yield_ReturnContext differentiates from other interfaces.
	IsCatch_Yield_ReturnContext()
}

type Catch_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatch_Yield_ReturnContext() *Catch_Yield_ReturnContext {
	var p = new(Catch_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catch_Yield_Return
	return p
}

func (*Catch_Yield_ReturnContext) IsCatch_Yield_ReturnContext() {}

func NewCatch_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Catch_Yield_ReturnContext {
	var p = new(Catch_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catch_Yield_Return

	return p
}

func (s *Catch_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Catch_Yield_ReturnContext) CatchParameter_Yield() ICatchParameter_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchParameter_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatchParameter_YieldContext)
}

func (s *Catch_Yield_ReturnContext) Block_Yield_Return() IBlock_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_ReturnContext)
}

func (s *Catch_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Catch_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Catch_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatch_Yield_Return(s)
	}
}

func (s *Catch_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatch_Yield_Return(s)
	}
}

func (s *Catch_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatch_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Catch_Yield_Return() (localctx ICatch_Yield_ReturnContext) {
	localctx = NewCatch_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1012, ECMAScriptParserRULE_catch_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6901)
		p.Match(ECMAScriptParserT__77)
	}
	{
		p.SetState(6902)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6903)
		p.CatchParameter_Yield()
	}
	{
		p.SetState(6904)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6905)
		p.Block_Yield_Return()
	}

	return localctx
}

// ICatch_Await_ReturnContext is an interface to support dynamic dispatch.
type ICatch_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatch_Await_ReturnContext differentiates from other interfaces.
	IsCatch_Await_ReturnContext()
}

type Catch_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatch_Await_ReturnContext() *Catch_Await_ReturnContext {
	var p = new(Catch_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catch_Await_Return
	return p
}

func (*Catch_Await_ReturnContext) IsCatch_Await_ReturnContext() {}

func NewCatch_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Catch_Await_ReturnContext {
	var p = new(Catch_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catch_Await_Return

	return p
}

func (s *Catch_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Catch_Await_ReturnContext) CatchParameter_Await() ICatchParameter_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchParameter_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatchParameter_AwaitContext)
}

func (s *Catch_Await_ReturnContext) Block_Await_Return() IBlock_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Await_ReturnContext)
}

func (s *Catch_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Catch_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Catch_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatch_Await_Return(s)
	}
}

func (s *Catch_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatch_Await_Return(s)
	}
}

func (s *Catch_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatch_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Catch_Await_Return() (localctx ICatch_Await_ReturnContext) {
	localctx = NewCatch_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1014, ECMAScriptParserRULE_catch_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6907)
		p.Match(ECMAScriptParserT__77)
	}
	{
		p.SetState(6908)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6909)
		p.CatchParameter_Await()
	}
	{
		p.SetState(6910)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6911)
		p.Block_Await_Return()
	}

	return localctx
}

// ICatch_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type ICatch_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatch_Yield_Await_ReturnContext differentiates from other interfaces.
	IsCatch_Yield_Await_ReturnContext()
}

type Catch_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatch_Yield_Await_ReturnContext() *Catch_Yield_Await_ReturnContext {
	var p = new(Catch_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catch_Yield_Await_Return
	return p
}

func (*Catch_Yield_Await_ReturnContext) IsCatch_Yield_Await_ReturnContext() {}

func NewCatch_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Catch_Yield_Await_ReturnContext {
	var p = new(Catch_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catch_Yield_Await_Return

	return p
}

func (s *Catch_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Catch_Yield_Await_ReturnContext) CatchParameter_Yield_Await() ICatchParameter_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchParameter_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICatchParameter_Yield_AwaitContext)
}

func (s *Catch_Yield_Await_ReturnContext) Block_Yield_Await_Return() IBlock_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_Await_ReturnContext)
}

func (s *Catch_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Catch_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Catch_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatch_Yield_Await_Return(s)
	}
}

func (s *Catch_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatch_Yield_Await_Return(s)
	}
}

func (s *Catch_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatch_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Catch_Yield_Await_Return() (localctx ICatch_Yield_Await_ReturnContext) {
	localctx = NewCatch_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1016, ECMAScriptParserRULE_catch_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6913)
		p.Match(ECMAScriptParserT__77)
	}
	{
		p.SetState(6914)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6915)
		p.CatchParameter_Yield_Await()
	}
	{
		p.SetState(6916)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6917)
		p.Block_Yield_Await_Return()
	}

	return localctx
}

// IFinally_Context is an interface to support dynamic dispatch.
type IFinally_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinally_Context differentiates from other interfaces.
	IsFinally_Context()
}

type Finally_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinally_Context() *Finally_Context {
	var p = new(Finally_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_finally_
	return p
}

func (*Finally_Context) IsFinally_Context() {}

func NewFinally_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Finally_Context {
	var p = new(Finally_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_finally_

	return p
}

func (s *Finally_Context) GetParser() antlr.Parser { return s.parser }

func (s *Finally_Context) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *Finally_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Finally_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Finally_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFinally_(s)
	}
}

func (s *Finally_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFinally_(s)
	}
}

func (s *Finally_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFinally_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Finally_() (localctx IFinally_Context) {
	localctx = NewFinally_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1018, ECMAScriptParserRULE_finally_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6919)
		p.Match(ECMAScriptParserT__78)
	}
	{
		p.SetState(6920)
		p.Block()
	}

	return localctx
}

// IFinally_YieldContext is an interface to support dynamic dispatch.
type IFinally_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinally_YieldContext differentiates from other interfaces.
	IsFinally_YieldContext()
}

type Finally_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinally_YieldContext() *Finally_YieldContext {
	var p = new(Finally_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_finally_Yield
	return p
}

func (*Finally_YieldContext) IsFinally_YieldContext() {}

func NewFinally_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Finally_YieldContext {
	var p = new(Finally_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_finally_Yield

	return p
}

func (s *Finally_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Finally_YieldContext) Block_Yield() IBlock_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_YieldContext)
}

func (s *Finally_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Finally_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Finally_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFinally_Yield(s)
	}
}

func (s *Finally_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFinally_Yield(s)
	}
}

func (s *Finally_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFinally_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Finally_Yield() (localctx IFinally_YieldContext) {
	localctx = NewFinally_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1020, ECMAScriptParserRULE_finally_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6922)
		p.Match(ECMAScriptParserT__78)
	}
	{
		p.SetState(6923)
		p.Block_Yield()
	}

	return localctx
}

// IFinally_AwaitContext is an interface to support dynamic dispatch.
type IFinally_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinally_AwaitContext differentiates from other interfaces.
	IsFinally_AwaitContext()
}

type Finally_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinally_AwaitContext() *Finally_AwaitContext {
	var p = new(Finally_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_finally_Await
	return p
}

func (*Finally_AwaitContext) IsFinally_AwaitContext() {}

func NewFinally_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Finally_AwaitContext {
	var p = new(Finally_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_finally_Await

	return p
}

func (s *Finally_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Finally_AwaitContext) Block_Await() IBlock_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_AwaitContext)
}

func (s *Finally_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Finally_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Finally_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFinally_Await(s)
	}
}

func (s *Finally_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFinally_Await(s)
	}
}

func (s *Finally_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFinally_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Finally_Await() (localctx IFinally_AwaitContext) {
	localctx = NewFinally_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1022, ECMAScriptParserRULE_finally_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6925)
		p.Match(ECMAScriptParserT__78)
	}
	{
		p.SetState(6926)
		p.Block_Await()
	}

	return localctx
}

// IFinally_Yield_AwaitContext is an interface to support dynamic dispatch.
type IFinally_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinally_Yield_AwaitContext differentiates from other interfaces.
	IsFinally_Yield_AwaitContext()
}

type Finally_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinally_Yield_AwaitContext() *Finally_Yield_AwaitContext {
	var p = new(Finally_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_finally_Yield_Await
	return p
}

func (*Finally_Yield_AwaitContext) IsFinally_Yield_AwaitContext() {}

func NewFinally_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Finally_Yield_AwaitContext {
	var p = new(Finally_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_finally_Yield_Await

	return p
}

func (s *Finally_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *Finally_Yield_AwaitContext) Block_Yield_Await() IBlock_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_AwaitContext)
}

func (s *Finally_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Finally_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Finally_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFinally_Yield_Await(s)
	}
}

func (s *Finally_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFinally_Yield_Await(s)
	}
}

func (s *Finally_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFinally_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Finally_Yield_Await() (localctx IFinally_Yield_AwaitContext) {
	localctx = NewFinally_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1024, ECMAScriptParserRULE_finally_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6928)
		p.Match(ECMAScriptParserT__78)
	}
	{
		p.SetState(6929)
		p.Block_Yield_Await()
	}

	return localctx
}

// IFinally_ReturnContext is an interface to support dynamic dispatch.
type IFinally_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinally_ReturnContext differentiates from other interfaces.
	IsFinally_ReturnContext()
}

type Finally_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinally_ReturnContext() *Finally_ReturnContext {
	var p = new(Finally_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_finally_Return
	return p
}

func (*Finally_ReturnContext) IsFinally_ReturnContext() {}

func NewFinally_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Finally_ReturnContext {
	var p = new(Finally_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_finally_Return

	return p
}

func (s *Finally_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Finally_ReturnContext) Block_Return() IBlock_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_ReturnContext)
}

func (s *Finally_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Finally_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Finally_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFinally_Return(s)
	}
}

func (s *Finally_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFinally_Return(s)
	}
}

func (s *Finally_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFinally_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Finally_Return() (localctx IFinally_ReturnContext) {
	localctx = NewFinally_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1026, ECMAScriptParserRULE_finally_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6931)
		p.Match(ECMAScriptParserT__78)
	}
	{
		p.SetState(6932)
		p.Block_Return()
	}

	return localctx
}

// IFinally_Yield_ReturnContext is an interface to support dynamic dispatch.
type IFinally_Yield_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinally_Yield_ReturnContext differentiates from other interfaces.
	IsFinally_Yield_ReturnContext()
}

type Finally_Yield_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinally_Yield_ReturnContext() *Finally_Yield_ReturnContext {
	var p = new(Finally_Yield_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_finally_Yield_Return
	return p
}

func (*Finally_Yield_ReturnContext) IsFinally_Yield_ReturnContext() {}

func NewFinally_Yield_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Finally_Yield_ReturnContext {
	var p = new(Finally_Yield_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_finally_Yield_Return

	return p
}

func (s *Finally_Yield_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Finally_Yield_ReturnContext) Block_Yield_Return() IBlock_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_ReturnContext)
}

func (s *Finally_Yield_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Finally_Yield_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Finally_Yield_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFinally_Yield_Return(s)
	}
}

func (s *Finally_Yield_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFinally_Yield_Return(s)
	}
}

func (s *Finally_Yield_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFinally_Yield_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Finally_Yield_Return() (localctx IFinally_Yield_ReturnContext) {
	localctx = NewFinally_Yield_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1028, ECMAScriptParserRULE_finally_Yield_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6934)
		p.Match(ECMAScriptParserT__78)
	}
	{
		p.SetState(6935)
		p.Block_Yield_Return()
	}

	return localctx
}

// IFinally_Await_ReturnContext is an interface to support dynamic dispatch.
type IFinally_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinally_Await_ReturnContext differentiates from other interfaces.
	IsFinally_Await_ReturnContext()
}

type Finally_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinally_Await_ReturnContext() *Finally_Await_ReturnContext {
	var p = new(Finally_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_finally_Await_Return
	return p
}

func (*Finally_Await_ReturnContext) IsFinally_Await_ReturnContext() {}

func NewFinally_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Finally_Await_ReturnContext {
	var p = new(Finally_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_finally_Await_Return

	return p
}

func (s *Finally_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Finally_Await_ReturnContext) Block_Await_Return() IBlock_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Await_ReturnContext)
}

func (s *Finally_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Finally_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Finally_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFinally_Await_Return(s)
	}
}

func (s *Finally_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFinally_Await_Return(s)
	}
}

func (s *Finally_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFinally_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Finally_Await_Return() (localctx IFinally_Await_ReturnContext) {
	localctx = NewFinally_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1030, ECMAScriptParserRULE_finally_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6937)
		p.Match(ECMAScriptParserT__78)
	}
	{
		p.SetState(6938)
		p.Block_Await_Return()
	}

	return localctx
}

// IFinally_Yield_Await_ReturnContext is an interface to support dynamic dispatch.
type IFinally_Yield_Await_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinally_Yield_Await_ReturnContext differentiates from other interfaces.
	IsFinally_Yield_Await_ReturnContext()
}

type Finally_Yield_Await_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinally_Yield_Await_ReturnContext() *Finally_Yield_Await_ReturnContext {
	var p = new(Finally_Yield_Await_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_finally_Yield_Await_Return
	return p
}

func (*Finally_Yield_Await_ReturnContext) IsFinally_Yield_Await_ReturnContext() {}

func NewFinally_Yield_Await_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Finally_Yield_Await_ReturnContext {
	var p = new(Finally_Yield_Await_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_finally_Yield_Await_Return

	return p
}

func (s *Finally_Yield_Await_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *Finally_Yield_Await_ReturnContext) Block_Yield_Await_Return() IBlock_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_Yield_Await_ReturnContext)
}

func (s *Finally_Yield_Await_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Finally_Yield_Await_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Finally_Yield_Await_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFinally_Yield_Await_Return(s)
	}
}

func (s *Finally_Yield_Await_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFinally_Yield_Await_Return(s)
	}
}

func (s *Finally_Yield_Await_ReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFinally_Yield_Await_Return(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Finally_Yield_Await_Return() (localctx IFinally_Yield_Await_ReturnContext) {
	localctx = NewFinally_Yield_Await_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1032, ECMAScriptParserRULE_finally_Yield_Await_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6940)
		p.Match(ECMAScriptParserT__78)
	}
	{
		p.SetState(6941)
		p.Block_Yield_Await_Return()
	}

	return localctx
}

// ICatchParameterContext is an interface to support dynamic dispatch.
type ICatchParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatchParameterContext differentiates from other interfaces.
	IsCatchParameterContext()
}

type CatchParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchParameterContext() *CatchParameterContext {
	var p = new(CatchParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catchParameter
	return p
}

func (*CatchParameterContext) IsCatchParameterContext() {}

func NewCatchParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchParameterContext {
	var p = new(CatchParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catchParameter

	return p
}

func (s *CatchParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchParameterContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *CatchParameterContext) BindingPattern() IBindingPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPatternContext)
}

func (s *CatchParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatchParameter(s)
	}
}

func (s *CatchParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatchParameter(s)
	}
}

func (s *CatchParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatchParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CatchParameter() (localctx ICatchParameterContext) {
	localctx = NewCatchParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1034, ECMAScriptParserRULE_catchParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6945)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6943)
			p.BindingIdentifier()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6944)
			p.BindingPattern()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICatchParameter_YieldContext is an interface to support dynamic dispatch.
type ICatchParameter_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatchParameter_YieldContext differentiates from other interfaces.
	IsCatchParameter_YieldContext()
}

type CatchParameter_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchParameter_YieldContext() *CatchParameter_YieldContext {
	var p = new(CatchParameter_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catchParameter_Yield
	return p
}

func (*CatchParameter_YieldContext) IsCatchParameter_YieldContext() {}

func NewCatchParameter_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchParameter_YieldContext {
	var p = new(CatchParameter_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catchParameter_Yield

	return p
}

func (s *CatchParameter_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchParameter_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *CatchParameter_YieldContext) BindingPattern_Yield() IBindingPattern_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_YieldContext)
}

func (s *CatchParameter_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchParameter_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchParameter_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatchParameter_Yield(s)
	}
}

func (s *CatchParameter_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatchParameter_Yield(s)
	}
}

func (s *CatchParameter_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatchParameter_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CatchParameter_Yield() (localctx ICatchParameter_YieldContext) {
	localctx = NewCatchParameter_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1036, ECMAScriptParserRULE_catchParameter_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6949)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6947)
			p.BindingIdentifier_Yield()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6948)
			p.BindingPattern_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICatchParameter_AwaitContext is an interface to support dynamic dispatch.
type ICatchParameter_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatchParameter_AwaitContext differentiates from other interfaces.
	IsCatchParameter_AwaitContext()
}

type CatchParameter_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchParameter_AwaitContext() *CatchParameter_AwaitContext {
	var p = new(CatchParameter_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catchParameter_Await
	return p
}

func (*CatchParameter_AwaitContext) IsCatchParameter_AwaitContext() {}

func NewCatchParameter_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchParameter_AwaitContext {
	var p = new(CatchParameter_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catchParameter_Await

	return p
}

func (s *CatchParameter_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchParameter_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *CatchParameter_AwaitContext) BindingPattern_Await() IBindingPattern_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_AwaitContext)
}

func (s *CatchParameter_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchParameter_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchParameter_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatchParameter_Await(s)
	}
}

func (s *CatchParameter_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatchParameter_Await(s)
	}
}

func (s *CatchParameter_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatchParameter_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CatchParameter_Await() (localctx ICatchParameter_AwaitContext) {
	localctx = NewCatchParameter_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1038, ECMAScriptParserRULE_catchParameter_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6953)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6951)
			p.BindingIdentifier_Await()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6952)
			p.BindingPattern_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICatchParameter_Yield_AwaitContext is an interface to support dynamic dispatch.
type ICatchParameter_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatchParameter_Yield_AwaitContext differentiates from other interfaces.
	IsCatchParameter_Yield_AwaitContext()
}

type CatchParameter_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchParameter_Yield_AwaitContext() *CatchParameter_Yield_AwaitContext {
	var p = new(CatchParameter_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_catchParameter_Yield_Await
	return p
}

func (*CatchParameter_Yield_AwaitContext) IsCatchParameter_Yield_AwaitContext() {}

func NewCatchParameter_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchParameter_Yield_AwaitContext {
	var p = new(CatchParameter_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_catchParameter_Yield_Await

	return p
}

func (s *CatchParameter_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchParameter_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *CatchParameter_Yield_AwaitContext) BindingPattern_Yield_Await() IBindingPattern_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingPattern_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingPattern_Yield_AwaitContext)
}

func (s *CatchParameter_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchParameter_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchParameter_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCatchParameter_Yield_Await(s)
	}
}

func (s *CatchParameter_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCatchParameter_Yield_Await(s)
	}
}

func (s *CatchParameter_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCatchParameter_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CatchParameter_Yield_Await() (localctx ICatchParameter_Yield_AwaitContext) {
	localctx = NewCatchParameter_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1040, ECMAScriptParserRULE_catchParameter_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6957)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6955)
			p.BindingIdentifier_Yield_Await()
		}

	case ECMAScriptParserT__8, ECMAScriptParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6956)
			p.BindingPattern_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDebuggerStatementContext is an interface to support dynamic dispatch.
type IDebuggerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDebuggerStatementContext differentiates from other interfaces.
	IsDebuggerStatementContext()
}

type DebuggerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDebuggerStatementContext() *DebuggerStatementContext {
	var p = new(DebuggerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_debuggerStatement
	return p
}

func (*DebuggerStatementContext) IsDebuggerStatementContext() {}

func NewDebuggerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DebuggerStatementContext {
	var p = new(DebuggerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_debuggerStatement

	return p
}

func (s *DebuggerStatementContext) GetParser() antlr.Parser { return s.parser }
func (s *DebuggerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DebuggerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DebuggerStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterDebuggerStatement(s)
	}
}

func (s *DebuggerStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitDebuggerStatement(s)
	}
}

func (s *DebuggerStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitDebuggerStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) DebuggerStatement() (localctx IDebuggerStatementContext) {
	localctx = NewDebuggerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1042, ECMAScriptParserRULE_debuggerStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6959)
		p.Match(ECMAScriptParserT__79)
	}
	{
		p.SetState(6960)
		p.Match(ECMAScriptParserT__58)
	}

	return localctx
}

// IFunctionDeclarationContext is an interface to support dynamic dispatch.
type IFunctionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclarationContext differentiates from other interfaces.
	IsFunctionDeclarationContext()
}

type FunctionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclarationContext() *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration
	return p
}

func (*FunctionDeclarationContext) IsFunctionDeclarationContext() {}

func NewFunctionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration

	return p
}

func (s *FunctionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclarationContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *FunctionDeclarationContext) FormalParameters() IFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParametersContext)
}

func (s *FunctionDeclarationContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclarationContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *FunctionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionDeclaration(s)
	}
}

func (s *FunctionDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionDeclaration(s)
	}
}

func (s *FunctionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionDeclaration() (localctx IFunctionDeclarationContext) {
	localctx = NewFunctionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1044, ECMAScriptParserRULE_functionDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6962)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(6963)
		p.BindingIdentifier()
	}
	{
		p.SetState(6964)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6965)
		p.FormalParameters()
	}
	{
		p.SetState(6966)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6967)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(6968)
		p.FunctionBody()
	}
	{
		p.SetState(6969)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IFunctionDeclaration_YieldContext is an interface to support dynamic dispatch.
type IFunctionDeclaration_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclaration_YieldContext differentiates from other interfaces.
	IsFunctionDeclaration_YieldContext()
}

type FunctionDeclaration_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclaration_YieldContext() *FunctionDeclaration_YieldContext {
	var p = new(FunctionDeclaration_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Yield
	return p
}

func (*FunctionDeclaration_YieldContext) IsFunctionDeclaration_YieldContext() {}

func NewFunctionDeclaration_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclaration_YieldContext {
	var p = new(FunctionDeclaration_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Yield

	return p
}

func (s *FunctionDeclaration_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclaration_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *FunctionDeclaration_YieldContext) FormalParameters() IFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParametersContext)
}

func (s *FunctionDeclaration_YieldContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclaration_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *FunctionDeclaration_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclaration_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclaration_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionDeclaration_Yield(s)
	}
}

func (s *FunctionDeclaration_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionDeclaration_Yield(s)
	}
}

func (s *FunctionDeclaration_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionDeclaration_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionDeclaration_Yield() (localctx IFunctionDeclaration_YieldContext) {
	localctx = NewFunctionDeclaration_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1046, ECMAScriptParserRULE_functionDeclaration_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6971)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(6972)
		p.BindingIdentifier_Yield()
	}
	{
		p.SetState(6973)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6974)
		p.FormalParameters()
	}
	{
		p.SetState(6975)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6976)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(6977)
		p.FunctionBody()
	}
	{
		p.SetState(6978)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IFunctionDeclaration_AwaitContext is an interface to support dynamic dispatch.
type IFunctionDeclaration_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclaration_AwaitContext differentiates from other interfaces.
	IsFunctionDeclaration_AwaitContext()
}

type FunctionDeclaration_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclaration_AwaitContext() *FunctionDeclaration_AwaitContext {
	var p = new(FunctionDeclaration_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Await
	return p
}

func (*FunctionDeclaration_AwaitContext) IsFunctionDeclaration_AwaitContext() {}

func NewFunctionDeclaration_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclaration_AwaitContext {
	var p = new(FunctionDeclaration_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Await

	return p
}

func (s *FunctionDeclaration_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclaration_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *FunctionDeclaration_AwaitContext) FormalParameters() IFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParametersContext)
}

func (s *FunctionDeclaration_AwaitContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclaration_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *FunctionDeclaration_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclaration_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclaration_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionDeclaration_Await(s)
	}
}

func (s *FunctionDeclaration_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionDeclaration_Await(s)
	}
}

func (s *FunctionDeclaration_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionDeclaration_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionDeclaration_Await() (localctx IFunctionDeclaration_AwaitContext) {
	localctx = NewFunctionDeclaration_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1048, ECMAScriptParserRULE_functionDeclaration_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6980)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(6981)
		p.BindingIdentifier_Await()
	}
	{
		p.SetState(6982)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6983)
		p.FormalParameters()
	}
	{
		p.SetState(6984)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6985)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(6986)
		p.FunctionBody()
	}
	{
		p.SetState(6987)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IFunctionDeclaration_Yield_AwaitContext is an interface to support dynamic dispatch.
type IFunctionDeclaration_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclaration_Yield_AwaitContext differentiates from other interfaces.
	IsFunctionDeclaration_Yield_AwaitContext()
}

type FunctionDeclaration_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclaration_Yield_AwaitContext() *FunctionDeclaration_Yield_AwaitContext {
	var p = new(FunctionDeclaration_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Yield_Await
	return p
}

func (*FunctionDeclaration_Yield_AwaitContext) IsFunctionDeclaration_Yield_AwaitContext() {}

func NewFunctionDeclaration_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclaration_Yield_AwaitContext {
	var p = new(FunctionDeclaration_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Yield_Await

	return p
}

func (s *FunctionDeclaration_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclaration_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *FunctionDeclaration_Yield_AwaitContext) FormalParameters() IFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParametersContext)
}

func (s *FunctionDeclaration_Yield_AwaitContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclaration_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *FunctionDeclaration_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclaration_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclaration_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionDeclaration_Yield_Await(s)
	}
}

func (s *FunctionDeclaration_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionDeclaration_Yield_Await(s)
	}
}

func (s *FunctionDeclaration_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionDeclaration_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionDeclaration_Yield_Await() (localctx IFunctionDeclaration_Yield_AwaitContext) {
	localctx = NewFunctionDeclaration_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1050, ECMAScriptParserRULE_functionDeclaration_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6989)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(6990)
		p.BindingIdentifier_Yield_Await()
	}
	{
		p.SetState(6991)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(6992)
		p.FormalParameters()
	}
	{
		p.SetState(6993)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(6994)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(6995)
		p.FunctionBody()
	}
	{
		p.SetState(6996)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IFunctionDeclaration_DefaultContext is an interface to support dynamic dispatch.
type IFunctionDeclaration_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclaration_DefaultContext differentiates from other interfaces.
	IsFunctionDeclaration_DefaultContext()
}

type FunctionDeclaration_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclaration_DefaultContext() *FunctionDeclaration_DefaultContext {
	var p = new(FunctionDeclaration_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Default
	return p
}

func (*FunctionDeclaration_DefaultContext) IsFunctionDeclaration_DefaultContext() {}

func NewFunctionDeclaration_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclaration_DefaultContext {
	var p = new(FunctionDeclaration_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Default

	return p
}

func (s *FunctionDeclaration_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclaration_DefaultContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *FunctionDeclaration_DefaultContext) FormalParameters() IFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParametersContext)
}

func (s *FunctionDeclaration_DefaultContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclaration_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *FunctionDeclaration_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclaration_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclaration_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionDeclaration_Default(s)
	}
}

func (s *FunctionDeclaration_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionDeclaration_Default(s)
	}
}

func (s *FunctionDeclaration_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionDeclaration_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionDeclaration_Default() (localctx IFunctionDeclaration_DefaultContext) {
	localctx = NewFunctionDeclaration_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1052, ECMAScriptParserRULE_functionDeclaration_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7015)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 600, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6998)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(6999)
			p.BindingIdentifier()
		}
		{
			p.SetState(7000)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7001)
			p.FormalParameters()
		}
		{
			p.SetState(7002)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7003)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7004)
			p.FunctionBody()
		}
		{
			p.SetState(7005)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7007)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7008)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7009)
			p.FormalParameters()
		}
		{
			p.SetState(7010)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7011)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7012)
			p.FunctionBody()
		}
		{
			p.SetState(7013)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IFunctionDeclaration_Yield_DefaultContext is an interface to support dynamic dispatch.
type IFunctionDeclaration_Yield_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclaration_Yield_DefaultContext differentiates from other interfaces.
	IsFunctionDeclaration_Yield_DefaultContext()
}

type FunctionDeclaration_Yield_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclaration_Yield_DefaultContext() *FunctionDeclaration_Yield_DefaultContext {
	var p = new(FunctionDeclaration_Yield_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Yield_Default
	return p
}

func (*FunctionDeclaration_Yield_DefaultContext) IsFunctionDeclaration_Yield_DefaultContext() {}

func NewFunctionDeclaration_Yield_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclaration_Yield_DefaultContext {
	var p = new(FunctionDeclaration_Yield_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Yield_Default

	return p
}

func (s *FunctionDeclaration_Yield_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclaration_Yield_DefaultContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *FunctionDeclaration_Yield_DefaultContext) FormalParameters() IFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParametersContext)
}

func (s *FunctionDeclaration_Yield_DefaultContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclaration_Yield_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *FunctionDeclaration_Yield_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclaration_Yield_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclaration_Yield_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionDeclaration_Yield_Default(s)
	}
}

func (s *FunctionDeclaration_Yield_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionDeclaration_Yield_Default(s)
	}
}

func (s *FunctionDeclaration_Yield_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionDeclaration_Yield_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionDeclaration_Yield_Default() (localctx IFunctionDeclaration_Yield_DefaultContext) {
	localctx = NewFunctionDeclaration_Yield_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1054, ECMAScriptParserRULE_functionDeclaration_Yield_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7034)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 601, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7017)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7018)
			p.BindingIdentifier_Yield()
		}
		{
			p.SetState(7019)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7020)
			p.FormalParameters()
		}
		{
			p.SetState(7021)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7022)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7023)
			p.FunctionBody()
		}
		{
			p.SetState(7024)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7026)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7027)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7028)
			p.FormalParameters()
		}
		{
			p.SetState(7029)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7030)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7031)
			p.FunctionBody()
		}
		{
			p.SetState(7032)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IFunctionDeclaration_Await_DefaultContext is an interface to support dynamic dispatch.
type IFunctionDeclaration_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclaration_Await_DefaultContext differentiates from other interfaces.
	IsFunctionDeclaration_Await_DefaultContext()
}

type FunctionDeclaration_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclaration_Await_DefaultContext() *FunctionDeclaration_Await_DefaultContext {
	var p = new(FunctionDeclaration_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Await_Default
	return p
}

func (*FunctionDeclaration_Await_DefaultContext) IsFunctionDeclaration_Await_DefaultContext() {}

func NewFunctionDeclaration_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclaration_Await_DefaultContext {
	var p = new(FunctionDeclaration_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Await_Default

	return p
}

func (s *FunctionDeclaration_Await_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclaration_Await_DefaultContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *FunctionDeclaration_Await_DefaultContext) FormalParameters() IFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParametersContext)
}

func (s *FunctionDeclaration_Await_DefaultContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclaration_Await_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *FunctionDeclaration_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclaration_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclaration_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionDeclaration_Await_Default(s)
	}
}

func (s *FunctionDeclaration_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionDeclaration_Await_Default(s)
	}
}

func (s *FunctionDeclaration_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionDeclaration_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionDeclaration_Await_Default() (localctx IFunctionDeclaration_Await_DefaultContext) {
	localctx = NewFunctionDeclaration_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1056, ECMAScriptParserRULE_functionDeclaration_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7053)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 602, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7036)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7037)
			p.BindingIdentifier_Await()
		}
		{
			p.SetState(7038)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7039)
			p.FormalParameters()
		}
		{
			p.SetState(7040)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7041)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7042)
			p.FunctionBody()
		}
		{
			p.SetState(7043)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7045)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7046)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7047)
			p.FormalParameters()
		}
		{
			p.SetState(7048)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7049)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7050)
			p.FunctionBody()
		}
		{
			p.SetState(7051)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IFunctionDeclaration_Yield_Await_DefaultContext is an interface to support dynamic dispatch.
type IFunctionDeclaration_Yield_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclaration_Yield_Await_DefaultContext differentiates from other interfaces.
	IsFunctionDeclaration_Yield_Await_DefaultContext()
}

type FunctionDeclaration_Yield_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclaration_Yield_Await_DefaultContext() *FunctionDeclaration_Yield_Await_DefaultContext {
	var p = new(FunctionDeclaration_Yield_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Yield_Await_Default
	return p
}

func (*FunctionDeclaration_Yield_Await_DefaultContext) IsFunctionDeclaration_Yield_Await_DefaultContext() {
}

func NewFunctionDeclaration_Yield_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclaration_Yield_Await_DefaultContext {
	var p = new(FunctionDeclaration_Yield_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionDeclaration_Yield_Await_Default

	return p
}

func (s *FunctionDeclaration_Yield_Await_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclaration_Yield_Await_DefaultContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *FunctionDeclaration_Yield_Await_DefaultContext) FormalParameters() IFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParametersContext)
}

func (s *FunctionDeclaration_Yield_Await_DefaultContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclaration_Yield_Await_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *FunctionDeclaration_Yield_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclaration_Yield_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclaration_Yield_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionDeclaration_Yield_Await_Default(s)
	}
}

func (s *FunctionDeclaration_Yield_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionDeclaration_Yield_Await_Default(s)
	}
}

func (s *FunctionDeclaration_Yield_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionDeclaration_Yield_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionDeclaration_Yield_Await_Default() (localctx IFunctionDeclaration_Yield_Await_DefaultContext) {
	localctx = NewFunctionDeclaration_Yield_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1058, ECMAScriptParserRULE_functionDeclaration_Yield_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7072)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 603, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7055)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7056)
			p.BindingIdentifier_Yield_Await()
		}
		{
			p.SetState(7057)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7058)
			p.FormalParameters()
		}
		{
			p.SetState(7059)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7060)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7061)
			p.FunctionBody()
		}
		{
			p.SetState(7062)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7064)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7065)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7066)
			p.FormalParameters()
		}
		{
			p.SetState(7067)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7068)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7069)
			p.FunctionBody()
		}
		{
			p.SetState(7070)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IFunctionExpressionContext is an interface to support dynamic dispatch.
type IFunctionExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionExpressionContext differentiates from other interfaces.
	IsFunctionExpressionContext()
}

type FunctionExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionExpressionContext() *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionExpression
	return p
}

func (*FunctionExpressionContext) IsFunctionExpressionContext() {}

func NewFunctionExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionExpression

	return p
}

func (s *FunctionExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionExpressionContext) FormalParameters() IFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParametersContext)
}

func (s *FunctionExpressionContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionExpressionContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *FunctionExpressionContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *FunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionExpression(s)
	}
}

func (s *FunctionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionExpression(s)
	}
}

func (s *FunctionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionExpression() (localctx IFunctionExpressionContext) {
	localctx = NewFunctionExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1060, ECMAScriptParserRULE_functionExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7074)
		p.Match(ECMAScriptParserT__80)
	}
	p.SetState(7076)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(7075)
			p.BindingIdentifier()
		}

	}
	{
		p.SetState(7078)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7079)
		p.FormalParameters()
	}
	{
		p.SetState(7080)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7081)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7082)
		p.FunctionBody()
	}
	{
		p.SetState(7083)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IUniqueFormalParametersContext is an interface to support dynamic dispatch.
type IUniqueFormalParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUniqueFormalParametersContext differentiates from other interfaces.
	IsUniqueFormalParametersContext()
}

type UniqueFormalParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUniqueFormalParametersContext() *UniqueFormalParametersContext {
	var p = new(UniqueFormalParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_uniqueFormalParameters
	return p
}

func (*UniqueFormalParametersContext) IsUniqueFormalParametersContext() {}

func NewUniqueFormalParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UniqueFormalParametersContext {
	var p = new(UniqueFormalParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_uniqueFormalParameters

	return p
}

func (s *UniqueFormalParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *UniqueFormalParametersContext) FormalParameters() IFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParametersContext)
}

func (s *UniqueFormalParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueFormalParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UniqueFormalParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUniqueFormalParameters(s)
	}
}

func (s *UniqueFormalParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUniqueFormalParameters(s)
	}
}

func (s *UniqueFormalParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUniqueFormalParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UniqueFormalParameters() (localctx IUniqueFormalParametersContext) {
	localctx = NewUniqueFormalParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1062, ECMAScriptParserRULE_uniqueFormalParameters)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7085)
		p.FormalParameters()
	}

	return localctx
}

// IUniqueFormalParameters_YieldContext is an interface to support dynamic dispatch.
type IUniqueFormalParameters_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUniqueFormalParameters_YieldContext differentiates from other interfaces.
	IsUniqueFormalParameters_YieldContext()
}

type UniqueFormalParameters_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUniqueFormalParameters_YieldContext() *UniqueFormalParameters_YieldContext {
	var p = new(UniqueFormalParameters_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_uniqueFormalParameters_Yield
	return p
}

func (*UniqueFormalParameters_YieldContext) IsUniqueFormalParameters_YieldContext() {}

func NewUniqueFormalParameters_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UniqueFormalParameters_YieldContext {
	var p = new(UniqueFormalParameters_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_uniqueFormalParameters_Yield

	return p
}

func (s *UniqueFormalParameters_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *UniqueFormalParameters_YieldContext) FormalParameters_Yield() IFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_YieldContext)
}

func (s *UniqueFormalParameters_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueFormalParameters_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UniqueFormalParameters_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUniqueFormalParameters_Yield(s)
	}
}

func (s *UniqueFormalParameters_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUniqueFormalParameters_Yield(s)
	}
}

func (s *UniqueFormalParameters_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUniqueFormalParameters_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UniqueFormalParameters_Yield() (localctx IUniqueFormalParameters_YieldContext) {
	localctx = NewUniqueFormalParameters_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1064, ECMAScriptParserRULE_uniqueFormalParameters_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7087)
		p.FormalParameters_Yield()
	}

	return localctx
}

// IUniqueFormalParameters_AwaitContext is an interface to support dynamic dispatch.
type IUniqueFormalParameters_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUniqueFormalParameters_AwaitContext differentiates from other interfaces.
	IsUniqueFormalParameters_AwaitContext()
}

type UniqueFormalParameters_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUniqueFormalParameters_AwaitContext() *UniqueFormalParameters_AwaitContext {
	var p = new(UniqueFormalParameters_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_uniqueFormalParameters_Await
	return p
}

func (*UniqueFormalParameters_AwaitContext) IsUniqueFormalParameters_AwaitContext() {}

func NewUniqueFormalParameters_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UniqueFormalParameters_AwaitContext {
	var p = new(UniqueFormalParameters_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_uniqueFormalParameters_Await

	return p
}

func (s *UniqueFormalParameters_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *UniqueFormalParameters_AwaitContext) FormalParameters_Await() IFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_AwaitContext)
}

func (s *UniqueFormalParameters_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueFormalParameters_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UniqueFormalParameters_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUniqueFormalParameters_Await(s)
	}
}

func (s *UniqueFormalParameters_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUniqueFormalParameters_Await(s)
	}
}

func (s *UniqueFormalParameters_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUniqueFormalParameters_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UniqueFormalParameters_Await() (localctx IUniqueFormalParameters_AwaitContext) {
	localctx = NewUniqueFormalParameters_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1066, ECMAScriptParserRULE_uniqueFormalParameters_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7089)
		p.FormalParameters_Await()
	}

	return localctx
}

// IUniqueFormalParameters_Yield_AwaitContext is an interface to support dynamic dispatch.
type IUniqueFormalParameters_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUniqueFormalParameters_Yield_AwaitContext differentiates from other interfaces.
	IsUniqueFormalParameters_Yield_AwaitContext()
}

type UniqueFormalParameters_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUniqueFormalParameters_Yield_AwaitContext() *UniqueFormalParameters_Yield_AwaitContext {
	var p = new(UniqueFormalParameters_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_uniqueFormalParameters_Yield_Await
	return p
}

func (*UniqueFormalParameters_Yield_AwaitContext) IsUniqueFormalParameters_Yield_AwaitContext() {}

func NewUniqueFormalParameters_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UniqueFormalParameters_Yield_AwaitContext {
	var p = new(UniqueFormalParameters_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_uniqueFormalParameters_Yield_Await

	return p
}

func (s *UniqueFormalParameters_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *UniqueFormalParameters_Yield_AwaitContext) FormalParameters_Yield_Await() IFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_Yield_AwaitContext)
}

func (s *UniqueFormalParameters_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueFormalParameters_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UniqueFormalParameters_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterUniqueFormalParameters_Yield_Await(s)
	}
}

func (s *UniqueFormalParameters_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitUniqueFormalParameters_Yield_Await(s)
	}
}

func (s *UniqueFormalParameters_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitUniqueFormalParameters_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) UniqueFormalParameters_Yield_Await() (localctx IUniqueFormalParameters_Yield_AwaitContext) {
	localctx = NewUniqueFormalParameters_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1068, ECMAScriptParserRULE_uniqueFormalParameters_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7091)
		p.FormalParameters_Yield_Await()
	}

	return localctx
}

// IFormalParametersContext is an interface to support dynamic dispatch.
type IFormalParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParametersContext differentiates from other interfaces.
	IsFormalParametersContext()
}

type FormalParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParametersContext() *FormalParametersContext {
	var p = new(FormalParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameters
	return p
}

func (*FormalParametersContext) IsFormalParametersContext() {}

func NewFormalParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParametersContext {
	var p = new(FormalParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameters

	return p
}

func (s *FormalParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParametersContext) FunctionRestParameter() IFunctionRestParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionRestParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionRestParameterContext)
}

func (s *FormalParametersContext) FormalParameterList() IFormalParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *FormalParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameters(s)
	}
}

func (s *FormalParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameters(s)
	}
}

func (s *FormalParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameters() (localctx IFormalParametersContext) {
	localctx = NewFormalParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1070, ECMAScriptParserRULE_formalParameters)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7103)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 605, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7094)
			p.FunctionRestParameter()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7095)
			p.formalParameterList(0)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7096)
			p.formalParameterList(0)
		}
		{
			p.SetState(7097)
			p.Match(ECMAScriptParserT__7)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7099)
			p.formalParameterList(0)
		}
		{
			p.SetState(7100)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(7101)
			p.FunctionRestParameter()
		}

	}

	return localctx
}

// IFormalParameters_YieldContext is an interface to support dynamic dispatch.
type IFormalParameters_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameters_YieldContext differentiates from other interfaces.
	IsFormalParameters_YieldContext()
}

type FormalParameters_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameters_YieldContext() *FormalParameters_YieldContext {
	var p = new(FormalParameters_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameters_Yield
	return p
}

func (*FormalParameters_YieldContext) IsFormalParameters_YieldContext() {}

func NewFormalParameters_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameters_YieldContext {
	var p = new(FormalParameters_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameters_Yield

	return p
}

func (s *FormalParameters_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameters_YieldContext) FunctionRestParameter_Yield() IFunctionRestParameter_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionRestParameter_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionRestParameter_YieldContext)
}

func (s *FormalParameters_YieldContext) FormalParameterList_Yield() IFormalParameterList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterList_YieldContext)
}

func (s *FormalParameters_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameters_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameters_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameters_Yield(s)
	}
}

func (s *FormalParameters_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameters_Yield(s)
	}
}

func (s *FormalParameters_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameters_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameters_Yield() (localctx IFormalParameters_YieldContext) {
	localctx = NewFormalParameters_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1072, ECMAScriptParserRULE_formalParameters_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7115)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 606, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7106)
			p.FunctionRestParameter_Yield()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7107)
			p.formalParameterList_Yield(0)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7108)
			p.formalParameterList_Yield(0)
		}
		{
			p.SetState(7109)
			p.Match(ECMAScriptParserT__7)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7111)
			p.formalParameterList_Yield(0)
		}
		{
			p.SetState(7112)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(7113)
			p.FunctionRestParameter_Yield()
		}

	}

	return localctx
}

// IFormalParameters_AwaitContext is an interface to support dynamic dispatch.
type IFormalParameters_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameters_AwaitContext differentiates from other interfaces.
	IsFormalParameters_AwaitContext()
}

type FormalParameters_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameters_AwaitContext() *FormalParameters_AwaitContext {
	var p = new(FormalParameters_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameters_Await
	return p
}

func (*FormalParameters_AwaitContext) IsFormalParameters_AwaitContext() {}

func NewFormalParameters_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameters_AwaitContext {
	var p = new(FormalParameters_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameters_Await

	return p
}

func (s *FormalParameters_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameters_AwaitContext) FunctionRestParameter_Await() IFunctionRestParameter_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionRestParameter_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionRestParameter_AwaitContext)
}

func (s *FormalParameters_AwaitContext) FormalParameterList_Await() IFormalParameterList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterList_AwaitContext)
}

func (s *FormalParameters_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameters_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameters_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameters_Await(s)
	}
}

func (s *FormalParameters_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameters_Await(s)
	}
}

func (s *FormalParameters_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameters_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameters_Await() (localctx IFormalParameters_AwaitContext) {
	localctx = NewFormalParameters_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1074, ECMAScriptParserRULE_formalParameters_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7127)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 607, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7118)
			p.FunctionRestParameter_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7119)
			p.formalParameterList_Await(0)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7120)
			p.formalParameterList_Await(0)
		}
		{
			p.SetState(7121)
			p.Match(ECMAScriptParserT__7)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7123)
			p.formalParameterList_Await(0)
		}
		{
			p.SetState(7124)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(7125)
			p.FunctionRestParameter_Await()
		}

	}

	return localctx
}

// IFormalParameters_Yield_AwaitContext is an interface to support dynamic dispatch.
type IFormalParameters_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameters_Yield_AwaitContext differentiates from other interfaces.
	IsFormalParameters_Yield_AwaitContext()
}

type FormalParameters_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameters_Yield_AwaitContext() *FormalParameters_Yield_AwaitContext {
	var p = new(FormalParameters_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameters_Yield_Await
	return p
}

func (*FormalParameters_Yield_AwaitContext) IsFormalParameters_Yield_AwaitContext() {}

func NewFormalParameters_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameters_Yield_AwaitContext {
	var p = new(FormalParameters_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameters_Yield_Await

	return p
}

func (s *FormalParameters_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameters_Yield_AwaitContext) FunctionRestParameter_Yield_Await() IFunctionRestParameter_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionRestParameter_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionRestParameter_Yield_AwaitContext)
}

func (s *FormalParameters_Yield_AwaitContext) FormalParameterList_Yield_Await() IFormalParameterList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterList_Yield_AwaitContext)
}

func (s *FormalParameters_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameters_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameters_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameters_Yield_Await(s)
	}
}

func (s *FormalParameters_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameters_Yield_Await(s)
	}
}

func (s *FormalParameters_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameters_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameters_Yield_Await() (localctx IFormalParameters_Yield_AwaitContext) {
	localctx = NewFormalParameters_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1076, ECMAScriptParserRULE_formalParameters_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7139)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 608, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7130)
			p.FunctionRestParameter_Yield_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7131)
			p.formalParameterList_Yield_Await(0)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7132)
			p.formalParameterList_Yield_Await(0)
		}
		{
			p.SetState(7133)
			p.Match(ECMAScriptParserT__7)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7135)
			p.formalParameterList_Yield_Await(0)
		}
		{
			p.SetState(7136)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(7137)
			p.FunctionRestParameter_Yield_Await()
		}

	}

	return localctx
}

// IFormalParameterListContext is an interface to support dynamic dispatch.
type IFormalParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameterListContext differentiates from other interfaces.
	IsFormalParameterListContext()
}

type FormalParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameterListContext() *FormalParameterListContext {
	var p = new(FormalParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameterList
	return p
}

func (*FormalParameterListContext) IsFormalParameterListContext() {}

func NewFormalParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameterListContext {
	var p = new(FormalParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameterList

	return p
}

func (s *FormalParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameterListContext) FormalParameter() IFormalParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterContext)
}

func (s *FormalParameterListContext) FormalParameterList() IFormalParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterListContext)
}

func (s *FormalParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameterList(s)
	}
}

func (s *FormalParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameterList(s)
	}
}

func (s *FormalParameterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameterList() (localctx IFormalParameterListContext) {
	return p.formalParameterList(0)
}

func (p *ECMAScriptParser) formalParameterList(_p int) (localctx IFormalParameterListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewFormalParameterListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IFormalParameterListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 1078
	p.EnterRecursionRule(localctx, 1078, ECMAScriptParserRULE_formalParameterList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7142)
		p.FormalParameter()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(7149)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 609, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewFormalParameterListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_formalParameterList)
			p.SetState(7144)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(7145)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(7146)
				p.FormalParameter()
			}

		}
		p.SetState(7151)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 609, p.GetParserRuleContext())
	}

	return localctx
}

// IFormalParameterList_YieldContext is an interface to support dynamic dispatch.
type IFormalParameterList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameterList_YieldContext differentiates from other interfaces.
	IsFormalParameterList_YieldContext()
}

type FormalParameterList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameterList_YieldContext() *FormalParameterList_YieldContext {
	var p = new(FormalParameterList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameterList_Yield
	return p
}

func (*FormalParameterList_YieldContext) IsFormalParameterList_YieldContext() {}

func NewFormalParameterList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameterList_YieldContext {
	var p = new(FormalParameterList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameterList_Yield

	return p
}

func (s *FormalParameterList_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameterList_YieldContext) FormalParameter_Yield() IFormalParameter_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameter_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameter_YieldContext)
}

func (s *FormalParameterList_YieldContext) FormalParameterList_Yield() IFormalParameterList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterList_YieldContext)
}

func (s *FormalParameterList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameterList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameterList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameterList_Yield(s)
	}
}

func (s *FormalParameterList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameterList_Yield(s)
	}
}

func (s *FormalParameterList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameterList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameterList_Yield() (localctx IFormalParameterList_YieldContext) {
	return p.formalParameterList_Yield(0)
}

func (p *ECMAScriptParser) formalParameterList_Yield(_p int) (localctx IFormalParameterList_YieldContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewFormalParameterList_YieldContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IFormalParameterList_YieldContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 1080
	p.EnterRecursionRule(localctx, 1080, ECMAScriptParserRULE_formalParameterList_Yield, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7153)
		p.FormalParameter_Yield()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(7160)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 610, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewFormalParameterList_YieldContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_formalParameterList_Yield)
			p.SetState(7155)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(7156)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(7157)
				p.FormalParameter_Yield()
			}

		}
		p.SetState(7162)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 610, p.GetParserRuleContext())
	}

	return localctx
}

// IFormalParameterList_AwaitContext is an interface to support dynamic dispatch.
type IFormalParameterList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameterList_AwaitContext differentiates from other interfaces.
	IsFormalParameterList_AwaitContext()
}

type FormalParameterList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameterList_AwaitContext() *FormalParameterList_AwaitContext {
	var p = new(FormalParameterList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameterList_Await
	return p
}

func (*FormalParameterList_AwaitContext) IsFormalParameterList_AwaitContext() {}

func NewFormalParameterList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameterList_AwaitContext {
	var p = new(FormalParameterList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameterList_Await

	return p
}

func (s *FormalParameterList_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameterList_AwaitContext) FormalParameter_Await() IFormalParameter_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameter_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameter_AwaitContext)
}

func (s *FormalParameterList_AwaitContext) FormalParameterList_Await() IFormalParameterList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterList_AwaitContext)
}

func (s *FormalParameterList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameterList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameterList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameterList_Await(s)
	}
}

func (s *FormalParameterList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameterList_Await(s)
	}
}

func (s *FormalParameterList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameterList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameterList_Await() (localctx IFormalParameterList_AwaitContext) {
	return p.formalParameterList_Await(0)
}

func (p *ECMAScriptParser) formalParameterList_Await(_p int) (localctx IFormalParameterList_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewFormalParameterList_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IFormalParameterList_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 1082
	p.EnterRecursionRule(localctx, 1082, ECMAScriptParserRULE_formalParameterList_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7164)
		p.FormalParameter_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(7171)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 611, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewFormalParameterList_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_formalParameterList_Await)
			p.SetState(7166)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(7167)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(7168)
				p.FormalParameter_Await()
			}

		}
		p.SetState(7173)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 611, p.GetParserRuleContext())
	}

	return localctx
}

// IFormalParameterList_Yield_AwaitContext is an interface to support dynamic dispatch.
type IFormalParameterList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameterList_Yield_AwaitContext differentiates from other interfaces.
	IsFormalParameterList_Yield_AwaitContext()
}

type FormalParameterList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameterList_Yield_AwaitContext() *FormalParameterList_Yield_AwaitContext {
	var p = new(FormalParameterList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameterList_Yield_Await
	return p
}

func (*FormalParameterList_Yield_AwaitContext) IsFormalParameterList_Yield_AwaitContext() {}

func NewFormalParameterList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameterList_Yield_AwaitContext {
	var p = new(FormalParameterList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameterList_Yield_Await

	return p
}

func (s *FormalParameterList_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameterList_Yield_AwaitContext) FormalParameter_Yield_Await() IFormalParameter_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameter_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameter_Yield_AwaitContext)
}

func (s *FormalParameterList_Yield_AwaitContext) FormalParameterList_Yield_Await() IFormalParameterList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterList_Yield_AwaitContext)
}

func (s *FormalParameterList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameterList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameterList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameterList_Yield_Await(s)
	}
}

func (s *FormalParameterList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameterList_Yield_Await(s)
	}
}

func (s *FormalParameterList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameterList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameterList_Yield_Await() (localctx IFormalParameterList_Yield_AwaitContext) {
	return p.formalParameterList_Yield_Await(0)
}

func (p *ECMAScriptParser) formalParameterList_Yield_Await(_p int) (localctx IFormalParameterList_Yield_AwaitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewFormalParameterList_Yield_AwaitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IFormalParameterList_Yield_AwaitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 1084
	p.EnterRecursionRule(localctx, 1084, ECMAScriptParserRULE_formalParameterList_Yield_Await, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7175)
		p.FormalParameter_Yield_Await()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(7182)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 612, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewFormalParameterList_Yield_AwaitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_formalParameterList_Yield_Await)
			p.SetState(7177)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(7178)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(7179)
				p.FormalParameter_Yield_Await()
			}

		}
		p.SetState(7184)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 612, p.GetParserRuleContext())
	}

	return localctx
}

// IFunctionRestParameterContext is an interface to support dynamic dispatch.
type IFunctionRestParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionRestParameterContext differentiates from other interfaces.
	IsFunctionRestParameterContext()
}

type FunctionRestParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionRestParameterContext() *FunctionRestParameterContext {
	var p = new(FunctionRestParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionRestParameter
	return p
}

func (*FunctionRestParameterContext) IsFunctionRestParameterContext() {}

func NewFunctionRestParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionRestParameterContext {
	var p = new(FunctionRestParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionRestParameter

	return p
}

func (s *FunctionRestParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionRestParameterContext) BindingRestElement() IBindingRestElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestElementContext)
}

func (s *FunctionRestParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionRestParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionRestParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionRestParameter(s)
	}
}

func (s *FunctionRestParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionRestParameter(s)
	}
}

func (s *FunctionRestParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionRestParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionRestParameter() (localctx IFunctionRestParameterContext) {
	localctx = NewFunctionRestParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1086, ECMAScriptParserRULE_functionRestParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7185)
		p.BindingRestElement()
	}

	return localctx
}

// IFunctionRestParameter_YieldContext is an interface to support dynamic dispatch.
type IFunctionRestParameter_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionRestParameter_YieldContext differentiates from other interfaces.
	IsFunctionRestParameter_YieldContext()
}

type FunctionRestParameter_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionRestParameter_YieldContext() *FunctionRestParameter_YieldContext {
	var p = new(FunctionRestParameter_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionRestParameter_Yield
	return p
}

func (*FunctionRestParameter_YieldContext) IsFunctionRestParameter_YieldContext() {}

func NewFunctionRestParameter_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionRestParameter_YieldContext {
	var p = new(FunctionRestParameter_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionRestParameter_Yield

	return p
}

func (s *FunctionRestParameter_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionRestParameter_YieldContext) BindingRestElement_Yield() IBindingRestElement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestElement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestElement_YieldContext)
}

func (s *FunctionRestParameter_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionRestParameter_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionRestParameter_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionRestParameter_Yield(s)
	}
}

func (s *FunctionRestParameter_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionRestParameter_Yield(s)
	}
}

func (s *FunctionRestParameter_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionRestParameter_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionRestParameter_Yield() (localctx IFunctionRestParameter_YieldContext) {
	localctx = NewFunctionRestParameter_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1088, ECMAScriptParserRULE_functionRestParameter_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7187)
		p.BindingRestElement_Yield()
	}

	return localctx
}

// IFunctionRestParameter_AwaitContext is an interface to support dynamic dispatch.
type IFunctionRestParameter_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionRestParameter_AwaitContext differentiates from other interfaces.
	IsFunctionRestParameter_AwaitContext()
}

type FunctionRestParameter_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionRestParameter_AwaitContext() *FunctionRestParameter_AwaitContext {
	var p = new(FunctionRestParameter_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionRestParameter_Await
	return p
}

func (*FunctionRestParameter_AwaitContext) IsFunctionRestParameter_AwaitContext() {}

func NewFunctionRestParameter_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionRestParameter_AwaitContext {
	var p = new(FunctionRestParameter_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionRestParameter_Await

	return p
}

func (s *FunctionRestParameter_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionRestParameter_AwaitContext) BindingRestElement_Await() IBindingRestElement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestElement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestElement_AwaitContext)
}

func (s *FunctionRestParameter_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionRestParameter_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionRestParameter_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionRestParameter_Await(s)
	}
}

func (s *FunctionRestParameter_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionRestParameter_Await(s)
	}
}

func (s *FunctionRestParameter_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionRestParameter_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionRestParameter_Await() (localctx IFunctionRestParameter_AwaitContext) {
	localctx = NewFunctionRestParameter_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1090, ECMAScriptParserRULE_functionRestParameter_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7189)
		p.BindingRestElement_Await()
	}

	return localctx
}

// IFunctionRestParameter_Yield_AwaitContext is an interface to support dynamic dispatch.
type IFunctionRestParameter_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionRestParameter_Yield_AwaitContext differentiates from other interfaces.
	IsFunctionRestParameter_Yield_AwaitContext()
}

type FunctionRestParameter_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionRestParameter_Yield_AwaitContext() *FunctionRestParameter_Yield_AwaitContext {
	var p = new(FunctionRestParameter_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionRestParameter_Yield_Await
	return p
}

func (*FunctionRestParameter_Yield_AwaitContext) IsFunctionRestParameter_Yield_AwaitContext() {}

func NewFunctionRestParameter_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionRestParameter_Yield_AwaitContext {
	var p = new(FunctionRestParameter_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionRestParameter_Yield_Await

	return p
}

func (s *FunctionRestParameter_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionRestParameter_Yield_AwaitContext) BindingRestElement_Yield_Await() IBindingRestElement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingRestElement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingRestElement_Yield_AwaitContext)
}

func (s *FunctionRestParameter_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionRestParameter_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionRestParameter_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionRestParameter_Yield_Await(s)
	}
}

func (s *FunctionRestParameter_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionRestParameter_Yield_Await(s)
	}
}

func (s *FunctionRestParameter_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionRestParameter_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionRestParameter_Yield_Await() (localctx IFunctionRestParameter_Yield_AwaitContext) {
	localctx = NewFunctionRestParameter_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1092, ECMAScriptParserRULE_functionRestParameter_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7191)
		p.BindingRestElement_Yield_Await()
	}

	return localctx
}

// IFormalParameterContext is an interface to support dynamic dispatch.
type IFormalParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameterContext differentiates from other interfaces.
	IsFormalParameterContext()
}

type FormalParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameterContext() *FormalParameterContext {
	var p = new(FormalParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameter
	return p
}

func (*FormalParameterContext) IsFormalParameterContext() {}

func NewFormalParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameterContext {
	var p = new(FormalParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameter

	return p
}

func (s *FormalParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameterContext) BindingElement() IBindingElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElementContext)
}

func (s *FormalParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameter(s)
	}
}

func (s *FormalParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameter(s)
	}
}

func (s *FormalParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameter() (localctx IFormalParameterContext) {
	localctx = NewFormalParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1094, ECMAScriptParserRULE_formalParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7193)
		p.BindingElement()
	}

	return localctx
}

// IFormalParameter_YieldContext is an interface to support dynamic dispatch.
type IFormalParameter_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameter_YieldContext differentiates from other interfaces.
	IsFormalParameter_YieldContext()
}

type FormalParameter_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameter_YieldContext() *FormalParameter_YieldContext {
	var p = new(FormalParameter_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameter_Yield
	return p
}

func (*FormalParameter_YieldContext) IsFormalParameter_YieldContext() {}

func NewFormalParameter_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameter_YieldContext {
	var p = new(FormalParameter_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameter_Yield

	return p
}

func (s *FormalParameter_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameter_YieldContext) BindingElement_Yield() IBindingElement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElement_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElement_YieldContext)
}

func (s *FormalParameter_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameter_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameter_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameter_Yield(s)
	}
}

func (s *FormalParameter_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameter_Yield(s)
	}
}

func (s *FormalParameter_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameter_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameter_Yield() (localctx IFormalParameter_YieldContext) {
	localctx = NewFormalParameter_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1096, ECMAScriptParserRULE_formalParameter_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7195)
		p.BindingElement_Yield()
	}

	return localctx
}

// IFormalParameter_AwaitContext is an interface to support dynamic dispatch.
type IFormalParameter_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameter_AwaitContext differentiates from other interfaces.
	IsFormalParameter_AwaitContext()
}

type FormalParameter_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameter_AwaitContext() *FormalParameter_AwaitContext {
	var p = new(FormalParameter_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameter_Await
	return p
}

func (*FormalParameter_AwaitContext) IsFormalParameter_AwaitContext() {}

func NewFormalParameter_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameter_AwaitContext {
	var p = new(FormalParameter_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameter_Await

	return p
}

func (s *FormalParameter_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameter_AwaitContext) BindingElement_Await() IBindingElement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElement_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElement_AwaitContext)
}

func (s *FormalParameter_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameter_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameter_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameter_Await(s)
	}
}

func (s *FormalParameter_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameter_Await(s)
	}
}

func (s *FormalParameter_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameter_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameter_Await() (localctx IFormalParameter_AwaitContext) {
	localctx = NewFormalParameter_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1098, ECMAScriptParserRULE_formalParameter_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7197)
		p.BindingElement_Await()
	}

	return localctx
}

// IFormalParameter_Yield_AwaitContext is an interface to support dynamic dispatch.
type IFormalParameter_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalParameter_Yield_AwaitContext differentiates from other interfaces.
	IsFormalParameter_Yield_AwaitContext()
}

type FormalParameter_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalParameter_Yield_AwaitContext() *FormalParameter_Yield_AwaitContext {
	var p = new(FormalParameter_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_formalParameter_Yield_Await
	return p
}

func (*FormalParameter_Yield_AwaitContext) IsFormalParameter_Yield_AwaitContext() {}

func NewFormalParameter_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalParameter_Yield_AwaitContext {
	var p = new(FormalParameter_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_formalParameter_Yield_Await

	return p
}

func (s *FormalParameter_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalParameter_Yield_AwaitContext) BindingElement_Yield_Await() IBindingElement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingElement_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingElement_Yield_AwaitContext)
}

func (s *FormalParameter_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalParameter_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FormalParameter_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFormalParameter_Yield_Await(s)
	}
}

func (s *FormalParameter_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFormalParameter_Yield_Await(s)
	}
}

func (s *FormalParameter_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFormalParameter_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FormalParameter_Yield_Await() (localctx IFormalParameter_Yield_AwaitContext) {
	localctx = NewFormalParameter_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1100, ECMAScriptParserRULE_formalParameter_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7199)
		p.BindingElement_Yield_Await()
	}

	return localctx
}

// IFunctionBodyContext is an interface to support dynamic dispatch.
type IFunctionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionBodyContext differentiates from other interfaces.
	IsFunctionBodyContext()
}

type FunctionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBodyContext() *FunctionBodyContext {
	var p = new(FunctionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionBody
	return p
}

func (*FunctionBodyContext) IsFunctionBodyContext() {}

func NewFunctionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBodyContext {
	var p = new(FunctionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionBody

	return p
}

func (s *FunctionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBodyContext) FunctionStatementList() IFunctionStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionStatementListContext)
}

func (s *FunctionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionBody(s)
	}
}

func (s *FunctionBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionBody(s)
	}
}

func (s *FunctionBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionBody() (localctx IFunctionBodyContext) {
	localctx = NewFunctionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1102, ECMAScriptParserRULE_functionBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7201)
		p.FunctionStatementList()
	}

	return localctx
}

// IFunctionBody_YieldContext is an interface to support dynamic dispatch.
type IFunctionBody_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionBody_YieldContext differentiates from other interfaces.
	IsFunctionBody_YieldContext()
}

type FunctionBody_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBody_YieldContext() *FunctionBody_YieldContext {
	var p = new(FunctionBody_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionBody_Yield
	return p
}

func (*FunctionBody_YieldContext) IsFunctionBody_YieldContext() {}

func NewFunctionBody_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBody_YieldContext {
	var p = new(FunctionBody_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionBody_Yield

	return p
}

func (s *FunctionBody_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBody_YieldContext) FunctionStatementList_Yield() IFunctionStatementList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionStatementList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionStatementList_YieldContext)
}

func (s *FunctionBody_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBody_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBody_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionBody_Yield(s)
	}
}

func (s *FunctionBody_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionBody_Yield(s)
	}
}

func (s *FunctionBody_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionBody_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionBody_Yield() (localctx IFunctionBody_YieldContext) {
	localctx = NewFunctionBody_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1104, ECMAScriptParserRULE_functionBody_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7203)
		p.FunctionStatementList_Yield()
	}

	return localctx
}

// IFunctionBody_AwaitContext is an interface to support dynamic dispatch.
type IFunctionBody_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionBody_AwaitContext differentiates from other interfaces.
	IsFunctionBody_AwaitContext()
}

type FunctionBody_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBody_AwaitContext() *FunctionBody_AwaitContext {
	var p = new(FunctionBody_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionBody_Await
	return p
}

func (*FunctionBody_AwaitContext) IsFunctionBody_AwaitContext() {}

func NewFunctionBody_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBody_AwaitContext {
	var p = new(FunctionBody_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionBody_Await

	return p
}

func (s *FunctionBody_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBody_AwaitContext) FunctionStatementList_Await() IFunctionStatementList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionStatementList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionStatementList_AwaitContext)
}

func (s *FunctionBody_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBody_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBody_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionBody_Await(s)
	}
}

func (s *FunctionBody_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionBody_Await(s)
	}
}

func (s *FunctionBody_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionBody_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionBody_Await() (localctx IFunctionBody_AwaitContext) {
	localctx = NewFunctionBody_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1106, ECMAScriptParserRULE_functionBody_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7205)
		p.FunctionStatementList_Await()
	}

	return localctx
}

// IFunctionBody_Yield_AwaitContext is an interface to support dynamic dispatch.
type IFunctionBody_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionBody_Yield_AwaitContext differentiates from other interfaces.
	IsFunctionBody_Yield_AwaitContext()
}

type FunctionBody_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBody_Yield_AwaitContext() *FunctionBody_Yield_AwaitContext {
	var p = new(FunctionBody_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionBody_Yield_Await
	return p
}

func (*FunctionBody_Yield_AwaitContext) IsFunctionBody_Yield_AwaitContext() {}

func NewFunctionBody_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBody_Yield_AwaitContext {
	var p = new(FunctionBody_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionBody_Yield_Await

	return p
}

func (s *FunctionBody_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBody_Yield_AwaitContext) FunctionStatementList_Yield_Await() IFunctionStatementList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionStatementList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionStatementList_Yield_AwaitContext)
}

func (s *FunctionBody_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBody_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBody_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionBody_Yield_Await(s)
	}
}

func (s *FunctionBody_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionBody_Yield_Await(s)
	}
}

func (s *FunctionBody_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionBody_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionBody_Yield_Await() (localctx IFunctionBody_Yield_AwaitContext) {
	localctx = NewFunctionBody_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1108, ECMAScriptParserRULE_functionBody_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7207)
		p.FunctionStatementList_Yield_Await()
	}

	return localctx
}

// IFunctionStatementListContext is an interface to support dynamic dispatch.
type IFunctionStatementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionStatementListContext differentiates from other interfaces.
	IsFunctionStatementListContext()
}

type FunctionStatementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionStatementListContext() *FunctionStatementListContext {
	var p = new(FunctionStatementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionStatementList
	return p
}

func (*FunctionStatementListContext) IsFunctionStatementListContext() {}

func NewFunctionStatementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionStatementListContext {
	var p = new(FunctionStatementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionStatementList

	return p
}

func (s *FunctionStatementListContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionStatementListContext) StatementList_Return() IStatementList_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_ReturnContext)
}

func (s *FunctionStatementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionStatementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionStatementListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionStatementList(s)
	}
}

func (s *FunctionStatementListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionStatementList(s)
	}
}

func (s *FunctionStatementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionStatementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionStatementList() (localctx IFunctionStatementListContext) {
	localctx = NewFunctionStatementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1110, ECMAScriptParserRULE_functionStatementList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7210)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(7209)
			p.StatementList_Return()
		}

	}

	return localctx
}

// IFunctionStatementList_YieldContext is an interface to support dynamic dispatch.
type IFunctionStatementList_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionStatementList_YieldContext differentiates from other interfaces.
	IsFunctionStatementList_YieldContext()
}

type FunctionStatementList_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionStatementList_YieldContext() *FunctionStatementList_YieldContext {
	var p = new(FunctionStatementList_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionStatementList_Yield
	return p
}

func (*FunctionStatementList_YieldContext) IsFunctionStatementList_YieldContext() {}

func NewFunctionStatementList_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionStatementList_YieldContext {
	var p = new(FunctionStatementList_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionStatementList_Yield

	return p
}

func (s *FunctionStatementList_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionStatementList_YieldContext) StatementList_Yield_Return() IStatementList_Yield_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Yield_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Yield_ReturnContext)
}

func (s *FunctionStatementList_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionStatementList_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionStatementList_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionStatementList_Yield(s)
	}
}

func (s *FunctionStatementList_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionStatementList_Yield(s)
	}
}

func (s *FunctionStatementList_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionStatementList_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionStatementList_Yield() (localctx IFunctionStatementList_YieldContext) {
	localctx = NewFunctionStatementList_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1112, ECMAScriptParserRULE_functionStatementList_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7213)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(7212)
			p.StatementList_Yield_Return()
		}

	}

	return localctx
}

// IFunctionStatementList_AwaitContext is an interface to support dynamic dispatch.
type IFunctionStatementList_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionStatementList_AwaitContext differentiates from other interfaces.
	IsFunctionStatementList_AwaitContext()
}

type FunctionStatementList_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionStatementList_AwaitContext() *FunctionStatementList_AwaitContext {
	var p = new(FunctionStatementList_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionStatementList_Await
	return p
}

func (*FunctionStatementList_AwaitContext) IsFunctionStatementList_AwaitContext() {}

func NewFunctionStatementList_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionStatementList_AwaitContext {
	var p = new(FunctionStatementList_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionStatementList_Await

	return p
}

func (s *FunctionStatementList_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionStatementList_AwaitContext) StatementList_Await_Return() IStatementList_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Await_ReturnContext)
}

func (s *FunctionStatementList_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionStatementList_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionStatementList_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionStatementList_Await(s)
	}
}

func (s *FunctionStatementList_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionStatementList_Await(s)
	}
}

func (s *FunctionStatementList_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionStatementList_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionStatementList_Await() (localctx IFunctionStatementList_AwaitContext) {
	localctx = NewFunctionStatementList_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1114, ECMAScriptParserRULE_functionStatementList_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7216)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(7215)
			p.StatementList_Await_Return()
		}

	}

	return localctx
}

// IFunctionStatementList_Yield_AwaitContext is an interface to support dynamic dispatch.
type IFunctionStatementList_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionStatementList_Yield_AwaitContext differentiates from other interfaces.
	IsFunctionStatementList_Yield_AwaitContext()
}

type FunctionStatementList_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionStatementList_Yield_AwaitContext() *FunctionStatementList_Yield_AwaitContext {
	var p = new(FunctionStatementList_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_functionStatementList_Yield_Await
	return p
}

func (*FunctionStatementList_Yield_AwaitContext) IsFunctionStatementList_Yield_AwaitContext() {}

func NewFunctionStatementList_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionStatementList_Yield_AwaitContext {
	var p = new(FunctionStatementList_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_functionStatementList_Yield_Await

	return p
}

func (s *FunctionStatementList_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionStatementList_Yield_AwaitContext) StatementList_Yield_Await_Return() IStatementList_Yield_Await_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementList_Yield_Await_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementList_Yield_Await_ReturnContext)
}

func (s *FunctionStatementList_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionStatementList_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionStatementList_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFunctionStatementList_Yield_Await(s)
	}
}

func (s *FunctionStatementList_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFunctionStatementList_Yield_Await(s)
	}
}

func (s *FunctionStatementList_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFunctionStatementList_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FunctionStatementList_Yield_Await() (localctx IFunctionStatementList_Yield_AwaitContext) {
	localctx = NewFunctionStatementList_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1116, ECMAScriptParserRULE_functionStatementList_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7219)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__70-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(7218)
			p.StatementList_Yield_Await_Return()
		}

	}

	return localctx
}

// IArrowFunctionContext is an interface to support dynamic dispatch.
type IArrowFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowFunctionContext differentiates from other interfaces.
	IsArrowFunctionContext()
}

type ArrowFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowFunctionContext() *ArrowFunctionContext {
	var p = new(ArrowFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction
	return p
}

func (*ArrowFunctionContext) IsArrowFunctionContext() {}

func NewArrowFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowFunctionContext {
	var p = new(ArrowFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction

	return p
}

func (s *ArrowFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowFunctionContext) ArrowParameters() IArrowParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowParametersContext)
}

func (s *ArrowFunctionContext) ConciseBody() IConciseBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConciseBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConciseBodyContext)
}

func (s *ArrowFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowFunction(s)
	}
}

func (s *ArrowFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowFunction(s)
	}
}

func (s *ArrowFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowFunction() (localctx IArrowFunctionContext) {
	localctx = NewArrowFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1118, ECMAScriptParserRULE_arrowFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7221)
		p.ArrowParameters()
	}
	{
		p.SetState(7222)
		p.Match(ECMAScriptParserT__81)
	}
	{
		p.SetState(7223)
		p.ConciseBody()
	}

	return localctx
}

// IArrowFunction_InContext is an interface to support dynamic dispatch.
type IArrowFunction_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowFunction_InContext differentiates from other interfaces.
	IsArrowFunction_InContext()
}

type ArrowFunction_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowFunction_InContext() *ArrowFunction_InContext {
	var p = new(ArrowFunction_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_In
	return p
}

func (*ArrowFunction_InContext) IsArrowFunction_InContext() {}

func NewArrowFunction_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowFunction_InContext {
	var p = new(ArrowFunction_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_In

	return p
}

func (s *ArrowFunction_InContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowFunction_InContext) ArrowParameters() IArrowParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowParametersContext)
}

func (s *ArrowFunction_InContext) ConciseBody_In() IConciseBody_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConciseBody_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConciseBody_InContext)
}

func (s *ArrowFunction_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunction_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowFunction_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowFunction_In(s)
	}
}

func (s *ArrowFunction_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowFunction_In(s)
	}
}

func (s *ArrowFunction_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowFunction_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowFunction_In() (localctx IArrowFunction_InContext) {
	localctx = NewArrowFunction_InContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1120, ECMAScriptParserRULE_arrowFunction_In)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7225)
		p.ArrowParameters()
	}
	{
		p.SetState(7226)
		p.Match(ECMAScriptParserT__81)
	}
	{
		p.SetState(7227)
		p.ConciseBody_In()
	}

	return localctx
}

// IArrowFunction_YieldContext is an interface to support dynamic dispatch.
type IArrowFunction_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowFunction_YieldContext differentiates from other interfaces.
	IsArrowFunction_YieldContext()
}

type ArrowFunction_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowFunction_YieldContext() *ArrowFunction_YieldContext {
	var p = new(ArrowFunction_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_Yield
	return p
}

func (*ArrowFunction_YieldContext) IsArrowFunction_YieldContext() {}

func NewArrowFunction_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowFunction_YieldContext {
	var p = new(ArrowFunction_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_Yield

	return p
}

func (s *ArrowFunction_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowFunction_YieldContext) ArrowParameters_Yield() IArrowParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowParameters_YieldContext)
}

func (s *ArrowFunction_YieldContext) ConciseBody() IConciseBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConciseBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConciseBodyContext)
}

func (s *ArrowFunction_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunction_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowFunction_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowFunction_Yield(s)
	}
}

func (s *ArrowFunction_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowFunction_Yield(s)
	}
}

func (s *ArrowFunction_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowFunction_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowFunction_Yield() (localctx IArrowFunction_YieldContext) {
	localctx = NewArrowFunction_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1122, ECMAScriptParserRULE_arrowFunction_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7229)
		p.ArrowParameters_Yield()
	}
	{
		p.SetState(7230)
		p.Match(ECMAScriptParserT__81)
	}
	{
		p.SetState(7231)
		p.ConciseBody()
	}

	return localctx
}

// IArrowFunction_In_YieldContext is an interface to support dynamic dispatch.
type IArrowFunction_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowFunction_In_YieldContext differentiates from other interfaces.
	IsArrowFunction_In_YieldContext()
}

type ArrowFunction_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowFunction_In_YieldContext() *ArrowFunction_In_YieldContext {
	var p = new(ArrowFunction_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_In_Yield
	return p
}

func (*ArrowFunction_In_YieldContext) IsArrowFunction_In_YieldContext() {}

func NewArrowFunction_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowFunction_In_YieldContext {
	var p = new(ArrowFunction_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_In_Yield

	return p
}

func (s *ArrowFunction_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowFunction_In_YieldContext) ArrowParameters_Yield() IArrowParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowParameters_YieldContext)
}

func (s *ArrowFunction_In_YieldContext) ConciseBody_In() IConciseBody_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConciseBody_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConciseBody_InContext)
}

func (s *ArrowFunction_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunction_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowFunction_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowFunction_In_Yield(s)
	}
}

func (s *ArrowFunction_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowFunction_In_Yield(s)
	}
}

func (s *ArrowFunction_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowFunction_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowFunction_In_Yield() (localctx IArrowFunction_In_YieldContext) {
	localctx = NewArrowFunction_In_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1124, ECMAScriptParserRULE_arrowFunction_In_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7233)
		p.ArrowParameters_Yield()
	}
	{
		p.SetState(7234)
		p.Match(ECMAScriptParserT__81)
	}
	{
		p.SetState(7235)
		p.ConciseBody_In()
	}

	return localctx
}

// IArrowFunction_AwaitContext is an interface to support dynamic dispatch.
type IArrowFunction_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowFunction_AwaitContext differentiates from other interfaces.
	IsArrowFunction_AwaitContext()
}

type ArrowFunction_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowFunction_AwaitContext() *ArrowFunction_AwaitContext {
	var p = new(ArrowFunction_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_Await
	return p
}

func (*ArrowFunction_AwaitContext) IsArrowFunction_AwaitContext() {}

func NewArrowFunction_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowFunction_AwaitContext {
	var p = new(ArrowFunction_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_Await

	return p
}

func (s *ArrowFunction_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowFunction_AwaitContext) ArrowParameters_Await() IArrowParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowParameters_AwaitContext)
}

func (s *ArrowFunction_AwaitContext) ConciseBody() IConciseBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConciseBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConciseBodyContext)
}

func (s *ArrowFunction_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunction_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowFunction_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowFunction_Await(s)
	}
}

func (s *ArrowFunction_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowFunction_Await(s)
	}
}

func (s *ArrowFunction_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowFunction_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowFunction_Await() (localctx IArrowFunction_AwaitContext) {
	localctx = NewArrowFunction_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1126, ECMAScriptParserRULE_arrowFunction_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7237)
		p.ArrowParameters_Await()
	}
	{
		p.SetState(7238)
		p.Match(ECMAScriptParserT__81)
	}
	{
		p.SetState(7239)
		p.ConciseBody()
	}

	return localctx
}

// IArrowFunction_In_AwaitContext is an interface to support dynamic dispatch.
type IArrowFunction_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowFunction_In_AwaitContext differentiates from other interfaces.
	IsArrowFunction_In_AwaitContext()
}

type ArrowFunction_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowFunction_In_AwaitContext() *ArrowFunction_In_AwaitContext {
	var p = new(ArrowFunction_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_In_Await
	return p
}

func (*ArrowFunction_In_AwaitContext) IsArrowFunction_In_AwaitContext() {}

func NewArrowFunction_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowFunction_In_AwaitContext {
	var p = new(ArrowFunction_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_In_Await

	return p
}

func (s *ArrowFunction_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowFunction_In_AwaitContext) ArrowParameters_Await() IArrowParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowParameters_AwaitContext)
}

func (s *ArrowFunction_In_AwaitContext) ConciseBody_In() IConciseBody_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConciseBody_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConciseBody_InContext)
}

func (s *ArrowFunction_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunction_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowFunction_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowFunction_In_Await(s)
	}
}

func (s *ArrowFunction_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowFunction_In_Await(s)
	}
}

func (s *ArrowFunction_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowFunction_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowFunction_In_Await() (localctx IArrowFunction_In_AwaitContext) {
	localctx = NewArrowFunction_In_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1128, ECMAScriptParserRULE_arrowFunction_In_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7241)
		p.ArrowParameters_Await()
	}
	{
		p.SetState(7242)
		p.Match(ECMAScriptParserT__81)
	}
	{
		p.SetState(7243)
		p.ConciseBody_In()
	}

	return localctx
}

// IArrowFunction_Yield_AwaitContext is an interface to support dynamic dispatch.
type IArrowFunction_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowFunction_Yield_AwaitContext differentiates from other interfaces.
	IsArrowFunction_Yield_AwaitContext()
}

type ArrowFunction_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowFunction_Yield_AwaitContext() *ArrowFunction_Yield_AwaitContext {
	var p = new(ArrowFunction_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_Yield_Await
	return p
}

func (*ArrowFunction_Yield_AwaitContext) IsArrowFunction_Yield_AwaitContext() {}

func NewArrowFunction_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowFunction_Yield_AwaitContext {
	var p = new(ArrowFunction_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_Yield_Await

	return p
}

func (s *ArrowFunction_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowFunction_Yield_AwaitContext) ArrowParameters_Yield_Await() IArrowParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowParameters_Yield_AwaitContext)
}

func (s *ArrowFunction_Yield_AwaitContext) ConciseBody() IConciseBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConciseBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConciseBodyContext)
}

func (s *ArrowFunction_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunction_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowFunction_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowFunction_Yield_Await(s)
	}
}

func (s *ArrowFunction_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowFunction_Yield_Await(s)
	}
}

func (s *ArrowFunction_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowFunction_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowFunction_Yield_Await() (localctx IArrowFunction_Yield_AwaitContext) {
	localctx = NewArrowFunction_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1130, ECMAScriptParserRULE_arrowFunction_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7245)
		p.ArrowParameters_Yield_Await()
	}
	{
		p.SetState(7246)
		p.Match(ECMAScriptParserT__81)
	}
	{
		p.SetState(7247)
		p.ConciseBody()
	}

	return localctx
}

// IArrowFunction_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IArrowFunction_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowFunction_In_Yield_AwaitContext differentiates from other interfaces.
	IsArrowFunction_In_Yield_AwaitContext()
}

type ArrowFunction_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowFunction_In_Yield_AwaitContext() *ArrowFunction_In_Yield_AwaitContext {
	var p = new(ArrowFunction_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_In_Yield_Await
	return p
}

func (*ArrowFunction_In_Yield_AwaitContext) IsArrowFunction_In_Yield_AwaitContext() {}

func NewArrowFunction_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowFunction_In_Yield_AwaitContext {
	var p = new(ArrowFunction_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowFunction_In_Yield_Await

	return p
}

func (s *ArrowFunction_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowFunction_In_Yield_AwaitContext) ArrowParameters_Yield_Await() IArrowParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowParameters_Yield_AwaitContext)
}

func (s *ArrowFunction_In_Yield_AwaitContext) ConciseBody_In() IConciseBody_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConciseBody_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConciseBody_InContext)
}

func (s *ArrowFunction_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowFunction_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowFunction_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowFunction_In_Yield_Await(s)
	}
}

func (s *ArrowFunction_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowFunction_In_Yield_Await(s)
	}
}

func (s *ArrowFunction_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowFunction_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowFunction_In_Yield_Await() (localctx IArrowFunction_In_Yield_AwaitContext) {
	localctx = NewArrowFunction_In_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1132, ECMAScriptParserRULE_arrowFunction_In_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7249)
		p.ArrowParameters_Yield_Await()
	}
	{
		p.SetState(7250)
		p.Match(ECMAScriptParserT__81)
	}
	{
		p.SetState(7251)
		p.ConciseBody_In()
	}

	return localctx
}

// IArrowParametersContext is an interface to support dynamic dispatch.
type IArrowParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowParametersContext differentiates from other interfaces.
	IsArrowParametersContext()
}

type ArrowParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowParametersContext() *ArrowParametersContext {
	var p = new(ArrowParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowParameters
	return p
}

func (*ArrowParametersContext) IsArrowParametersContext() {}

func NewArrowParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowParametersContext {
	var p = new(ArrowParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowParameters

	return p
}

func (s *ArrowParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowParametersContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *ArrowParametersContext) CoverParenthesizedExpressionAndArrowParameterList() ICoverParenthesizedExpressionAndArrowParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverParenthesizedExpressionAndArrowParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverParenthesizedExpressionAndArrowParameterListContext)
}

func (s *ArrowParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowParameters(s)
	}
}

func (s *ArrowParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowParameters(s)
	}
}

func (s *ArrowParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowParameters() (localctx IArrowParametersContext) {
	localctx = NewArrowParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1134, ECMAScriptParserRULE_arrowParameters)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7255)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7253)
			p.BindingIdentifier()
		}

	case ECMAScriptParserT__4:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7254)
			p.CoverParenthesizedExpressionAndArrowParameterList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArrowParameters_YieldContext is an interface to support dynamic dispatch.
type IArrowParameters_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowParameters_YieldContext differentiates from other interfaces.
	IsArrowParameters_YieldContext()
}

type ArrowParameters_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowParameters_YieldContext() *ArrowParameters_YieldContext {
	var p = new(ArrowParameters_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowParameters_Yield
	return p
}

func (*ArrowParameters_YieldContext) IsArrowParameters_YieldContext() {}

func NewArrowParameters_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowParameters_YieldContext {
	var p = new(ArrowParameters_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowParameters_Yield

	return p
}

func (s *ArrowParameters_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowParameters_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *ArrowParameters_YieldContext) CoverParenthesizedExpressionAndArrowParameterList_Yield() ICoverParenthesizedExpressionAndArrowParameterList_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverParenthesizedExpressionAndArrowParameterList_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverParenthesizedExpressionAndArrowParameterList_YieldContext)
}

func (s *ArrowParameters_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowParameters_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowParameters_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowParameters_Yield(s)
	}
}

func (s *ArrowParameters_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowParameters_Yield(s)
	}
}

func (s *ArrowParameters_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowParameters_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowParameters_Yield() (localctx IArrowParameters_YieldContext) {
	localctx = NewArrowParameters_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1136, ECMAScriptParserRULE_arrowParameters_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7259)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7257)
			p.BindingIdentifier_Yield()
		}

	case ECMAScriptParserT__4:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7258)
			p.CoverParenthesizedExpressionAndArrowParameterList_Yield()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArrowParameters_AwaitContext is an interface to support dynamic dispatch.
type IArrowParameters_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowParameters_AwaitContext differentiates from other interfaces.
	IsArrowParameters_AwaitContext()
}

type ArrowParameters_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowParameters_AwaitContext() *ArrowParameters_AwaitContext {
	var p = new(ArrowParameters_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowParameters_Await
	return p
}

func (*ArrowParameters_AwaitContext) IsArrowParameters_AwaitContext() {}

func NewArrowParameters_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowParameters_AwaitContext {
	var p = new(ArrowParameters_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowParameters_Await

	return p
}

func (s *ArrowParameters_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowParameters_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *ArrowParameters_AwaitContext) CoverParenthesizedExpressionAndArrowParameterList_Await() ICoverParenthesizedExpressionAndArrowParameterList_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverParenthesizedExpressionAndArrowParameterList_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverParenthesizedExpressionAndArrowParameterList_AwaitContext)
}

func (s *ArrowParameters_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowParameters_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowParameters_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowParameters_Await(s)
	}
}

func (s *ArrowParameters_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowParameters_Await(s)
	}
}

func (s *ArrowParameters_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowParameters_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowParameters_Await() (localctx IArrowParameters_AwaitContext) {
	localctx = NewArrowParameters_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1138, ECMAScriptParserRULE_arrowParameters_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7263)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7261)
			p.BindingIdentifier_Await()
		}

	case ECMAScriptParserT__4:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7262)
			p.CoverParenthesizedExpressionAndArrowParameterList_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArrowParameters_Yield_AwaitContext is an interface to support dynamic dispatch.
type IArrowParameters_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowParameters_Yield_AwaitContext differentiates from other interfaces.
	IsArrowParameters_Yield_AwaitContext()
}

type ArrowParameters_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowParameters_Yield_AwaitContext() *ArrowParameters_Yield_AwaitContext {
	var p = new(ArrowParameters_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_arrowParameters_Yield_Await
	return p
}

func (*ArrowParameters_Yield_AwaitContext) IsArrowParameters_Yield_AwaitContext() {}

func NewArrowParameters_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowParameters_Yield_AwaitContext {
	var p = new(ArrowParameters_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_arrowParameters_Yield_Await

	return p
}

func (s *ArrowParameters_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowParameters_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *ArrowParameters_Yield_AwaitContext) CoverParenthesizedExpressionAndArrowParameterList_Yield_Await() ICoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverParenthesizedExpressionAndArrowParameterList_Yield_AwaitContext)
}

func (s *ArrowParameters_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowParameters_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowParameters_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterArrowParameters_Yield_Await(s)
	}
}

func (s *ArrowParameters_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitArrowParameters_Yield_Await(s)
	}
}

func (s *ArrowParameters_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitArrowParameters_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ArrowParameters_Yield_Await() (localctx IArrowParameters_Yield_AwaitContext) {
	localctx = NewArrowParameters_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1140, ECMAScriptParserRULE_arrowParameters_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7267)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7265)
			p.BindingIdentifier_Yield_Await()
		}

	case ECMAScriptParserT__4:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7266)
			p.CoverParenthesizedExpressionAndArrowParameterList_Yield_Await()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConciseBodyContext is an interface to support dynamic dispatch.
type IConciseBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConciseBodyContext differentiates from other interfaces.
	IsConciseBodyContext()
}

type ConciseBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConciseBodyContext() *ConciseBodyContext {
	var p = new(ConciseBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_conciseBody
	return p
}

func (*ConciseBodyContext) IsConciseBodyContext() {}

func NewConciseBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConciseBodyContext {
	var p = new(ConciseBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_conciseBody

	return p
}

func (s *ConciseBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *ConciseBodyContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ConciseBodyContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *ConciseBodyContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ConciseBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConciseBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConciseBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterConciseBody(s)
	}
}

func (s *ConciseBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitConciseBody(s)
	}
}

func (s *ConciseBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitConciseBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ConciseBody() (localctx IConciseBodyContext) {
	localctx = NewConciseBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1142, ECMAScriptParserRULE_conciseBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7275)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 621, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(7269)

		if !(negativeLookahead("{")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"{\") ", ""))
		}
		{
			p.SetState(7270)
			p.AssignmentExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7271)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7272)
			p.FunctionBody()
		}
		{
			p.SetState(7273)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IConciseBody_InContext is an interface to support dynamic dispatch.
type IConciseBody_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConciseBody_InContext differentiates from other interfaces.
	IsConciseBody_InContext()
}

type ConciseBody_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConciseBody_InContext() *ConciseBody_InContext {
	var p = new(ConciseBody_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_conciseBody_In
	return p
}

func (*ConciseBody_InContext) IsConciseBody_InContext() {}

func NewConciseBody_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConciseBody_InContext {
	var p = new(ConciseBody_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_conciseBody_In

	return p
}

func (s *ConciseBody_InContext) GetParser() antlr.Parser { return s.parser }

func (s *ConciseBody_InContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *ConciseBody_InContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *ConciseBody_InContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ConciseBody_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConciseBody_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConciseBody_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterConciseBody_In(s)
	}
}

func (s *ConciseBody_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitConciseBody_In(s)
	}
}

func (s *ConciseBody_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitConciseBody_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ConciseBody_In() (localctx IConciseBody_InContext) {
	localctx = NewConciseBody_InContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1144, ECMAScriptParserRULE_conciseBody_In)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7283)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 622, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(7277)

		if !(negativeLookahead("{")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"{\") ", ""))
		}
		{
			p.SetState(7278)
			p.AssignmentExpression_In()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7279)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7280)
			p.FunctionBody()
		}
		{
			p.SetState(7281)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IMethodDefinitionContext is an interface to support dynamic dispatch.
type IMethodDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMethodDefinitionContext differentiates from other interfaces.
	IsMethodDefinitionContext()
}

type MethodDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodDefinitionContext() *MethodDefinitionContext {
	var p = new(MethodDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_methodDefinition
	return p
}

func (*MethodDefinitionContext) IsMethodDefinitionContext() {}

func NewMethodDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodDefinitionContext {
	var p = new(MethodDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_methodDefinition

	return p
}

func (s *MethodDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodDefinitionContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *MethodDefinitionContext) UniqueFormalParameters() IUniqueFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParametersContext)
}

func (s *MethodDefinitionContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *MethodDefinitionContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *MethodDefinitionContext) GeneratorMethod() IGeneratorMethodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorMethodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorMethodContext)
}

func (s *MethodDefinitionContext) AsyncMethod() IAsyncMethodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncMethodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncMethodContext)
}

func (s *MethodDefinitionContext) AsyncGeneratorMethod() IAsyncGeneratorMethodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorMethodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorMethodContext)
}

func (s *MethodDefinitionContext) PropertySetParameterList() IPropertySetParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertySetParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertySetParameterListContext)
}

func (s *MethodDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMethodDefinition(s)
	}
}

func (s *MethodDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMethodDefinition(s)
	}
}

func (s *MethodDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMethodDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MethodDefinition() (localctx IMethodDefinitionContext) {
	localctx = NewMethodDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1146, ECMAScriptParserRULE_methodDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7313)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 623, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7285)
			p.PropertyName()
		}
		{
			p.SetState(7286)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7287)
			p.UniqueFormalParameters()
		}
		{
			p.SetState(7288)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7289)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7290)
			p.FunctionBody()
		}
		{
			p.SetState(7291)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7293)
			p.GeneratorMethod()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7294)
			p.AsyncMethod()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7295)
			p.AsyncGeneratorMethod()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7296)
			p.Match(ECMAScriptParserT__82)
		}
		{
			p.SetState(7297)
			p.PropertyName()
		}
		{
			p.SetState(7298)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7299)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7300)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7301)
			p.FunctionBody()
		}
		{
			p.SetState(7302)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7304)
			p.Match(ECMAScriptParserT__83)
		}
		{
			p.SetState(7305)
			p.PropertyName()
		}
		{
			p.SetState(7306)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7307)
			p.PropertySetParameterList()
		}
		{
			p.SetState(7308)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7309)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7310)
			p.FunctionBody()
		}
		{
			p.SetState(7311)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IMethodDefinition_YieldContext is an interface to support dynamic dispatch.
type IMethodDefinition_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMethodDefinition_YieldContext differentiates from other interfaces.
	IsMethodDefinition_YieldContext()
}

type MethodDefinition_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodDefinition_YieldContext() *MethodDefinition_YieldContext {
	var p = new(MethodDefinition_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_methodDefinition_Yield
	return p
}

func (*MethodDefinition_YieldContext) IsMethodDefinition_YieldContext() {}

func NewMethodDefinition_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodDefinition_YieldContext {
	var p = new(MethodDefinition_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_methodDefinition_Yield

	return p
}

func (s *MethodDefinition_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodDefinition_YieldContext) PropertyName_Yield() IPropertyName_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_YieldContext)
}

func (s *MethodDefinition_YieldContext) UniqueFormalParameters() IUniqueFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParametersContext)
}

func (s *MethodDefinition_YieldContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *MethodDefinition_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *MethodDefinition_YieldContext) GeneratorMethod_Yield() IGeneratorMethod_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorMethod_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorMethod_YieldContext)
}

func (s *MethodDefinition_YieldContext) AsyncMethod_Yield() IAsyncMethod_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncMethod_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncMethod_YieldContext)
}

func (s *MethodDefinition_YieldContext) AsyncGeneratorMethod_Yield() IAsyncGeneratorMethod_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorMethod_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorMethod_YieldContext)
}

func (s *MethodDefinition_YieldContext) PropertySetParameterList() IPropertySetParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertySetParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertySetParameterListContext)
}

func (s *MethodDefinition_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodDefinition_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodDefinition_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMethodDefinition_Yield(s)
	}
}

func (s *MethodDefinition_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMethodDefinition_Yield(s)
	}
}

func (s *MethodDefinition_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMethodDefinition_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MethodDefinition_Yield() (localctx IMethodDefinition_YieldContext) {
	localctx = NewMethodDefinition_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1148, ECMAScriptParserRULE_methodDefinition_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7343)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 624, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7315)
			p.PropertyName_Yield()
		}
		{
			p.SetState(7316)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7317)
			p.UniqueFormalParameters()
		}
		{
			p.SetState(7318)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7319)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7320)
			p.FunctionBody()
		}
		{
			p.SetState(7321)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7323)
			p.GeneratorMethod_Yield()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7324)
			p.AsyncMethod_Yield()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7325)
			p.AsyncGeneratorMethod_Yield()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7326)
			p.Match(ECMAScriptParserT__82)
		}
		{
			p.SetState(7327)
			p.PropertyName_Yield()
		}
		{
			p.SetState(7328)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7329)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7330)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7331)
			p.FunctionBody()
		}
		{
			p.SetState(7332)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7334)
			p.Match(ECMAScriptParserT__83)
		}
		{
			p.SetState(7335)
			p.PropertyName_Yield()
		}
		{
			p.SetState(7336)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7337)
			p.PropertySetParameterList()
		}
		{
			p.SetState(7338)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7339)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7340)
			p.FunctionBody()
		}
		{
			p.SetState(7341)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IMethodDefinition_AwaitContext is an interface to support dynamic dispatch.
type IMethodDefinition_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMethodDefinition_AwaitContext differentiates from other interfaces.
	IsMethodDefinition_AwaitContext()
}

type MethodDefinition_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodDefinition_AwaitContext() *MethodDefinition_AwaitContext {
	var p = new(MethodDefinition_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_methodDefinition_Await
	return p
}

func (*MethodDefinition_AwaitContext) IsMethodDefinition_AwaitContext() {}

func NewMethodDefinition_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodDefinition_AwaitContext {
	var p = new(MethodDefinition_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_methodDefinition_Await

	return p
}

func (s *MethodDefinition_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodDefinition_AwaitContext) PropertyName_Await() IPropertyName_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_AwaitContext)
}

func (s *MethodDefinition_AwaitContext) UniqueFormalParameters() IUniqueFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParametersContext)
}

func (s *MethodDefinition_AwaitContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *MethodDefinition_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *MethodDefinition_AwaitContext) GeneratorMethod_Await() IGeneratorMethod_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorMethod_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorMethod_AwaitContext)
}

func (s *MethodDefinition_AwaitContext) AsyncMethod_Await() IAsyncMethod_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncMethod_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncMethod_AwaitContext)
}

func (s *MethodDefinition_AwaitContext) AsyncGeneratorMethod_Await() IAsyncGeneratorMethod_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorMethod_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorMethod_AwaitContext)
}

func (s *MethodDefinition_AwaitContext) PropertySetParameterList() IPropertySetParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertySetParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertySetParameterListContext)
}

func (s *MethodDefinition_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodDefinition_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodDefinition_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMethodDefinition_Await(s)
	}
}

func (s *MethodDefinition_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMethodDefinition_Await(s)
	}
}

func (s *MethodDefinition_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMethodDefinition_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MethodDefinition_Await() (localctx IMethodDefinition_AwaitContext) {
	localctx = NewMethodDefinition_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1150, ECMAScriptParserRULE_methodDefinition_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7373)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 625, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7345)
			p.PropertyName_Await()
		}
		{
			p.SetState(7346)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7347)
			p.UniqueFormalParameters()
		}
		{
			p.SetState(7348)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7349)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7350)
			p.FunctionBody()
		}
		{
			p.SetState(7351)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7353)
			p.GeneratorMethod_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7354)
			p.AsyncMethod_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7355)
			p.AsyncGeneratorMethod_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7356)
			p.Match(ECMAScriptParserT__82)
		}
		{
			p.SetState(7357)
			p.PropertyName_Await()
		}
		{
			p.SetState(7358)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7359)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7360)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7361)
			p.FunctionBody()
		}
		{
			p.SetState(7362)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7364)
			p.Match(ECMAScriptParserT__83)
		}
		{
			p.SetState(7365)
			p.PropertyName_Await()
		}
		{
			p.SetState(7366)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7367)
			p.PropertySetParameterList()
		}
		{
			p.SetState(7368)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7369)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7370)
			p.FunctionBody()
		}
		{
			p.SetState(7371)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IMethodDefinition_Yield_AwaitContext is an interface to support dynamic dispatch.
type IMethodDefinition_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMethodDefinition_Yield_AwaitContext differentiates from other interfaces.
	IsMethodDefinition_Yield_AwaitContext()
}

type MethodDefinition_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodDefinition_Yield_AwaitContext() *MethodDefinition_Yield_AwaitContext {
	var p = new(MethodDefinition_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_methodDefinition_Yield_Await
	return p
}

func (*MethodDefinition_Yield_AwaitContext) IsMethodDefinition_Yield_AwaitContext() {}

func NewMethodDefinition_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodDefinition_Yield_AwaitContext {
	var p = new(MethodDefinition_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_methodDefinition_Yield_Await

	return p
}

func (s *MethodDefinition_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodDefinition_Yield_AwaitContext) PropertyName_Yield_Await() IPropertyName_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_Yield_AwaitContext)
}

func (s *MethodDefinition_Yield_AwaitContext) UniqueFormalParameters() IUniqueFormalParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParametersContext)
}

func (s *MethodDefinition_Yield_AwaitContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *MethodDefinition_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *MethodDefinition_Yield_AwaitContext) GeneratorMethod_Yield_Await() IGeneratorMethod_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorMethod_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorMethod_Yield_AwaitContext)
}

func (s *MethodDefinition_Yield_AwaitContext) AsyncMethod_Yield_Await() IAsyncMethod_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncMethod_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncMethod_Yield_AwaitContext)
}

func (s *MethodDefinition_Yield_AwaitContext) AsyncGeneratorMethod_Yield_Await() IAsyncGeneratorMethod_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorMethod_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorMethod_Yield_AwaitContext)
}

func (s *MethodDefinition_Yield_AwaitContext) PropertySetParameterList() IPropertySetParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertySetParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertySetParameterListContext)
}

func (s *MethodDefinition_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodDefinition_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodDefinition_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterMethodDefinition_Yield_Await(s)
	}
}

func (s *MethodDefinition_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitMethodDefinition_Yield_Await(s)
	}
}

func (s *MethodDefinition_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitMethodDefinition_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) MethodDefinition_Yield_Await() (localctx IMethodDefinition_Yield_AwaitContext) {
	localctx = NewMethodDefinition_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1152, ECMAScriptParserRULE_methodDefinition_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7403)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 626, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7375)
			p.PropertyName_Yield_Await()
		}
		{
			p.SetState(7376)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7377)
			p.UniqueFormalParameters()
		}
		{
			p.SetState(7378)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7379)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7380)
			p.FunctionBody()
		}
		{
			p.SetState(7381)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7383)
			p.GeneratorMethod_Yield_Await()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7384)
			p.AsyncMethod_Yield_Await()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7385)
			p.AsyncGeneratorMethod_Yield_Await()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7386)
			p.Match(ECMAScriptParserT__82)
		}
		{
			p.SetState(7387)
			p.PropertyName_Yield_Await()
		}
		{
			p.SetState(7388)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7389)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7390)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7391)
			p.FunctionBody()
		}
		{
			p.SetState(7392)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7394)
			p.Match(ECMAScriptParserT__83)
		}
		{
			p.SetState(7395)
			p.PropertyName_Yield_Await()
		}
		{
			p.SetState(7396)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7397)
			p.PropertySetParameterList()
		}
		{
			p.SetState(7398)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7399)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7400)
			p.FunctionBody()
		}
		{
			p.SetState(7401)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IPropertySetParameterListContext is an interface to support dynamic dispatch.
type IPropertySetParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertySetParameterListContext differentiates from other interfaces.
	IsPropertySetParameterListContext()
}

type PropertySetParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertySetParameterListContext() *PropertySetParameterListContext {
	var p = new(PropertySetParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_propertySetParameterList
	return p
}

func (*PropertySetParameterListContext) IsPropertySetParameterListContext() {}

func NewPropertySetParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertySetParameterListContext {
	var p = new(PropertySetParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_propertySetParameterList

	return p
}

func (s *PropertySetParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertySetParameterListContext) FormalParameter() IFormalParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameterContext)
}

func (s *PropertySetParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertySetParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertySetParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterPropertySetParameterList(s)
	}
}

func (s *PropertySetParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitPropertySetParameterList(s)
	}
}

func (s *PropertySetParameterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitPropertySetParameterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) PropertySetParameterList() (localctx IPropertySetParameterListContext) {
	localctx = NewPropertySetParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1154, ECMAScriptParserRULE_propertySetParameterList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7405)
		p.FormalParameter()
	}

	return localctx
}

// IGeneratorMethodContext is an interface to support dynamic dispatch.
type IGeneratorMethodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorMethodContext differentiates from other interfaces.
	IsGeneratorMethodContext()
}

type GeneratorMethodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorMethodContext() *GeneratorMethodContext {
	var p = new(GeneratorMethodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorMethod
	return p
}

func (*GeneratorMethodContext) IsGeneratorMethodContext() {}

func NewGeneratorMethodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorMethodContext {
	var p = new(GeneratorMethodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorMethod

	return p
}

func (s *GeneratorMethodContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorMethodContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *GeneratorMethodContext) UniqueFormalParameters_Yield() IUniqueFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_YieldContext)
}

func (s *GeneratorMethodContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorMethodContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorMethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorMethodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorMethodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorMethod(s)
	}
}

func (s *GeneratorMethodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorMethod(s)
	}
}

func (s *GeneratorMethodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorMethod(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorMethod() (localctx IGeneratorMethodContext) {
	localctx = NewGeneratorMethodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1156, ECMAScriptParserRULE_generatorMethod)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7407)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7408)
		p.PropertyName()
	}
	{
		p.SetState(7409)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7410)
		p.UniqueFormalParameters_Yield()
	}
	{
		p.SetState(7411)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7412)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7413)
		p.GeneratorBody()
	}
	{
		p.SetState(7414)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IGeneratorMethod_YieldContext is an interface to support dynamic dispatch.
type IGeneratorMethod_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorMethod_YieldContext differentiates from other interfaces.
	IsGeneratorMethod_YieldContext()
}

type GeneratorMethod_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorMethod_YieldContext() *GeneratorMethod_YieldContext {
	var p = new(GeneratorMethod_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorMethod_Yield
	return p
}

func (*GeneratorMethod_YieldContext) IsGeneratorMethod_YieldContext() {}

func NewGeneratorMethod_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorMethod_YieldContext {
	var p = new(GeneratorMethod_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorMethod_Yield

	return p
}

func (s *GeneratorMethod_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorMethod_YieldContext) PropertyName_Yield() IPropertyName_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_YieldContext)
}

func (s *GeneratorMethod_YieldContext) UniqueFormalParameters_Yield() IUniqueFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_YieldContext)
}

func (s *GeneratorMethod_YieldContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorMethod_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorMethod_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorMethod_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorMethod_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorMethod_Yield(s)
	}
}

func (s *GeneratorMethod_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorMethod_Yield(s)
	}
}

func (s *GeneratorMethod_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorMethod_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorMethod_Yield() (localctx IGeneratorMethod_YieldContext) {
	localctx = NewGeneratorMethod_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1158, ECMAScriptParserRULE_generatorMethod_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7416)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7417)
		p.PropertyName_Yield()
	}
	{
		p.SetState(7418)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7419)
		p.UniqueFormalParameters_Yield()
	}
	{
		p.SetState(7420)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7421)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7422)
		p.GeneratorBody()
	}
	{
		p.SetState(7423)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IGeneratorMethod_AwaitContext is an interface to support dynamic dispatch.
type IGeneratorMethod_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorMethod_AwaitContext differentiates from other interfaces.
	IsGeneratorMethod_AwaitContext()
}

type GeneratorMethod_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorMethod_AwaitContext() *GeneratorMethod_AwaitContext {
	var p = new(GeneratorMethod_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorMethod_Await
	return p
}

func (*GeneratorMethod_AwaitContext) IsGeneratorMethod_AwaitContext() {}

func NewGeneratorMethod_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorMethod_AwaitContext {
	var p = new(GeneratorMethod_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorMethod_Await

	return p
}

func (s *GeneratorMethod_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorMethod_AwaitContext) PropertyName_Await() IPropertyName_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_AwaitContext)
}

func (s *GeneratorMethod_AwaitContext) UniqueFormalParameters_Yield() IUniqueFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_YieldContext)
}

func (s *GeneratorMethod_AwaitContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorMethod_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorMethod_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorMethod_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorMethod_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorMethod_Await(s)
	}
}

func (s *GeneratorMethod_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorMethod_Await(s)
	}
}

func (s *GeneratorMethod_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorMethod_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorMethod_Await() (localctx IGeneratorMethod_AwaitContext) {
	localctx = NewGeneratorMethod_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1160, ECMAScriptParserRULE_generatorMethod_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7425)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7426)
		p.PropertyName_Await()
	}
	{
		p.SetState(7427)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7428)
		p.UniqueFormalParameters_Yield()
	}
	{
		p.SetState(7429)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7430)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7431)
		p.GeneratorBody()
	}
	{
		p.SetState(7432)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IGeneratorMethod_Yield_AwaitContext is an interface to support dynamic dispatch.
type IGeneratorMethod_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorMethod_Yield_AwaitContext differentiates from other interfaces.
	IsGeneratorMethod_Yield_AwaitContext()
}

type GeneratorMethod_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorMethod_Yield_AwaitContext() *GeneratorMethod_Yield_AwaitContext {
	var p = new(GeneratorMethod_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorMethod_Yield_Await
	return p
}

func (*GeneratorMethod_Yield_AwaitContext) IsGeneratorMethod_Yield_AwaitContext() {}

func NewGeneratorMethod_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorMethod_Yield_AwaitContext {
	var p = new(GeneratorMethod_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorMethod_Yield_Await

	return p
}

func (s *GeneratorMethod_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorMethod_Yield_AwaitContext) PropertyName_Yield_Await() IPropertyName_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_Yield_AwaitContext)
}

func (s *GeneratorMethod_Yield_AwaitContext) UniqueFormalParameters_Yield() IUniqueFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_YieldContext)
}

func (s *GeneratorMethod_Yield_AwaitContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorMethod_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorMethod_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorMethod_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorMethod_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorMethod_Yield_Await(s)
	}
}

func (s *GeneratorMethod_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorMethod_Yield_Await(s)
	}
}

func (s *GeneratorMethod_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorMethod_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorMethod_Yield_Await() (localctx IGeneratorMethod_Yield_AwaitContext) {
	localctx = NewGeneratorMethod_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1162, ECMAScriptParserRULE_generatorMethod_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7434)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7435)
		p.PropertyName_Yield_Await()
	}
	{
		p.SetState(7436)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7437)
		p.UniqueFormalParameters_Yield()
	}
	{
		p.SetState(7438)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7439)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7440)
		p.GeneratorBody()
	}
	{
		p.SetState(7441)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IGeneratorDeclarationContext is an interface to support dynamic dispatch.
type IGeneratorDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorDeclarationContext differentiates from other interfaces.
	IsGeneratorDeclarationContext()
}

type GeneratorDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorDeclarationContext() *GeneratorDeclarationContext {
	var p = new(GeneratorDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration
	return p
}

func (*GeneratorDeclarationContext) IsGeneratorDeclarationContext() {}

func NewGeneratorDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorDeclarationContext {
	var p = new(GeneratorDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration

	return p
}

func (s *GeneratorDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorDeclarationContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *GeneratorDeclarationContext) FormalParameters_Yield() IFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_YieldContext)
}

func (s *GeneratorDeclarationContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorDeclarationContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorDeclaration(s)
	}
}

func (s *GeneratorDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorDeclaration(s)
	}
}

func (s *GeneratorDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorDeclaration() (localctx IGeneratorDeclarationContext) {
	localctx = NewGeneratorDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1164, ECMAScriptParserRULE_generatorDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7443)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7444)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7445)
		p.BindingIdentifier()
	}
	{
		p.SetState(7446)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7447)
		p.FormalParameters_Yield()
	}
	{
		p.SetState(7448)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7449)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7450)
		p.GeneratorBody()
	}
	{
		p.SetState(7451)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IGeneratorDeclaration_YieldContext is an interface to support dynamic dispatch.
type IGeneratorDeclaration_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorDeclaration_YieldContext differentiates from other interfaces.
	IsGeneratorDeclaration_YieldContext()
}

type GeneratorDeclaration_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorDeclaration_YieldContext() *GeneratorDeclaration_YieldContext {
	var p = new(GeneratorDeclaration_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Yield
	return p
}

func (*GeneratorDeclaration_YieldContext) IsGeneratorDeclaration_YieldContext() {}

func NewGeneratorDeclaration_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorDeclaration_YieldContext {
	var p = new(GeneratorDeclaration_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Yield

	return p
}

func (s *GeneratorDeclaration_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorDeclaration_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *GeneratorDeclaration_YieldContext) FormalParameters_Yield() IFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_YieldContext)
}

func (s *GeneratorDeclaration_YieldContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorDeclaration_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorDeclaration_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorDeclaration_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorDeclaration_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorDeclaration_Yield(s)
	}
}

func (s *GeneratorDeclaration_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorDeclaration_Yield(s)
	}
}

func (s *GeneratorDeclaration_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorDeclaration_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorDeclaration_Yield() (localctx IGeneratorDeclaration_YieldContext) {
	localctx = NewGeneratorDeclaration_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1166, ECMAScriptParserRULE_generatorDeclaration_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7453)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7454)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7455)
		p.BindingIdentifier_Yield()
	}
	{
		p.SetState(7456)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7457)
		p.FormalParameters_Yield()
	}
	{
		p.SetState(7458)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7459)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7460)
		p.GeneratorBody()
	}
	{
		p.SetState(7461)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IGeneratorDeclaration_AwaitContext is an interface to support dynamic dispatch.
type IGeneratorDeclaration_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorDeclaration_AwaitContext differentiates from other interfaces.
	IsGeneratorDeclaration_AwaitContext()
}

type GeneratorDeclaration_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorDeclaration_AwaitContext() *GeneratorDeclaration_AwaitContext {
	var p = new(GeneratorDeclaration_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Await
	return p
}

func (*GeneratorDeclaration_AwaitContext) IsGeneratorDeclaration_AwaitContext() {}

func NewGeneratorDeclaration_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorDeclaration_AwaitContext {
	var p = new(GeneratorDeclaration_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Await

	return p
}

func (s *GeneratorDeclaration_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorDeclaration_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *GeneratorDeclaration_AwaitContext) FormalParameters_Yield() IFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_YieldContext)
}

func (s *GeneratorDeclaration_AwaitContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorDeclaration_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorDeclaration_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorDeclaration_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorDeclaration_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorDeclaration_Await(s)
	}
}

func (s *GeneratorDeclaration_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorDeclaration_Await(s)
	}
}

func (s *GeneratorDeclaration_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorDeclaration_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorDeclaration_Await() (localctx IGeneratorDeclaration_AwaitContext) {
	localctx = NewGeneratorDeclaration_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1168, ECMAScriptParserRULE_generatorDeclaration_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7463)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7464)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7465)
		p.BindingIdentifier_Await()
	}
	{
		p.SetState(7466)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7467)
		p.FormalParameters_Yield()
	}
	{
		p.SetState(7468)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7469)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7470)
		p.GeneratorBody()
	}
	{
		p.SetState(7471)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IGeneratorDeclaration_Yield_AwaitContext is an interface to support dynamic dispatch.
type IGeneratorDeclaration_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorDeclaration_Yield_AwaitContext differentiates from other interfaces.
	IsGeneratorDeclaration_Yield_AwaitContext()
}

type GeneratorDeclaration_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorDeclaration_Yield_AwaitContext() *GeneratorDeclaration_Yield_AwaitContext {
	var p = new(GeneratorDeclaration_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Yield_Await
	return p
}

func (*GeneratorDeclaration_Yield_AwaitContext) IsGeneratorDeclaration_Yield_AwaitContext() {}

func NewGeneratorDeclaration_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorDeclaration_Yield_AwaitContext {
	var p = new(GeneratorDeclaration_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Yield_Await

	return p
}

func (s *GeneratorDeclaration_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorDeclaration_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *GeneratorDeclaration_Yield_AwaitContext) FormalParameters_Yield() IFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_YieldContext)
}

func (s *GeneratorDeclaration_Yield_AwaitContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorDeclaration_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorDeclaration_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorDeclaration_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorDeclaration_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorDeclaration_Yield_Await(s)
	}
}

func (s *GeneratorDeclaration_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorDeclaration_Yield_Await(s)
	}
}

func (s *GeneratorDeclaration_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorDeclaration_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorDeclaration_Yield_Await() (localctx IGeneratorDeclaration_Yield_AwaitContext) {
	localctx = NewGeneratorDeclaration_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1170, ECMAScriptParserRULE_generatorDeclaration_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7473)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7474)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7475)
		p.BindingIdentifier_Yield_Await()
	}
	{
		p.SetState(7476)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7477)
		p.FormalParameters_Yield()
	}
	{
		p.SetState(7478)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7479)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7480)
		p.GeneratorBody()
	}
	{
		p.SetState(7481)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IGeneratorDeclaration_DefaultContext is an interface to support dynamic dispatch.
type IGeneratorDeclaration_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorDeclaration_DefaultContext differentiates from other interfaces.
	IsGeneratorDeclaration_DefaultContext()
}

type GeneratorDeclaration_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorDeclaration_DefaultContext() *GeneratorDeclaration_DefaultContext {
	var p = new(GeneratorDeclaration_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Default
	return p
}

func (*GeneratorDeclaration_DefaultContext) IsGeneratorDeclaration_DefaultContext() {}

func NewGeneratorDeclaration_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorDeclaration_DefaultContext {
	var p = new(GeneratorDeclaration_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Default

	return p
}

func (s *GeneratorDeclaration_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorDeclaration_DefaultContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *GeneratorDeclaration_DefaultContext) FormalParameters_Yield() IFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_YieldContext)
}

func (s *GeneratorDeclaration_DefaultContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorDeclaration_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorDeclaration_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorDeclaration_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorDeclaration_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorDeclaration_Default(s)
	}
}

func (s *GeneratorDeclaration_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorDeclaration_Default(s)
	}
}

func (s *GeneratorDeclaration_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorDeclaration_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorDeclaration_Default() (localctx IGeneratorDeclaration_DefaultContext) {
	localctx = NewGeneratorDeclaration_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1172, ECMAScriptParserRULE_generatorDeclaration_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7502)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 627, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7483)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7484)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7485)
			p.BindingIdentifier()
		}
		{
			p.SetState(7486)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7487)
			p.FormalParameters_Yield()
		}
		{
			p.SetState(7488)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7489)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7490)
			p.GeneratorBody()
		}
		{
			p.SetState(7491)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7493)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7494)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7495)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7496)
			p.FormalParameters_Yield()
		}
		{
			p.SetState(7497)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7498)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7499)
			p.GeneratorBody()
		}
		{
			p.SetState(7500)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IGeneratorDeclaration_Yield_DefaultContext is an interface to support dynamic dispatch.
type IGeneratorDeclaration_Yield_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorDeclaration_Yield_DefaultContext differentiates from other interfaces.
	IsGeneratorDeclaration_Yield_DefaultContext()
}

type GeneratorDeclaration_Yield_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorDeclaration_Yield_DefaultContext() *GeneratorDeclaration_Yield_DefaultContext {
	var p = new(GeneratorDeclaration_Yield_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Yield_Default
	return p
}

func (*GeneratorDeclaration_Yield_DefaultContext) IsGeneratorDeclaration_Yield_DefaultContext() {}

func NewGeneratorDeclaration_Yield_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorDeclaration_Yield_DefaultContext {
	var p = new(GeneratorDeclaration_Yield_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Yield_Default

	return p
}

func (s *GeneratorDeclaration_Yield_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorDeclaration_Yield_DefaultContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *GeneratorDeclaration_Yield_DefaultContext) FormalParameters_Yield() IFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_YieldContext)
}

func (s *GeneratorDeclaration_Yield_DefaultContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorDeclaration_Yield_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorDeclaration_Yield_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorDeclaration_Yield_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorDeclaration_Yield_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorDeclaration_Yield_Default(s)
	}
}

func (s *GeneratorDeclaration_Yield_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorDeclaration_Yield_Default(s)
	}
}

func (s *GeneratorDeclaration_Yield_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorDeclaration_Yield_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorDeclaration_Yield_Default() (localctx IGeneratorDeclaration_Yield_DefaultContext) {
	localctx = NewGeneratorDeclaration_Yield_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1174, ECMAScriptParserRULE_generatorDeclaration_Yield_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7523)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 628, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7504)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7505)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7506)
			p.BindingIdentifier_Yield()
		}
		{
			p.SetState(7507)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7508)
			p.FormalParameters_Yield()
		}
		{
			p.SetState(7509)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7510)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7511)
			p.GeneratorBody()
		}
		{
			p.SetState(7512)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7514)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7515)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7516)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7517)
			p.FormalParameters_Yield()
		}
		{
			p.SetState(7518)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7519)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7520)
			p.GeneratorBody()
		}
		{
			p.SetState(7521)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IGeneratorDeclaration_Await_DefaultContext is an interface to support dynamic dispatch.
type IGeneratorDeclaration_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorDeclaration_Await_DefaultContext differentiates from other interfaces.
	IsGeneratorDeclaration_Await_DefaultContext()
}

type GeneratorDeclaration_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorDeclaration_Await_DefaultContext() *GeneratorDeclaration_Await_DefaultContext {
	var p = new(GeneratorDeclaration_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Await_Default
	return p
}

func (*GeneratorDeclaration_Await_DefaultContext) IsGeneratorDeclaration_Await_DefaultContext() {}

func NewGeneratorDeclaration_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorDeclaration_Await_DefaultContext {
	var p = new(GeneratorDeclaration_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Await_Default

	return p
}

func (s *GeneratorDeclaration_Await_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorDeclaration_Await_DefaultContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *GeneratorDeclaration_Await_DefaultContext) FormalParameters_Yield() IFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_YieldContext)
}

func (s *GeneratorDeclaration_Await_DefaultContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorDeclaration_Await_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorDeclaration_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorDeclaration_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorDeclaration_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorDeclaration_Await_Default(s)
	}
}

func (s *GeneratorDeclaration_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorDeclaration_Await_Default(s)
	}
}

func (s *GeneratorDeclaration_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorDeclaration_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorDeclaration_Await_Default() (localctx IGeneratorDeclaration_Await_DefaultContext) {
	localctx = NewGeneratorDeclaration_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1176, ECMAScriptParserRULE_generatorDeclaration_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7544)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 629, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7525)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7526)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7527)
			p.BindingIdentifier_Await()
		}
		{
			p.SetState(7528)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7529)
			p.FormalParameters_Yield()
		}
		{
			p.SetState(7530)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7531)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7532)
			p.GeneratorBody()
		}
		{
			p.SetState(7533)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7535)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7536)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7537)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7538)
			p.FormalParameters_Yield()
		}
		{
			p.SetState(7539)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7540)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7541)
			p.GeneratorBody()
		}
		{
			p.SetState(7542)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IGeneratorDeclaration_Yield_Await_DefaultContext is an interface to support dynamic dispatch.
type IGeneratorDeclaration_Yield_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorDeclaration_Yield_Await_DefaultContext differentiates from other interfaces.
	IsGeneratorDeclaration_Yield_Await_DefaultContext()
}

type GeneratorDeclaration_Yield_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorDeclaration_Yield_Await_DefaultContext() *GeneratorDeclaration_Yield_Await_DefaultContext {
	var p = new(GeneratorDeclaration_Yield_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Yield_Await_Default
	return p
}

func (*GeneratorDeclaration_Yield_Await_DefaultContext) IsGeneratorDeclaration_Yield_Await_DefaultContext() {
}

func NewGeneratorDeclaration_Yield_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorDeclaration_Yield_Await_DefaultContext {
	var p = new(GeneratorDeclaration_Yield_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorDeclaration_Yield_Await_Default

	return p
}

func (s *GeneratorDeclaration_Yield_Await_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorDeclaration_Yield_Await_DefaultContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *GeneratorDeclaration_Yield_Await_DefaultContext) FormalParameters_Yield() IFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_YieldContext)
}

func (s *GeneratorDeclaration_Yield_Await_DefaultContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorDeclaration_Yield_Await_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorDeclaration_Yield_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorDeclaration_Yield_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorDeclaration_Yield_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorDeclaration_Yield_Await_Default(s)
	}
}

func (s *GeneratorDeclaration_Yield_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorDeclaration_Yield_Await_Default(s)
	}
}

func (s *GeneratorDeclaration_Yield_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorDeclaration_Yield_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorDeclaration_Yield_Await_Default() (localctx IGeneratorDeclaration_Yield_Await_DefaultContext) {
	localctx = NewGeneratorDeclaration_Yield_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1178, ECMAScriptParserRULE_generatorDeclaration_Yield_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7565)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 630, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7546)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7547)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7548)
			p.BindingIdentifier_Yield_Await()
		}
		{
			p.SetState(7549)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7550)
			p.FormalParameters_Yield()
		}
		{
			p.SetState(7551)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7552)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7553)
			p.GeneratorBody()
		}
		{
			p.SetState(7554)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7556)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7557)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7558)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7559)
			p.FormalParameters_Yield()
		}
		{
			p.SetState(7560)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7561)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7562)
			p.GeneratorBody()
		}
		{
			p.SetState(7563)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IGeneratorExpressionContext is an interface to support dynamic dispatch.
type IGeneratorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorExpressionContext differentiates from other interfaces.
	IsGeneratorExpressionContext()
}

type GeneratorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorExpressionContext() *GeneratorExpressionContext {
	var p = new(GeneratorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorExpression
	return p
}

func (*GeneratorExpressionContext) IsGeneratorExpressionContext() {}

func NewGeneratorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorExpressionContext {
	var p = new(GeneratorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorExpression

	return p
}

func (s *GeneratorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorExpressionContext) FormalParameters_Yield() IFormalParameters_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_YieldContext)
}

func (s *GeneratorExpressionContext) GeneratorBody() IGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGeneratorBodyContext)
}

func (s *GeneratorExpressionContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *GeneratorExpressionContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *GeneratorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorExpression(s)
	}
}

func (s *GeneratorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorExpression(s)
	}
}

func (s *GeneratorExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorExpression() (localctx IGeneratorExpressionContext) {
	localctx = NewGeneratorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1180, ECMAScriptParserRULE_generatorExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7567)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7568)
		p.Match(ECMAScriptParserT__84)
	}
	p.SetState(7570)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(7569)
			p.BindingIdentifier_Yield()
		}

	}
	{
		p.SetState(7572)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7573)
		p.FormalParameters_Yield()
	}
	{
		p.SetState(7574)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7575)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7576)
		p.GeneratorBody()
	}
	{
		p.SetState(7577)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IGeneratorBodyContext is an interface to support dynamic dispatch.
type IGeneratorBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGeneratorBodyContext differentiates from other interfaces.
	IsGeneratorBodyContext()
}

type GeneratorBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneratorBodyContext() *GeneratorBodyContext {
	var p = new(GeneratorBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_generatorBody
	return p
}

func (*GeneratorBodyContext) IsGeneratorBodyContext() {}

func NewGeneratorBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GeneratorBodyContext {
	var p = new(GeneratorBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_generatorBody

	return p
}

func (s *GeneratorBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *GeneratorBodyContext) FunctionBody_Yield() IFunctionBody_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBody_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBody_YieldContext)
}

func (s *GeneratorBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratorBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GeneratorBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterGeneratorBody(s)
	}
}

func (s *GeneratorBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitGeneratorBody(s)
	}
}

func (s *GeneratorBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitGeneratorBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) GeneratorBody() (localctx IGeneratorBodyContext) {
	localctx = NewGeneratorBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1182, ECMAScriptParserRULE_generatorBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7579)
		p.FunctionBody_Yield()
	}

	return localctx
}

// IYieldExpressionContext is an interface to support dynamic dispatch.
type IYieldExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYieldExpressionContext differentiates from other interfaces.
	IsYieldExpressionContext()
}

type YieldExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYieldExpressionContext() *YieldExpressionContext {
	var p = new(YieldExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_yieldExpression
	return p
}

func (*YieldExpressionContext) IsYieldExpressionContext() {}

func NewYieldExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YieldExpressionContext {
	var p = new(YieldExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_yieldExpression

	return p
}

func (s *YieldExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *YieldExpressionContext) AssignmentExpression_Yield() IAssignmentExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_YieldContext)
}

func (s *YieldExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YieldExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterYieldExpression(s)
	}
}

func (s *YieldExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitYieldExpression(s)
	}
}

func (s *YieldExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitYieldExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) YieldExpression() (localctx IYieldExpressionContext) {
	localctx = NewYieldExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1184, ECMAScriptParserRULE_yieldExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7587)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 633, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7581)
			p.Match(ECMAScriptParserT__1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7582)
			p.Match(ECMAScriptParserT__1)
		}
		p.SetState(7584)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__84 {
			{
				p.SetState(7583)
				p.Match(ECMAScriptParserT__84)
			}

		}
		{
			p.SetState(7586)
			p.AssignmentExpression_Yield()
		}

	}

	return localctx
}

// IYieldExpression_InContext is an interface to support dynamic dispatch.
type IYieldExpression_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYieldExpression_InContext differentiates from other interfaces.
	IsYieldExpression_InContext()
}

type YieldExpression_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYieldExpression_InContext() *YieldExpression_InContext {
	var p = new(YieldExpression_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_yieldExpression_In
	return p
}

func (*YieldExpression_InContext) IsYieldExpression_InContext() {}

func NewYieldExpression_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YieldExpression_InContext {
	var p = new(YieldExpression_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_yieldExpression_In

	return p
}

func (s *YieldExpression_InContext) GetParser() antlr.Parser { return s.parser }

func (s *YieldExpression_InContext) AssignmentExpression_In_Yield() IAssignmentExpression_In_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_YieldContext)
}

func (s *YieldExpression_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldExpression_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YieldExpression_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterYieldExpression_In(s)
	}
}

func (s *YieldExpression_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitYieldExpression_In(s)
	}
}

func (s *YieldExpression_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitYieldExpression_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) YieldExpression_In() (localctx IYieldExpression_InContext) {
	localctx = NewYieldExpression_InContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1186, ECMAScriptParserRULE_yieldExpression_In)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7595)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 635, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7589)
			p.Match(ECMAScriptParserT__1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7590)
			p.Match(ECMAScriptParserT__1)
		}
		p.SetState(7592)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__84 {
			{
				p.SetState(7591)
				p.Match(ECMAScriptParserT__84)
			}

		}
		{
			p.SetState(7594)
			p.AssignmentExpression_In_Yield()
		}

	}

	return localctx
}

// IYieldExpression_AwaitContext is an interface to support dynamic dispatch.
type IYieldExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYieldExpression_AwaitContext differentiates from other interfaces.
	IsYieldExpression_AwaitContext()
}

type YieldExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYieldExpression_AwaitContext() *YieldExpression_AwaitContext {
	var p = new(YieldExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_yieldExpression_Await
	return p
}

func (*YieldExpression_AwaitContext) IsYieldExpression_AwaitContext() {}

func NewYieldExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YieldExpression_AwaitContext {
	var p = new(YieldExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_yieldExpression_Await

	return p
}

func (s *YieldExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *YieldExpression_AwaitContext) AssignmentExpression_Yield_Await() IAssignmentExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_Yield_AwaitContext)
}

func (s *YieldExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YieldExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterYieldExpression_Await(s)
	}
}

func (s *YieldExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitYieldExpression_Await(s)
	}
}

func (s *YieldExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitYieldExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) YieldExpression_Await() (localctx IYieldExpression_AwaitContext) {
	localctx = NewYieldExpression_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1188, ECMAScriptParserRULE_yieldExpression_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7603)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 637, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7597)
			p.Match(ECMAScriptParserT__1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7598)
			p.Match(ECMAScriptParserT__1)
		}
		p.SetState(7600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__84 {
			{
				p.SetState(7599)
				p.Match(ECMAScriptParserT__84)
			}

		}
		{
			p.SetState(7602)
			p.AssignmentExpression_Yield_Await()
		}

	}

	return localctx
}

// IYieldExpression_In_AwaitContext is an interface to support dynamic dispatch.
type IYieldExpression_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYieldExpression_In_AwaitContext differentiates from other interfaces.
	IsYieldExpression_In_AwaitContext()
}

type YieldExpression_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYieldExpression_In_AwaitContext() *YieldExpression_In_AwaitContext {
	var p = new(YieldExpression_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_yieldExpression_In_Await
	return p
}

func (*YieldExpression_In_AwaitContext) IsYieldExpression_In_AwaitContext() {}

func NewYieldExpression_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YieldExpression_In_AwaitContext {
	var p = new(YieldExpression_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_yieldExpression_In_Await

	return p
}

func (s *YieldExpression_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *YieldExpression_In_AwaitContext) AssignmentExpression_In_Yield_Await() IAssignmentExpression_In_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_Yield_AwaitContext)
}

func (s *YieldExpression_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldExpression_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YieldExpression_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterYieldExpression_In_Await(s)
	}
}

func (s *YieldExpression_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitYieldExpression_In_Await(s)
	}
}

func (s *YieldExpression_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitYieldExpression_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) YieldExpression_In_Await() (localctx IYieldExpression_In_AwaitContext) {
	localctx = NewYieldExpression_In_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1190, ECMAScriptParserRULE_yieldExpression_In_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7611)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 639, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7605)
			p.Match(ECMAScriptParserT__1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7606)
			p.Match(ECMAScriptParserT__1)
		}
		p.SetState(7608)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__84 {
			{
				p.SetState(7607)
				p.Match(ECMAScriptParserT__84)
			}

		}
		{
			p.SetState(7610)
			p.AssignmentExpression_In_Yield_Await()
		}

	}

	return localctx
}

// IAsyncGeneratorMethodContext is an interface to support dynamic dispatch.
type IAsyncGeneratorMethodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorMethodContext differentiates from other interfaces.
	IsAsyncGeneratorMethodContext()
}

type AsyncGeneratorMethodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorMethodContext() *AsyncGeneratorMethodContext {
	var p = new(AsyncGeneratorMethodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorMethod
	return p
}

func (*AsyncGeneratorMethodContext) IsAsyncGeneratorMethodContext() {}

func NewAsyncGeneratorMethodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorMethodContext {
	var p = new(AsyncGeneratorMethodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorMethod

	return p
}

func (s *AsyncGeneratorMethodContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorMethodContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *AsyncGeneratorMethodContext) UniqueFormalParameters_Yield_Await() IUniqueFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorMethodContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorMethodContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorMethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorMethodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorMethodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorMethod(s)
	}
}

func (s *AsyncGeneratorMethodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorMethod(s)
	}
}

func (s *AsyncGeneratorMethodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorMethod(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorMethod() (localctx IAsyncGeneratorMethodContext) {
	localctx = NewAsyncGeneratorMethodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1192, ECMAScriptParserRULE_asyncGeneratorMethod)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7613)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7614)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7615)
		p.PropertyName()
	}
	{
		p.SetState(7616)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7617)
		p.UniqueFormalParameters_Yield_Await()
	}
	{
		p.SetState(7618)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7619)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7620)
		p.AsyncGeneratorBody()
	}
	{
		p.SetState(7621)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncGeneratorMethod_YieldContext is an interface to support dynamic dispatch.
type IAsyncGeneratorMethod_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorMethod_YieldContext differentiates from other interfaces.
	IsAsyncGeneratorMethod_YieldContext()
}

type AsyncGeneratorMethod_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorMethod_YieldContext() *AsyncGeneratorMethod_YieldContext {
	var p = new(AsyncGeneratorMethod_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorMethod_Yield
	return p
}

func (*AsyncGeneratorMethod_YieldContext) IsAsyncGeneratorMethod_YieldContext() {}

func NewAsyncGeneratorMethod_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorMethod_YieldContext {
	var p = new(AsyncGeneratorMethod_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorMethod_Yield

	return p
}

func (s *AsyncGeneratorMethod_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorMethod_YieldContext) PropertyName_Yield() IPropertyName_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_YieldContext)
}

func (s *AsyncGeneratorMethod_YieldContext) UniqueFormalParameters_Yield_Await() IUniqueFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorMethod_YieldContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorMethod_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorMethod_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorMethod_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorMethod_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorMethod_Yield(s)
	}
}

func (s *AsyncGeneratorMethod_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorMethod_Yield(s)
	}
}

func (s *AsyncGeneratorMethod_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorMethod_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorMethod_Yield() (localctx IAsyncGeneratorMethod_YieldContext) {
	localctx = NewAsyncGeneratorMethod_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1194, ECMAScriptParserRULE_asyncGeneratorMethod_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7623)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7624)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7625)
		p.PropertyName_Yield()
	}
	{
		p.SetState(7626)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7627)
		p.UniqueFormalParameters_Yield_Await()
	}
	{
		p.SetState(7628)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7629)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7630)
		p.AsyncGeneratorBody()
	}
	{
		p.SetState(7631)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncGeneratorMethod_AwaitContext is an interface to support dynamic dispatch.
type IAsyncGeneratorMethod_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorMethod_AwaitContext differentiates from other interfaces.
	IsAsyncGeneratorMethod_AwaitContext()
}

type AsyncGeneratorMethod_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorMethod_AwaitContext() *AsyncGeneratorMethod_AwaitContext {
	var p = new(AsyncGeneratorMethod_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorMethod_Await
	return p
}

func (*AsyncGeneratorMethod_AwaitContext) IsAsyncGeneratorMethod_AwaitContext() {}

func NewAsyncGeneratorMethod_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorMethod_AwaitContext {
	var p = new(AsyncGeneratorMethod_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorMethod_Await

	return p
}

func (s *AsyncGeneratorMethod_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorMethod_AwaitContext) PropertyName_Await() IPropertyName_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_AwaitContext)
}

func (s *AsyncGeneratorMethod_AwaitContext) UniqueFormalParameters_Yield_Await() IUniqueFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorMethod_AwaitContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorMethod_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorMethod_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorMethod_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorMethod_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorMethod_Await(s)
	}
}

func (s *AsyncGeneratorMethod_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorMethod_Await(s)
	}
}

func (s *AsyncGeneratorMethod_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorMethod_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorMethod_Await() (localctx IAsyncGeneratorMethod_AwaitContext) {
	localctx = NewAsyncGeneratorMethod_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1196, ECMAScriptParserRULE_asyncGeneratorMethod_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7633)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7634)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7635)
		p.PropertyName_Await()
	}
	{
		p.SetState(7636)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7637)
		p.UniqueFormalParameters_Yield_Await()
	}
	{
		p.SetState(7638)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7639)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7640)
		p.AsyncGeneratorBody()
	}
	{
		p.SetState(7641)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncGeneratorMethod_Yield_AwaitContext is an interface to support dynamic dispatch.
type IAsyncGeneratorMethod_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorMethod_Yield_AwaitContext differentiates from other interfaces.
	IsAsyncGeneratorMethod_Yield_AwaitContext()
}

type AsyncGeneratorMethod_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorMethod_Yield_AwaitContext() *AsyncGeneratorMethod_Yield_AwaitContext {
	var p = new(AsyncGeneratorMethod_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorMethod_Yield_Await
	return p
}

func (*AsyncGeneratorMethod_Yield_AwaitContext) IsAsyncGeneratorMethod_Yield_AwaitContext() {}

func NewAsyncGeneratorMethod_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorMethod_Yield_AwaitContext {
	var p = new(AsyncGeneratorMethod_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorMethod_Yield_Await

	return p
}

func (s *AsyncGeneratorMethod_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorMethod_Yield_AwaitContext) PropertyName_Yield_Await() IPropertyName_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_Yield_AwaitContext)
}

func (s *AsyncGeneratorMethod_Yield_AwaitContext) UniqueFormalParameters_Yield_Await() IUniqueFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorMethod_Yield_AwaitContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorMethod_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorMethod_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorMethod_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorMethod_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorMethod_Yield_Await(s)
	}
}

func (s *AsyncGeneratorMethod_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorMethod_Yield_Await(s)
	}
}

func (s *AsyncGeneratorMethod_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorMethod_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorMethod_Yield_Await() (localctx IAsyncGeneratorMethod_Yield_AwaitContext) {
	localctx = NewAsyncGeneratorMethod_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1198, ECMAScriptParserRULE_asyncGeneratorMethod_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7643)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7644)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7645)
		p.PropertyName_Yield_Await()
	}
	{
		p.SetState(7646)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7647)
		p.UniqueFormalParameters_Yield_Await()
	}
	{
		p.SetState(7648)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7649)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7650)
		p.AsyncGeneratorBody()
	}
	{
		p.SetState(7651)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncGeneratorDeclarationContext is an interface to support dynamic dispatch.
type IAsyncGeneratorDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorDeclarationContext differentiates from other interfaces.
	IsAsyncGeneratorDeclarationContext()
}

type AsyncGeneratorDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorDeclarationContext() *AsyncGeneratorDeclarationContext {
	var p = new(AsyncGeneratorDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration
	return p
}

func (*AsyncGeneratorDeclarationContext) IsAsyncGeneratorDeclarationContext() {}

func NewAsyncGeneratorDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorDeclarationContext {
	var p = new(AsyncGeneratorDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration

	return p
}

func (s *AsyncGeneratorDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorDeclarationContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *AsyncGeneratorDeclarationContext) FormalParameters_Yield_Await() IFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorDeclarationContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorDeclarationContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorDeclaration(s)
	}
}

func (s *AsyncGeneratorDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorDeclaration(s)
	}
}

func (s *AsyncGeneratorDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorDeclaration() (localctx IAsyncGeneratorDeclarationContext) {
	localctx = NewAsyncGeneratorDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1200, ECMAScriptParserRULE_asyncGeneratorDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7653)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7654)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7655)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7656)
		p.BindingIdentifier()
	}
	{
		p.SetState(7657)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7658)
		p.FormalParameters_Yield_Await()
	}
	{
		p.SetState(7659)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7660)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7661)
		p.AsyncGeneratorBody()
	}
	{
		p.SetState(7662)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncGeneratorDeclaration_YieldContext is an interface to support dynamic dispatch.
type IAsyncGeneratorDeclaration_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorDeclaration_YieldContext differentiates from other interfaces.
	IsAsyncGeneratorDeclaration_YieldContext()
}

type AsyncGeneratorDeclaration_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorDeclaration_YieldContext() *AsyncGeneratorDeclaration_YieldContext {
	var p = new(AsyncGeneratorDeclaration_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield
	return p
}

func (*AsyncGeneratorDeclaration_YieldContext) IsAsyncGeneratorDeclaration_YieldContext() {}

func NewAsyncGeneratorDeclaration_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorDeclaration_YieldContext {
	var p = new(AsyncGeneratorDeclaration_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield

	return p
}

func (s *AsyncGeneratorDeclaration_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorDeclaration_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *AsyncGeneratorDeclaration_YieldContext) FormalParameters_Yield_Await() IFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorDeclaration_YieldContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorDeclaration_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorDeclaration_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorDeclaration_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorDeclaration_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorDeclaration_Yield(s)
	}
}

func (s *AsyncGeneratorDeclaration_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorDeclaration_Yield(s)
	}
}

func (s *AsyncGeneratorDeclaration_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorDeclaration_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorDeclaration_Yield() (localctx IAsyncGeneratorDeclaration_YieldContext) {
	localctx = NewAsyncGeneratorDeclaration_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1202, ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7664)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7665)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7666)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7667)
		p.BindingIdentifier_Yield()
	}
	{
		p.SetState(7668)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7669)
		p.FormalParameters_Yield_Await()
	}
	{
		p.SetState(7670)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7671)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7672)
		p.AsyncGeneratorBody()
	}
	{
		p.SetState(7673)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncGeneratorDeclaration_AwaitContext is an interface to support dynamic dispatch.
type IAsyncGeneratorDeclaration_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorDeclaration_AwaitContext differentiates from other interfaces.
	IsAsyncGeneratorDeclaration_AwaitContext()
}

type AsyncGeneratorDeclaration_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorDeclaration_AwaitContext() *AsyncGeneratorDeclaration_AwaitContext {
	var p = new(AsyncGeneratorDeclaration_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Await
	return p
}

func (*AsyncGeneratorDeclaration_AwaitContext) IsAsyncGeneratorDeclaration_AwaitContext() {}

func NewAsyncGeneratorDeclaration_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorDeclaration_AwaitContext {
	var p = new(AsyncGeneratorDeclaration_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Await

	return p
}

func (s *AsyncGeneratorDeclaration_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorDeclaration_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *AsyncGeneratorDeclaration_AwaitContext) FormalParameters_Yield_Await() IFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorDeclaration_AwaitContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorDeclaration_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorDeclaration_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorDeclaration_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorDeclaration_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorDeclaration_Await(s)
	}
}

func (s *AsyncGeneratorDeclaration_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorDeclaration_Await(s)
	}
}

func (s *AsyncGeneratorDeclaration_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorDeclaration_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorDeclaration_Await() (localctx IAsyncGeneratorDeclaration_AwaitContext) {
	localctx = NewAsyncGeneratorDeclaration_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1204, ECMAScriptParserRULE_asyncGeneratorDeclaration_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7675)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7676)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7677)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7678)
		p.BindingIdentifier_Await()
	}
	{
		p.SetState(7679)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7680)
		p.FormalParameters_Yield_Await()
	}
	{
		p.SetState(7681)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7682)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7683)
		p.AsyncGeneratorBody()
	}
	{
		p.SetState(7684)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncGeneratorDeclaration_Yield_AwaitContext is an interface to support dynamic dispatch.
type IAsyncGeneratorDeclaration_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorDeclaration_Yield_AwaitContext differentiates from other interfaces.
	IsAsyncGeneratorDeclaration_Yield_AwaitContext()
}

type AsyncGeneratorDeclaration_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorDeclaration_Yield_AwaitContext() *AsyncGeneratorDeclaration_Yield_AwaitContext {
	var p = new(AsyncGeneratorDeclaration_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Await
	return p
}

func (*AsyncGeneratorDeclaration_Yield_AwaitContext) IsAsyncGeneratorDeclaration_Yield_AwaitContext() {
}

func NewAsyncGeneratorDeclaration_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorDeclaration_Yield_AwaitContext {
	var p = new(AsyncGeneratorDeclaration_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Await

	return p
}

func (s *AsyncGeneratorDeclaration_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorDeclaration_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *AsyncGeneratorDeclaration_Yield_AwaitContext) FormalParameters_Yield_Await() IFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorDeclaration_Yield_AwaitContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorDeclaration_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorDeclaration_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorDeclaration_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorDeclaration_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorDeclaration_Yield_Await(s)
	}
}

func (s *AsyncGeneratorDeclaration_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorDeclaration_Yield_Await(s)
	}
}

func (s *AsyncGeneratorDeclaration_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorDeclaration_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorDeclaration_Yield_Await() (localctx IAsyncGeneratorDeclaration_Yield_AwaitContext) {
	localctx = NewAsyncGeneratorDeclaration_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1206, ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7686)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7687)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7688)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(7689)
		p.BindingIdentifier_Yield_Await()
	}
	{
		p.SetState(7690)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7691)
		p.FormalParameters_Yield_Await()
	}
	{
		p.SetState(7692)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7693)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7694)
		p.AsyncGeneratorBody()
	}
	{
		p.SetState(7695)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncGeneratorDeclaration_DefaultContext is an interface to support dynamic dispatch.
type IAsyncGeneratorDeclaration_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorDeclaration_DefaultContext differentiates from other interfaces.
	IsAsyncGeneratorDeclaration_DefaultContext()
}

type AsyncGeneratorDeclaration_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorDeclaration_DefaultContext() *AsyncGeneratorDeclaration_DefaultContext {
	var p = new(AsyncGeneratorDeclaration_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Default
	return p
}

func (*AsyncGeneratorDeclaration_DefaultContext) IsAsyncGeneratorDeclaration_DefaultContext() {}

func NewAsyncGeneratorDeclaration_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorDeclaration_DefaultContext {
	var p = new(AsyncGeneratorDeclaration_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Default

	return p
}

func (s *AsyncGeneratorDeclaration_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorDeclaration_DefaultContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *AsyncGeneratorDeclaration_DefaultContext) FormalParameters_Yield_Await() IFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorDeclaration_DefaultContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorDeclaration_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorDeclaration_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorDeclaration_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorDeclaration_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorDeclaration_Default(s)
	}
}

func (s *AsyncGeneratorDeclaration_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorDeclaration_Default(s)
	}
}

func (s *AsyncGeneratorDeclaration_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorDeclaration_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorDeclaration_Default() (localctx IAsyncGeneratorDeclaration_DefaultContext) {
	localctx = NewAsyncGeneratorDeclaration_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1208, ECMAScriptParserRULE_asyncGeneratorDeclaration_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7718)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 640, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7697)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(7698)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7699)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7700)
			p.BindingIdentifier()
		}
		{
			p.SetState(7701)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7702)
			p.FormalParameters_Yield_Await()
		}
		{
			p.SetState(7703)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7704)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7705)
			p.AsyncGeneratorBody()
		}
		{
			p.SetState(7706)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7708)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(7709)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7710)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7711)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7712)
			p.FormalParameters_Yield_Await()
		}
		{
			p.SetState(7713)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7714)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7715)
			p.AsyncGeneratorBody()
		}
		{
			p.SetState(7716)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IAsyncGeneratorDeclaration_Yield_DefaultContext is an interface to support dynamic dispatch.
type IAsyncGeneratorDeclaration_Yield_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorDeclaration_Yield_DefaultContext differentiates from other interfaces.
	IsAsyncGeneratorDeclaration_Yield_DefaultContext()
}

type AsyncGeneratorDeclaration_Yield_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorDeclaration_Yield_DefaultContext() *AsyncGeneratorDeclaration_Yield_DefaultContext {
	var p = new(AsyncGeneratorDeclaration_Yield_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Default
	return p
}

func (*AsyncGeneratorDeclaration_Yield_DefaultContext) IsAsyncGeneratorDeclaration_Yield_DefaultContext() {
}

func NewAsyncGeneratorDeclaration_Yield_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorDeclaration_Yield_DefaultContext {
	var p = new(AsyncGeneratorDeclaration_Yield_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Default

	return p
}

func (s *AsyncGeneratorDeclaration_Yield_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorDeclaration_Yield_DefaultContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *AsyncGeneratorDeclaration_Yield_DefaultContext) FormalParameters_Yield_Await() IFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorDeclaration_Yield_DefaultContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorDeclaration_Yield_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorDeclaration_Yield_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorDeclaration_Yield_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorDeclaration_Yield_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorDeclaration_Yield_Default(s)
	}
}

func (s *AsyncGeneratorDeclaration_Yield_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorDeclaration_Yield_Default(s)
	}
}

func (s *AsyncGeneratorDeclaration_Yield_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorDeclaration_Yield_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorDeclaration_Yield_Default() (localctx IAsyncGeneratorDeclaration_Yield_DefaultContext) {
	localctx = NewAsyncGeneratorDeclaration_Yield_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1210, ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7741)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 641, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7720)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(7721)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7722)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7723)
			p.BindingIdentifier_Yield()
		}
		{
			p.SetState(7724)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7725)
			p.FormalParameters_Yield_Await()
		}
		{
			p.SetState(7726)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7727)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7728)
			p.AsyncGeneratorBody()
		}
		{
			p.SetState(7729)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7731)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(7732)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7733)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7734)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7735)
			p.FormalParameters_Yield_Await()
		}
		{
			p.SetState(7736)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7737)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7738)
			p.AsyncGeneratorBody()
		}
		{
			p.SetState(7739)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IAsyncGeneratorDeclaration_Await_DefaultContext is an interface to support dynamic dispatch.
type IAsyncGeneratorDeclaration_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorDeclaration_Await_DefaultContext differentiates from other interfaces.
	IsAsyncGeneratorDeclaration_Await_DefaultContext()
}

type AsyncGeneratorDeclaration_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorDeclaration_Await_DefaultContext() *AsyncGeneratorDeclaration_Await_DefaultContext {
	var p = new(AsyncGeneratorDeclaration_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Await_Default
	return p
}

func (*AsyncGeneratorDeclaration_Await_DefaultContext) IsAsyncGeneratorDeclaration_Await_DefaultContext() {
}

func NewAsyncGeneratorDeclaration_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorDeclaration_Await_DefaultContext {
	var p = new(AsyncGeneratorDeclaration_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Await_Default

	return p
}

func (s *AsyncGeneratorDeclaration_Await_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorDeclaration_Await_DefaultContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *AsyncGeneratorDeclaration_Await_DefaultContext) FormalParameters_Yield_Await() IFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorDeclaration_Await_DefaultContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorDeclaration_Await_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorDeclaration_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorDeclaration_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorDeclaration_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorDeclaration_Await_Default(s)
	}
}

func (s *AsyncGeneratorDeclaration_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorDeclaration_Await_Default(s)
	}
}

func (s *AsyncGeneratorDeclaration_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorDeclaration_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorDeclaration_Await_Default() (localctx IAsyncGeneratorDeclaration_Await_DefaultContext) {
	localctx = NewAsyncGeneratorDeclaration_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1212, ECMAScriptParserRULE_asyncGeneratorDeclaration_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7764)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 642, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7743)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(7744)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7745)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7746)
			p.BindingIdentifier_Await()
		}
		{
			p.SetState(7747)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7748)
			p.FormalParameters_Yield_Await()
		}
		{
			p.SetState(7749)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7750)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7751)
			p.AsyncGeneratorBody()
		}
		{
			p.SetState(7752)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7754)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(7755)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7756)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7757)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7758)
			p.FormalParameters_Yield_Await()
		}
		{
			p.SetState(7759)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7760)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7761)
			p.AsyncGeneratorBody()
		}
		{
			p.SetState(7762)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IAsyncGeneratorDeclaration_Yield_Await_DefaultContext is an interface to support dynamic dispatch.
type IAsyncGeneratorDeclaration_Yield_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorDeclaration_Yield_Await_DefaultContext differentiates from other interfaces.
	IsAsyncGeneratorDeclaration_Yield_Await_DefaultContext()
}

type AsyncGeneratorDeclaration_Yield_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorDeclaration_Yield_Await_DefaultContext() *AsyncGeneratorDeclaration_Yield_Await_DefaultContext {
	var p = new(AsyncGeneratorDeclaration_Yield_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Await_Default
	return p
}

func (*AsyncGeneratorDeclaration_Yield_Await_DefaultContext) IsAsyncGeneratorDeclaration_Yield_Await_DefaultContext() {
}

func NewAsyncGeneratorDeclaration_Yield_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorDeclaration_Yield_Await_DefaultContext {
	var p = new(AsyncGeneratorDeclaration_Yield_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Await_Default

	return p
}

func (s *AsyncGeneratorDeclaration_Yield_Await_DefaultContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *AsyncGeneratorDeclaration_Yield_Await_DefaultContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *AsyncGeneratorDeclaration_Yield_Await_DefaultContext) FormalParameters_Yield_Await() IFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorDeclaration_Yield_Await_DefaultContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorDeclaration_Yield_Await_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorDeclaration_Yield_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorDeclaration_Yield_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorDeclaration_Yield_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorDeclaration_Yield_Await_Default(s)
	}
}

func (s *AsyncGeneratorDeclaration_Yield_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorDeclaration_Yield_Await_Default(s)
	}
}

func (s *AsyncGeneratorDeclaration_Yield_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorDeclaration_Yield_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorDeclaration_Yield_Await_Default() (localctx IAsyncGeneratorDeclaration_Yield_Await_DefaultContext) {
	localctx = NewAsyncGeneratorDeclaration_Yield_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1214, ECMAScriptParserRULE_asyncGeneratorDeclaration_Yield_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7787)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 643, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7766)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(7767)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7768)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7769)
			p.BindingIdentifier_Yield_Await()
		}
		{
			p.SetState(7770)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7771)
			p.FormalParameters_Yield_Await()
		}
		{
			p.SetState(7772)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7773)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7774)
			p.AsyncGeneratorBody()
		}
		{
			p.SetState(7775)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7777)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(7778)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(7779)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(7780)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(7781)
			p.FormalParameters_Yield_Await()
		}
		{
			p.SetState(7782)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(7783)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(7784)
			p.AsyncGeneratorBody()
		}
		{
			p.SetState(7785)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IAsyncGeneratorExpressionContext is an interface to support dynamic dispatch.
type IAsyncGeneratorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorExpressionContext differentiates from other interfaces.
	IsAsyncGeneratorExpressionContext()
}

type AsyncGeneratorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorExpressionContext() *AsyncGeneratorExpressionContext {
	var p = new(AsyncGeneratorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorExpression
	return p
}

func (*AsyncGeneratorExpressionContext) IsAsyncGeneratorExpressionContext() {}

func NewAsyncGeneratorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorExpressionContext {
	var p = new(AsyncGeneratorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorExpression

	return p
}

func (s *AsyncGeneratorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorExpressionContext) FormalParameters_Yield_Await() IFormalParameters_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_Yield_AwaitContext)
}

func (s *AsyncGeneratorExpressionContext) AsyncGeneratorBody() IAsyncGeneratorBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncGeneratorBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncGeneratorBodyContext)
}

func (s *AsyncGeneratorExpressionContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncGeneratorExpressionContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *AsyncGeneratorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorExpression(s)
	}
}

func (s *AsyncGeneratorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorExpression(s)
	}
}

func (s *AsyncGeneratorExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorExpression() (localctx IAsyncGeneratorExpressionContext) {
	localctx = NewAsyncGeneratorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1216, ECMAScriptParserRULE_asyncGeneratorExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7789)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7790)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7791)
		p.Match(ECMAScriptParserT__84)
	}
	p.SetState(7793)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(7792)
			p.BindingIdentifier_Yield_Await()
		}

	}
	{
		p.SetState(7795)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7796)
		p.FormalParameters_Yield_Await()
	}
	{
		p.SetState(7797)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7798)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7799)
		p.AsyncGeneratorBody()
	}
	{
		p.SetState(7800)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncGeneratorBodyContext is an interface to support dynamic dispatch.
type IAsyncGeneratorBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncGeneratorBodyContext differentiates from other interfaces.
	IsAsyncGeneratorBodyContext()
}

type AsyncGeneratorBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncGeneratorBodyContext() *AsyncGeneratorBodyContext {
	var p = new(AsyncGeneratorBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorBody
	return p
}

func (*AsyncGeneratorBodyContext) IsAsyncGeneratorBodyContext() {}

func NewAsyncGeneratorBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncGeneratorBodyContext {
	var p = new(AsyncGeneratorBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncGeneratorBody

	return p
}

func (s *AsyncGeneratorBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncGeneratorBodyContext) FunctionBody_Yield_Await() IFunctionBody_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBody_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBody_Yield_AwaitContext)
}

func (s *AsyncGeneratorBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncGeneratorBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncGeneratorBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncGeneratorBody(s)
	}
}

func (s *AsyncGeneratorBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncGeneratorBody(s)
	}
}

func (s *AsyncGeneratorBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncGeneratorBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncGeneratorBody() (localctx IAsyncGeneratorBodyContext) {
	localctx = NewAsyncGeneratorBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1218, ECMAScriptParserRULE_asyncGeneratorBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7802)
		p.FunctionBody_Yield_Await()
	}

	return localctx
}

// IClassDeclarationContext is an interface to support dynamic dispatch.
type IClassDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassDeclarationContext differentiates from other interfaces.
	IsClassDeclarationContext()
}

type ClassDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclarationContext() *ClassDeclarationContext {
	var p = new(ClassDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration
	return p
}

func (*ClassDeclarationContext) IsClassDeclarationContext() {}

func NewClassDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclarationContext {
	var p = new(ClassDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration

	return p
}

func (s *ClassDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclarationContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *ClassDeclarationContext) ClassTail() IClassTailContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTailContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTailContext)
}

func (s *ClassDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassDeclaration(s)
	}
}

func (s *ClassDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassDeclaration(s)
	}
}

func (s *ClassDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassDeclaration() (localctx IClassDeclarationContext) {
	localctx = NewClassDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1220, ECMAScriptParserRULE_classDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7804)
		p.Match(ECMAScriptParserT__86)
	}
	{
		p.SetState(7805)
		p.BindingIdentifier()
	}
	{
		p.SetState(7806)
		p.ClassTail()
	}

	return localctx
}

// IClassDeclaration_YieldContext is an interface to support dynamic dispatch.
type IClassDeclaration_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassDeclaration_YieldContext differentiates from other interfaces.
	IsClassDeclaration_YieldContext()
}

type ClassDeclaration_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclaration_YieldContext() *ClassDeclaration_YieldContext {
	var p = new(ClassDeclaration_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Yield
	return p
}

func (*ClassDeclaration_YieldContext) IsClassDeclaration_YieldContext() {}

func NewClassDeclaration_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclaration_YieldContext {
	var p = new(ClassDeclaration_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Yield

	return p
}

func (s *ClassDeclaration_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclaration_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *ClassDeclaration_YieldContext) ClassTail_Yield() IClassTail_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTail_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTail_YieldContext)
}

func (s *ClassDeclaration_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclaration_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclaration_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassDeclaration_Yield(s)
	}
}

func (s *ClassDeclaration_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassDeclaration_Yield(s)
	}
}

func (s *ClassDeclaration_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassDeclaration_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassDeclaration_Yield() (localctx IClassDeclaration_YieldContext) {
	localctx = NewClassDeclaration_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1222, ECMAScriptParserRULE_classDeclaration_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7808)
		p.Match(ECMAScriptParserT__86)
	}
	{
		p.SetState(7809)
		p.BindingIdentifier_Yield()
	}
	{
		p.SetState(7810)
		p.ClassTail_Yield()
	}

	return localctx
}

// IClassDeclaration_AwaitContext is an interface to support dynamic dispatch.
type IClassDeclaration_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassDeclaration_AwaitContext differentiates from other interfaces.
	IsClassDeclaration_AwaitContext()
}

type ClassDeclaration_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclaration_AwaitContext() *ClassDeclaration_AwaitContext {
	var p = new(ClassDeclaration_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Await
	return p
}

func (*ClassDeclaration_AwaitContext) IsClassDeclaration_AwaitContext() {}

func NewClassDeclaration_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclaration_AwaitContext {
	var p = new(ClassDeclaration_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Await

	return p
}

func (s *ClassDeclaration_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclaration_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *ClassDeclaration_AwaitContext) ClassTail_Await() IClassTail_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTail_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTail_AwaitContext)
}

func (s *ClassDeclaration_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclaration_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclaration_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassDeclaration_Await(s)
	}
}

func (s *ClassDeclaration_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassDeclaration_Await(s)
	}
}

func (s *ClassDeclaration_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassDeclaration_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassDeclaration_Await() (localctx IClassDeclaration_AwaitContext) {
	localctx = NewClassDeclaration_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1224, ECMAScriptParserRULE_classDeclaration_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7812)
		p.Match(ECMAScriptParserT__86)
	}
	{
		p.SetState(7813)
		p.BindingIdentifier_Await()
	}
	{
		p.SetState(7814)
		p.ClassTail_Await()
	}

	return localctx
}

// IClassDeclaration_Yield_AwaitContext is an interface to support dynamic dispatch.
type IClassDeclaration_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassDeclaration_Yield_AwaitContext differentiates from other interfaces.
	IsClassDeclaration_Yield_AwaitContext()
}

type ClassDeclaration_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclaration_Yield_AwaitContext() *ClassDeclaration_Yield_AwaitContext {
	var p = new(ClassDeclaration_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Yield_Await
	return p
}

func (*ClassDeclaration_Yield_AwaitContext) IsClassDeclaration_Yield_AwaitContext() {}

func NewClassDeclaration_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclaration_Yield_AwaitContext {
	var p = new(ClassDeclaration_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Yield_Await

	return p
}

func (s *ClassDeclaration_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclaration_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *ClassDeclaration_Yield_AwaitContext) ClassTail_Yield_Await() IClassTail_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTail_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTail_Yield_AwaitContext)
}

func (s *ClassDeclaration_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclaration_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclaration_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassDeclaration_Yield_Await(s)
	}
}

func (s *ClassDeclaration_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassDeclaration_Yield_Await(s)
	}
}

func (s *ClassDeclaration_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassDeclaration_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassDeclaration_Yield_Await() (localctx IClassDeclaration_Yield_AwaitContext) {
	localctx = NewClassDeclaration_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1226, ECMAScriptParserRULE_classDeclaration_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7816)
		p.Match(ECMAScriptParserT__86)
	}
	{
		p.SetState(7817)
		p.BindingIdentifier_Yield_Await()
	}
	{
		p.SetState(7818)
		p.ClassTail_Yield_Await()
	}

	return localctx
}

// IClassDeclaration_DefaultContext is an interface to support dynamic dispatch.
type IClassDeclaration_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassDeclaration_DefaultContext differentiates from other interfaces.
	IsClassDeclaration_DefaultContext()
}

type ClassDeclaration_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclaration_DefaultContext() *ClassDeclaration_DefaultContext {
	var p = new(ClassDeclaration_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Default
	return p
}

func (*ClassDeclaration_DefaultContext) IsClassDeclaration_DefaultContext() {}

func NewClassDeclaration_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclaration_DefaultContext {
	var p = new(ClassDeclaration_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Default

	return p
}

func (s *ClassDeclaration_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclaration_DefaultContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *ClassDeclaration_DefaultContext) ClassTail() IClassTailContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTailContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTailContext)
}

func (s *ClassDeclaration_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclaration_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclaration_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassDeclaration_Default(s)
	}
}

func (s *ClassDeclaration_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassDeclaration_Default(s)
	}
}

func (s *ClassDeclaration_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassDeclaration_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassDeclaration_Default() (localctx IClassDeclaration_DefaultContext) {
	localctx = NewClassDeclaration_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1228, ECMAScriptParserRULE_classDeclaration_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7826)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 645, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7820)
			p.Match(ECMAScriptParserT__86)
		}
		{
			p.SetState(7821)
			p.BindingIdentifier()
		}
		{
			p.SetState(7822)
			p.ClassTail()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7824)
			p.Match(ECMAScriptParserT__86)
		}
		{
			p.SetState(7825)
			p.ClassTail()
		}

	}

	return localctx
}

// IClassDeclaration_Yield_DefaultContext is an interface to support dynamic dispatch.
type IClassDeclaration_Yield_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassDeclaration_Yield_DefaultContext differentiates from other interfaces.
	IsClassDeclaration_Yield_DefaultContext()
}

type ClassDeclaration_Yield_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclaration_Yield_DefaultContext() *ClassDeclaration_Yield_DefaultContext {
	var p = new(ClassDeclaration_Yield_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Yield_Default
	return p
}

func (*ClassDeclaration_Yield_DefaultContext) IsClassDeclaration_Yield_DefaultContext() {}

func NewClassDeclaration_Yield_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclaration_Yield_DefaultContext {
	var p = new(ClassDeclaration_Yield_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Yield_Default

	return p
}

func (s *ClassDeclaration_Yield_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclaration_Yield_DefaultContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *ClassDeclaration_Yield_DefaultContext) ClassTail_Yield() IClassTail_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTail_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTail_YieldContext)
}

func (s *ClassDeclaration_Yield_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclaration_Yield_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclaration_Yield_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassDeclaration_Yield_Default(s)
	}
}

func (s *ClassDeclaration_Yield_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassDeclaration_Yield_Default(s)
	}
}

func (s *ClassDeclaration_Yield_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassDeclaration_Yield_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassDeclaration_Yield_Default() (localctx IClassDeclaration_Yield_DefaultContext) {
	localctx = NewClassDeclaration_Yield_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1230, ECMAScriptParserRULE_classDeclaration_Yield_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7834)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 646, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7828)
			p.Match(ECMAScriptParserT__86)
		}
		{
			p.SetState(7829)
			p.BindingIdentifier_Yield()
		}
		{
			p.SetState(7830)
			p.ClassTail_Yield()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7832)
			p.Match(ECMAScriptParserT__86)
		}
		{
			p.SetState(7833)
			p.ClassTail_Yield()
		}

	}

	return localctx
}

// IClassDeclaration_Await_DefaultContext is an interface to support dynamic dispatch.
type IClassDeclaration_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassDeclaration_Await_DefaultContext differentiates from other interfaces.
	IsClassDeclaration_Await_DefaultContext()
}

type ClassDeclaration_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclaration_Await_DefaultContext() *ClassDeclaration_Await_DefaultContext {
	var p = new(ClassDeclaration_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Await_Default
	return p
}

func (*ClassDeclaration_Await_DefaultContext) IsClassDeclaration_Await_DefaultContext() {}

func NewClassDeclaration_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclaration_Await_DefaultContext {
	var p = new(ClassDeclaration_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Await_Default

	return p
}

func (s *ClassDeclaration_Await_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclaration_Await_DefaultContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *ClassDeclaration_Await_DefaultContext) ClassTail_Await() IClassTail_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTail_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTail_AwaitContext)
}

func (s *ClassDeclaration_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclaration_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclaration_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassDeclaration_Await_Default(s)
	}
}

func (s *ClassDeclaration_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassDeclaration_Await_Default(s)
	}
}

func (s *ClassDeclaration_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassDeclaration_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassDeclaration_Await_Default() (localctx IClassDeclaration_Await_DefaultContext) {
	localctx = NewClassDeclaration_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1232, ECMAScriptParserRULE_classDeclaration_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7842)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 647, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7836)
			p.Match(ECMAScriptParserT__86)
		}
		{
			p.SetState(7837)
			p.BindingIdentifier_Await()
		}
		{
			p.SetState(7838)
			p.ClassTail_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7840)
			p.Match(ECMAScriptParserT__86)
		}
		{
			p.SetState(7841)
			p.ClassTail_Await()
		}

	}

	return localctx
}

// IClassDeclaration_Yield_Await_DefaultContext is an interface to support dynamic dispatch.
type IClassDeclaration_Yield_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassDeclaration_Yield_Await_DefaultContext differentiates from other interfaces.
	IsClassDeclaration_Yield_Await_DefaultContext()
}

type ClassDeclaration_Yield_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclaration_Yield_Await_DefaultContext() *ClassDeclaration_Yield_Await_DefaultContext {
	var p = new(ClassDeclaration_Yield_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Yield_Await_Default
	return p
}

func (*ClassDeclaration_Yield_Await_DefaultContext) IsClassDeclaration_Yield_Await_DefaultContext() {}

func NewClassDeclaration_Yield_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclaration_Yield_Await_DefaultContext {
	var p = new(ClassDeclaration_Yield_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classDeclaration_Yield_Await_Default

	return p
}

func (s *ClassDeclaration_Yield_Await_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclaration_Yield_Await_DefaultContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *ClassDeclaration_Yield_Await_DefaultContext) ClassTail_Yield_Await() IClassTail_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTail_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTail_Yield_AwaitContext)
}

func (s *ClassDeclaration_Yield_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclaration_Yield_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclaration_Yield_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassDeclaration_Yield_Await_Default(s)
	}
}

func (s *ClassDeclaration_Yield_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassDeclaration_Yield_Await_Default(s)
	}
}

func (s *ClassDeclaration_Yield_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassDeclaration_Yield_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassDeclaration_Yield_Await_Default() (localctx IClassDeclaration_Yield_Await_DefaultContext) {
	localctx = NewClassDeclaration_Yield_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1234, ECMAScriptParserRULE_classDeclaration_Yield_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7850)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 648, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7844)
			p.Match(ECMAScriptParserT__86)
		}
		{
			p.SetState(7845)
			p.BindingIdentifier_Yield_Await()
		}
		{
			p.SetState(7846)
			p.ClassTail_Yield_Await()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7848)
			p.Match(ECMAScriptParserT__86)
		}
		{
			p.SetState(7849)
			p.ClassTail_Yield_Await()
		}

	}

	return localctx
}

// IClassExpressionContext is an interface to support dynamic dispatch.
type IClassExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassExpressionContext differentiates from other interfaces.
	IsClassExpressionContext()
}

type ClassExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassExpressionContext() *ClassExpressionContext {
	var p = new(ClassExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classExpression
	return p
}

func (*ClassExpressionContext) IsClassExpressionContext() {}

func NewClassExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassExpressionContext {
	var p = new(ClassExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classExpression

	return p
}

func (s *ClassExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassExpressionContext) ClassTail() IClassTailContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTailContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTailContext)
}

func (s *ClassExpressionContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *ClassExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassExpression(s)
	}
}

func (s *ClassExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassExpression(s)
	}
}

func (s *ClassExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassExpression() (localctx IClassExpressionContext) {
	localctx = NewClassExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1236, ECMAScriptParserRULE_classExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7852)
		p.Match(ECMAScriptParserT__86)
	}
	p.SetState(7854)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(7853)
			p.BindingIdentifier()
		}

	}
	{
		p.SetState(7856)
		p.ClassTail()
	}

	return localctx
}

// IClassExpression_YieldContext is an interface to support dynamic dispatch.
type IClassExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassExpression_YieldContext differentiates from other interfaces.
	IsClassExpression_YieldContext()
}

type ClassExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassExpression_YieldContext() *ClassExpression_YieldContext {
	var p = new(ClassExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classExpression_Yield
	return p
}

func (*ClassExpression_YieldContext) IsClassExpression_YieldContext() {}

func NewClassExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassExpression_YieldContext {
	var p = new(ClassExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classExpression_Yield

	return p
}

func (s *ClassExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassExpression_YieldContext) ClassTail_Yield() IClassTail_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTail_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTail_YieldContext)
}

func (s *ClassExpression_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *ClassExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassExpression_Yield(s)
	}
}

func (s *ClassExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassExpression_Yield(s)
	}
}

func (s *ClassExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassExpression_Yield() (localctx IClassExpression_YieldContext) {
	localctx = NewClassExpression_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1238, ECMAScriptParserRULE_classExpression_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7858)
		p.Match(ECMAScriptParserT__86)
	}
	p.SetState(7860)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(7859)
			p.BindingIdentifier_Yield()
		}

	}
	{
		p.SetState(7862)
		p.ClassTail_Yield()
	}

	return localctx
}

// IClassExpression_AwaitContext is an interface to support dynamic dispatch.
type IClassExpression_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassExpression_AwaitContext differentiates from other interfaces.
	IsClassExpression_AwaitContext()
}

type ClassExpression_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassExpression_AwaitContext() *ClassExpression_AwaitContext {
	var p = new(ClassExpression_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classExpression_Await
	return p
}

func (*ClassExpression_AwaitContext) IsClassExpression_AwaitContext() {}

func NewClassExpression_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassExpression_AwaitContext {
	var p = new(ClassExpression_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classExpression_Await

	return p
}

func (s *ClassExpression_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassExpression_AwaitContext) ClassTail_Await() IClassTail_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTail_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTail_AwaitContext)
}

func (s *ClassExpression_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *ClassExpression_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassExpression_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassExpression_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassExpression_Await(s)
	}
}

func (s *ClassExpression_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassExpression_Await(s)
	}
}

func (s *ClassExpression_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassExpression_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassExpression_Await() (localctx IClassExpression_AwaitContext) {
	localctx = NewClassExpression_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1240, ECMAScriptParserRULE_classExpression_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7864)
		p.Match(ECMAScriptParserT__86)
	}
	p.SetState(7866)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(7865)
			p.BindingIdentifier_Await()
		}

	}
	{
		p.SetState(7868)
		p.ClassTail_Await()
	}

	return localctx
}

// IClassExpression_Yield_AwaitContext is an interface to support dynamic dispatch.
type IClassExpression_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassExpression_Yield_AwaitContext differentiates from other interfaces.
	IsClassExpression_Yield_AwaitContext()
}

type ClassExpression_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassExpression_Yield_AwaitContext() *ClassExpression_Yield_AwaitContext {
	var p = new(ClassExpression_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classExpression_Yield_Await
	return p
}

func (*ClassExpression_Yield_AwaitContext) IsClassExpression_Yield_AwaitContext() {}

func NewClassExpression_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassExpression_Yield_AwaitContext {
	var p = new(ClassExpression_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classExpression_Yield_Await

	return p
}

func (s *ClassExpression_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassExpression_Yield_AwaitContext) ClassTail_Yield_Await() IClassTail_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassTail_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassTail_Yield_AwaitContext)
}

func (s *ClassExpression_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *ClassExpression_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassExpression_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassExpression_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassExpression_Yield_Await(s)
	}
}

func (s *ClassExpression_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassExpression_Yield_Await(s)
	}
}

func (s *ClassExpression_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassExpression_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassExpression_Yield_Await() (localctx IClassExpression_Yield_AwaitContext) {
	localctx = NewClassExpression_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1242, ECMAScriptParserRULE_classExpression_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7870)
		p.Match(ECMAScriptParserT__86)
	}
	p.SetState(7872)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(7871)
			p.BindingIdentifier_Yield_Await()
		}

	}
	{
		p.SetState(7874)
		p.ClassTail_Yield_Await()
	}

	return localctx
}

// IClassTailContext is an interface to support dynamic dispatch.
type IClassTailContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassTailContext differentiates from other interfaces.
	IsClassTailContext()
}

type ClassTailContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassTailContext() *ClassTailContext {
	var p = new(ClassTailContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classTail
	return p
}

func (*ClassTailContext) IsClassTailContext() {}

func NewClassTailContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassTailContext {
	var p = new(ClassTailContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classTail

	return p
}

func (s *ClassTailContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassTailContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ClassTailContext) ClassHeritage() IClassHeritageContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassHeritageContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassHeritageContext)
}

func (s *ClassTailContext) ClassBody() IClassBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassBodyContext)
}

func (s *ClassTailContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassTailContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassTailContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassTail(s)
	}
}

func (s *ClassTailContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassTail(s)
	}
}

func (s *ClassTailContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassTail(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassTail() (localctx IClassTailContext) {
	localctx = NewClassTailContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1244, ECMAScriptParserRULE_classTail)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7877)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__87 {
		{
			p.SetState(7876)
			p.ClassHeritage()
		}

	}
	{
		p.SetState(7879)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(7881)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__8 || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__82-59))|(1<<(ECMAScriptParserT__83-59))|(1<<(ECMAScriptParserT__84-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__88-59)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(ECMAScriptParserIdentifierName-101))|(1<<(ECMAScriptParserNumericLiteral-101))|(1<<(ECMAScriptParserStringLiteral-101)))) != 0) {
		{
			p.SetState(7880)
			p.ClassBody()
		}

	}
	{
		p.SetState(7883)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IClassTail_YieldContext is an interface to support dynamic dispatch.
type IClassTail_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassTail_YieldContext differentiates from other interfaces.
	IsClassTail_YieldContext()
}

type ClassTail_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassTail_YieldContext() *ClassTail_YieldContext {
	var p = new(ClassTail_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classTail_Yield
	return p
}

func (*ClassTail_YieldContext) IsClassTail_YieldContext() {}

func NewClassTail_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassTail_YieldContext {
	var p = new(ClassTail_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classTail_Yield

	return p
}

func (s *ClassTail_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassTail_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ClassTail_YieldContext) ClassHeritage_Yield() IClassHeritage_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassHeritage_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassHeritage_YieldContext)
}

func (s *ClassTail_YieldContext) ClassBody_Yield() IClassBody_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassBody_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassBody_YieldContext)
}

func (s *ClassTail_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassTail_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassTail_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassTail_Yield(s)
	}
}

func (s *ClassTail_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassTail_Yield(s)
	}
}

func (s *ClassTail_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassTail_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassTail_Yield() (localctx IClassTail_YieldContext) {
	localctx = NewClassTail_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1246, ECMAScriptParserRULE_classTail_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7886)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__87 {
		{
			p.SetState(7885)
			p.ClassHeritage_Yield()
		}

	}
	{
		p.SetState(7888)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(7890)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__8 || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__82-59))|(1<<(ECMAScriptParserT__83-59))|(1<<(ECMAScriptParserT__84-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__88-59)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(ECMAScriptParserIdentifierName-101))|(1<<(ECMAScriptParserNumericLiteral-101))|(1<<(ECMAScriptParserStringLiteral-101)))) != 0) {
		{
			p.SetState(7889)
			p.ClassBody_Yield()
		}

	}
	{
		p.SetState(7892)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IClassTail_AwaitContext is an interface to support dynamic dispatch.
type IClassTail_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassTail_AwaitContext differentiates from other interfaces.
	IsClassTail_AwaitContext()
}

type ClassTail_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassTail_AwaitContext() *ClassTail_AwaitContext {
	var p = new(ClassTail_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classTail_Await
	return p
}

func (*ClassTail_AwaitContext) IsClassTail_AwaitContext() {}

func NewClassTail_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassTail_AwaitContext {
	var p = new(ClassTail_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classTail_Await

	return p
}

func (s *ClassTail_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassTail_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ClassTail_AwaitContext) ClassHeritage_Await() IClassHeritage_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassHeritage_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassHeritage_AwaitContext)
}

func (s *ClassTail_AwaitContext) ClassBody_Await() IClassBody_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassBody_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassBody_AwaitContext)
}

func (s *ClassTail_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassTail_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassTail_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassTail_Await(s)
	}
}

func (s *ClassTail_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassTail_Await(s)
	}
}

func (s *ClassTail_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassTail_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassTail_Await() (localctx IClassTail_AwaitContext) {
	localctx = NewClassTail_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1248, ECMAScriptParserRULE_classTail_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7895)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__87 {
		{
			p.SetState(7894)
			p.ClassHeritage_Await()
		}

	}
	{
		p.SetState(7897)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(7899)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__8 || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__82-59))|(1<<(ECMAScriptParserT__83-59))|(1<<(ECMAScriptParserT__84-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__88-59)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(ECMAScriptParserIdentifierName-101))|(1<<(ECMAScriptParserNumericLiteral-101))|(1<<(ECMAScriptParserStringLiteral-101)))) != 0) {
		{
			p.SetState(7898)
			p.ClassBody_Await()
		}

	}
	{
		p.SetState(7901)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IClassTail_Yield_AwaitContext is an interface to support dynamic dispatch.
type IClassTail_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassTail_Yield_AwaitContext differentiates from other interfaces.
	IsClassTail_Yield_AwaitContext()
}

type ClassTail_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassTail_Yield_AwaitContext() *ClassTail_Yield_AwaitContext {
	var p = new(ClassTail_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classTail_Yield_Await
	return p
}

func (*ClassTail_Yield_AwaitContext) IsClassTail_Yield_AwaitContext() {}

func NewClassTail_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassTail_Yield_AwaitContext {
	var p = new(ClassTail_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classTail_Yield_Await

	return p
}

func (s *ClassTail_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassTail_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ClassTail_Yield_AwaitContext) ClassHeritage_Yield_Await() IClassHeritage_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassHeritage_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassHeritage_Yield_AwaitContext)
}

func (s *ClassTail_Yield_AwaitContext) ClassBody_Yield_Await() IClassBody_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassBody_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassBody_Yield_AwaitContext)
}

func (s *ClassTail_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassTail_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassTail_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassTail_Yield_Await(s)
	}
}

func (s *ClassTail_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassTail_Yield_Await(s)
	}
}

func (s *ClassTail_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassTail_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassTail_Yield_Await() (localctx IClassTail_Yield_AwaitContext) {
	localctx = NewClassTail_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1250, ECMAScriptParserRULE_classTail_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7904)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__87 {
		{
			p.SetState(7903)
			p.ClassHeritage_Yield_Await()
		}

	}
	{
		p.SetState(7906)
		p.Match(ECMAScriptParserT__10)
	}
	p.SetState(7908)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__8 || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__82-59))|(1<<(ECMAScriptParserT__83-59))|(1<<(ECMAScriptParserT__84-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__88-59)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(ECMAScriptParserIdentifierName-101))|(1<<(ECMAScriptParserNumericLiteral-101))|(1<<(ECMAScriptParserStringLiteral-101)))) != 0) {
		{
			p.SetState(7907)
			p.ClassBody_Yield_Await()
		}

	}
	{
		p.SetState(7910)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IClassHeritageContext is an interface to support dynamic dispatch.
type IClassHeritageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassHeritageContext differentiates from other interfaces.
	IsClassHeritageContext()
}

type ClassHeritageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassHeritageContext() *ClassHeritageContext {
	var p = new(ClassHeritageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classHeritage
	return p
}

func (*ClassHeritageContext) IsClassHeritageContext() {}

func NewClassHeritageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassHeritageContext {
	var p = new(ClassHeritageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classHeritage

	return p
}

func (s *ClassHeritageContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassHeritageContext) LeftHandSideExpression() ILeftHandSideExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpressionContext)
}

func (s *ClassHeritageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassHeritageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassHeritageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassHeritage(s)
	}
}

func (s *ClassHeritageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassHeritage(s)
	}
}

func (s *ClassHeritageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassHeritage(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassHeritage() (localctx IClassHeritageContext) {
	localctx = NewClassHeritageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1252, ECMAScriptParserRULE_classHeritage)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7912)
		p.Match(ECMAScriptParserT__87)
	}
	{
		p.SetState(7913)
		p.LeftHandSideExpression()
	}

	return localctx
}

// IClassHeritage_YieldContext is an interface to support dynamic dispatch.
type IClassHeritage_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassHeritage_YieldContext differentiates from other interfaces.
	IsClassHeritage_YieldContext()
}

type ClassHeritage_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassHeritage_YieldContext() *ClassHeritage_YieldContext {
	var p = new(ClassHeritage_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classHeritage_Yield
	return p
}

func (*ClassHeritage_YieldContext) IsClassHeritage_YieldContext() {}

func NewClassHeritage_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassHeritage_YieldContext {
	var p = new(ClassHeritage_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classHeritage_Yield

	return p
}

func (s *ClassHeritage_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassHeritage_YieldContext) LeftHandSideExpression_Yield() ILeftHandSideExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_YieldContext)
}

func (s *ClassHeritage_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassHeritage_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassHeritage_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassHeritage_Yield(s)
	}
}

func (s *ClassHeritage_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassHeritage_Yield(s)
	}
}

func (s *ClassHeritage_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassHeritage_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassHeritage_Yield() (localctx IClassHeritage_YieldContext) {
	localctx = NewClassHeritage_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1254, ECMAScriptParserRULE_classHeritage_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7915)
		p.Match(ECMAScriptParserT__87)
	}
	{
		p.SetState(7916)
		p.LeftHandSideExpression_Yield()
	}

	return localctx
}

// IClassHeritage_AwaitContext is an interface to support dynamic dispatch.
type IClassHeritage_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassHeritage_AwaitContext differentiates from other interfaces.
	IsClassHeritage_AwaitContext()
}

type ClassHeritage_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassHeritage_AwaitContext() *ClassHeritage_AwaitContext {
	var p = new(ClassHeritage_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classHeritage_Await
	return p
}

func (*ClassHeritage_AwaitContext) IsClassHeritage_AwaitContext() {}

func NewClassHeritage_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassHeritage_AwaitContext {
	var p = new(ClassHeritage_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classHeritage_Await

	return p
}

func (s *ClassHeritage_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassHeritage_AwaitContext) LeftHandSideExpression_Await() ILeftHandSideExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_AwaitContext)
}

func (s *ClassHeritage_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassHeritage_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassHeritage_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassHeritage_Await(s)
	}
}

func (s *ClassHeritage_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassHeritage_Await(s)
	}
}

func (s *ClassHeritage_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassHeritage_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassHeritage_Await() (localctx IClassHeritage_AwaitContext) {
	localctx = NewClassHeritage_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1256, ECMAScriptParserRULE_classHeritage_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7918)
		p.Match(ECMAScriptParserT__87)
	}
	{
		p.SetState(7919)
		p.LeftHandSideExpression_Await()
	}

	return localctx
}

// IClassHeritage_Yield_AwaitContext is an interface to support dynamic dispatch.
type IClassHeritage_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassHeritage_Yield_AwaitContext differentiates from other interfaces.
	IsClassHeritage_Yield_AwaitContext()
}

type ClassHeritage_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassHeritage_Yield_AwaitContext() *ClassHeritage_Yield_AwaitContext {
	var p = new(ClassHeritage_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classHeritage_Yield_Await
	return p
}

func (*ClassHeritage_Yield_AwaitContext) IsClassHeritage_Yield_AwaitContext() {}

func NewClassHeritage_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassHeritage_Yield_AwaitContext {
	var p = new(ClassHeritage_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classHeritage_Yield_Await

	return p
}

func (s *ClassHeritage_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassHeritage_Yield_AwaitContext) LeftHandSideExpression_Yield_Await() ILeftHandSideExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeftHandSideExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeftHandSideExpression_Yield_AwaitContext)
}

func (s *ClassHeritage_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassHeritage_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassHeritage_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassHeritage_Yield_Await(s)
	}
}

func (s *ClassHeritage_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassHeritage_Yield_Await(s)
	}
}

func (s *ClassHeritage_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassHeritage_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassHeritage_Yield_Await() (localctx IClassHeritage_Yield_AwaitContext) {
	localctx = NewClassHeritage_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1258, ECMAScriptParserRULE_classHeritage_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7921)
		p.Match(ECMAScriptParserT__87)
	}
	{
		p.SetState(7922)
		p.LeftHandSideExpression_Yield_Await()
	}

	return localctx
}

// IClassBodyContext is an interface to support dynamic dispatch.
type IClassBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassBodyContext differentiates from other interfaces.
	IsClassBodyContext()
}

type ClassBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassBodyContext() *ClassBodyContext {
	var p = new(ClassBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classBody
	return p
}

func (*ClassBodyContext) IsClassBodyContext() {}

func NewClassBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassBodyContext {
	var p = new(ClassBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classBody

	return p
}

func (s *ClassBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassBodyContext) AllClassElement() []IClassElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClassElementContext)(nil)).Elem())
	var tst = make([]IClassElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClassElementContext)
		}
	}

	return tst
}

func (s *ClassBodyContext) ClassElement(i int) IClassElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClassElementContext)
}

func (s *ClassBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassBody(s)
	}
}

func (s *ClassBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassBody(s)
	}
}

func (s *ClassBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassBody() (localctx IClassBodyContext) {
	localctx = NewClassBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1260, ECMAScriptParserRULE_classBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7925)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == ECMAScriptParserT__8 || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__82-59))|(1<<(ECMAScriptParserT__83-59))|(1<<(ECMAScriptParserT__84-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__88-59)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(ECMAScriptParserIdentifierName-101))|(1<<(ECMAScriptParserNumericLiteral-101))|(1<<(ECMAScriptParserStringLiteral-101)))) != 0) {
		{
			p.SetState(7924)
			p.ClassElement()
		}

		p.SetState(7927)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IClassBody_YieldContext is an interface to support dynamic dispatch.
type IClassBody_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassBody_YieldContext differentiates from other interfaces.
	IsClassBody_YieldContext()
}

type ClassBody_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassBody_YieldContext() *ClassBody_YieldContext {
	var p = new(ClassBody_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classBody_Yield
	return p
}

func (*ClassBody_YieldContext) IsClassBody_YieldContext() {}

func NewClassBody_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassBody_YieldContext {
	var p = new(ClassBody_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classBody_Yield

	return p
}

func (s *ClassBody_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassBody_YieldContext) AllClassElement_Yield() []IClassElement_YieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClassElement_YieldContext)(nil)).Elem())
	var tst = make([]IClassElement_YieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClassElement_YieldContext)
		}
	}

	return tst
}

func (s *ClassBody_YieldContext) ClassElement_Yield(i int) IClassElement_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassElement_YieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClassElement_YieldContext)
}

func (s *ClassBody_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassBody_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassBody_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassBody_Yield(s)
	}
}

func (s *ClassBody_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassBody_Yield(s)
	}
}

func (s *ClassBody_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassBody_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassBody_Yield() (localctx IClassBody_YieldContext) {
	localctx = NewClassBody_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1262, ECMAScriptParserRULE_classBody_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7930)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == ECMAScriptParserT__8 || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__82-59))|(1<<(ECMAScriptParserT__83-59))|(1<<(ECMAScriptParserT__84-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__88-59)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(ECMAScriptParserIdentifierName-101))|(1<<(ECMAScriptParserNumericLiteral-101))|(1<<(ECMAScriptParserStringLiteral-101)))) != 0) {
		{
			p.SetState(7929)
			p.ClassElement_Yield()
		}

		p.SetState(7932)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IClassBody_AwaitContext is an interface to support dynamic dispatch.
type IClassBody_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassBody_AwaitContext differentiates from other interfaces.
	IsClassBody_AwaitContext()
}

type ClassBody_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassBody_AwaitContext() *ClassBody_AwaitContext {
	var p = new(ClassBody_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classBody_Await
	return p
}

func (*ClassBody_AwaitContext) IsClassBody_AwaitContext() {}

func NewClassBody_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassBody_AwaitContext {
	var p = new(ClassBody_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classBody_Await

	return p
}

func (s *ClassBody_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassBody_AwaitContext) AllClassElement_Await() []IClassElement_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClassElement_AwaitContext)(nil)).Elem())
	var tst = make([]IClassElement_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClassElement_AwaitContext)
		}
	}

	return tst
}

func (s *ClassBody_AwaitContext) ClassElement_Await(i int) IClassElement_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassElement_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClassElement_AwaitContext)
}

func (s *ClassBody_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassBody_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassBody_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassBody_Await(s)
	}
}

func (s *ClassBody_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassBody_Await(s)
	}
}

func (s *ClassBody_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassBody_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassBody_Await() (localctx IClassBody_AwaitContext) {
	localctx = NewClassBody_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1264, ECMAScriptParserRULE_classBody_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == ECMAScriptParserT__8 || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__82-59))|(1<<(ECMAScriptParserT__83-59))|(1<<(ECMAScriptParserT__84-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__88-59)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(ECMAScriptParserIdentifierName-101))|(1<<(ECMAScriptParserNumericLiteral-101))|(1<<(ECMAScriptParserStringLiteral-101)))) != 0) {
		{
			p.SetState(7934)
			p.ClassElement_Await()
		}

		p.SetState(7937)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IClassBody_Yield_AwaitContext is an interface to support dynamic dispatch.
type IClassBody_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassBody_Yield_AwaitContext differentiates from other interfaces.
	IsClassBody_Yield_AwaitContext()
}

type ClassBody_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassBody_Yield_AwaitContext() *ClassBody_Yield_AwaitContext {
	var p = new(ClassBody_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classBody_Yield_Await
	return p
}

func (*ClassBody_Yield_AwaitContext) IsClassBody_Yield_AwaitContext() {}

func NewClassBody_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassBody_Yield_AwaitContext {
	var p = new(ClassBody_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classBody_Yield_Await

	return p
}

func (s *ClassBody_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassBody_Yield_AwaitContext) AllClassElement_Yield_Await() []IClassElement_Yield_AwaitContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClassElement_Yield_AwaitContext)(nil)).Elem())
	var tst = make([]IClassElement_Yield_AwaitContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClassElement_Yield_AwaitContext)
		}
	}

	return tst
}

func (s *ClassBody_Yield_AwaitContext) ClassElement_Yield_Await(i int) IClassElement_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassElement_Yield_AwaitContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClassElement_Yield_AwaitContext)
}

func (s *ClassBody_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassBody_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassBody_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassBody_Yield_Await(s)
	}
}

func (s *ClassBody_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassBody_Yield_Await(s)
	}
}

func (s *ClassBody_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassBody_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassBody_Yield_Await() (localctx IClassBody_Yield_AwaitContext) {
	localctx = NewClassBody_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1266, ECMAScriptParserRULE_classBody_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7940)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == ECMAScriptParserT__8 || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__82-59))|(1<<(ECMAScriptParserT__83-59))|(1<<(ECMAScriptParserT__84-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__88-59)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(ECMAScriptParserIdentifierName-101))|(1<<(ECMAScriptParserNumericLiteral-101))|(1<<(ECMAScriptParserStringLiteral-101)))) != 0) {
		{
			p.SetState(7939)
			p.ClassElement_Yield_Await()
		}

		p.SetState(7942)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IClassElementContext is an interface to support dynamic dispatch.
type IClassElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassElementContext differentiates from other interfaces.
	IsClassElementContext()
}

type ClassElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassElementContext() *ClassElementContext {
	var p = new(ClassElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classElement
	return p
}

func (*ClassElementContext) IsClassElementContext() {}

func NewClassElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassElementContext {
	var p = new(ClassElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classElement

	return p
}

func (s *ClassElementContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassElementContext) MethodDefinition() IMethodDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethodDefinitionContext)
}

func (s *ClassElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassElement(s)
	}
}

func (s *ClassElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassElement(s)
	}
}

func (s *ClassElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassElement() (localctx IClassElementContext) {
	localctx = NewClassElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1268, ECMAScriptParserRULE_classElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7949)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__8, ECMAScriptParserT__82, ECMAScriptParserT__83, ECMAScriptParserT__84, ECMAScriptParserT__85, ECMAScriptParserT__88, ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(7945)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__88 {
			{
				p.SetState(7944)
				p.Match(ECMAScriptParserT__88)
			}

		}
		{
			p.SetState(7947)
			p.MethodDefinition()
		}

	case ECMAScriptParserT__58:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7948)
			p.Match(ECMAScriptParserT__58)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClassElement_YieldContext is an interface to support dynamic dispatch.
type IClassElement_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassElement_YieldContext differentiates from other interfaces.
	IsClassElement_YieldContext()
}

type ClassElement_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassElement_YieldContext() *ClassElement_YieldContext {
	var p = new(ClassElement_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classElement_Yield
	return p
}

func (*ClassElement_YieldContext) IsClassElement_YieldContext() {}

func NewClassElement_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassElement_YieldContext {
	var p = new(ClassElement_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classElement_Yield

	return p
}

func (s *ClassElement_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassElement_YieldContext) MethodDefinition_Yield() IMethodDefinition_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodDefinition_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethodDefinition_YieldContext)
}

func (s *ClassElement_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassElement_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassElement_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassElement_Yield(s)
	}
}

func (s *ClassElement_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassElement_Yield(s)
	}
}

func (s *ClassElement_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassElement_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassElement_Yield() (localctx IClassElement_YieldContext) {
	localctx = NewClassElement_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1270, ECMAScriptParserRULE_classElement_Yield)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7956)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__8, ECMAScriptParserT__82, ECMAScriptParserT__83, ECMAScriptParserT__84, ECMAScriptParserT__85, ECMAScriptParserT__88, ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(7952)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__88 {
			{
				p.SetState(7951)
				p.Match(ECMAScriptParserT__88)
			}

		}
		{
			p.SetState(7954)
			p.MethodDefinition_Yield()
		}

	case ECMAScriptParserT__58:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7955)
			p.Match(ECMAScriptParserT__58)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClassElement_AwaitContext is an interface to support dynamic dispatch.
type IClassElement_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassElement_AwaitContext differentiates from other interfaces.
	IsClassElement_AwaitContext()
}

type ClassElement_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassElement_AwaitContext() *ClassElement_AwaitContext {
	var p = new(ClassElement_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classElement_Await
	return p
}

func (*ClassElement_AwaitContext) IsClassElement_AwaitContext() {}

func NewClassElement_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassElement_AwaitContext {
	var p = new(ClassElement_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classElement_Await

	return p
}

func (s *ClassElement_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassElement_AwaitContext) MethodDefinition_Await() IMethodDefinition_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodDefinition_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethodDefinition_AwaitContext)
}

func (s *ClassElement_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassElement_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassElement_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassElement_Await(s)
	}
}

func (s *ClassElement_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassElement_Await(s)
	}
}

func (s *ClassElement_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassElement_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassElement_Await() (localctx IClassElement_AwaitContext) {
	localctx = NewClassElement_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1272, ECMAScriptParserRULE_classElement_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7963)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__8, ECMAScriptParserT__82, ECMAScriptParserT__83, ECMAScriptParserT__84, ECMAScriptParserT__85, ECMAScriptParserT__88, ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(7959)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__88 {
			{
				p.SetState(7958)
				p.Match(ECMAScriptParserT__88)
			}

		}
		{
			p.SetState(7961)
			p.MethodDefinition_Await()
		}

	case ECMAScriptParserT__58:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7962)
			p.Match(ECMAScriptParserT__58)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClassElement_Yield_AwaitContext is an interface to support dynamic dispatch.
type IClassElement_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassElement_Yield_AwaitContext differentiates from other interfaces.
	IsClassElement_Yield_AwaitContext()
}

type ClassElement_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassElement_Yield_AwaitContext() *ClassElement_Yield_AwaitContext {
	var p = new(ClassElement_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_classElement_Yield_Await
	return p
}

func (*ClassElement_Yield_AwaitContext) IsClassElement_Yield_AwaitContext() {}

func NewClassElement_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassElement_Yield_AwaitContext {
	var p = new(ClassElement_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_classElement_Yield_Await

	return p
}

func (s *ClassElement_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassElement_Yield_AwaitContext) MethodDefinition_Yield_Await() IMethodDefinition_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodDefinition_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethodDefinition_Yield_AwaitContext)
}

func (s *ClassElement_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassElement_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassElement_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterClassElement_Yield_Await(s)
	}
}

func (s *ClassElement_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitClassElement_Yield_Await(s)
	}
}

func (s *ClassElement_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitClassElement_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ClassElement_Yield_Await() (localctx IClassElement_Yield_AwaitContext) {
	localctx = NewClassElement_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1274, ECMAScriptParserRULE_classElement_Yield_Await)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7970)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__8, ECMAScriptParserT__82, ECMAScriptParserT__83, ECMAScriptParserT__84, ECMAScriptParserT__85, ECMAScriptParserT__88, ECMAScriptParserIdentifierName, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(7966)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__88 {
			{
				p.SetState(7965)
				p.Match(ECMAScriptParserT__88)
			}

		}
		{
			p.SetState(7968)
			p.MethodDefinition_Yield_Await()
		}

	case ECMAScriptParserT__58:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7969)
			p.Match(ECMAScriptParserT__58)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAsyncFunctionDeclarationContext is an interface to support dynamic dispatch.
type IAsyncFunctionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncFunctionDeclarationContext differentiates from other interfaces.
	IsAsyncFunctionDeclarationContext()
}

type AsyncFunctionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncFunctionDeclarationContext() *AsyncFunctionDeclarationContext {
	var p = new(AsyncFunctionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration
	return p
}

func (*AsyncFunctionDeclarationContext) IsAsyncFunctionDeclarationContext() {}

func NewAsyncFunctionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncFunctionDeclarationContext {
	var p = new(AsyncFunctionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration

	return p
}

func (s *AsyncFunctionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncFunctionDeclarationContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *AsyncFunctionDeclarationContext) FormalParameters_Await() IFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_AwaitContext)
}

func (s *AsyncFunctionDeclarationContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncFunctionDeclarationContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncFunctionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncFunctionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncFunctionDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncFunctionDeclaration(s)
	}
}

func (s *AsyncFunctionDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncFunctionDeclaration(s)
	}
}

func (s *AsyncFunctionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncFunctionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncFunctionDeclaration() (localctx IAsyncFunctionDeclarationContext) {
	localctx = NewAsyncFunctionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1276, ECMAScriptParserRULE_asyncFunctionDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7972)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7973)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7974)
		p.BindingIdentifier()
	}
	{
		p.SetState(7975)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7976)
		p.FormalParameters_Await()
	}
	{
		p.SetState(7977)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7978)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7979)
		p.AsyncFunctionBody()
	}
	{
		p.SetState(7980)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncFunctionDeclaration_YieldContext is an interface to support dynamic dispatch.
type IAsyncFunctionDeclaration_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncFunctionDeclaration_YieldContext differentiates from other interfaces.
	IsAsyncFunctionDeclaration_YieldContext()
}

type AsyncFunctionDeclaration_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncFunctionDeclaration_YieldContext() *AsyncFunctionDeclaration_YieldContext {
	var p = new(AsyncFunctionDeclaration_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Yield
	return p
}

func (*AsyncFunctionDeclaration_YieldContext) IsAsyncFunctionDeclaration_YieldContext() {}

func NewAsyncFunctionDeclaration_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncFunctionDeclaration_YieldContext {
	var p = new(AsyncFunctionDeclaration_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Yield

	return p
}

func (s *AsyncFunctionDeclaration_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncFunctionDeclaration_YieldContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *AsyncFunctionDeclaration_YieldContext) FormalParameters_Await() IFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_AwaitContext)
}

func (s *AsyncFunctionDeclaration_YieldContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncFunctionDeclaration_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncFunctionDeclaration_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncFunctionDeclaration_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncFunctionDeclaration_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncFunctionDeclaration_Yield(s)
	}
}

func (s *AsyncFunctionDeclaration_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncFunctionDeclaration_Yield(s)
	}
}

func (s *AsyncFunctionDeclaration_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncFunctionDeclaration_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncFunctionDeclaration_Yield() (localctx IAsyncFunctionDeclaration_YieldContext) {
	localctx = NewAsyncFunctionDeclaration_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1278, ECMAScriptParserRULE_asyncFunctionDeclaration_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7982)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7983)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7984)
		p.BindingIdentifier_Yield()
	}
	{
		p.SetState(7985)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7986)
		p.FormalParameters_Await()
	}
	{
		p.SetState(7987)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7988)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7989)
		p.AsyncFunctionBody()
	}
	{
		p.SetState(7990)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncFunctionDeclaration_AwaitContext is an interface to support dynamic dispatch.
type IAsyncFunctionDeclaration_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncFunctionDeclaration_AwaitContext differentiates from other interfaces.
	IsAsyncFunctionDeclaration_AwaitContext()
}

type AsyncFunctionDeclaration_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncFunctionDeclaration_AwaitContext() *AsyncFunctionDeclaration_AwaitContext {
	var p = new(AsyncFunctionDeclaration_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Await
	return p
}

func (*AsyncFunctionDeclaration_AwaitContext) IsAsyncFunctionDeclaration_AwaitContext() {}

func NewAsyncFunctionDeclaration_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncFunctionDeclaration_AwaitContext {
	var p = new(AsyncFunctionDeclaration_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Await

	return p
}

func (s *AsyncFunctionDeclaration_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncFunctionDeclaration_AwaitContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *AsyncFunctionDeclaration_AwaitContext) FormalParameters_Await() IFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_AwaitContext)
}

func (s *AsyncFunctionDeclaration_AwaitContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncFunctionDeclaration_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncFunctionDeclaration_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncFunctionDeclaration_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncFunctionDeclaration_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncFunctionDeclaration_Await(s)
	}
}

func (s *AsyncFunctionDeclaration_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncFunctionDeclaration_Await(s)
	}
}

func (s *AsyncFunctionDeclaration_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncFunctionDeclaration_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncFunctionDeclaration_Await() (localctx IAsyncFunctionDeclaration_AwaitContext) {
	localctx = NewAsyncFunctionDeclaration_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1280, ECMAScriptParserRULE_asyncFunctionDeclaration_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7992)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(7993)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(7994)
		p.BindingIdentifier_Await()
	}
	{
		p.SetState(7995)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(7996)
		p.FormalParameters_Await()
	}
	{
		p.SetState(7997)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(7998)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(7999)
		p.AsyncFunctionBody()
	}
	{
		p.SetState(8000)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncFunctionDeclaration_Yield_AwaitContext is an interface to support dynamic dispatch.
type IAsyncFunctionDeclaration_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncFunctionDeclaration_Yield_AwaitContext differentiates from other interfaces.
	IsAsyncFunctionDeclaration_Yield_AwaitContext()
}

type AsyncFunctionDeclaration_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncFunctionDeclaration_Yield_AwaitContext() *AsyncFunctionDeclaration_Yield_AwaitContext {
	var p = new(AsyncFunctionDeclaration_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Await
	return p
}

func (*AsyncFunctionDeclaration_Yield_AwaitContext) IsAsyncFunctionDeclaration_Yield_AwaitContext() {}

func NewAsyncFunctionDeclaration_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncFunctionDeclaration_Yield_AwaitContext {
	var p = new(AsyncFunctionDeclaration_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Await

	return p
}

func (s *AsyncFunctionDeclaration_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncFunctionDeclaration_Yield_AwaitContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *AsyncFunctionDeclaration_Yield_AwaitContext) FormalParameters_Await() IFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_AwaitContext)
}

func (s *AsyncFunctionDeclaration_Yield_AwaitContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncFunctionDeclaration_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncFunctionDeclaration_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncFunctionDeclaration_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncFunctionDeclaration_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncFunctionDeclaration_Yield_Await(s)
	}
}

func (s *AsyncFunctionDeclaration_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncFunctionDeclaration_Yield_Await(s)
	}
}

func (s *AsyncFunctionDeclaration_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncFunctionDeclaration_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncFunctionDeclaration_Yield_Await() (localctx IAsyncFunctionDeclaration_Yield_AwaitContext) {
	localctx = NewAsyncFunctionDeclaration_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1282, ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8002)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(8003)
		p.Match(ECMAScriptParserT__80)
	}
	{
		p.SetState(8004)
		p.BindingIdentifier_Yield_Await()
	}
	{
		p.SetState(8005)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(8006)
		p.FormalParameters_Await()
	}
	{
		p.SetState(8007)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(8008)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(8009)
		p.AsyncFunctionBody()
	}
	{
		p.SetState(8010)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncFunctionDeclaration_DefaultContext is an interface to support dynamic dispatch.
type IAsyncFunctionDeclaration_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncFunctionDeclaration_DefaultContext differentiates from other interfaces.
	IsAsyncFunctionDeclaration_DefaultContext()
}

type AsyncFunctionDeclaration_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncFunctionDeclaration_DefaultContext() *AsyncFunctionDeclaration_DefaultContext {
	var p = new(AsyncFunctionDeclaration_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Default
	return p
}

func (*AsyncFunctionDeclaration_DefaultContext) IsAsyncFunctionDeclaration_DefaultContext() {}

func NewAsyncFunctionDeclaration_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncFunctionDeclaration_DefaultContext {
	var p = new(AsyncFunctionDeclaration_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Default

	return p
}

func (s *AsyncFunctionDeclaration_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncFunctionDeclaration_DefaultContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *AsyncFunctionDeclaration_DefaultContext) FormalParameters_Await() IFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_AwaitContext)
}

func (s *AsyncFunctionDeclaration_DefaultContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncFunctionDeclaration_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncFunctionDeclaration_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncFunctionDeclaration_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncFunctionDeclaration_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncFunctionDeclaration_Default(s)
	}
}

func (s *AsyncFunctionDeclaration_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncFunctionDeclaration_Default(s)
	}
}

func (s *AsyncFunctionDeclaration_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncFunctionDeclaration_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncFunctionDeclaration_Default() (localctx IAsyncFunctionDeclaration_DefaultContext) {
	localctx = NewAsyncFunctionDeclaration_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1284, ECMAScriptParserRULE_asyncFunctionDeclaration_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8031)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 673, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8012)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8013)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(8014)
			p.BindingIdentifier()
		}
		{
			p.SetState(8015)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(8016)
			p.FormalParameters_Await()
		}
		{
			p.SetState(8017)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(8018)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8019)
			p.AsyncFunctionBody()
		}
		{
			p.SetState(8020)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8022)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8023)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(8024)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(8025)
			p.FormalParameters_Await()
		}
		{
			p.SetState(8026)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(8027)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8028)
			p.AsyncFunctionBody()
		}
		{
			p.SetState(8029)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IAsyncFunctionDeclaration_Yield_DefaultContext is an interface to support dynamic dispatch.
type IAsyncFunctionDeclaration_Yield_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncFunctionDeclaration_Yield_DefaultContext differentiates from other interfaces.
	IsAsyncFunctionDeclaration_Yield_DefaultContext()
}

type AsyncFunctionDeclaration_Yield_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncFunctionDeclaration_Yield_DefaultContext() *AsyncFunctionDeclaration_Yield_DefaultContext {
	var p = new(AsyncFunctionDeclaration_Yield_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Default
	return p
}

func (*AsyncFunctionDeclaration_Yield_DefaultContext) IsAsyncFunctionDeclaration_Yield_DefaultContext() {
}

func NewAsyncFunctionDeclaration_Yield_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncFunctionDeclaration_Yield_DefaultContext {
	var p = new(AsyncFunctionDeclaration_Yield_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Default

	return p
}

func (s *AsyncFunctionDeclaration_Yield_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncFunctionDeclaration_Yield_DefaultContext) BindingIdentifier_Yield() IBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_YieldContext)
}

func (s *AsyncFunctionDeclaration_Yield_DefaultContext) FormalParameters_Await() IFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_AwaitContext)
}

func (s *AsyncFunctionDeclaration_Yield_DefaultContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncFunctionDeclaration_Yield_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncFunctionDeclaration_Yield_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncFunctionDeclaration_Yield_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncFunctionDeclaration_Yield_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncFunctionDeclaration_Yield_Default(s)
	}
}

func (s *AsyncFunctionDeclaration_Yield_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncFunctionDeclaration_Yield_Default(s)
	}
}

func (s *AsyncFunctionDeclaration_Yield_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncFunctionDeclaration_Yield_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncFunctionDeclaration_Yield_Default() (localctx IAsyncFunctionDeclaration_Yield_DefaultContext) {
	localctx = NewAsyncFunctionDeclaration_Yield_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1286, ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8052)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 674, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8033)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8034)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(8035)
			p.BindingIdentifier_Yield()
		}
		{
			p.SetState(8036)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(8037)
			p.FormalParameters_Await()
		}
		{
			p.SetState(8038)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(8039)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8040)
			p.AsyncFunctionBody()
		}
		{
			p.SetState(8041)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8043)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8044)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(8045)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(8046)
			p.FormalParameters_Await()
		}
		{
			p.SetState(8047)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(8048)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8049)
			p.AsyncFunctionBody()
		}
		{
			p.SetState(8050)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IAsyncFunctionDeclaration_Await_DefaultContext is an interface to support dynamic dispatch.
type IAsyncFunctionDeclaration_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncFunctionDeclaration_Await_DefaultContext differentiates from other interfaces.
	IsAsyncFunctionDeclaration_Await_DefaultContext()
}

type AsyncFunctionDeclaration_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncFunctionDeclaration_Await_DefaultContext() *AsyncFunctionDeclaration_Await_DefaultContext {
	var p = new(AsyncFunctionDeclaration_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Await_Default
	return p
}

func (*AsyncFunctionDeclaration_Await_DefaultContext) IsAsyncFunctionDeclaration_Await_DefaultContext() {
}

func NewAsyncFunctionDeclaration_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncFunctionDeclaration_Await_DefaultContext {
	var p = new(AsyncFunctionDeclaration_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Await_Default

	return p
}

func (s *AsyncFunctionDeclaration_Await_DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncFunctionDeclaration_Await_DefaultContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *AsyncFunctionDeclaration_Await_DefaultContext) FormalParameters_Await() IFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_AwaitContext)
}

func (s *AsyncFunctionDeclaration_Await_DefaultContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncFunctionDeclaration_Await_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncFunctionDeclaration_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncFunctionDeclaration_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncFunctionDeclaration_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncFunctionDeclaration_Await_Default(s)
	}
}

func (s *AsyncFunctionDeclaration_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncFunctionDeclaration_Await_Default(s)
	}
}

func (s *AsyncFunctionDeclaration_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncFunctionDeclaration_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncFunctionDeclaration_Await_Default() (localctx IAsyncFunctionDeclaration_Await_DefaultContext) {
	localctx = NewAsyncFunctionDeclaration_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1288, ECMAScriptParserRULE_asyncFunctionDeclaration_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8073)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 675, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8054)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8055)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(8056)
			p.BindingIdentifier_Await()
		}
		{
			p.SetState(8057)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(8058)
			p.FormalParameters_Await()
		}
		{
			p.SetState(8059)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(8060)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8061)
			p.AsyncFunctionBody()
		}
		{
			p.SetState(8062)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8064)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8065)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(8066)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(8067)
			p.FormalParameters_Await()
		}
		{
			p.SetState(8068)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(8069)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8070)
			p.AsyncFunctionBody()
		}
		{
			p.SetState(8071)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IAsyncFunctionDeclaration_Yield_Await_DefaultContext is an interface to support dynamic dispatch.
type IAsyncFunctionDeclaration_Yield_Await_DefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncFunctionDeclaration_Yield_Await_DefaultContext differentiates from other interfaces.
	IsAsyncFunctionDeclaration_Yield_Await_DefaultContext()
}

type AsyncFunctionDeclaration_Yield_Await_DefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncFunctionDeclaration_Yield_Await_DefaultContext() *AsyncFunctionDeclaration_Yield_Await_DefaultContext {
	var p = new(AsyncFunctionDeclaration_Yield_Await_DefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Await_Default
	return p
}

func (*AsyncFunctionDeclaration_Yield_Await_DefaultContext) IsAsyncFunctionDeclaration_Yield_Await_DefaultContext() {
}

func NewAsyncFunctionDeclaration_Yield_Await_DefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncFunctionDeclaration_Yield_Await_DefaultContext {
	var p = new(AsyncFunctionDeclaration_Yield_Await_DefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Await_Default

	return p
}

func (s *AsyncFunctionDeclaration_Yield_Await_DefaultContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *AsyncFunctionDeclaration_Yield_Await_DefaultContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *AsyncFunctionDeclaration_Yield_Await_DefaultContext) FormalParameters_Await() IFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_AwaitContext)
}

func (s *AsyncFunctionDeclaration_Yield_Await_DefaultContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncFunctionDeclaration_Yield_Await_DefaultContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncFunctionDeclaration_Yield_Await_DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncFunctionDeclaration_Yield_Await_DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncFunctionDeclaration_Yield_Await_DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncFunctionDeclaration_Yield_Await_Default(s)
	}
}

func (s *AsyncFunctionDeclaration_Yield_Await_DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncFunctionDeclaration_Yield_Await_Default(s)
	}
}

func (s *AsyncFunctionDeclaration_Yield_Await_DefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncFunctionDeclaration_Yield_Await_Default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncFunctionDeclaration_Yield_Await_Default() (localctx IAsyncFunctionDeclaration_Yield_Await_DefaultContext) {
	localctx = NewAsyncFunctionDeclaration_Yield_Await_DefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1290, ECMAScriptParserRULE_asyncFunctionDeclaration_Yield_Await_Default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8094)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 676, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8075)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8076)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(8077)
			p.BindingIdentifier_Yield_Await()
		}
		{
			p.SetState(8078)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(8079)
			p.FormalParameters_Await()
		}
		{
			p.SetState(8080)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(8081)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8082)
			p.AsyncFunctionBody()
		}
		{
			p.SetState(8083)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8085)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8086)
			p.Match(ECMAScriptParserT__80)
		}
		{
			p.SetState(8087)
			p.Match(ECMAScriptParserT__4)
		}
		{
			p.SetState(8088)
			p.FormalParameters_Await()
		}
		{
			p.SetState(8089)
			p.Match(ECMAScriptParserT__5)
		}
		{
			p.SetState(8090)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8091)
			p.AsyncFunctionBody()
		}
		{
			p.SetState(8092)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IAsyncFunctionExpressionContext is an interface to support dynamic dispatch.
type IAsyncFunctionExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncFunctionExpressionContext differentiates from other interfaces.
	IsAsyncFunctionExpressionContext()
}

type AsyncFunctionExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncFunctionExpressionContext() *AsyncFunctionExpressionContext {
	var p = new(AsyncFunctionExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionExpression
	return p
}

func (*AsyncFunctionExpressionContext) IsAsyncFunctionExpressionContext() {}

func NewAsyncFunctionExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncFunctionExpressionContext {
	var p = new(AsyncFunctionExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionExpression

	return p
}

func (s *AsyncFunctionExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncFunctionExpressionContext) FormalParameters_Await() IFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalParameters_AwaitContext)
}

func (s *AsyncFunctionExpressionContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncFunctionExpressionContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncFunctionExpressionContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *AsyncFunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncFunctionExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncFunctionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncFunctionExpression(s)
	}
}

func (s *AsyncFunctionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncFunctionExpression(s)
	}
}

func (s *AsyncFunctionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncFunctionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncFunctionExpression() (localctx IAsyncFunctionExpressionContext) {
	localctx = NewAsyncFunctionExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1292, ECMAScriptParserRULE_asyncFunctionExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8096)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(8097)
		p.Match(ECMAScriptParserT__80)
	}
	p.SetState(8099)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == ECMAScriptParserT__1 || _la == ECMAScriptParserT__2 || _la == ECMAScriptParserIdentifier {
		{
			p.SetState(8098)
			p.BindingIdentifier_Await()
		}

	}
	{
		p.SetState(8101)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(8102)
		p.FormalParameters_Await()
	}
	{
		p.SetState(8103)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(8104)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(8105)
		p.AsyncFunctionBody()
	}
	{
		p.SetState(8106)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncMethodContext is an interface to support dynamic dispatch.
type IAsyncMethodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncMethodContext differentiates from other interfaces.
	IsAsyncMethodContext()
}

type AsyncMethodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncMethodContext() *AsyncMethodContext {
	var p = new(AsyncMethodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncMethod
	return p
}

func (*AsyncMethodContext) IsAsyncMethodContext() {}

func NewAsyncMethodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncMethodContext {
	var p = new(AsyncMethodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncMethod

	return p
}

func (s *AsyncMethodContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncMethodContext) PropertyName() IPropertyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyNameContext)
}

func (s *AsyncMethodContext) UniqueFormalParameters_Await() IUniqueFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_AwaitContext)
}

func (s *AsyncMethodContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncMethodContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncMethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncMethodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncMethodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncMethod(s)
	}
}

func (s *AsyncMethodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncMethod(s)
	}
}

func (s *AsyncMethodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncMethod(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncMethod() (localctx IAsyncMethodContext) {
	localctx = NewAsyncMethodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1294, ECMAScriptParserRULE_asyncMethod)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8108)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(8109)
		p.PropertyName()
	}
	{
		p.SetState(8110)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(8111)
		p.UniqueFormalParameters_Await()
	}
	{
		p.SetState(8112)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(8113)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(8114)
		p.AsyncFunctionBody()
	}
	{
		p.SetState(8115)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncMethod_YieldContext is an interface to support dynamic dispatch.
type IAsyncMethod_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncMethod_YieldContext differentiates from other interfaces.
	IsAsyncMethod_YieldContext()
}

type AsyncMethod_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncMethod_YieldContext() *AsyncMethod_YieldContext {
	var p = new(AsyncMethod_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncMethod_Yield
	return p
}

func (*AsyncMethod_YieldContext) IsAsyncMethod_YieldContext() {}

func NewAsyncMethod_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncMethod_YieldContext {
	var p = new(AsyncMethod_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncMethod_Yield

	return p
}

func (s *AsyncMethod_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncMethod_YieldContext) PropertyName_Yield() IPropertyName_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_YieldContext)
}

func (s *AsyncMethod_YieldContext) UniqueFormalParameters_Await() IUniqueFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_AwaitContext)
}

func (s *AsyncMethod_YieldContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncMethod_YieldContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncMethod_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncMethod_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncMethod_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncMethod_Yield(s)
	}
}

func (s *AsyncMethod_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncMethod_Yield(s)
	}
}

func (s *AsyncMethod_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncMethod_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncMethod_Yield() (localctx IAsyncMethod_YieldContext) {
	localctx = NewAsyncMethod_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1296, ECMAScriptParserRULE_asyncMethod_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8117)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(8118)
		p.PropertyName_Yield()
	}
	{
		p.SetState(8119)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(8120)
		p.UniqueFormalParameters_Await()
	}
	{
		p.SetState(8121)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(8122)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(8123)
		p.AsyncFunctionBody()
	}
	{
		p.SetState(8124)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncMethod_AwaitContext is an interface to support dynamic dispatch.
type IAsyncMethod_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncMethod_AwaitContext differentiates from other interfaces.
	IsAsyncMethod_AwaitContext()
}

type AsyncMethod_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncMethod_AwaitContext() *AsyncMethod_AwaitContext {
	var p = new(AsyncMethod_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncMethod_Await
	return p
}

func (*AsyncMethod_AwaitContext) IsAsyncMethod_AwaitContext() {}

func NewAsyncMethod_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncMethod_AwaitContext {
	var p = new(AsyncMethod_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncMethod_Await

	return p
}

func (s *AsyncMethod_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncMethod_AwaitContext) PropertyName_Await() IPropertyName_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_AwaitContext)
}

func (s *AsyncMethod_AwaitContext) UniqueFormalParameters_Await() IUniqueFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_AwaitContext)
}

func (s *AsyncMethod_AwaitContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncMethod_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncMethod_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncMethod_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncMethod_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncMethod_Await(s)
	}
}

func (s *AsyncMethod_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncMethod_Await(s)
	}
}

func (s *AsyncMethod_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncMethod_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncMethod_Await() (localctx IAsyncMethod_AwaitContext) {
	localctx = NewAsyncMethod_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1298, ECMAScriptParserRULE_asyncMethod_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8126)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(8127)
		p.PropertyName_Await()
	}
	{
		p.SetState(8128)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(8129)
		p.UniqueFormalParameters_Await()
	}
	{
		p.SetState(8130)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(8131)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(8132)
		p.AsyncFunctionBody()
	}
	{
		p.SetState(8133)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncMethod_Yield_AwaitContext is an interface to support dynamic dispatch.
type IAsyncMethod_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncMethod_Yield_AwaitContext differentiates from other interfaces.
	IsAsyncMethod_Yield_AwaitContext()
}

type AsyncMethod_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncMethod_Yield_AwaitContext() *AsyncMethod_Yield_AwaitContext {
	var p = new(AsyncMethod_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncMethod_Yield_Await
	return p
}

func (*AsyncMethod_Yield_AwaitContext) IsAsyncMethod_Yield_AwaitContext() {}

func NewAsyncMethod_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncMethod_Yield_AwaitContext {
	var p = new(AsyncMethod_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncMethod_Yield_Await

	return p
}

func (s *AsyncMethod_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncMethod_Yield_AwaitContext) PropertyName_Yield_Await() IPropertyName_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyName_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyName_Yield_AwaitContext)
}

func (s *AsyncMethod_Yield_AwaitContext) UniqueFormalParameters_Await() IUniqueFormalParameters_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUniqueFormalParameters_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUniqueFormalParameters_AwaitContext)
}

func (s *AsyncMethod_Yield_AwaitContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncMethod_Yield_AwaitContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncMethod_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncMethod_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncMethod_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncMethod_Yield_Await(s)
	}
}

func (s *AsyncMethod_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncMethod_Yield_Await(s)
	}
}

func (s *AsyncMethod_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncMethod_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncMethod_Yield_Await() (localctx IAsyncMethod_Yield_AwaitContext) {
	localctx = NewAsyncMethod_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1300, ECMAScriptParserRULE_asyncMethod_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8135)
		p.Match(ECMAScriptParserT__85)
	}
	{
		p.SetState(8136)
		p.PropertyName_Yield_Await()
	}
	{
		p.SetState(8137)
		p.Match(ECMAScriptParserT__4)
	}
	{
		p.SetState(8138)
		p.UniqueFormalParameters_Await()
	}
	{
		p.SetState(8139)
		p.Match(ECMAScriptParserT__5)
	}
	{
		p.SetState(8140)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(8141)
		p.AsyncFunctionBody()
	}
	{
		p.SetState(8142)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncFunctionBodyContext is an interface to support dynamic dispatch.
type IAsyncFunctionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncFunctionBodyContext differentiates from other interfaces.
	IsAsyncFunctionBodyContext()
}

type AsyncFunctionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncFunctionBodyContext() *AsyncFunctionBodyContext {
	var p = new(AsyncFunctionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionBody
	return p
}

func (*AsyncFunctionBodyContext) IsAsyncFunctionBodyContext() {}

func NewAsyncFunctionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncFunctionBodyContext {
	var p = new(AsyncFunctionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncFunctionBody

	return p
}

func (s *AsyncFunctionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncFunctionBodyContext) FunctionBody_Await() IFunctionBody_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBody_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBody_AwaitContext)
}

func (s *AsyncFunctionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncFunctionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncFunctionBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncFunctionBody(s)
	}
}

func (s *AsyncFunctionBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncFunctionBody(s)
	}
}

func (s *AsyncFunctionBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncFunctionBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncFunctionBody() (localctx IAsyncFunctionBodyContext) {
	localctx = NewAsyncFunctionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1302, ECMAScriptParserRULE_asyncFunctionBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8144)
		p.FunctionBody_Await()
	}

	return localctx
}

// IAwaitExpressionContext is an interface to support dynamic dispatch.
type IAwaitExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAwaitExpressionContext differentiates from other interfaces.
	IsAwaitExpressionContext()
}

type AwaitExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAwaitExpressionContext() *AwaitExpressionContext {
	var p = new(AwaitExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_awaitExpression
	return p
}

func (*AwaitExpressionContext) IsAwaitExpressionContext() {}

func NewAwaitExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AwaitExpressionContext {
	var p = new(AwaitExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_awaitExpression

	return p
}

func (s *AwaitExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AwaitExpressionContext) UnaryExpression_Await() IUnaryExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpression_AwaitContext)
}

func (s *AwaitExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AwaitExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AwaitExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAwaitExpression(s)
	}
}

func (s *AwaitExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAwaitExpression(s)
	}
}

func (s *AwaitExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAwaitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AwaitExpression() (localctx IAwaitExpressionContext) {
	localctx = NewAwaitExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1304, ECMAScriptParserRULE_awaitExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8146)
		p.Match(ECMAScriptParserT__2)
	}
	{
		p.SetState(8147)
		p.UnaryExpression_Await()
	}

	return localctx
}

// IAwaitExpression_YieldContext is an interface to support dynamic dispatch.
type IAwaitExpression_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAwaitExpression_YieldContext differentiates from other interfaces.
	IsAwaitExpression_YieldContext()
}

type AwaitExpression_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAwaitExpression_YieldContext() *AwaitExpression_YieldContext {
	var p = new(AwaitExpression_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_awaitExpression_Yield
	return p
}

func (*AwaitExpression_YieldContext) IsAwaitExpression_YieldContext() {}

func NewAwaitExpression_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AwaitExpression_YieldContext {
	var p = new(AwaitExpression_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_awaitExpression_Yield

	return p
}

func (s *AwaitExpression_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AwaitExpression_YieldContext) UnaryExpression_Yield_Await() IUnaryExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpression_Yield_AwaitContext)
}

func (s *AwaitExpression_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AwaitExpression_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AwaitExpression_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAwaitExpression_Yield(s)
	}
}

func (s *AwaitExpression_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAwaitExpression_Yield(s)
	}
}

func (s *AwaitExpression_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAwaitExpression_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AwaitExpression_Yield() (localctx IAwaitExpression_YieldContext) {
	localctx = NewAwaitExpression_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1306, ECMAScriptParserRULE_awaitExpression_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8149)
		p.Match(ECMAScriptParserT__2)
	}
	{
		p.SetState(8150)
		p.UnaryExpression_Yield_Await()
	}

	return localctx
}

// IAsyncArrowFunctionContext is an interface to support dynamic dispatch.
type IAsyncArrowFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncArrowFunctionContext differentiates from other interfaces.
	IsAsyncArrowFunctionContext()
}

type AsyncArrowFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncArrowFunctionContext() *AsyncArrowFunctionContext {
	var p = new(AsyncArrowFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction
	return p
}

func (*AsyncArrowFunctionContext) IsAsyncArrowFunctionContext() {}

func NewAsyncArrowFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncArrowFunctionContext {
	var p = new(AsyncArrowFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction

	return p
}

func (s *AsyncArrowFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncArrowFunctionContext) AsyncArrowBindingIdentifier() IAsyncArrowBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowBindingIdentifierContext)
}

func (s *AsyncArrowFunctionContext) AsyncConciseBody() IAsyncConciseBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncConciseBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncConciseBodyContext)
}

func (s *AsyncArrowFunctionContext) CoverCallExpressionAndAsyncArrowHead() ICoverCallExpressionAndAsyncArrowHeadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHeadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHeadContext)
}

func (s *AsyncArrowFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncArrowFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncArrowFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncArrowFunction(s)
	}
}

func (s *AsyncArrowFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncArrowFunction(s)
	}
}

func (s *AsyncArrowFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncArrowFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncArrowFunction() (localctx IAsyncArrowFunctionContext) {
	localctx = NewAsyncArrowFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1308, ECMAScriptParserRULE_asyncArrowFunction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8161)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 678, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8152)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8153)
			p.AsyncArrowBindingIdentifier()
		}
		{
			p.SetState(8154)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8155)
			p.AsyncConciseBody()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8157)
			p.CoverCallExpressionAndAsyncArrowHead()
		}
		{
			p.SetState(8158)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8159)
			p.AsyncConciseBody()
		}

	}

	return localctx
}

// IAsyncArrowFunction_InContext is an interface to support dynamic dispatch.
type IAsyncArrowFunction_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncArrowFunction_InContext differentiates from other interfaces.
	IsAsyncArrowFunction_InContext()
}

type AsyncArrowFunction_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncArrowFunction_InContext() *AsyncArrowFunction_InContext {
	var p = new(AsyncArrowFunction_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_In
	return p
}

func (*AsyncArrowFunction_InContext) IsAsyncArrowFunction_InContext() {}

func NewAsyncArrowFunction_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncArrowFunction_InContext {
	var p = new(AsyncArrowFunction_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_In

	return p
}

func (s *AsyncArrowFunction_InContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncArrowFunction_InContext) AsyncArrowBindingIdentifier() IAsyncArrowBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowBindingIdentifierContext)
}

func (s *AsyncArrowFunction_InContext) AsyncConciseBody_In() IAsyncConciseBody_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncConciseBody_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncConciseBody_InContext)
}

func (s *AsyncArrowFunction_InContext) CoverCallExpressionAndAsyncArrowHead() ICoverCallExpressionAndAsyncArrowHeadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHeadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHeadContext)
}

func (s *AsyncArrowFunction_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncArrowFunction_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncArrowFunction_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncArrowFunction_In(s)
	}
}

func (s *AsyncArrowFunction_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncArrowFunction_In(s)
	}
}

func (s *AsyncArrowFunction_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncArrowFunction_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncArrowFunction_In() (localctx IAsyncArrowFunction_InContext) {
	localctx = NewAsyncArrowFunction_InContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1310, ECMAScriptParserRULE_asyncArrowFunction_In)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8172)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 679, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8163)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8164)
			p.AsyncArrowBindingIdentifier()
		}
		{
			p.SetState(8165)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8166)
			p.AsyncConciseBody_In()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8168)
			p.CoverCallExpressionAndAsyncArrowHead()
		}
		{
			p.SetState(8169)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8170)
			p.AsyncConciseBody_In()
		}

	}

	return localctx
}

// IAsyncArrowFunction_YieldContext is an interface to support dynamic dispatch.
type IAsyncArrowFunction_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncArrowFunction_YieldContext differentiates from other interfaces.
	IsAsyncArrowFunction_YieldContext()
}

type AsyncArrowFunction_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncArrowFunction_YieldContext() *AsyncArrowFunction_YieldContext {
	var p = new(AsyncArrowFunction_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_Yield
	return p
}

func (*AsyncArrowFunction_YieldContext) IsAsyncArrowFunction_YieldContext() {}

func NewAsyncArrowFunction_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncArrowFunction_YieldContext {
	var p = new(AsyncArrowFunction_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_Yield

	return p
}

func (s *AsyncArrowFunction_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncArrowFunction_YieldContext) AsyncArrowBindingIdentifier_Yield() IAsyncArrowBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowBindingIdentifier_YieldContext)
}

func (s *AsyncArrowFunction_YieldContext) AsyncConciseBody() IAsyncConciseBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncConciseBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncConciseBodyContext)
}

func (s *AsyncArrowFunction_YieldContext) CoverCallExpressionAndAsyncArrowHead_Yield() ICoverCallExpressionAndAsyncArrowHead_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHead_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHead_YieldContext)
}

func (s *AsyncArrowFunction_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncArrowFunction_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncArrowFunction_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncArrowFunction_Yield(s)
	}
}

func (s *AsyncArrowFunction_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncArrowFunction_Yield(s)
	}
}

func (s *AsyncArrowFunction_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncArrowFunction_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncArrowFunction_Yield() (localctx IAsyncArrowFunction_YieldContext) {
	localctx = NewAsyncArrowFunction_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1312, ECMAScriptParserRULE_asyncArrowFunction_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8183)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 680, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8174)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8175)
			p.AsyncArrowBindingIdentifier_Yield()
		}
		{
			p.SetState(8176)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8177)
			p.AsyncConciseBody()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8179)
			p.CoverCallExpressionAndAsyncArrowHead_Yield()
		}
		{
			p.SetState(8180)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8181)
			p.AsyncConciseBody()
		}

	}

	return localctx
}

// IAsyncArrowFunction_In_YieldContext is an interface to support dynamic dispatch.
type IAsyncArrowFunction_In_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncArrowFunction_In_YieldContext differentiates from other interfaces.
	IsAsyncArrowFunction_In_YieldContext()
}

type AsyncArrowFunction_In_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncArrowFunction_In_YieldContext() *AsyncArrowFunction_In_YieldContext {
	var p = new(AsyncArrowFunction_In_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_In_Yield
	return p
}

func (*AsyncArrowFunction_In_YieldContext) IsAsyncArrowFunction_In_YieldContext() {}

func NewAsyncArrowFunction_In_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncArrowFunction_In_YieldContext {
	var p = new(AsyncArrowFunction_In_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_In_Yield

	return p
}

func (s *AsyncArrowFunction_In_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncArrowFunction_In_YieldContext) AsyncArrowBindingIdentifier_Yield() IAsyncArrowBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowBindingIdentifier_YieldContext)
}

func (s *AsyncArrowFunction_In_YieldContext) AsyncConciseBody_In() IAsyncConciseBody_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncConciseBody_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncConciseBody_InContext)
}

func (s *AsyncArrowFunction_In_YieldContext) CoverCallExpressionAndAsyncArrowHead_Yield() ICoverCallExpressionAndAsyncArrowHead_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHead_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHead_YieldContext)
}

func (s *AsyncArrowFunction_In_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncArrowFunction_In_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncArrowFunction_In_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncArrowFunction_In_Yield(s)
	}
}

func (s *AsyncArrowFunction_In_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncArrowFunction_In_Yield(s)
	}
}

func (s *AsyncArrowFunction_In_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncArrowFunction_In_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncArrowFunction_In_Yield() (localctx IAsyncArrowFunction_In_YieldContext) {
	localctx = NewAsyncArrowFunction_In_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1314, ECMAScriptParserRULE_asyncArrowFunction_In_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8194)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 681, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8185)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8186)
			p.AsyncArrowBindingIdentifier_Yield()
		}
		{
			p.SetState(8187)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8188)
			p.AsyncConciseBody_In()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8190)
			p.CoverCallExpressionAndAsyncArrowHead_Yield()
		}
		{
			p.SetState(8191)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8192)
			p.AsyncConciseBody_In()
		}

	}

	return localctx
}

// IAsyncArrowFunction_AwaitContext is an interface to support dynamic dispatch.
type IAsyncArrowFunction_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncArrowFunction_AwaitContext differentiates from other interfaces.
	IsAsyncArrowFunction_AwaitContext()
}

type AsyncArrowFunction_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncArrowFunction_AwaitContext() *AsyncArrowFunction_AwaitContext {
	var p = new(AsyncArrowFunction_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_Await
	return p
}

func (*AsyncArrowFunction_AwaitContext) IsAsyncArrowFunction_AwaitContext() {}

func NewAsyncArrowFunction_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncArrowFunction_AwaitContext {
	var p = new(AsyncArrowFunction_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_Await

	return p
}

func (s *AsyncArrowFunction_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncArrowFunction_AwaitContext) AsyncArrowBindingIdentifier() IAsyncArrowBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowBindingIdentifierContext)
}

func (s *AsyncArrowFunction_AwaitContext) AsyncConciseBody() IAsyncConciseBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncConciseBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncConciseBodyContext)
}

func (s *AsyncArrowFunction_AwaitContext) CoverCallExpressionAndAsyncArrowHead_Await() ICoverCallExpressionAndAsyncArrowHead_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHead_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHead_AwaitContext)
}

func (s *AsyncArrowFunction_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncArrowFunction_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncArrowFunction_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncArrowFunction_Await(s)
	}
}

func (s *AsyncArrowFunction_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncArrowFunction_Await(s)
	}
}

func (s *AsyncArrowFunction_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncArrowFunction_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncArrowFunction_Await() (localctx IAsyncArrowFunction_AwaitContext) {
	localctx = NewAsyncArrowFunction_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1316, ECMAScriptParserRULE_asyncArrowFunction_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8205)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 682, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8196)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8197)
			p.AsyncArrowBindingIdentifier()
		}
		{
			p.SetState(8198)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8199)
			p.AsyncConciseBody()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8201)
			p.CoverCallExpressionAndAsyncArrowHead_Await()
		}
		{
			p.SetState(8202)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8203)
			p.AsyncConciseBody()
		}

	}

	return localctx
}

// IAsyncArrowFunction_In_AwaitContext is an interface to support dynamic dispatch.
type IAsyncArrowFunction_In_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncArrowFunction_In_AwaitContext differentiates from other interfaces.
	IsAsyncArrowFunction_In_AwaitContext()
}

type AsyncArrowFunction_In_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncArrowFunction_In_AwaitContext() *AsyncArrowFunction_In_AwaitContext {
	var p = new(AsyncArrowFunction_In_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_In_Await
	return p
}

func (*AsyncArrowFunction_In_AwaitContext) IsAsyncArrowFunction_In_AwaitContext() {}

func NewAsyncArrowFunction_In_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncArrowFunction_In_AwaitContext {
	var p = new(AsyncArrowFunction_In_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_In_Await

	return p
}

func (s *AsyncArrowFunction_In_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncArrowFunction_In_AwaitContext) AsyncArrowBindingIdentifier() IAsyncArrowBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowBindingIdentifierContext)
}

func (s *AsyncArrowFunction_In_AwaitContext) AsyncConciseBody_In() IAsyncConciseBody_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncConciseBody_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncConciseBody_InContext)
}

func (s *AsyncArrowFunction_In_AwaitContext) CoverCallExpressionAndAsyncArrowHead_Await() ICoverCallExpressionAndAsyncArrowHead_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHead_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHead_AwaitContext)
}

func (s *AsyncArrowFunction_In_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncArrowFunction_In_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncArrowFunction_In_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncArrowFunction_In_Await(s)
	}
}

func (s *AsyncArrowFunction_In_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncArrowFunction_In_Await(s)
	}
}

func (s *AsyncArrowFunction_In_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncArrowFunction_In_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncArrowFunction_In_Await() (localctx IAsyncArrowFunction_In_AwaitContext) {
	localctx = NewAsyncArrowFunction_In_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1318, ECMAScriptParserRULE_asyncArrowFunction_In_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8216)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 683, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8207)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8208)
			p.AsyncArrowBindingIdentifier()
		}
		{
			p.SetState(8209)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8210)
			p.AsyncConciseBody_In()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8212)
			p.CoverCallExpressionAndAsyncArrowHead_Await()
		}
		{
			p.SetState(8213)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8214)
			p.AsyncConciseBody_In()
		}

	}

	return localctx
}

// IAsyncArrowFunction_Yield_AwaitContext is an interface to support dynamic dispatch.
type IAsyncArrowFunction_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncArrowFunction_Yield_AwaitContext differentiates from other interfaces.
	IsAsyncArrowFunction_Yield_AwaitContext()
}

type AsyncArrowFunction_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncArrowFunction_Yield_AwaitContext() *AsyncArrowFunction_Yield_AwaitContext {
	var p = new(AsyncArrowFunction_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_Yield_Await
	return p
}

func (*AsyncArrowFunction_Yield_AwaitContext) IsAsyncArrowFunction_Yield_AwaitContext() {}

func NewAsyncArrowFunction_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncArrowFunction_Yield_AwaitContext {
	var p = new(AsyncArrowFunction_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_Yield_Await

	return p
}

func (s *AsyncArrowFunction_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncArrowFunction_Yield_AwaitContext) AsyncArrowBindingIdentifier_Yield() IAsyncArrowBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowBindingIdentifier_YieldContext)
}

func (s *AsyncArrowFunction_Yield_AwaitContext) AsyncConciseBody() IAsyncConciseBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncConciseBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncConciseBodyContext)
}

func (s *AsyncArrowFunction_Yield_AwaitContext) CoverCallExpressionAndAsyncArrowHead_Yield_Await() ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext)
}

func (s *AsyncArrowFunction_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncArrowFunction_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncArrowFunction_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncArrowFunction_Yield_Await(s)
	}
}

func (s *AsyncArrowFunction_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncArrowFunction_Yield_Await(s)
	}
}

func (s *AsyncArrowFunction_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncArrowFunction_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncArrowFunction_Yield_Await() (localctx IAsyncArrowFunction_Yield_AwaitContext) {
	localctx = NewAsyncArrowFunction_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1320, ECMAScriptParserRULE_asyncArrowFunction_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8227)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 684, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8218)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8219)
			p.AsyncArrowBindingIdentifier_Yield()
		}
		{
			p.SetState(8220)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8221)
			p.AsyncConciseBody()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8223)
			p.CoverCallExpressionAndAsyncArrowHead_Yield_Await()
		}
		{
			p.SetState(8224)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8225)
			p.AsyncConciseBody()
		}

	}

	return localctx
}

// IAsyncArrowFunction_In_Yield_AwaitContext is an interface to support dynamic dispatch.
type IAsyncArrowFunction_In_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncArrowFunction_In_Yield_AwaitContext differentiates from other interfaces.
	IsAsyncArrowFunction_In_Yield_AwaitContext()
}

type AsyncArrowFunction_In_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncArrowFunction_In_Yield_AwaitContext() *AsyncArrowFunction_In_Yield_AwaitContext {
	var p = new(AsyncArrowFunction_In_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_In_Yield_Await
	return p
}

func (*AsyncArrowFunction_In_Yield_AwaitContext) IsAsyncArrowFunction_In_Yield_AwaitContext() {}

func NewAsyncArrowFunction_In_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncArrowFunction_In_Yield_AwaitContext {
	var p = new(AsyncArrowFunction_In_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowFunction_In_Yield_Await

	return p
}

func (s *AsyncArrowFunction_In_Yield_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncArrowFunction_In_Yield_AwaitContext) AsyncArrowBindingIdentifier_Yield() IAsyncArrowBindingIdentifier_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncArrowBindingIdentifier_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncArrowBindingIdentifier_YieldContext)
}

func (s *AsyncArrowFunction_In_Yield_AwaitContext) AsyncConciseBody_In() IAsyncConciseBody_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncConciseBody_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncConciseBody_InContext)
}

func (s *AsyncArrowFunction_In_Yield_AwaitContext) CoverCallExpressionAndAsyncArrowHead_Yield_Await() ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext)
}

func (s *AsyncArrowFunction_In_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncArrowFunction_In_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncArrowFunction_In_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncArrowFunction_In_Yield_Await(s)
	}
}

func (s *AsyncArrowFunction_In_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncArrowFunction_In_Yield_Await(s)
	}
}

func (s *AsyncArrowFunction_In_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncArrowFunction_In_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncArrowFunction_In_Yield_Await() (localctx IAsyncArrowFunction_In_Yield_AwaitContext) {
	localctx = NewAsyncArrowFunction_In_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1322, ECMAScriptParserRULE_asyncArrowFunction_In_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8238)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 685, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8229)
			p.Match(ECMAScriptParserT__85)
		}
		{
			p.SetState(8230)
			p.AsyncArrowBindingIdentifier_Yield()
		}
		{
			p.SetState(8231)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8232)
			p.AsyncConciseBody_In()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8234)
			p.CoverCallExpressionAndAsyncArrowHead_Yield_Await()
		}
		{
			p.SetState(8235)
			p.Match(ECMAScriptParserT__81)
		}
		{
			p.SetState(8236)
			p.AsyncConciseBody_In()
		}

	}

	return localctx
}

// IAsyncArrowBindingIdentifierContext is an interface to support dynamic dispatch.
type IAsyncArrowBindingIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncArrowBindingIdentifierContext differentiates from other interfaces.
	IsAsyncArrowBindingIdentifierContext()
}

type AsyncArrowBindingIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncArrowBindingIdentifierContext() *AsyncArrowBindingIdentifierContext {
	var p = new(AsyncArrowBindingIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowBindingIdentifier
	return p
}

func (*AsyncArrowBindingIdentifierContext) IsAsyncArrowBindingIdentifierContext() {}

func NewAsyncArrowBindingIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncArrowBindingIdentifierContext {
	var p = new(AsyncArrowBindingIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowBindingIdentifier

	return p
}

func (s *AsyncArrowBindingIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncArrowBindingIdentifierContext) BindingIdentifier_Await() IBindingIdentifier_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_AwaitContext)
}

func (s *AsyncArrowBindingIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncArrowBindingIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncArrowBindingIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncArrowBindingIdentifier(s)
	}
}

func (s *AsyncArrowBindingIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncArrowBindingIdentifier(s)
	}
}

func (s *AsyncArrowBindingIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncArrowBindingIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncArrowBindingIdentifier() (localctx IAsyncArrowBindingIdentifierContext) {
	localctx = NewAsyncArrowBindingIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1324, ECMAScriptParserRULE_asyncArrowBindingIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8240)
		p.BindingIdentifier_Await()
	}

	return localctx
}

// IAsyncArrowBindingIdentifier_YieldContext is an interface to support dynamic dispatch.
type IAsyncArrowBindingIdentifier_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncArrowBindingIdentifier_YieldContext differentiates from other interfaces.
	IsAsyncArrowBindingIdentifier_YieldContext()
}

type AsyncArrowBindingIdentifier_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncArrowBindingIdentifier_YieldContext() *AsyncArrowBindingIdentifier_YieldContext {
	var p = new(AsyncArrowBindingIdentifier_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowBindingIdentifier_Yield
	return p
}

func (*AsyncArrowBindingIdentifier_YieldContext) IsAsyncArrowBindingIdentifier_YieldContext() {}

func NewAsyncArrowBindingIdentifier_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncArrowBindingIdentifier_YieldContext {
	var p = new(AsyncArrowBindingIdentifier_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncArrowBindingIdentifier_Yield

	return p
}

func (s *AsyncArrowBindingIdentifier_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncArrowBindingIdentifier_YieldContext) BindingIdentifier_Yield_Await() IBindingIdentifier_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifier_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifier_Yield_AwaitContext)
}

func (s *AsyncArrowBindingIdentifier_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncArrowBindingIdentifier_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncArrowBindingIdentifier_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncArrowBindingIdentifier_Yield(s)
	}
}

func (s *AsyncArrowBindingIdentifier_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncArrowBindingIdentifier_Yield(s)
	}
}

func (s *AsyncArrowBindingIdentifier_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncArrowBindingIdentifier_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncArrowBindingIdentifier_Yield() (localctx IAsyncArrowBindingIdentifier_YieldContext) {
	localctx = NewAsyncArrowBindingIdentifier_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1326, ECMAScriptParserRULE_asyncArrowBindingIdentifier_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8242)
		p.BindingIdentifier_Yield_Await()
	}

	return localctx
}

// ICoverCallExpressionAndAsyncArrowHeadContext is an interface to support dynamic dispatch.
type ICoverCallExpressionAndAsyncArrowHeadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverCallExpressionAndAsyncArrowHeadContext differentiates from other interfaces.
	IsCoverCallExpressionAndAsyncArrowHeadContext()
}

type CoverCallExpressionAndAsyncArrowHeadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverCallExpressionAndAsyncArrowHeadContext() *CoverCallExpressionAndAsyncArrowHeadContext {
	var p = new(CoverCallExpressionAndAsyncArrowHeadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead
	return p
}

func (*CoverCallExpressionAndAsyncArrowHeadContext) IsCoverCallExpressionAndAsyncArrowHeadContext() {}

func NewCoverCallExpressionAndAsyncArrowHeadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverCallExpressionAndAsyncArrowHeadContext {
	var p = new(CoverCallExpressionAndAsyncArrowHeadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead

	return p
}

func (s *CoverCallExpressionAndAsyncArrowHeadContext) GetParser() antlr.Parser { return s.parser }

func (s *CoverCallExpressionAndAsyncArrowHeadContext) MemberExpression() IMemberExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpressionContext)
}

func (s *CoverCallExpressionAndAsyncArrowHeadContext) Arguments() IArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *CoverCallExpressionAndAsyncArrowHeadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverCallExpressionAndAsyncArrowHeadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverCallExpressionAndAsyncArrowHeadContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverCallExpressionAndAsyncArrowHead(s)
	}
}

func (s *CoverCallExpressionAndAsyncArrowHeadContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverCallExpressionAndAsyncArrowHead(s)
	}
}

func (s *CoverCallExpressionAndAsyncArrowHeadContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverCallExpressionAndAsyncArrowHead(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverCallExpressionAndAsyncArrowHead() (localctx ICoverCallExpressionAndAsyncArrowHeadContext) {
	localctx = NewCoverCallExpressionAndAsyncArrowHeadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1328, ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8244)
		p.memberExpression(0)
	}
	{
		p.SetState(8245)
		p.Arguments()
	}

	return localctx
}

// ICoverCallExpressionAndAsyncArrowHead_YieldContext is an interface to support dynamic dispatch.
type ICoverCallExpressionAndAsyncArrowHead_YieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverCallExpressionAndAsyncArrowHead_YieldContext differentiates from other interfaces.
	IsCoverCallExpressionAndAsyncArrowHead_YieldContext()
}

type CoverCallExpressionAndAsyncArrowHead_YieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverCallExpressionAndAsyncArrowHead_YieldContext() *CoverCallExpressionAndAsyncArrowHead_YieldContext {
	var p = new(CoverCallExpressionAndAsyncArrowHead_YieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Yield
	return p
}

func (*CoverCallExpressionAndAsyncArrowHead_YieldContext) IsCoverCallExpressionAndAsyncArrowHead_YieldContext() {
}

func NewCoverCallExpressionAndAsyncArrowHead_YieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverCallExpressionAndAsyncArrowHead_YieldContext {
	var p = new(CoverCallExpressionAndAsyncArrowHead_YieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Yield

	return p
}

func (s *CoverCallExpressionAndAsyncArrowHead_YieldContext) GetParser() antlr.Parser { return s.parser }

func (s *CoverCallExpressionAndAsyncArrowHead_YieldContext) MemberExpression_Yield() IMemberExpression_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpression_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpression_YieldContext)
}

func (s *CoverCallExpressionAndAsyncArrowHead_YieldContext) Arguments_Yield() IArguments_YieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_YieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_YieldContext)
}

func (s *CoverCallExpressionAndAsyncArrowHead_YieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverCallExpressionAndAsyncArrowHead_YieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverCallExpressionAndAsyncArrowHead_YieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverCallExpressionAndAsyncArrowHead_Yield(s)
	}
}

func (s *CoverCallExpressionAndAsyncArrowHead_YieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverCallExpressionAndAsyncArrowHead_Yield(s)
	}
}

func (s *CoverCallExpressionAndAsyncArrowHead_YieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverCallExpressionAndAsyncArrowHead_Yield(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverCallExpressionAndAsyncArrowHead_Yield() (localctx ICoverCallExpressionAndAsyncArrowHead_YieldContext) {
	localctx = NewCoverCallExpressionAndAsyncArrowHead_YieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1330, ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Yield)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8247)
		p.memberExpression_Yield(0)
	}
	{
		p.SetState(8248)
		p.Arguments_Yield()
	}

	return localctx
}

// ICoverCallExpressionAndAsyncArrowHead_AwaitContext is an interface to support dynamic dispatch.
type ICoverCallExpressionAndAsyncArrowHead_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverCallExpressionAndAsyncArrowHead_AwaitContext differentiates from other interfaces.
	IsCoverCallExpressionAndAsyncArrowHead_AwaitContext()
}

type CoverCallExpressionAndAsyncArrowHead_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverCallExpressionAndAsyncArrowHead_AwaitContext() *CoverCallExpressionAndAsyncArrowHead_AwaitContext {
	var p = new(CoverCallExpressionAndAsyncArrowHead_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Await
	return p
}

func (*CoverCallExpressionAndAsyncArrowHead_AwaitContext) IsCoverCallExpressionAndAsyncArrowHead_AwaitContext() {
}

func NewCoverCallExpressionAndAsyncArrowHead_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverCallExpressionAndAsyncArrowHead_AwaitContext {
	var p = new(CoverCallExpressionAndAsyncArrowHead_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Await

	return p
}

func (s *CoverCallExpressionAndAsyncArrowHead_AwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CoverCallExpressionAndAsyncArrowHead_AwaitContext) MemberExpression_Await() IMemberExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpression_AwaitContext)
}

func (s *CoverCallExpressionAndAsyncArrowHead_AwaitContext) Arguments_Await() IArguments_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_AwaitContext)
}

func (s *CoverCallExpressionAndAsyncArrowHead_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverCallExpressionAndAsyncArrowHead_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverCallExpressionAndAsyncArrowHead_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverCallExpressionAndAsyncArrowHead_Await(s)
	}
}

func (s *CoverCallExpressionAndAsyncArrowHead_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverCallExpressionAndAsyncArrowHead_Await(s)
	}
}

func (s *CoverCallExpressionAndAsyncArrowHead_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverCallExpressionAndAsyncArrowHead_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverCallExpressionAndAsyncArrowHead_Await() (localctx ICoverCallExpressionAndAsyncArrowHead_AwaitContext) {
	localctx = NewCoverCallExpressionAndAsyncArrowHead_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1332, ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8250)
		p.memberExpression_Await(0)
	}
	{
		p.SetState(8251)
		p.Arguments_Await()
	}

	return localctx
}

// ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext is an interface to support dynamic dispatch.
type ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext differentiates from other interfaces.
	IsCoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext()
}

type CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext() *CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext {
	var p = new(CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Yield_Await
	return p
}

func (*CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext) IsCoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext() {
}

func NewCoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext {
	var p = new(CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Yield_Await

	return p
}

func (s *CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext) MemberExpression_Yield_Await() IMemberExpression_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberExpression_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberExpression_Yield_AwaitContext)
}

func (s *CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext) Arguments_Yield_Await() IArguments_Yield_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_Yield_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_Yield_AwaitContext)
}

func (s *CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterCoverCallExpressionAndAsyncArrowHead_Yield_Await(s)
	}
}

func (s *CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitCoverCallExpressionAndAsyncArrowHead_Yield_Await(s)
	}
}

func (s *CoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitCoverCallExpressionAndAsyncArrowHead_Yield_Await(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) CoverCallExpressionAndAsyncArrowHead_Yield_Await() (localctx ICoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext) {
	localctx = NewCoverCallExpressionAndAsyncArrowHead_Yield_AwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1334, ECMAScriptParserRULE_coverCallExpressionAndAsyncArrowHead_Yield_Await)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8253)
		p.memberExpression_Yield_Await(0)
	}
	{
		p.SetState(8254)
		p.Arguments_Yield_Await()
	}

	return localctx
}

// IScriptContext is an interface to support dynamic dispatch.
type IScriptContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScriptContext differentiates from other interfaces.
	IsScriptContext()
}

type ScriptContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScriptContext() *ScriptContext {
	var p = new(ScriptContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_script
	return p
}

func (*ScriptContext) IsScriptContext() {}

func NewScriptContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScriptContext {
	var p = new(ScriptContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_script

	return p
}

func (s *ScriptContext) GetParser() antlr.Parser { return s.parser }

func (s *ScriptContext) ScriptBody() IScriptBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScriptBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScriptBodyContext)
}

func (s *ScriptContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScriptContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScriptContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterScript(s)
	}
}

func (s *ScriptContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitScript(s)
	}
}

func (s *ScriptContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitScript(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Script() (localctx IScriptContext) {
	localctx = NewScriptContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1336, ECMAScriptParserRULE_script)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8257)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59)))) != 0) || (((_la-108)&-(0x1f+1)) == 0 && ((1<<uint((_la-108)))&((1<<(ECMAScriptParserNullLiteral-108))|(1<<(ECMAScriptParserBooleanLiteral-108))|(1<<(ECMAScriptParserNumericLiteral-108))|(1<<(ECMAScriptParserStringLiteral-108))|(1<<(ECMAScriptParserNoSubstitutionTemplate-108))|(1<<(ECMAScriptParserTemplateHead-108))|(1<<(ECMAScriptParserIdentifier-108)))) != 0) {
		{
			p.SetState(8256)
			p.ScriptBody()
		}

	}

	return localctx
}

// IScriptBodyContext is an interface to support dynamic dispatch.
type IScriptBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScriptBodyContext differentiates from other interfaces.
	IsScriptBodyContext()
}

type ScriptBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScriptBodyContext() *ScriptBodyContext {
	var p = new(ScriptBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_scriptBody
	return p
}

func (*ScriptBodyContext) IsScriptBodyContext() {}

func NewScriptBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScriptBodyContext {
	var p = new(ScriptBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_scriptBody

	return p
}

func (s *ScriptBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *ScriptBodyContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *ScriptBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScriptBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScriptBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterScriptBody(s)
	}
}

func (s *ScriptBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitScriptBody(s)
	}
}

func (s *ScriptBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitScriptBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ScriptBody() (localctx IScriptBodyContext) {
	localctx = NewScriptBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1338, ECMAScriptParserRULE_scriptBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8259)
		p.StatementList()
	}

	return localctx
}

// IModuleContext is an interface to support dynamic dispatch.
type IModuleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModuleContext differentiates from other interfaces.
	IsModuleContext()
}

type ModuleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModuleContext() *ModuleContext {
	var p = new(ModuleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_module
	return p
}

func (*ModuleContext) IsModuleContext() {}

func NewModuleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModuleContext {
	var p = new(ModuleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_module

	return p
}

func (s *ModuleContext) GetParser() antlr.Parser { return s.parser }

func (s *ModuleContext) ModuleBody() IModuleBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModuleBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModuleBodyContext)
}

func (s *ModuleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModuleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterModule(s)
	}
}

func (s *ModuleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitModule(s)
	}
}

func (s *ModuleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitModule(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) Module() (localctx IModuleContext) {
	localctx = NewModuleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1340, ECMAScriptParserRULE_module)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8262)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59))|(1<<(ECMAScriptParserT__89-59)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(ECMAScriptParserT__92-93))|(1<<(ECMAScriptParserNullLiteral-93))|(1<<(ECMAScriptParserBooleanLiteral-93))|(1<<(ECMAScriptParserNumericLiteral-93))|(1<<(ECMAScriptParserStringLiteral-93)))) != 0) || (((_la-127)&-(0x1f+1)) == 0 && ((1<<uint((_la-127)))&((1<<(ECMAScriptParserNoSubstitutionTemplate-127))|(1<<(ECMAScriptParserTemplateHead-127))|(1<<(ECMAScriptParserIdentifier-127)))) != 0) {
		{
			p.SetState(8261)
			p.ModuleBody()
		}

	}

	return localctx
}

// IModuleBodyContext is an interface to support dynamic dispatch.
type IModuleBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModuleBodyContext differentiates from other interfaces.
	IsModuleBodyContext()
}

type ModuleBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModuleBodyContext() *ModuleBodyContext {
	var p = new(ModuleBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_moduleBody
	return p
}

func (*ModuleBodyContext) IsModuleBodyContext() {}

func NewModuleBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModuleBodyContext {
	var p = new(ModuleBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_moduleBody

	return p
}

func (s *ModuleBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *ModuleBodyContext) AllModuleItem() []IModuleItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModuleItemContext)(nil)).Elem())
	var tst = make([]IModuleItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModuleItemContext)
		}
	}

	return tst
}

func (s *ModuleBodyContext) ModuleItem(i int) IModuleItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModuleItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModuleItemContext)
}

func (s *ModuleBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModuleBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterModuleBody(s)
	}
}

func (s *ModuleBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitModuleBody(s)
	}
}

func (s *ModuleBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitModuleBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ModuleBody() (localctx IModuleBodyContext) {
	localctx = NewModuleBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1342, ECMAScriptParserRULE_moduleBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8265)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<ECMAScriptParserT__0)|(1<<ECMAScriptParserT__1)|(1<<ECMAScriptParserT__2)|(1<<ECMAScriptParserT__3)|(1<<ECMAScriptParserT__4)|(1<<ECMAScriptParserT__8)|(1<<ECMAScriptParserT__10)|(1<<ECMAScriptParserT__14)|(1<<ECMAScriptParserT__15)|(1<<ECMAScriptParserT__17)|(1<<ECMAScriptParserT__18)|(1<<ECMAScriptParserT__19)|(1<<ECMAScriptParserT__20)|(1<<ECMAScriptParserT__21)|(1<<ECMAScriptParserT__22)|(1<<ECMAScriptParserT__23)|(1<<ECMAScriptParserT__24)|(1<<ECMAScriptParserT__25))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(ECMAScriptParserT__58-59))|(1<<(ECMAScriptParserT__59-59))|(1<<(ECMAScriptParserT__60-59))|(1<<(ECMAScriptParserT__61-59))|(1<<(ECMAScriptParserT__62-59))|(1<<(ECMAScriptParserT__64-59))|(1<<(ECMAScriptParserT__65-59))|(1<<(ECMAScriptParserT__66-59))|(1<<(ECMAScriptParserT__68-59))|(1<<(ECMAScriptParserT__69-59))|(1<<(ECMAScriptParserT__71-59))|(1<<(ECMAScriptParserT__72-59))|(1<<(ECMAScriptParserT__75-59))|(1<<(ECMAScriptParserT__76-59))|(1<<(ECMAScriptParserT__79-59))|(1<<(ECMAScriptParserT__80-59))|(1<<(ECMAScriptParserT__85-59))|(1<<(ECMAScriptParserT__86-59))|(1<<(ECMAScriptParserT__89-59)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(ECMAScriptParserT__92-93))|(1<<(ECMAScriptParserNullLiteral-93))|(1<<(ECMAScriptParserBooleanLiteral-93))|(1<<(ECMAScriptParserNumericLiteral-93))|(1<<(ECMAScriptParserStringLiteral-93)))) != 0) || (((_la-127)&-(0x1f+1)) == 0 && ((1<<uint((_la-127)))&((1<<(ECMAScriptParserNoSubstitutionTemplate-127))|(1<<(ECMAScriptParserTemplateHead-127))|(1<<(ECMAScriptParserIdentifier-127)))) != 0) {
		{
			p.SetState(8264)
			p.ModuleItem()
		}

		p.SetState(8267)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IModuleItemContext is an interface to support dynamic dispatch.
type IModuleItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModuleItemContext differentiates from other interfaces.
	IsModuleItemContext()
}

type ModuleItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModuleItemContext() *ModuleItemContext {
	var p = new(ModuleItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_moduleItem
	return p
}

func (*ModuleItemContext) IsModuleItemContext() {}

func NewModuleItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModuleItemContext {
	var p = new(ModuleItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_moduleItem

	return p
}

func (s *ModuleItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ModuleItemContext) ImportDeclaration() IImportDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportDeclarationContext)
}

func (s *ModuleItemContext) ExportDeclaration() IExportDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportDeclarationContext)
}

func (s *ModuleItemContext) StatementListItem() IStatementListItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListItemContext)
}

func (s *ModuleItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModuleItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterModuleItem(s)
	}
}

func (s *ModuleItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitModuleItem(s)
	}
}

func (s *ModuleItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitModuleItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ModuleItem() (localctx IModuleItemContext) {
	localctx = NewModuleItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1344, ECMAScriptParserRULE_moduleItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8272)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__89:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8269)
			p.ImportDeclaration()
		}

	case ECMAScriptParserT__92:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8270)
			p.ExportDeclaration()
		}

	case ECMAScriptParserT__0, ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserT__3, ECMAScriptParserT__4, ECMAScriptParserT__8, ECMAScriptParserT__10, ECMAScriptParserT__14, ECMAScriptParserT__15, ECMAScriptParserT__17, ECMAScriptParserT__18, ECMAScriptParserT__19, ECMAScriptParserT__20, ECMAScriptParserT__21, ECMAScriptParserT__22, ECMAScriptParserT__23, ECMAScriptParserT__24, ECMAScriptParserT__25, ECMAScriptParserT__58, ECMAScriptParserT__59, ECMAScriptParserT__60, ECMAScriptParserT__61, ECMAScriptParserT__62, ECMAScriptParserT__64, ECMAScriptParserT__65, ECMAScriptParserT__66, ECMAScriptParserT__68, ECMAScriptParserT__69, ECMAScriptParserT__71, ECMAScriptParserT__72, ECMAScriptParserT__75, ECMAScriptParserT__76, ECMAScriptParserT__79, ECMAScriptParserT__80, ECMAScriptParserT__85, ECMAScriptParserT__86, ECMAScriptParserNullLiteral, ECMAScriptParserBooleanLiteral, ECMAScriptParserNumericLiteral, ECMAScriptParserStringLiteral, ECMAScriptParserNoSubstitutionTemplate, ECMAScriptParserTemplateHead, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8271)
			p.StatementListItem()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IImportDeclarationContext is an interface to support dynamic dispatch.
type IImportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportDeclarationContext differentiates from other interfaces.
	IsImportDeclarationContext()
}

type ImportDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclarationContext() *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_importDeclaration
	return p
}

func (*ImportDeclarationContext) IsImportDeclarationContext() {}

func NewImportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_importDeclaration

	return p
}

func (s *ImportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclarationContext) ImportClause() IImportClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportClauseContext)
}

func (s *ImportDeclarationContext) FromClause() IFromClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *ImportDeclarationContext) ModuleSpecifier() IModuleSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModuleSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModuleSpecifierContext)
}

func (s *ImportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterImportDeclaration(s)
	}
}

func (s *ImportDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitImportDeclaration(s)
	}
}

func (s *ImportDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitImportDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ImportDeclaration() (localctx IImportDeclarationContext) {
	localctx = NewImportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1346, ECMAScriptParserRULE_importDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8283)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 690, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8274)
			p.Match(ECMAScriptParserT__89)
		}
		{
			p.SetState(8275)
			p.ImportClause()
		}
		{
			p.SetState(8276)
			p.FromClause()
		}
		{
			p.SetState(8277)
			p.Match(ECMAScriptParserT__58)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8279)
			p.Match(ECMAScriptParserT__89)
		}
		{
			p.SetState(8280)
			p.ModuleSpecifier()
		}
		{
			p.SetState(8281)
			p.Match(ECMAScriptParserT__58)
		}

	}

	return localctx
}

// IImportClauseContext is an interface to support dynamic dispatch.
type IImportClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportClauseContext differentiates from other interfaces.
	IsImportClauseContext()
}

type ImportClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportClauseContext() *ImportClauseContext {
	var p = new(ImportClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_importClause
	return p
}

func (*ImportClauseContext) IsImportClauseContext() {}

func NewImportClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportClauseContext {
	var p = new(ImportClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_importClause

	return p
}

func (s *ImportClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportClauseContext) ImportedDefaultBinding() IImportedDefaultBindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportedDefaultBindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportedDefaultBindingContext)
}

func (s *ImportClauseContext) NameSpaceImport() INameSpaceImportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameSpaceImportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameSpaceImportContext)
}

func (s *ImportClauseContext) NamedImports() INamedImportsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamedImportsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamedImportsContext)
}

func (s *ImportClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterImportClause(s)
	}
}

func (s *ImportClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitImportClause(s)
	}
}

func (s *ImportClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitImportClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ImportClause() (localctx IImportClauseContext) {
	localctx = NewImportClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1348, ECMAScriptParserRULE_importClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8296)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 691, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8285)
			p.ImportedDefaultBinding()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8286)
			p.NameSpaceImport()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8287)
			p.NamedImports()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8288)
			p.ImportedDefaultBinding()
		}
		{
			p.SetState(8289)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(8290)
			p.NameSpaceImport()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8292)
			p.ImportedDefaultBinding()
		}
		{
			p.SetState(8293)
			p.Match(ECMAScriptParserT__7)
		}
		{
			p.SetState(8294)
			p.NamedImports()
		}

	}

	return localctx
}

// IImportedDefaultBindingContext is an interface to support dynamic dispatch.
type IImportedDefaultBindingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportedDefaultBindingContext differentiates from other interfaces.
	IsImportedDefaultBindingContext()
}

type ImportedDefaultBindingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportedDefaultBindingContext() *ImportedDefaultBindingContext {
	var p = new(ImportedDefaultBindingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_importedDefaultBinding
	return p
}

func (*ImportedDefaultBindingContext) IsImportedDefaultBindingContext() {}

func NewImportedDefaultBindingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportedDefaultBindingContext {
	var p = new(ImportedDefaultBindingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_importedDefaultBinding

	return p
}

func (s *ImportedDefaultBindingContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportedDefaultBindingContext) ImportedBinding() IImportedBindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportedBindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportedBindingContext)
}

func (s *ImportedDefaultBindingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportedDefaultBindingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportedDefaultBindingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterImportedDefaultBinding(s)
	}
}

func (s *ImportedDefaultBindingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitImportedDefaultBinding(s)
	}
}

func (s *ImportedDefaultBindingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitImportedDefaultBinding(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ImportedDefaultBinding() (localctx IImportedDefaultBindingContext) {
	localctx = NewImportedDefaultBindingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1350, ECMAScriptParserRULE_importedDefaultBinding)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8298)
		p.ImportedBinding()
	}

	return localctx
}

// INameSpaceImportContext is an interface to support dynamic dispatch.
type INameSpaceImportContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameSpaceImportContext differentiates from other interfaces.
	IsNameSpaceImportContext()
}

type NameSpaceImportContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameSpaceImportContext() *NameSpaceImportContext {
	var p = new(NameSpaceImportContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_nameSpaceImport
	return p
}

func (*NameSpaceImportContext) IsNameSpaceImportContext() {}

func NewNameSpaceImportContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameSpaceImportContext {
	var p = new(NameSpaceImportContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_nameSpaceImport

	return p
}

func (s *NameSpaceImportContext) GetParser() antlr.Parser { return s.parser }

func (s *NameSpaceImportContext) ImportedBinding() IImportedBindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportedBindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportedBindingContext)
}

func (s *NameSpaceImportContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameSpaceImportContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameSpaceImportContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterNameSpaceImport(s)
	}
}

func (s *NameSpaceImportContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitNameSpaceImport(s)
	}
}

func (s *NameSpaceImportContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitNameSpaceImport(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) NameSpaceImport() (localctx INameSpaceImportContext) {
	localctx = NewNameSpaceImportContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1352, ECMAScriptParserRULE_nameSpaceImport)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8300)
		p.Match(ECMAScriptParserT__84)
	}
	{
		p.SetState(8301)
		p.Match(ECMAScriptParserT__90)
	}
	{
		p.SetState(8302)
		p.ImportedBinding()
	}

	return localctx
}

// INamedImportsContext is an interface to support dynamic dispatch.
type INamedImportsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamedImportsContext differentiates from other interfaces.
	IsNamedImportsContext()
}

type NamedImportsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamedImportsContext() *NamedImportsContext {
	var p = new(NamedImportsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_namedImports
	return p
}

func (*NamedImportsContext) IsNamedImportsContext() {}

func NewNamedImportsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamedImportsContext {
	var p = new(NamedImportsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_namedImports

	return p
}

func (s *NamedImportsContext) GetParser() antlr.Parser { return s.parser }

func (s *NamedImportsContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *NamedImportsContext) ImportsList() IImportsListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportsListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportsListContext)
}

func (s *NamedImportsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamedImportsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamedImportsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterNamedImports(s)
	}
}

func (s *NamedImportsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitNamedImports(s)
	}
}

func (s *NamedImportsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitNamedImports(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) NamedImports() (localctx INamedImportsContext) {
	localctx = NewNamedImportsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1354, ECMAScriptParserRULE_namedImports)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8313)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 693, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8304)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8305)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8306)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8307)
			p.importsList(0)
		}
		p.SetState(8309)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(8308)
				p.Match(ECMAScriptParserT__7)
			}

		}
		{
			p.SetState(8311)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IFromClauseContext is an interface to support dynamic dispatch.
type IFromClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFromClauseContext differentiates from other interfaces.
	IsFromClauseContext()
}

type FromClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromClauseContext() *FromClauseContext {
	var p = new(FromClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_fromClause
	return p
}

func (*FromClauseContext) IsFromClauseContext() {}

func NewFromClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromClauseContext {
	var p = new(FromClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_fromClause

	return p
}

func (s *FromClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FromClauseContext) ModuleSpecifier() IModuleSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModuleSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModuleSpecifierContext)
}

func (s *FromClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterFromClause(s)
	}
}

func (s *FromClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitFromClause(s)
	}
}

func (s *FromClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitFromClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) FromClause() (localctx IFromClauseContext) {
	localctx = NewFromClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1356, ECMAScriptParserRULE_fromClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8315)
		p.Match(ECMAScriptParserT__91)
	}
	{
		p.SetState(8316)
		p.ModuleSpecifier()
	}

	return localctx
}

// IImportsListContext is an interface to support dynamic dispatch.
type IImportsListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportsListContext differentiates from other interfaces.
	IsImportsListContext()
}

type ImportsListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportsListContext() *ImportsListContext {
	var p = new(ImportsListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_importsList
	return p
}

func (*ImportsListContext) IsImportsListContext() {}

func NewImportsListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportsListContext {
	var p = new(ImportsListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_importsList

	return p
}

func (s *ImportsListContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportsListContext) ImportSpecifier() IImportSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportSpecifierContext)
}

func (s *ImportsListContext) ImportsList() IImportsListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportsListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportsListContext)
}

func (s *ImportsListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportsListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportsListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterImportsList(s)
	}
}

func (s *ImportsListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitImportsList(s)
	}
}

func (s *ImportsListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitImportsList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ImportsList() (localctx IImportsListContext) {
	return p.importsList(0)
}

func (p *ECMAScriptParser) importsList(_p int) (localctx IImportsListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewImportsListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IImportsListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 1358
	p.EnterRecursionRule(localctx, 1358, ECMAScriptParserRULE_importsList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8319)
		p.ImportSpecifier()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(8326)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 694, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewImportsListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_importsList)
			p.SetState(8321)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(8322)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(8323)
				p.ImportSpecifier()
			}

		}
		p.SetState(8328)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 694, p.GetParserRuleContext())
	}

	return localctx
}

// IImportSpecifierContext is an interface to support dynamic dispatch.
type IImportSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportSpecifierContext differentiates from other interfaces.
	IsImportSpecifierContext()
}

type ImportSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportSpecifierContext() *ImportSpecifierContext {
	var p = new(ImportSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_importSpecifier
	return p
}

func (*ImportSpecifierContext) IsImportSpecifierContext() {}

func NewImportSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportSpecifierContext {
	var p = new(ImportSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_importSpecifier

	return p
}

func (s *ImportSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportSpecifierContext) ImportedBinding() IImportedBindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportedBindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportedBindingContext)
}

func (s *ImportSpecifierContext) IdentifierName() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, 0)
}

func (s *ImportSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterImportSpecifier(s)
	}
}

func (s *ImportSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitImportSpecifier(s)
	}
}

func (s *ImportSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitImportSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ImportSpecifier() (localctx IImportSpecifierContext) {
	localctx = NewImportSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1360, ECMAScriptParserRULE_importSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8333)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ECMAScriptParserT__1, ECMAScriptParserT__2, ECMAScriptParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8329)
			p.ImportedBinding()
		}

	case ECMAScriptParserIdentifierName:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8330)
			p.Match(ECMAScriptParserIdentifierName)
		}
		{
			p.SetState(8331)
			p.Match(ECMAScriptParserT__90)
		}
		{
			p.SetState(8332)
			p.ImportedBinding()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IModuleSpecifierContext is an interface to support dynamic dispatch.
type IModuleSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModuleSpecifierContext differentiates from other interfaces.
	IsModuleSpecifierContext()
}

type ModuleSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModuleSpecifierContext() *ModuleSpecifierContext {
	var p = new(ModuleSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_moduleSpecifier
	return p
}

func (*ModuleSpecifierContext) IsModuleSpecifierContext() {}

func NewModuleSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModuleSpecifierContext {
	var p = new(ModuleSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_moduleSpecifier

	return p
}

func (s *ModuleSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ModuleSpecifierContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserStringLiteral, 0)
}

func (s *ModuleSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModuleSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterModuleSpecifier(s)
	}
}

func (s *ModuleSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitModuleSpecifier(s)
	}
}

func (s *ModuleSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitModuleSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ModuleSpecifier() (localctx IModuleSpecifierContext) {
	localctx = NewModuleSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1362, ECMAScriptParserRULE_moduleSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8335)
		p.Match(ECMAScriptParserStringLiteral)
	}

	return localctx
}

// IImportedBindingContext is an interface to support dynamic dispatch.
type IImportedBindingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportedBindingContext differentiates from other interfaces.
	IsImportedBindingContext()
}

type ImportedBindingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportedBindingContext() *ImportedBindingContext {
	var p = new(ImportedBindingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_importedBinding
	return p
}

func (*ImportedBindingContext) IsImportedBindingContext() {}

func NewImportedBindingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportedBindingContext {
	var p = new(ImportedBindingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_importedBinding

	return p
}

func (s *ImportedBindingContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportedBindingContext) BindingIdentifier() IBindingIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindingIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindingIdentifierContext)
}

func (s *ImportedBindingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportedBindingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportedBindingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterImportedBinding(s)
	}
}

func (s *ImportedBindingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitImportedBinding(s)
	}
}

func (s *ImportedBindingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitImportedBinding(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ImportedBinding() (localctx IImportedBindingContext) {
	localctx = NewImportedBindingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1364, ECMAScriptParserRULE_importedBinding)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8337)
		p.BindingIdentifier()
	}

	return localctx
}

// IExportDeclarationContext is an interface to support dynamic dispatch.
type IExportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExportDeclarationContext differentiates from other interfaces.
	IsExportDeclarationContext()
}

type ExportDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExportDeclarationContext() *ExportDeclarationContext {
	var p = new(ExportDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_exportDeclaration
	return p
}

func (*ExportDeclarationContext) IsExportDeclarationContext() {}

func NewExportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportDeclarationContext {
	var p = new(ExportDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_exportDeclaration

	return p
}

func (s *ExportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportDeclarationContext) FromClause() IFromClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *ExportDeclarationContext) ExportClause() IExportClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportClauseContext)
}

func (s *ExportDeclarationContext) VariableStatement() IVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatementContext)
}

func (s *ExportDeclarationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *ExportDeclarationContext) HoistableDeclaration_Default() IHoistableDeclaration_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHoistableDeclaration_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHoistableDeclaration_DefaultContext)
}

func (s *ExportDeclarationContext) ClassDeclaration_Default() IClassDeclaration_DefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassDeclaration_DefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassDeclaration_DefaultContext)
}

func (s *ExportDeclarationContext) AssignmentExpression_In() IAssignmentExpression_InContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_InContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_InContext)
}

func (s *ExportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExportDeclaration(s)
	}
}

func (s *ExportDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExportDeclaration(s)
	}
}

func (s *ExportDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExportDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExportDeclaration() (localctx IExportDeclarationContext) {
	localctx = NewExportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1366, ECMAScriptParserRULE_exportDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8367)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 697, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8339)
			p.Match(ECMAScriptParserT__92)
		}
		{
			p.SetState(8340)
			p.Match(ECMAScriptParserT__84)
		}
		{
			p.SetState(8341)
			p.FromClause()
		}
		{
			p.SetState(8342)
			p.Match(ECMAScriptParserT__58)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8344)
			p.Match(ECMAScriptParserT__92)
		}
		{
			p.SetState(8345)
			p.ExportClause()
		}
		p.SetState(8347)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__91 {
			{
				p.SetState(8346)
				p.FromClause()
			}

		}
		{
			p.SetState(8349)
			p.Match(ECMAScriptParserT__58)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8351)
			p.Match(ECMAScriptParserT__92)
		}
		{
			p.SetState(8352)
			p.VariableStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8353)
			p.Match(ECMAScriptParserT__92)
		}
		{
			p.SetState(8354)
			p.Declaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8355)
			p.Match(ECMAScriptParserT__92)
		}
		{
			p.SetState(8356)
			p.Match(ECMAScriptParserT__74)
		}
		{
			p.SetState(8357)
			p.HoistableDeclaration_Default()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(8358)
			p.Match(ECMAScriptParserT__92)
		}
		{
			p.SetState(8359)
			p.Match(ECMAScriptParserT__74)
		}
		{
			p.SetState(8360)
			p.ClassDeclaration_Default()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(8361)
			p.Match(ECMAScriptParserT__92)
		}
		{
			p.SetState(8362)
			p.Match(ECMAScriptParserT__74)
		}
		p.SetState(8363)

		if !(negativeLookahead("function", "async function", "class")) {
			panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"function\", \"async function\", \"class\") ", ""))
		}
		{
			p.SetState(8364)
			p.AssignmentExpression_In()
		}
		{
			p.SetState(8365)
			p.Match(ECMAScriptParserT__58)
		}

	}

	return localctx
}

// IExportClauseContext is an interface to support dynamic dispatch.
type IExportClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExportClauseContext differentiates from other interfaces.
	IsExportClauseContext()
}

type ExportClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExportClauseContext() *ExportClauseContext {
	var p = new(ExportClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_exportClause
	return p
}

func (*ExportClauseContext) IsExportClauseContext() {}

func NewExportClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportClauseContext {
	var p = new(ExportClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_exportClause

	return p
}

func (s *ExportClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportClauseContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *ExportClauseContext) ExportsList() IExportsListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportsListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportsListContext)
}

func (s *ExportClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExportClause(s)
	}
}

func (s *ExportClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExportClause(s)
	}
}

func (s *ExportClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExportClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExportClause() (localctx IExportClauseContext) {
	localctx = NewExportClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1368, ECMAScriptParserRULE_exportClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8378)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 699, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8369)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8370)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8371)
			p.Match(ECMAScriptParserT__10)
		}
		{
			p.SetState(8372)
			p.exportsList(0)
		}
		p.SetState(8374)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == ECMAScriptParserT__7 {
			{
				p.SetState(8373)
				p.Match(ECMAScriptParserT__7)
			}

		}
		{
			p.SetState(8376)
			p.Match(ECMAScriptParserRightBracePunctuator)
		}

	}

	return localctx
}

// IExportsListContext is an interface to support dynamic dispatch.
type IExportsListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExportsListContext differentiates from other interfaces.
	IsExportsListContext()
}

type ExportsListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExportsListContext() *ExportsListContext {
	var p = new(ExportsListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_exportsList
	return p
}

func (*ExportsListContext) IsExportsListContext() {}

func NewExportsListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportsListContext {
	var p = new(ExportsListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_exportsList

	return p
}

func (s *ExportsListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportsListContext) ExportSpecifier() IExportSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportSpecifierContext)
}

func (s *ExportsListContext) ExportsList() IExportsListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportsListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportsListContext)
}

func (s *ExportsListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportsListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportsListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExportsList(s)
	}
}

func (s *ExportsListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExportsList(s)
	}
}

func (s *ExportsListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExportsList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExportsList() (localctx IExportsListContext) {
	return p.exportsList(0)
}

func (p *ECMAScriptParser) exportsList(_p int) (localctx IExportsListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExportsListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExportsListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 1370
	p.EnterRecursionRule(localctx, 1370, ECMAScriptParserRULE_exportsList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8381)
		p.ExportSpecifier()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(8388)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 700, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExportsListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ECMAScriptParserRULE_exportsList)
			p.SetState(8383)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(8384)
				p.Match(ECMAScriptParserT__7)
			}
			{
				p.SetState(8385)
				p.ExportSpecifier()
			}

		}
		p.SetState(8390)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 700, p.GetParserRuleContext())
	}

	return localctx
}

// IExportSpecifierContext is an interface to support dynamic dispatch.
type IExportSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExportSpecifierContext differentiates from other interfaces.
	IsExportSpecifierContext()
}

type ExportSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExportSpecifierContext() *ExportSpecifierContext {
	var p = new(ExportSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_exportSpecifier
	return p
}

func (*ExportSpecifierContext) IsExportSpecifierContext() {}

func NewExportSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportSpecifierContext {
	var p = new(ExportSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_exportSpecifier

	return p
}

func (s *ExportSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportSpecifierContext) AllIdentifierName() []antlr.TerminalNode {
	return s.GetTokens(ECMAScriptParserIdentifierName)
}

func (s *ExportSpecifierContext) IdentifierName(i int) antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserIdentifierName, i)
}

func (s *ExportSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterExportSpecifier(s)
	}
}

func (s *ExportSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitExportSpecifier(s)
	}
}

func (s *ExportSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitExportSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) ExportSpecifier() (localctx IExportSpecifierContext) {
	localctx = NewExportSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1372, ECMAScriptParserRULE_exportSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8395)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 701, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8391)
			p.Match(ECMAScriptParserIdentifierName)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8392)
			p.Match(ECMAScriptParserIdentifierName)
		}
		{
			p.SetState(8393)
			p.Match(ECMAScriptParserT__90)
		}
		{
			p.SetState(8394)
			p.Match(ECMAScriptParserIdentifierName)
		}

	}

	return localctx
}

// IAsyncConciseBodyContext is an interface to support dynamic dispatch.
type IAsyncConciseBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncConciseBodyContext differentiates from other interfaces.
	IsAsyncConciseBodyContext()
}

type AsyncConciseBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncConciseBodyContext() *AsyncConciseBodyContext {
	var p = new(AsyncConciseBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncConciseBody
	return p
}

func (*AsyncConciseBodyContext) IsAsyncConciseBodyContext() {}

func NewAsyncConciseBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncConciseBodyContext {
	var p = new(AsyncConciseBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncConciseBody

	return p
}

func (s *AsyncConciseBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncConciseBodyContext) AssignmentExpression_Await() IAssignmentExpression_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_AwaitContext)
}

func (s *AsyncConciseBodyContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncConciseBodyContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncConciseBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncConciseBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncConciseBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncConciseBody(s)
	}
}

func (s *AsyncConciseBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncConciseBody(s)
	}
}

func (s *AsyncConciseBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncConciseBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncConciseBody() (localctx IAsyncConciseBodyContext) {
	localctx = NewAsyncConciseBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1374, ECMAScriptParserRULE_asyncConciseBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8397)

	if !(negativeLookahead("{")) {
		panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"{\") ", ""))
	}
	{
		p.SetState(8398)
		p.AssignmentExpression_Await()
	}
	{
		p.SetState(8399)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(8400)
		p.AsyncFunctionBody()
	}
	{
		p.SetState(8401)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

// IAsyncConciseBody_InContext is an interface to support dynamic dispatch.
type IAsyncConciseBody_InContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsyncConciseBody_InContext differentiates from other interfaces.
	IsAsyncConciseBody_InContext()
}

type AsyncConciseBody_InContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncConciseBody_InContext() *AsyncConciseBody_InContext {
	var p = new(AsyncConciseBody_InContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ECMAScriptParserRULE_asyncConciseBody_In
	return p
}

func (*AsyncConciseBody_InContext) IsAsyncConciseBody_InContext() {}

func NewAsyncConciseBody_InContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncConciseBody_InContext {
	var p = new(AsyncConciseBody_InContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ECMAScriptParserRULE_asyncConciseBody_In

	return p
}

func (s *AsyncConciseBody_InContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncConciseBody_InContext) AssignmentExpression_In_Await() IAssignmentExpression_In_AwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpression_In_AwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpression_In_AwaitContext)
}

func (s *AsyncConciseBody_InContext) AsyncFunctionBody() IAsyncFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsyncFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsyncFunctionBodyContext)
}

func (s *AsyncConciseBody_InContext) RightBracePunctuator() antlr.TerminalNode {
	return s.GetToken(ECMAScriptParserRightBracePunctuator, 0)
}

func (s *AsyncConciseBody_InContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncConciseBody_InContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncConciseBody_InContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.EnterAsyncConciseBody_In(s)
	}
}

func (s *AsyncConciseBody_InContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ECMAScriptListener); ok {
		listenerT.ExitAsyncConciseBody_In(s)
	}
}

func (s *AsyncConciseBody_InContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ECMAScriptVisitor:
		return t.VisitAsyncConciseBody_In(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ECMAScriptParser) AsyncConciseBody_In() (localctx IAsyncConciseBody_InContext) {
	localctx = NewAsyncConciseBody_InContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1376, ECMAScriptParserRULE_asyncConciseBody_In)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8403)

	if !(negativeLookahead("{")) {
		panic(antlr.NewFailedPredicateException(p, " negativeLookahead(\"{\") ", ""))
	}
	{
		p.SetState(8404)
		p.AssignmentExpression_In_Await()
	}
	{
		p.SetState(8405)
		p.Match(ECMAScriptParserT__10)
	}
	{
		p.SetState(8406)
		p.AsyncFunctionBody()
	}
	{
		p.SetState(8407)
		p.Match(ECMAScriptParserRightBracePunctuator)
	}

	return localctx
}

func (p *ECMAScriptParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 30:
		var t *ElementListContext = nil
		if localctx != nil {
			t = localctx.(*ElementListContext)
		}
		return p.ElementList_Sempred(t, predIndex)

	case 31:
		var t *ElementList_YieldContext = nil
		if localctx != nil {
			t = localctx.(*ElementList_YieldContext)
		}
		return p.ElementList_Yield_Sempred(t, predIndex)

	case 32:
		var t *ElementList_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*ElementList_AwaitContext)
		}
		return p.ElementList_Await_Sempred(t, predIndex)

	case 33:
		var t *ElementList_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*ElementList_Yield_AwaitContext)
		}
		return p.ElementList_Yield_Await_Sempred(t, predIndex)

	case 34:
		var t *ElisionContext = nil
		if localctx != nil {
			t = localctx.(*ElisionContext)
		}
		return p.Elision_Sempred(t, predIndex)

	case 104:
		var t *MemberExpressionContext = nil
		if localctx != nil {
			t = localctx.(*MemberExpressionContext)
		}
		return p.MemberExpression_Sempred(t, predIndex)

	case 105:
		var t *MemberExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*MemberExpression_YieldContext)
		}
		return p.MemberExpression_Yield_Sempred(t, predIndex)

	case 106:
		var t *MemberExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*MemberExpression_AwaitContext)
		}
		return p.MemberExpression_Await_Sempred(t, predIndex)

	case 107:
		var t *MemberExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*MemberExpression_Yield_AwaitContext)
		}
		return p.MemberExpression_Yield_Await_Sempred(t, predIndex)

	case 118:
		var t *CallExpressionContext = nil
		if localctx != nil {
			t = localctx.(*CallExpressionContext)
		}
		return p.CallExpression_Sempred(t, predIndex)

	case 119:
		var t *CallExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*CallExpression_YieldContext)
		}
		return p.CallExpression_Yield_Sempred(t, predIndex)

	case 120:
		var t *CallExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*CallExpression_AwaitContext)
		}
		return p.CallExpression_Await_Sempred(t, predIndex)

	case 121:
		var t *CallExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*CallExpression_Yield_AwaitContext)
		}
		return p.CallExpression_Yield_Await_Sempred(t, predIndex)

	case 130:
		var t *ArgumentListContext = nil
		if localctx != nil {
			t = localctx.(*ArgumentListContext)
		}
		return p.ArgumentList_Sempred(t, predIndex)

	case 131:
		var t *ArgumentList_YieldContext = nil
		if localctx != nil {
			t = localctx.(*ArgumentList_YieldContext)
		}
		return p.ArgumentList_Yield_Sempred(t, predIndex)

	case 132:
		var t *ArgumentList_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*ArgumentList_AwaitContext)
		}
		return p.ArgumentList_Await_Sempred(t, predIndex)

	case 133:
		var t *ArgumentList_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*ArgumentList_Yield_AwaitContext)
		}
		return p.ArgumentList_Yield_Await_Sempred(t, predIndex)

	case 150:
		var t *MultiplicativeExpressionContext = nil
		if localctx != nil {
			t = localctx.(*MultiplicativeExpressionContext)
		}
		return p.MultiplicativeExpression_Sempred(t, predIndex)

	case 151:
		var t *MultiplicativeExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*MultiplicativeExpression_YieldContext)
		}
		return p.MultiplicativeExpression_Yield_Sempred(t, predIndex)

	case 152:
		var t *MultiplicativeExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*MultiplicativeExpression_AwaitContext)
		}
		return p.MultiplicativeExpression_Await_Sempred(t, predIndex)

	case 153:
		var t *MultiplicativeExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*MultiplicativeExpression_Yield_AwaitContext)
		}
		return p.MultiplicativeExpression_Yield_Await_Sempred(t, predIndex)

	case 154:
		var t *AdditiveExpressionContext = nil
		if localctx != nil {
			t = localctx.(*AdditiveExpressionContext)
		}
		return p.AdditiveExpression_Sempred(t, predIndex)

	case 155:
		var t *AdditiveExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*AdditiveExpression_YieldContext)
		}
		return p.AdditiveExpression_Yield_Sempred(t, predIndex)

	case 156:
		var t *AdditiveExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*AdditiveExpression_AwaitContext)
		}
		return p.AdditiveExpression_Await_Sempred(t, predIndex)

	case 157:
		var t *AdditiveExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*AdditiveExpression_Yield_AwaitContext)
		}
		return p.AdditiveExpression_Yield_Await_Sempred(t, predIndex)

	case 158:
		var t *ShiftExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ShiftExpressionContext)
		}
		return p.ShiftExpression_Sempred(t, predIndex)

	case 159:
		var t *ShiftExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*ShiftExpression_YieldContext)
		}
		return p.ShiftExpression_Yield_Sempred(t, predIndex)

	case 160:
		var t *ShiftExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*ShiftExpression_AwaitContext)
		}
		return p.ShiftExpression_Await_Sempred(t, predIndex)

	case 161:
		var t *ShiftExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*ShiftExpression_Yield_AwaitContext)
		}
		return p.ShiftExpression_Yield_Await_Sempred(t, predIndex)

	case 162:
		var t *RelationalExpressionContext = nil
		if localctx != nil {
			t = localctx.(*RelationalExpressionContext)
		}
		return p.RelationalExpression_Sempred(t, predIndex)

	case 163:
		var t *RelationalExpression_InContext = nil
		if localctx != nil {
			t = localctx.(*RelationalExpression_InContext)
		}
		return p.RelationalExpression_In_Sempred(t, predIndex)

	case 164:
		var t *RelationalExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*RelationalExpression_YieldContext)
		}
		return p.RelationalExpression_Yield_Sempred(t, predIndex)

	case 165:
		var t *RelationalExpression_In_YieldContext = nil
		if localctx != nil {
			t = localctx.(*RelationalExpression_In_YieldContext)
		}
		return p.RelationalExpression_In_Yield_Sempred(t, predIndex)

	case 166:
		var t *RelationalExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*RelationalExpression_AwaitContext)
		}
		return p.RelationalExpression_Await_Sempred(t, predIndex)

	case 167:
		var t *RelationalExpression_In_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*RelationalExpression_In_AwaitContext)
		}
		return p.RelationalExpression_In_Await_Sempred(t, predIndex)

	case 168:
		var t *RelationalExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*RelationalExpression_Yield_AwaitContext)
		}
		return p.RelationalExpression_Yield_Await_Sempred(t, predIndex)

	case 169:
		var t *RelationalExpression_In_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*RelationalExpression_In_Yield_AwaitContext)
		}
		return p.RelationalExpression_In_Yield_Await_Sempred(t, predIndex)

	case 170:
		var t *EqualityExpressionContext = nil
		if localctx != nil {
			t = localctx.(*EqualityExpressionContext)
		}
		return p.EqualityExpression_Sempred(t, predIndex)

	case 171:
		var t *EqualityExpression_InContext = nil
		if localctx != nil {
			t = localctx.(*EqualityExpression_InContext)
		}
		return p.EqualityExpression_In_Sempred(t, predIndex)

	case 172:
		var t *EqualityExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*EqualityExpression_YieldContext)
		}
		return p.EqualityExpression_Yield_Sempred(t, predIndex)

	case 173:
		var t *EqualityExpression_In_YieldContext = nil
		if localctx != nil {
			t = localctx.(*EqualityExpression_In_YieldContext)
		}
		return p.EqualityExpression_In_Yield_Sempred(t, predIndex)

	case 174:
		var t *EqualityExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*EqualityExpression_AwaitContext)
		}
		return p.EqualityExpression_Await_Sempred(t, predIndex)

	case 175:
		var t *EqualityExpression_In_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*EqualityExpression_In_AwaitContext)
		}
		return p.EqualityExpression_In_Await_Sempred(t, predIndex)

	case 176:
		var t *EqualityExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*EqualityExpression_Yield_AwaitContext)
		}
		return p.EqualityExpression_Yield_Await_Sempred(t, predIndex)

	case 177:
		var t *EqualityExpression_In_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*EqualityExpression_In_Yield_AwaitContext)
		}
		return p.EqualityExpression_In_Yield_Await_Sempred(t, predIndex)

	case 178:
		var t *BitwiseANDExpressionContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseANDExpressionContext)
		}
		return p.BitwiseANDExpression_Sempred(t, predIndex)

	case 179:
		var t *BitwiseANDExpression_InContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseANDExpression_InContext)
		}
		return p.BitwiseANDExpression_In_Sempred(t, predIndex)

	case 180:
		var t *BitwiseANDExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseANDExpression_YieldContext)
		}
		return p.BitwiseANDExpression_Yield_Sempred(t, predIndex)

	case 181:
		var t *BitwiseANDExpression_In_YieldContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseANDExpression_In_YieldContext)
		}
		return p.BitwiseANDExpression_In_Yield_Sempred(t, predIndex)

	case 182:
		var t *BitwiseANDExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseANDExpression_AwaitContext)
		}
		return p.BitwiseANDExpression_Await_Sempred(t, predIndex)

	case 183:
		var t *BitwiseANDExpression_In_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseANDExpression_In_AwaitContext)
		}
		return p.BitwiseANDExpression_In_Await_Sempred(t, predIndex)

	case 184:
		var t *BitwiseANDExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseANDExpression_Yield_AwaitContext)
		}
		return p.BitwiseANDExpression_Yield_Await_Sempred(t, predIndex)

	case 185:
		var t *BitwiseANDExpression_In_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseANDExpression_In_Yield_AwaitContext)
		}
		return p.BitwiseANDExpression_In_Yield_Await_Sempred(t, predIndex)

	case 186:
		var t *BitwiseXORExpressionContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseXORExpressionContext)
		}
		return p.BitwiseXORExpression_Sempred(t, predIndex)

	case 187:
		var t *BitwiseXORExpression_InContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseXORExpression_InContext)
		}
		return p.BitwiseXORExpression_In_Sempred(t, predIndex)

	case 188:
		var t *BitwiseXORExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseXORExpression_YieldContext)
		}
		return p.BitwiseXORExpression_Yield_Sempred(t, predIndex)

	case 189:
		var t *BitwiseXORExpression_In_YieldContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseXORExpression_In_YieldContext)
		}
		return p.BitwiseXORExpression_In_Yield_Sempred(t, predIndex)

	case 190:
		var t *BitwiseXORExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseXORExpression_AwaitContext)
		}
		return p.BitwiseXORExpression_Await_Sempred(t, predIndex)

	case 191:
		var t *BitwiseXORExpression_In_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseXORExpression_In_AwaitContext)
		}
		return p.BitwiseXORExpression_In_Await_Sempred(t, predIndex)

	case 192:
		var t *BitwiseXORExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseXORExpression_Yield_AwaitContext)
		}
		return p.BitwiseXORExpression_Yield_Await_Sempred(t, predIndex)

	case 193:
		var t *BitwiseXORExpression_In_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseXORExpression_In_Yield_AwaitContext)
		}
		return p.BitwiseXORExpression_In_Yield_Await_Sempred(t, predIndex)

	case 194:
		var t *BitwiseORExpressionContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseORExpressionContext)
		}
		return p.BitwiseORExpression_Sempred(t, predIndex)

	case 195:
		var t *BitwiseORExpression_InContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseORExpression_InContext)
		}
		return p.BitwiseORExpression_In_Sempred(t, predIndex)

	case 196:
		var t *BitwiseORExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseORExpression_YieldContext)
		}
		return p.BitwiseORExpression_Yield_Sempred(t, predIndex)

	case 197:
		var t *BitwiseORExpression_In_YieldContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseORExpression_In_YieldContext)
		}
		return p.BitwiseORExpression_In_Yield_Sempred(t, predIndex)

	case 198:
		var t *BitwiseORExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseORExpression_AwaitContext)
		}
		return p.BitwiseORExpression_Await_Sempred(t, predIndex)

	case 199:
		var t *BitwiseORExpression_In_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseORExpression_In_AwaitContext)
		}
		return p.BitwiseORExpression_In_Await_Sempred(t, predIndex)

	case 200:
		var t *BitwiseORExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseORExpression_Yield_AwaitContext)
		}
		return p.BitwiseORExpression_Yield_Await_Sempred(t, predIndex)

	case 201:
		var t *BitwiseORExpression_In_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BitwiseORExpression_In_Yield_AwaitContext)
		}
		return p.BitwiseORExpression_In_Yield_Await_Sempred(t, predIndex)

	case 202:
		var t *LogicalANDExpressionContext = nil
		if localctx != nil {
			t = localctx.(*LogicalANDExpressionContext)
		}
		return p.LogicalANDExpression_Sempred(t, predIndex)

	case 203:
		var t *LogicalANDExpression_InContext = nil
		if localctx != nil {
			t = localctx.(*LogicalANDExpression_InContext)
		}
		return p.LogicalANDExpression_In_Sempred(t, predIndex)

	case 204:
		var t *LogicalANDExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*LogicalANDExpression_YieldContext)
		}
		return p.LogicalANDExpression_Yield_Sempred(t, predIndex)

	case 205:
		var t *LogicalANDExpression_In_YieldContext = nil
		if localctx != nil {
			t = localctx.(*LogicalANDExpression_In_YieldContext)
		}
		return p.LogicalANDExpression_In_Yield_Sempred(t, predIndex)

	case 206:
		var t *LogicalANDExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*LogicalANDExpression_AwaitContext)
		}
		return p.LogicalANDExpression_Await_Sempred(t, predIndex)

	case 207:
		var t *LogicalANDExpression_In_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*LogicalANDExpression_In_AwaitContext)
		}
		return p.LogicalANDExpression_In_Await_Sempred(t, predIndex)

	case 208:
		var t *LogicalANDExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*LogicalANDExpression_Yield_AwaitContext)
		}
		return p.LogicalANDExpression_Yield_Await_Sempred(t, predIndex)

	case 209:
		var t *LogicalANDExpression_In_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*LogicalANDExpression_In_Yield_AwaitContext)
		}
		return p.LogicalANDExpression_In_Yield_Await_Sempred(t, predIndex)

	case 210:
		var t *LogicalORExpressionContext = nil
		if localctx != nil {
			t = localctx.(*LogicalORExpressionContext)
		}
		return p.LogicalORExpression_Sempred(t, predIndex)

	case 211:
		var t *LogicalORExpression_InContext = nil
		if localctx != nil {
			t = localctx.(*LogicalORExpression_InContext)
		}
		return p.LogicalORExpression_In_Sempred(t, predIndex)

	case 212:
		var t *LogicalORExpression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*LogicalORExpression_YieldContext)
		}
		return p.LogicalORExpression_Yield_Sempred(t, predIndex)

	case 213:
		var t *LogicalORExpression_In_YieldContext = nil
		if localctx != nil {
			t = localctx.(*LogicalORExpression_In_YieldContext)
		}
		return p.LogicalORExpression_In_Yield_Sempred(t, predIndex)

	case 214:
		var t *LogicalORExpression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*LogicalORExpression_AwaitContext)
		}
		return p.LogicalORExpression_Await_Sempred(t, predIndex)

	case 215:
		var t *LogicalORExpression_In_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*LogicalORExpression_In_AwaitContext)
		}
		return p.LogicalORExpression_In_Await_Sempred(t, predIndex)

	case 216:
		var t *LogicalORExpression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*LogicalORExpression_Yield_AwaitContext)
		}
		return p.LogicalORExpression_Yield_Await_Sempred(t, predIndex)

	case 217:
		var t *LogicalORExpression_In_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*LogicalORExpression_In_Yield_AwaitContext)
		}
		return p.LogicalORExpression_In_Yield_Await_Sempred(t, predIndex)

	case 235:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 236:
		var t *Expression_InContext = nil
		if localctx != nil {
			t = localctx.(*Expression_InContext)
		}
		return p.Expression_In_Sempred(t, predIndex)

	case 237:
		var t *Expression_YieldContext = nil
		if localctx != nil {
			t = localctx.(*Expression_YieldContext)
		}
		return p.Expression_Yield_Sempred(t, predIndex)

	case 238:
		var t *Expression_In_YieldContext = nil
		if localctx != nil {
			t = localctx.(*Expression_In_YieldContext)
		}
		return p.Expression_In_Yield_Sempred(t, predIndex)

	case 239:
		var t *Expression_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*Expression_AwaitContext)
		}
		return p.Expression_Await_Sempred(t, predIndex)

	case 240:
		var t *Expression_In_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*Expression_In_AwaitContext)
		}
		return p.Expression_In_Await_Sempred(t, predIndex)

	case 241:
		var t *Expression_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*Expression_Yield_AwaitContext)
		}
		return p.Expression_Yield_Await_Sempred(t, predIndex)

	case 242:
		var t *Expression_In_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*Expression_In_Yield_AwaitContext)
		}
		return p.Expression_In_Yield_Await_Sempred(t, predIndex)

	case 312:
		var t *BindingListContext = nil
		if localctx != nil {
			t = localctx.(*BindingListContext)
		}
		return p.BindingList_Sempred(t, predIndex)

	case 313:
		var t *BindingList_InContext = nil
		if localctx != nil {
			t = localctx.(*BindingList_InContext)
		}
		return p.BindingList_In_Sempred(t, predIndex)

	case 314:
		var t *BindingList_YieldContext = nil
		if localctx != nil {
			t = localctx.(*BindingList_YieldContext)
		}
		return p.BindingList_Yield_Sempred(t, predIndex)

	case 315:
		var t *BindingList_In_YieldContext = nil
		if localctx != nil {
			t = localctx.(*BindingList_In_YieldContext)
		}
		return p.BindingList_In_Yield_Sempred(t, predIndex)

	case 316:
		var t *BindingList_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BindingList_AwaitContext)
		}
		return p.BindingList_Await_Sempred(t, predIndex)

	case 317:
		var t *BindingList_In_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BindingList_In_AwaitContext)
		}
		return p.BindingList_In_Await_Sempred(t, predIndex)

	case 318:
		var t *BindingList_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BindingList_Yield_AwaitContext)
		}
		return p.BindingList_Yield_Await_Sempred(t, predIndex)

	case 319:
		var t *BindingList_In_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BindingList_In_Yield_AwaitContext)
		}
		return p.BindingList_In_Yield_Await_Sempred(t, predIndex)

	case 332:
		var t *VariableDeclarationListContext = nil
		if localctx != nil {
			t = localctx.(*VariableDeclarationListContext)
		}
		return p.VariableDeclarationList_Sempred(t, predIndex)

	case 333:
		var t *VariableDeclarationList_InContext = nil
		if localctx != nil {
			t = localctx.(*VariableDeclarationList_InContext)
		}
		return p.VariableDeclarationList_In_Sempred(t, predIndex)

	case 334:
		var t *VariableDeclarationList_YieldContext = nil
		if localctx != nil {
			t = localctx.(*VariableDeclarationList_YieldContext)
		}
		return p.VariableDeclarationList_Yield_Sempred(t, predIndex)

	case 335:
		var t *VariableDeclarationList_In_YieldContext = nil
		if localctx != nil {
			t = localctx.(*VariableDeclarationList_In_YieldContext)
		}
		return p.VariableDeclarationList_In_Yield_Sempred(t, predIndex)

	case 336:
		var t *VariableDeclarationList_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*VariableDeclarationList_AwaitContext)
		}
		return p.VariableDeclarationList_Await_Sempred(t, predIndex)

	case 337:
		var t *VariableDeclarationList_In_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*VariableDeclarationList_In_AwaitContext)
		}
		return p.VariableDeclarationList_In_Await_Sempred(t, predIndex)

	case 338:
		var t *VariableDeclarationList_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*VariableDeclarationList_Yield_AwaitContext)
		}
		return p.VariableDeclarationList_Yield_Await_Sempred(t, predIndex)

	case 339:
		var t *VariableDeclarationList_In_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*VariableDeclarationList_In_Yield_AwaitContext)
		}
		return p.VariableDeclarationList_In_Yield_Await_Sempred(t, predIndex)

	case 364:
		var t *BindingPropertyListContext = nil
		if localctx != nil {
			t = localctx.(*BindingPropertyListContext)
		}
		return p.BindingPropertyList_Sempred(t, predIndex)

	case 365:
		var t *BindingPropertyList_YieldContext = nil
		if localctx != nil {
			t = localctx.(*BindingPropertyList_YieldContext)
		}
		return p.BindingPropertyList_Yield_Sempred(t, predIndex)

	case 366:
		var t *BindingPropertyList_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BindingPropertyList_AwaitContext)
		}
		return p.BindingPropertyList_Await_Sempred(t, predIndex)

	case 367:
		var t *BindingPropertyList_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BindingPropertyList_Yield_AwaitContext)
		}
		return p.BindingPropertyList_Yield_Await_Sempred(t, predIndex)

	case 368:
		var t *BindingElementListContext = nil
		if localctx != nil {
			t = localctx.(*BindingElementListContext)
		}
		return p.BindingElementList_Sempred(t, predIndex)

	case 369:
		var t *BindingElementList_YieldContext = nil
		if localctx != nil {
			t = localctx.(*BindingElementList_YieldContext)
		}
		return p.BindingElementList_Yield_Sempred(t, predIndex)

	case 370:
		var t *BindingElementList_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BindingElementList_AwaitContext)
		}
		return p.BindingElementList_Await_Sempred(t, predIndex)

	case 371:
		var t *BindingElementList_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*BindingElementList_Yield_AwaitContext)
		}
		return p.BindingElementList_Yield_Await_Sempred(t, predIndex)

	case 393:
		var t *ExpressionStatementContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionStatementContext)
		}
		return p.ExpressionStatement_Sempred(t, predIndex)

	case 394:
		var t *ExpressionStatement_YieldContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionStatement_YieldContext)
		}
		return p.ExpressionStatement_Yield_Sempred(t, predIndex)

	case 395:
		var t *ExpressionStatement_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionStatement_AwaitContext)
		}
		return p.ExpressionStatement_Await_Sempred(t, predIndex)

	case 396:
		var t *ExpressionStatement_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionStatement_Yield_AwaitContext)
		}
		return p.ExpressionStatement_Yield_Await_Sempred(t, predIndex)

	case 405:
		var t *IterationStatementContext = nil
		if localctx != nil {
			t = localctx.(*IterationStatementContext)
		}
		return p.IterationStatement_Sempred(t, predIndex)

	case 406:
		var t *IterationStatement_YieldContext = nil
		if localctx != nil {
			t = localctx.(*IterationStatement_YieldContext)
		}
		return p.IterationStatement_Yield_Sempred(t, predIndex)

	case 407:
		var t *IterationStatement_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*IterationStatement_AwaitContext)
		}
		return p.IterationStatement_Await_Sempred(t, predIndex)

	case 408:
		var t *IterationStatement_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*IterationStatement_Yield_AwaitContext)
		}
		return p.IterationStatement_Yield_Await_Sempred(t, predIndex)

	case 409:
		var t *IterationStatement_ReturnContext = nil
		if localctx != nil {
			t = localctx.(*IterationStatement_ReturnContext)
		}
		return p.IterationStatement_Return_Sempred(t, predIndex)

	case 410:
		var t *IterationStatement_Yield_ReturnContext = nil
		if localctx != nil {
			t = localctx.(*IterationStatement_Yield_ReturnContext)
		}
		return p.IterationStatement_Yield_Return_Sempred(t, predIndex)

	case 411:
		var t *IterationStatement_Await_ReturnContext = nil
		if localctx != nil {
			t = localctx.(*IterationStatement_Await_ReturnContext)
		}
		return p.IterationStatement_Await_Return_Sempred(t, predIndex)

	case 412:
		var t *IterationStatement_Yield_Await_ReturnContext = nil
		if localctx != nil {
			t = localctx.(*IterationStatement_Yield_Await_ReturnContext)
		}
		return p.IterationStatement_Yield_Await_Return_Sempred(t, predIndex)

	case 539:
		var t *FormalParameterListContext = nil
		if localctx != nil {
			t = localctx.(*FormalParameterListContext)
		}
		return p.FormalParameterList_Sempred(t, predIndex)

	case 540:
		var t *FormalParameterList_YieldContext = nil
		if localctx != nil {
			t = localctx.(*FormalParameterList_YieldContext)
		}
		return p.FormalParameterList_Yield_Sempred(t, predIndex)

	case 541:
		var t *FormalParameterList_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*FormalParameterList_AwaitContext)
		}
		return p.FormalParameterList_Await_Sempred(t, predIndex)

	case 542:
		var t *FormalParameterList_Yield_AwaitContext = nil
		if localctx != nil {
			t = localctx.(*FormalParameterList_Yield_AwaitContext)
		}
		return p.FormalParameterList_Yield_Await_Sempred(t, predIndex)

	case 571:
		var t *ConciseBodyContext = nil
		if localctx != nil {
			t = localctx.(*ConciseBodyContext)
		}
		return p.ConciseBody_Sempred(t, predIndex)

	case 572:
		var t *ConciseBody_InContext = nil
		if localctx != nil {
			t = localctx.(*ConciseBody_InContext)
		}
		return p.ConciseBody_In_Sempred(t, predIndex)

	case 679:
		var t *ImportsListContext = nil
		if localctx != nil {
			t = localctx.(*ImportsListContext)
		}
		return p.ImportsList_Sempred(t, predIndex)

	case 683:
		var t *ExportDeclarationContext = nil
		if localctx != nil {
			t = localctx.(*ExportDeclarationContext)
		}
		return p.ExportDeclaration_Sempred(t, predIndex)

	case 685:
		var t *ExportsListContext = nil
		if localctx != nil {
			t = localctx.(*ExportsListContext)
		}
		return p.ExportsList_Sempred(t, predIndex)

	case 687:
		var t *AsyncConciseBodyContext = nil
		if localctx != nil {
			t = localctx.(*AsyncConciseBodyContext)
		}
		return p.AsyncConciseBody_Sempred(t, predIndex)

	case 688:
		var t *AsyncConciseBody_InContext = nil
		if localctx != nil {
			t = localctx.(*AsyncConciseBody_InContext)
		}
		return p.AsyncConciseBody_In_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *ECMAScriptParser) ElementList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ElementList_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ElementList_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ElementList_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) Elision_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) MemberExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) MemberExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 12:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) MemberExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 15:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) MemberExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 18:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) CallExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 21:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 23:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 24:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) CallExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 25:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 26:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 27:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 28:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) CallExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 29:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 30:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 31:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 32:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) CallExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 33:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 34:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 35:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 36:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ArgumentList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 37:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ArgumentList_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 38:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ArgumentList_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 39:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ArgumentList_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 40:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) MultiplicativeExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 41:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) MultiplicativeExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 42:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) MultiplicativeExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 43:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) MultiplicativeExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 44:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) AdditiveExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 45:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 46:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) AdditiveExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 47:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 48:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) AdditiveExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 49:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 50:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) AdditiveExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 51:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 52:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ShiftExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 53:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 54:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 55:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ShiftExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 56:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 57:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 58:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ShiftExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 59:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 60:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 61:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ShiftExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 62:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 63:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 64:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) RelationalExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 65:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 66:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 67:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 68:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 69:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) RelationalExpression_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 70:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 71:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 72:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 73:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 74:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) RelationalExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 75:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 76:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 77:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 78:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 79:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) RelationalExpression_In_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 80:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 81:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 82:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 83:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 84:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) RelationalExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 85:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 86:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 87:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 88:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 89:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) RelationalExpression_In_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 90:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 91:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 92:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 93:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 94:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) RelationalExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 95:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 96:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 97:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 98:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 99:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) RelationalExpression_In_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 100:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 101:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 102:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 103:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 104:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) EqualityExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 105:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 106:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 107:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 108:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) EqualityExpression_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 109:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 110:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 111:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 112:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) EqualityExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 113:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 114:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 115:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 116:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) EqualityExpression_In_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 117:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 118:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 119:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 120:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) EqualityExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 121:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 122:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 123:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 124:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) EqualityExpression_In_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 125:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 126:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 127:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 128:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) EqualityExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 129:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 130:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 131:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 132:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) EqualityExpression_In_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 133:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 134:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 135:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 136:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 137:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 138:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 139:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_In_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 140:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 141:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_In_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 142:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 143:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseANDExpression_In_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 144:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 145:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 146:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 147:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_In_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 148:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 149:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_In_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 150:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 151:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseXORExpression_In_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 152:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 153:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 154:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 155:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_In_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 156:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 157:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_In_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 158:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 159:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BitwiseORExpression_In_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 160:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 161:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 162:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 163:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_In_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 164:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 165:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_In_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 166:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 167:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalANDExpression_In_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 168:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalORExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 169:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalORExpression_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 170:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalORExpression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 171:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalORExpression_In_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 172:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalORExpression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 173:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalORExpression_In_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 174:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalORExpression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 175:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) LogicalORExpression_In_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 176:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 177:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) Expression_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 178:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) Expression_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 179:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) Expression_In_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 180:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) Expression_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 181:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) Expression_In_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 182:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) Expression_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 183:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) Expression_In_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 184:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 185:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingList_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 186:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingList_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 187:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingList_In_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 188:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingList_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 189:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingList_In_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 190:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingList_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 191:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingList_In_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 192:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 193:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 194:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 195:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_In_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 196:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 197:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_In_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 198:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 199:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) VariableDeclarationList_In_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 200:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingPropertyList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 201:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingPropertyList_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 202:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingPropertyList_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 203:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingPropertyList_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 204:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingElementList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 205:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingElementList_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 206:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingElementList_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 207:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) BindingElementList_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 208:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ExpressionStatement_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 209:
		return negativeLookahead("{", "function", "async function", "class", "let [")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ExpressionStatement_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 210:
		return negativeLookahead("{", "function", "async function", "class", "let [")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ExpressionStatement_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 211:
		return negativeLookahead("{", "function", "async function", "class", "let [")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ExpressionStatement_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 212:
		return negativeLookahead("{", "function", "async function", "class", "let [")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) IterationStatement_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 213:
		return negativeLookahead("let [")

	case 214:
		return negativeLookahead("let [")

	case 215:
		return negativeLookahead("let")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) IterationStatement_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 216:
		return negativeLookahead("let [")

	case 217:
		return negativeLookahead("let [")

	case 218:
		return negativeLookahead("let")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) IterationStatement_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 219:
		return negativeLookahead("let [")

	case 220:
		return negativeLookahead("let [")

	case 221:
		return negativeLookahead("let")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) IterationStatement_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 222:
		return negativeLookahead("let [")

	case 223:
		return negativeLookahead("let [")

	case 224:
		return negativeLookahead("let")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) IterationStatement_Return_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 225:
		return negativeLookahead("let [")

	case 226:
		return negativeLookahead("let [")

	case 227:
		return negativeLookahead("let")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) IterationStatement_Yield_Return_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 228:
		return negativeLookahead("let [")

	case 229:
		return negativeLookahead("let [")

	case 230:
		return negativeLookahead("let")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) IterationStatement_Await_Return_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 231:
		return negativeLookahead("let [")

	case 232:
		return negativeLookahead("let [")

	case 233:
		return negativeLookahead("let")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) IterationStatement_Yield_Await_Return_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 234:
		return negativeLookahead("let [")

	case 235:
		return negativeLookahead("let [")

	case 236:
		return negativeLookahead("let")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) FormalParameterList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 237:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) FormalParameterList_Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 238:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) FormalParameterList_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 239:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) FormalParameterList_Yield_Await_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 240:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ConciseBody_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 241:
		return negativeLookahead("{")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ConciseBody_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 242:
		return negativeLookahead("{")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ImportsList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 243:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ExportDeclaration_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 244:
		return negativeLookahead("function", "async function", "class")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) ExportsList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 245:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) AsyncConciseBody_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 246:
		return negativeLookahead("{")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ECMAScriptParser) AsyncConciseBody_In_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 247:
		return negativeLookahead("{")

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
